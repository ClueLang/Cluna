---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.2-tests/api.lua
---
[
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 2,
        column: 3,
        span: 1..3,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 2,
        column: 5,
        span: 4..5,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 2,
        column: 7,
        span: 5..7,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 2,
        column: 10,
        span: 7..10,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 2,
        column: 0,
        span: 11..15,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 3,
        column: 4,
        span: 18..19,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        line: 3,
        column: 11,
        span: 19..26,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 3,
        column: 14,
        span: 27..29,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 3,
        column: 20,
        span: 30..35,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 3,
        column: 21,
        span: 35..36,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 3,
        column: 22,
        span: 36..37,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\a\\n >>> testC not active: skipping API tests <<<\\n\\a'",
        ),
        line: 3,
        column: 77,
        span: 37..92,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 3,
        column: 78,
        span: 92..93,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 4,
        column: 0,
        span: 96..102,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 5,
        column: 0,
        span: 103..106,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 7,
        column: 6,
        span: 108..113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 7,
        column: 12,
        span: 114..119,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 7,
        column: 14,
        span: 120..121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 7,
        column: 22,
        span: 122..129,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        line: 7,
        column: 30,
        span: 130..137,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 9,
        column: 6,
        span: 139..144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 9,
        column: 11,
        span: 145..149,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 9,
        column: 13,
        span: 150..151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 9,
        column: 19,
        span: 152..157,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 9,
        column: 20,
        span: 157..158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 9,
        column: 0,
        span: 158..162,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 12,
        column: 9,
        span: 165..173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        line: 12,
        column: 16,
        span: 174..180,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 18,
        span: 181..182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 12,
        column: 20,
        span: 182..184,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 12,
        column: 21,
        span: 184..185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 12,
        column: 24,
        span: 186..188,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 25,
        span: 188..189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 13,
        column: 9,
        span: 192..198,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 13,
        column: 10,
        span: 198..199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 13,
        column: 12,
        span: 199..201,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 13,
        column: 13,
        span: 201..202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 13,
        column: 14,
        span: 202..203,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 13,
        column: 17,
        span: 204..206,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 13,
        column: 19,
        span: 207..208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 13,
        column: 21,
        span: 208..210,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 13,
        column: 22,
        span: 210..211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 13,
        column: 23,
        span: 211..212,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 13,
        column: 26,
        span: 213..215,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 13,
        column: 28,
        span: 216..217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 13,
        column: 30,
        span: 217..219,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 13,
        column: 31,
        span: 219..220,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 13,
        column: 33,
        span: 221..222,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 13,
        column: 35,
        span: 222..224,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 13,
        column: 36,
        span: 224..225,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 14,
        column: 6,
        span: 228..231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 14,
        column: 8,
        span: 232..233,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 14,
        column: 10,
        span: 234..235,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 14,
        column: 12,
        span: 235..237,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 14,
        column: 13,
        span: 237..238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 14,
        column: 16,
        span: 239..241,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 14,
        column: 17,
        span: 241..242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 14,
        column: 18,
        span: 242..243,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 14,
        column: 21,
        span: 244..246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 14,
        column: 28,
        span: 247..253,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 14,
        column: 29,
        span: 253..254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 14,
        column: 31,
        span: 254..256,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 14,
        column: 32,
        span: 256..257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 14,
        column: 33,
        span: 257..258,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 14,
        column: 34,
        span: 258..259,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 14,
        column: 37,
        span: 260..262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 14,
        column: 40,
        span: 263..265,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 14,
        column: 41,
        span: 265..266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 14,
        column: 42,
        span: 266..267,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 14,
        column: 44,
        span: 268..269,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 14,
        column: 46,
        span: 269..271,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 14,
        column: 47,
        span: 271..272,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 14,
        column: 48,
        span: 272..273,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 14,
        column: 0,
        span: 274..277,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 15,
        column: 0,
        span: 278..281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 18,
        column: 6,
        span: 284..289,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
        column: 7,
        span: 289..290,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing C API'",
        ),
        line: 18,
        column: 22,
        span: 290..305,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
        column: 23,
        span: 305..306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 20,
        column: 2,
        span: 308..309,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 20,
        column: 4,
        span: 310..311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 20,
        column: 6,
        span: 312..313,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 20,
        column: 7,
        span: 313..314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 20,
        column: 12,
        span: 314..319,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 13,
        span: 319..320,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushvalue R; return 1\"",
        ),
        line: 20,
        column: 36,
        span: 320..343,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 37,
        span: 343..344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 21,
        column: 7,
        span: 345..351,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
        column: 8,
        span: 351..352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 21,
        column: 9,
        span: 352..353,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 21,
        column: 12,
        span: 354..356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 21,
        column: 18,
        span: 357..362,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 21,
        column: 19,
        span: 362..363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getregistry",
        ),
        line: 21,
        column: 30,
        span: 363..374,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
        column: 31,
        span: 374..375,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
        column: 32,
        span: 375..376,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
        column: 33,
        span: 376..377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 25,
        column: 7,
        span: 392..398,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 8,
        span: 398..399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 25,
        column: 9,
        span: 399..400,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 25,
        column: 10,
        span: 400..401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 25,
        column: 15,
        span: 401..406,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 16,
        span: 406..407,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settop 10; absindex -1; return 1\"",
        ),
        line: 25,
        column: 50,
        span: 407..441,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 51,
        span: 441..442,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 25,
        column: 54,
        span: 443..445,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 57,
        span: 445..448,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 58,
        span: 448..449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 26,
        column: 7,
        span: 450..456,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
        column: 8,
        span: 456..457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 26,
        column: 9,
        span: 457..458,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 26,
        column: 10,
        span: 458..459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 26,
        column: 15,
        span: 459..464,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
        column: 16,
        span: 464..465,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settop 5; absindex -5; return 1\"",
        ),
        line: 26,
        column: 49,
        span: 465..498,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
        column: 50,
        span: 498..499,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 26,
        column: 53,
        span: 500..502,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 26,
        column: 55,
        span: 502..504,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
        column: 56,
        span: 504..505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 27,
        column: 7,
        span: 506..512,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
        column: 8,
        span: 512..513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 27,
        column: 9,
        span: 513..514,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 27,
        column: 10,
        span: 514..515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 27,
        column: 15,
        span: 515..520,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
        column: 16,
        span: 520..521,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settop 10; absindex 1; return 1\"",
        ),
        line: 27,
        column: 49,
        span: 521..554,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
        column: 50,
        span: 554..555,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 27,
        column: 53,
        span: 556..558,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 27,
        column: 55,
        span: 558..560,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
        column: 56,
        span: 560..561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 28,
        column: 7,
        span: 562..568,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 8,
        span: 568..569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 28,
        column: 9,
        span: 569..570,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 28,
        column: 10,
        span: 570..571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 28,
        column: 15,
        span: 571..576,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 16,
        span: 576..577,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settop 10; absindex R; return 1\"",
        ),
        line: 28,
        column: 49,
        span: 577..610,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 50,
        span: 610..611,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 28,
        column: 52,
        span: 612..613,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 28,
        column: 54,
        span: 614..615,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 28,
        column: 56,
        span: 614..617,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 57,
        span: 617..618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 31,
        column: 2,
        span: 642..643,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 31,
        column: 4,
        span: 644..645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 31,
        column: 6,
        span: 646..647,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 31,
        column: 7,
        span: 647..648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d2s",
        ),
        line: 31,
        column: 10,
        span: 648..651,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 11,
        span: 651..652,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12458954321123",
                    after_decimal: "",
                },
            ),
        ),
        line: 31,
        column: 25,
        span: 651..666,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 26,
        span: 666..667,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 32,
        column: 7,
        span: 668..674,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 8,
        span: 674..675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 32,
        column: 14,
        span: 675..681,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 32,
        column: 15,
        span: 681..682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 32,
        column: 18,
        span: 682..685,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 19,
        span: 685..686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 32,
        column: 20,
        span: 686..687,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 21,
        span: 687..688,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 32,
        column: 24,
        span: 689..691,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 32,
        column: 26,
        span: 691..693,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 27,
        span: 693..694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 33,
        column: 7,
        span: 715..721,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 8,
        span: 721..722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 33,
        column: 9,
        span: 722..723,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 33,
        column: 10,
        span: 723..724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s2d",
        ),
        line: 33,
        column: 13,
        span: 724..727,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 14,
        span: 727..728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 33,
        column: 15,
        span: 728..729,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 16,
        span: 729..730,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 33,
        column: 19,
        span: 731..733,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12458954321123",
                    after_decimal: "",
                },
            ),
        ),
        line: 33,
        column: 34,
        span: 733..748,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 35,
        span: 748..749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 35,
        column: 2,
        span: 751..752,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 35,
        column: 3,
        span: 752..753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 35,
        column: 4,
        span: 753..754,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 35,
        column: 5,
        span: 754..755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 35,
        column: 6,
        span: 755..756,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 35,
        column: 8,
        span: 757..758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 35,
        column: 10,
        span: 759..760,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 35,
        column: 11,
        span: 760..761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 35,
        column: 16,
        span: 761..766,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 17,
        span: 766..767,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 1; pushnum 2; pushnum 3; return 2\"",
        ),
        line: 35,
        column: 60,
        span: 767..810,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 61,
        span: 810..811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 36,
        column: 7,
        span: 812..818,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 8,
        span: 818..819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 36,
        column: 9,
        span: 819..820,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 36,
        column: 12,
        span: 821..823,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 36,
        column: 14,
        span: 823..825,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 36,
        column: 18,
        span: 826..829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 36,
        column: 20,
        span: 830..831,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 36,
        column: 23,
        span: 832..834,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 36,
        column: 25,
        span: 834..836,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 36,
        column: 29,
        span: 837..840,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 36,
        column: 33,
        span: 841..844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 36,
        column: 35,
        span: 845..846,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 36,
        span: 846..847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 38,
        column: 2,
        span: 849..850,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 38,
        column: 4,
        span: 851..852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 38,
        column: 6,
        span: 853..854,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 38,
        column: 7,
        span: 854..855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "makeCfunc",
        ),
        line: 38,
        column: 16,
        span: 855..864,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 17,
        span: 864..865,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 1; pushnum 2; pushnum 3; return 2\"",
        ),
        line: 38,
        column: 60,
        span: 865..908,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 61,
        span: 908..909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 39,
        column: 2,
        span: 910..911,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 3,
        span: 911..912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 39,
        column: 4,
        span: 912..913,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 5,
        span: 913..914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 39,
        column: 6,
        span: 914..915,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 39,
        column: 8,
        span: 916..917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 39,
        column: 10,
        span: 918..919,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 11,
        span: 919..920,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 12,
        span: 920..921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 40,
        column: 7,
        span: 922..928,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 8,
        span: 928..929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 40,
        column: 9,
        span: 929..930,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 40,
        column: 12,
        span: 931..933,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 40,
        column: 14,
        span: 933..935,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 40,
        column: 18,
        span: 936..939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 40,
        column: 20,
        span: 940..941,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 40,
        column: 23,
        span: 942..944,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 40,
        column: 25,
        span: 944..946,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 40,
        column: 29,
        span: 947..950,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 40,
        column: 33,
        span: 951..954,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 40,
        column: 35,
        span: 955..956,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 36,
        span: 956..957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 43,
        column: 2,
        span: 992..993,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 43,
        column: 3,
        span: 993..994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 43,
        column: 4,
        span: 994..995,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 43,
        column: 5,
        span: 995..996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 43,
        column: 6,
        span: 996..997,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 43,
        column: 8,
        span: 998..999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 43,
        column: 10,
        span: 1000..1001,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 43,
        column: 11,
        span: 1001..1002,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 43,
        column: 16,
        span: 1002..1007,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 17,
        span: 1007..1008,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushbool 1; pushbool 2; pushbool 0; return 3\"",
        ),
        line: 43,
        column: 63,
        span: 1008..1054,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 64,
        span: 1054..1055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 44,
        column: 7,
        span: 1056..1062,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 8,
        span: 1062..1063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 44,
        column: 9,
        span: 1063..1064,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 44,
        column: 12,
        span: 1065..1067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 44,
        column: 14,
        span: 1068..1069,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 44,
        column: 18,
        span: 1070..1073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 44,
        column: 20,
        span: 1074..1075,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 44,
        column: 23,
        span: 1076..1078,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 44,
        column: 28,
        span: 1079..1083,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 44,
        column: 32,
        span: 1084..1087,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 44,
        column: 34,
        span: 1088..1089,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 44,
        column: 37,
        span: 1090..1092,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 44,
        column: 43,
        span: 1093..1098,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 44,
        span: 1098..1099,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 45,
        column: 2,
        span: 1100..1101,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 45,
        column: 3,
        span: 1101..1102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 45,
        column: 4,
        span: 1102..1103,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 45,
        column: 5,
        span: 1103..1104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 45,
        column: 6,
        span: 1104..1105,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 45,
        column: 8,
        span: 1106..1107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 45,
        column: 10,
        span: 1108..1109,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 45,
        column: 11,
        span: 1109..1110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 45,
        column: 16,
        span: 1110..1115,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushbool 0; pushbool 10; pushnil;\\\n                      tobool -3; tobool -3; tobool -3; return 3\"",
        ),
        line: 46,
        column: 65,
        span: 1115..1215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 47,
        column: 7,
        span: 1216..1222,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 8,
        span: 1222..1223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 47,
        column: 9,
        span: 1223..1224,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 47,
        column: 11,
        span: 1224..1226,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 47,
        column: 16,
        span: 1226..1231,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 47,
        column: 20,
        span: 1232..1235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 47,
        column: 22,
        span: 1236..1237,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 47,
        column: 24,
        span: 1237..1239,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 47,
        column: 28,
        span: 1239..1243,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 47,
        column: 32,
        span: 1244..1247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 47,
        column: 34,
        span: 1248..1249,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 47,
        column: 36,
        span: 1249..1251,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 47,
        column: 41,
        span: 1251..1256,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 42,
        span: 1256..1257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 50,
        column: 2,
        span: 1260..1261,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 50,
        column: 3,
        span: 1261..1262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 50,
        column: 4,
        span: 1262..1263,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 50,
        column: 5,
        span: 1263..1264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 50,
        column: 6,
        span: 1264..1265,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 50,
        column: 8,
        span: 1266..1267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 50,
        column: 10,
        span: 1268..1269,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 50,
        column: 11,
        span: 1269..1270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 50,
        column: 16,
        span: 1270..1275,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 50,
        column: 17,
        span: 1275..1276,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gettop; return 2\"",
        ),
        line: 50,
        column: 35,
        span: 1276..1294,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 50,
        column: 36,
        span: 1294..1295,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
        column: 39,
        span: 1295..1298,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 50,
        column: 40,
        span: 1298..1299,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
        column: 43,
        span: 1299..1302,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 50,
        column: 44,
        span: 1302..1303,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
        column: 47,
        span: 1303..1306,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 50,
        column: 48,
        span: 1306..1307,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
        column: 51,
        span: 1307..1310,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 50,
        column: 52,
        span: 1310..1311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 51,
        column: 7,
        span: 1312..1318,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 51,
        column: 8,
        span: 1318..1319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 51,
        column: 9,
        span: 1319..1320,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 51,
        column: 12,
        span: 1321..1323,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 51,
        column: 15,
        span: 1323..1326,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 51,
        column: 19,
        span: 1327..1330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 51,
        column: 21,
        span: 1331..1332,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 51,
        column: 24,
        span: 1333..1335,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 51,
        column: 26,
        span: 1335..1337,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 51,
        column: 30,
        span: 1338..1341,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 51,
        column: 34,
        span: 1342..1345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 51,
        column: 36,
        span: 1346..1347,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
        column: 37,
        span: 1347..1348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 53,
        column: 2,
        span: 1350..1351,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 53,
        column: 4,
        span: 1352..1353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 53,
        column: 9,
        span: 1354..1358,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 10,
        span: 1358..1359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 53,
        column: 11,
        span: 1359..1360,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 53,
        column: 12,
        span: 1360..1361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 53,
        column: 17,
        span: 1361..1366,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 18,
        span: 1366..1367,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settop 5; gettop; return .\"",
        ),
        line: 53,
        column: 46,
        span: 1367..1395,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 47,
        span: 1395..1396,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 53,
        column: 49,
        span: 1396..1398,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 50,
        span: 1398..1399,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 53,
        column: 52,
        span: 1399..1401,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 53,
        span: 1401..1402,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 54,
        span: 1402..1403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        line: 54,
        column: 7,
        span: 1404..1410,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 8,
        span: 1410..1411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 54,
        column: 9,
        span: 1411..1412,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 54,
        column: 10,
        span: 1412..1413,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 54,
        column: 12,
        span: 1414..1415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 54,
        column: 13,
        span: 1415..1416,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 54,
        column: 14,
        span: 1416..1417,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 54,
        column: 15,
        span: 1416..1418,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 54,
        column: 16,
        span: 1418..1419,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 54,
        column: 17,
        span: 1418..1420,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 54,
        column: 18,
        span: 1420..1421,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 54,
        column: 19,
        span: 1420..1422,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 54,
        column: 20,
        span: 1422..1423,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 21,
        span: 1423..1424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 56,
        column: 2,
        span: 1426..1427,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 56,
        column: 4,
        span: 1428..1429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 56,
        column: 9,
        span: 1430..1434,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 10,
        span: 1434..1435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 56,
        column: 11,
        span: 1435..1436,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 56,
        column: 12,
        span: 1436..1437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 56,
        column: 17,
        span: 1437..1442,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 18,
        span: 1442..1443,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settop 0; settop 15; return 10\"",
        ),
        line: 56,
        column: 50,
        span: 1443..1475,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 51,
        span: 1475..1476,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 56,
        column: 53,
        span: 1476..1478,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 54,
        span: 1478..1479,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 56,
        column: 56,
        span: 1479..1481,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 57,
        span: 1481..1482,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 56,
        column: 60,
        span: 1482..1485,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 61,
        span: 1485..1486,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 62,
        span: 1486..1487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 57,
        column: 7,
        span: 1488..1494,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
        column: 8,
        span: 1494..1495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 57,
        column: 9,
        span: 1495..1496,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 57,
        column: 10,
        span: 1496..1497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 57,
        column: 11,
        span: 1497..1498,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 57,
        column: 14,
        span: 1499..1501,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 57,
        column: 17,
        span: 1501..1504,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 57,
        column: 21,
        span: 1505..1508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 57,
        column: 23,
        span: 1509..1510,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 57,
        column: 24,
        span: 1510..1511,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 57,
        column: 25,
        span: 1510..1512,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 57,
        column: 26,
        span: 1512..1513,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 57,
        column: 29,
        span: 1514..1516,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 57,
        column: 33,
        span: 1517..1520,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 57,
        column: 37,
        span: 1521..1524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 57,
        column: 39,
        span: 1525..1526,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 57,
        column: 40,
        span: 1526..1527,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 57,
        column: 42,
        span: 1526..1529,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 57,
        column: 43,
        span: 1529..1530,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 57,
        column: 46,
        span: 1531..1533,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 57,
        column: 50,
        span: 1534..1537,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
        column: 51,
        span: 1537..1538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 59,
        column: 2,
        span: 1540..1541,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 59,
        column: 4,
        span: 1542..1543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 59,
        column: 9,
        span: 1544..1548,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 10,
        span: 1548..1549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 59,
        column: 11,
        span: 1549..1550,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 59,
        column: 12,
        span: 1550..1551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 59,
        column: 17,
        span: 1551..1556,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 18,
        span: 1556..1557,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"remove -2; gettop; return .\"",
        ),
        line: 59,
        column: 47,
        span: 1557..1586,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 59,
        column: 48,
        span: 1586..1587,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 59,
        column: 50,
        span: 1587..1589,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 59,
        column: 51,
        span: 1589..1590,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 59,
        column: 53,
        span: 1590..1592,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 59,
        column: 54,
        span: 1592..1593,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 59,
        column: 56,
        span: 1593..1595,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 57,
        span: 1595..1596,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 58,
        span: 1596..1597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        line: 60,
        column: 7,
        span: 1598..1604,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 8,
        span: 1604..1605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 60,
        column: 9,
        span: 1605..1606,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 60,
        column: 10,
        span: 1606..1607,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 60,
        column: 12,
        span: 1608..1609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 60,
        column: 13,
        span: 1609..1610,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 60,
        column: 14,
        span: 1610..1611,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 60,
        column: 15,
        span: 1610..1612,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 60,
        column: 16,
        span: 1612..1613,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 60,
        column: 17,
        span: 1612..1614,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 60,
        column: 18,
        span: 1614..1615,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 60,
        column: 19,
        span: 1614..1616,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 60,
        column: 20,
        span: 1616..1617,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 21,
        span: 1617..1618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 62,
        column: 2,
        span: 1620..1621,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 62,
        column: 4,
        span: 1622..1623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 62,
        column: 9,
        span: 1624..1628,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 10,
        span: 1628..1629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 62,
        column: 11,
        span: 1629..1630,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 62,
        column: 12,
        span: 1630..1631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 62,
        column: 17,
        span: 1631..1636,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 18,
        span: 1636..1637,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"insert -1; gettop; return .\"",
        ),
        line: 62,
        column: 47,
        span: 1637..1666,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 62,
        column: 48,
        span: 1666..1667,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 62,
        column: 50,
        span: 1667..1669,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 62,
        column: 51,
        span: 1669..1670,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 62,
        column: 53,
        span: 1670..1672,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 54,
        span: 1672..1673,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 55,
        span: 1673..1674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        line: 63,
        column: 7,
        span: 1675..1681,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 8,
        span: 1681..1682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 63,
        column: 9,
        span: 1682..1683,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 63,
        column: 10,
        span: 1683..1684,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 63,
        column: 12,
        span: 1685..1686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 63,
        column: 13,
        span: 1686..1687,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 63,
        column: 14,
        span: 1687..1688,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 63,
        column: 15,
        span: 1687..1689,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 63,
        column: 16,
        span: 1689..1690,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 63,
        column: 17,
        span: 1689..1691,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 63,
        column: 18,
        span: 1691..1692,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 63,
        column: 19,
        span: 1691..1693,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 63,
        column: 20,
        span: 1693..1694,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 21,
        span: 1694..1695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 65,
        column: 2,
        span: 1697..1698,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 65,
        column: 4,
        span: 1699..1700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 65,
        column: 9,
        span: 1701..1705,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 10,
        span: 1705..1706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 65,
        column: 11,
        span: 1706..1707,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 65,
        column: 12,
        span: 1707..1708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 65,
        column: 17,
        span: 1708..1713,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 18,
        span: 1713..1714,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"insert 3; gettop; return .\"",
        ),
        line: 65,
        column: 46,
        span: 1714..1742,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 65,
        column: 47,
        span: 1742..1743,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 65,
        column: 49,
        span: 1743..1745,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 65,
        column: 50,
        span: 1745..1746,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 65,
        column: 52,
        span: 1746..1748,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 65,
        column: 53,
        span: 1748..1749,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 65,
        column: 55,
        span: 1749..1751,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 65,
        column: 56,
        span: 1751..1752,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 65,
        column: 58,
        span: 1752..1754,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 59,
        span: 1754..1755,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 60,
        span: 1755..1756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        line: 66,
        column: 7,
        span: 1757..1763,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 8,
        span: 1763..1764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 66,
        column: 9,
        span: 1764..1765,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 10,
        span: 1765..1766,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 66,
        column: 12,
        span: 1767..1768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 66,
        column: 13,
        span: 1768..1769,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 66,
        column: 14,
        span: 1769..1770,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 66,
        column: 15,
        span: 1769..1771,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 16,
        span: 1771..1772,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 66,
        column: 17,
        span: 1771..1773,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 18,
        span: 1773..1774,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 66,
        column: 19,
        span: 1773..1775,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 20,
        span: 1775..1776,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 66,
        column: 21,
        span: 1775..1777,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 22,
        span: 1777..1778,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 66,
        column: 23,
        span: 1777..1779,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 66,
        column: 24,
        span: 1779..1780,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 25,
        span: 1780..1781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 68,
        column: 2,
        span: 1783..1784,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 68,
        column: 4,
        span: 1785..1786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 68,
        column: 9,
        span: 1787..1791,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 10,
        span: 1791..1792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 68,
        column: 11,
        span: 1792..1793,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 68,
        column: 12,
        span: 1793..1794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 68,
        column: 17,
        span: 1794..1799,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 18,
        span: 1799..1800,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"replace 2; gettop; return .\"",
        ),
        line: 68,
        column: 47,
        span: 1800..1829,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 68,
        column: 48,
        span: 1829..1830,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 68,
        column: 50,
        span: 1830..1832,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 68,
        column: 51,
        span: 1832..1833,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 68,
        column: 53,
        span: 1833..1835,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 68,
        column: 54,
        span: 1835..1836,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 68,
        column: 56,
        span: 1836..1838,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 68,
        column: 57,
        span: 1838..1839,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 68,
        column: 59,
        span: 1839..1841,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 60,
        span: 1841..1842,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 61,
        span: 1842..1843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        line: 69,
        column: 7,
        span: 1844..1850,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 8,
        span: 1850..1851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 69,
        column: 9,
        span: 1851..1852,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 69,
        column: 10,
        span: 1852..1853,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 69,
        column: 12,
        span: 1854..1855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 69,
        column: 13,
        span: 1855..1856,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 69,
        column: 14,
        span: 1856..1857,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 69,
        column: 15,
        span: 1856..1858,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 69,
        column: 16,
        span: 1858..1859,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 69,
        column: 17,
        span: 1858..1860,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 69,
        column: 18,
        span: 1860..1861,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 69,
        column: 19,
        span: 1860..1862,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 69,
        column: 20,
        span: 1862..1863,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 69,
        column: 21,
        span: 1862..1864,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 69,
        column: 22,
        span: 1864..1865,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 23,
        span: 1865..1866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 71,
        column: 2,
        span: 1868..1869,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 71,
        column: 4,
        span: 1870..1871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 71,
        column: 9,
        span: 1872..1876,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 10,
        span: 1876..1877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 71,
        column: 11,
        span: 1877..1878,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 71,
        column: 12,
        span: 1878..1879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 71,
        column: 17,
        span: 1879..1884,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 18,
        span: 1884..1885,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"replace -2; gettop; return .\"",
        ),
        line: 71,
        column: 48,
        span: 1885..1915,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 49,
        span: 1915..1916,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 51,
        span: 1916..1918,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 52,
        span: 1918..1919,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 54,
        span: 1919..1921,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 55,
        span: 1921..1922,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 57,
        span: 1922..1924,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 58,
        span: 1924..1925,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 60,
        span: 1925..1927,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 61,
        span: 1927..1928,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 62,
        span: 1928..1929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        line: 72,
        column: 7,
        span: 1930..1936,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 8,
        span: 1936..1937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 72,
        column: 9,
        span: 1937..1938,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 72,
        column: 10,
        span: 1938..1939,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 72,
        column: 12,
        span: 1940..1941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 72,
        column: 13,
        span: 1941..1942,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 72,
        column: 14,
        span: 1942..1943,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 72,
        column: 15,
        span: 1942..1944,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 72,
        column: 16,
        span: 1944..1945,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 72,
        column: 17,
        span: 1944..1946,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 72,
        column: 18,
        span: 1946..1947,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 72,
        column: 19,
        span: 1946..1948,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 72,
        column: 20,
        span: 1948..1949,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 72,
        column: 21,
        span: 1948..1950,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 72,
        column: 22,
        span: 1950..1951,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 23,
        span: 1951..1952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 74,
        column: 2,
        span: 1954..1955,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 74,
        column: 4,
        span: 1956..1957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 74,
        column: 9,
        span: 1958..1962,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
        column: 10,
        span: 1962..1963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 74,
        column: 11,
        span: 1963..1964,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 74,
        column: 12,
        span: 1964..1965,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 74,
        column: 17,
        span: 1965..1970,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
        column: 18,
        span: 1970..1971,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"remove 3; gettop; return .\"",
        ),
        line: 74,
        column: 46,
        span: 1971..1999,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 74,
        column: 47,
        span: 1999..2000,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 74,
        column: 49,
        span: 2000..2002,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 74,
        column: 50,
        span: 2002..2003,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 74,
        column: 52,
        span: 2003..2005,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 74,
        column: 53,
        span: 2005..2006,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 74,
        column: 55,
        span: 2006..2008,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 74,
        column: 56,
        span: 2008..2009,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 74,
        column: 58,
        span: 2009..2011,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
        column: 59,
        span: 2011..2012,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
        column: 60,
        span: 2012..2013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        line: 75,
        column: 7,
        span: 2014..2020,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
        column: 8,
        span: 2020..2021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 75,
        column: 9,
        span: 2021..2022,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 75,
        column: 10,
        span: 2022..2023,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 75,
        column: 12,
        span: 2024..2025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 75,
        column: 13,
        span: 2025..2026,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 75,
        column: 14,
        span: 2026..2027,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 75,
        column: 15,
        span: 2026..2028,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 75,
        column: 16,
        span: 2028..2029,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 75,
        column: 17,
        span: 2028..2030,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 75,
        column: 18,
        span: 2030..2031,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 75,
        column: 19,
        span: 2030..2032,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 75,
        column: 20,
        span: 2032..2033,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 75,
        column: 21,
        span: 2032..2034,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 75,
        column: 22,
        span: 2034..2035,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
        column: 23,
        span: 2035..2036,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 77,
        column: 2,
        span: 2038..2039,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 77,
        column: 4,
        span: 2040..2041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 77,
        column: 9,
        span: 2042..2046,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
        column: 10,
        span: 2046..2047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 77,
        column: 11,
        span: 2047..2048,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 77,
        column: 12,
        span: 2048..2049,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 77,
        column: 17,
        span: 2049..2054,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
        column: 18,
        span: 2054..2055,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"copy 3 4; gettop; return .\"",
        ),
        line: 77,
        column: 46,
        span: 2055..2083,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 77,
        column: 47,
        span: 2083..2084,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 77,
        column: 49,
        span: 2084..2086,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 77,
        column: 50,
        span: 2086..2087,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 77,
        column: 52,
        span: 2087..2089,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 77,
        column: 53,
        span: 2089..2090,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 77,
        column: 55,
        span: 2090..2092,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 77,
        column: 56,
        span: 2092..2093,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 77,
        column: 58,
        span: 2093..2095,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
        column: 59,
        span: 2095..2096,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
        column: 60,
        span: 2096..2097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        line: 78,
        column: 7,
        span: 2098..2104,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 8,
        span: 2104..2105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 78,
        column: 9,
        span: 2105..2106,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 10,
        span: 2106..2107,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 78,
        column: 12,
        span: 2108..2109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 78,
        column: 13,
        span: 2109..2110,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 78,
        column: 14,
        span: 2110..2111,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 78,
        column: 15,
        span: 2110..2112,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 16,
        span: 2112..2113,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 78,
        column: 17,
        span: 2112..2114,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 18,
        span: 2114..2115,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 78,
        column: 19,
        span: 2114..2116,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 20,
        span: 2116..2117,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 78,
        column: 21,
        span: 2116..2118,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 22,
        span: 2118..2119,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 78,
        column: 23,
        span: 2118..2120,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 78,
        column: 24,
        span: 2120..2121,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
        column: 25,
        span: 2121..2122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 80,
        column: 2,
        span: 2124..2125,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 80,
        column: 4,
        span: 2126..2127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 80,
        column: 9,
        span: 2128..2132,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
        column: 10,
        span: 2132..2133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 80,
        column: 11,
        span: 2133..2134,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 80,
        column: 12,
        span: 2134..2135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 80,
        column: 17,
        span: 2135..2140,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
        column: 18,
        span: 2140..2141,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"copy -3 -1; gettop; return .\"",
        ),
        line: 80,
        column: 48,
        span: 2141..2171,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 80,
        column: 49,
        span: 2171..2172,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 80,
        column: 51,
        span: 2172..2174,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 80,
        column: 52,
        span: 2174..2175,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 80,
        column: 54,
        span: 2175..2177,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 80,
        column: 55,
        span: 2177..2178,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 80,
        column: 57,
        span: 2178..2180,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 80,
        column: 58,
        span: 2180..2181,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 80,
        column: 60,
        span: 2181..2183,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
        column: 61,
        span: 2183..2184,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
        column: 62,
        span: 2184..2185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        line: 81,
        column: 7,
        span: 2186..2192,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
        column: 8,
        span: 2192..2193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 81,
        column: 9,
        span: 2193..2194,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 81,
        column: 10,
        span: 2194..2195,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 81,
        column: 12,
        span: 2196..2197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 81,
        column: 13,
        span: 2197..2198,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 81,
        column: 14,
        span: 2198..2199,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 81,
        column: 15,
        span: 2198..2200,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 81,
        column: 16,
        span: 2200..2201,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 81,
        column: 17,
        span: 2200..2202,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 81,
        column: 18,
        span: 2202..2203,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 81,
        column: 19,
        span: 2202..2204,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 81,
        column: 20,
        span: 2204..2205,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 81,
        column: 21,
        span: 2204..2206,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 81,
        column: 22,
        span: 2206..2207,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 81,
        column: 23,
        span: 2206..2208,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 81,
        column: 24,
        span: 2208..2209,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 25,
        span: 2209..2210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 86,
        column: 2,
        span: 2215..2216,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 86,
        column: 4,
        span: 2217..2218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 86,
        column: 9,
        span: 2219..2223,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 10,
        span: 2223..2224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 86,
        column: 11,
        span: 2224..2225,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 86,
        column: 12,
        span: 2225..2226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 86,
        column: 17,
        span: 2226..2231,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 18,
        span: 2231..2232,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"insert 3; pushvalue 3; remove 3; pushvalue 2; remove 2; \\\n                  insert 2; pushvalue 1; remove 1; insert 1; \\\n      insert -2; pushvalue -2; remove -3; gettop; return .\"",
        ),
        line: 88,
        column: 60,
        span: 2232..2413,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 88,
        column: 61,
        span: 2413..2414,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 89,
        column: 8,
        span: 2420..2422,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 89,
        column: 9,
        span: 2422..2423,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 89,
        column: 11,
        span: 2423..2425,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 89,
        column: 12,
        span: 2425..2426,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 89,
        column: 14,
        span: 2426..2428,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 89,
        column: 15,
        span: 2428..2429,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 89,
        column: 17,
        span: 2429..2431,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 89,
        column: 18,
        span: 2431..2432,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 89,
        column: 21,
        span: 2432..2435,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 89,
        column: 22,
        span: 2435..2436,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 89,
        column: 25,
        span: 2436..2439,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 89,
        column: 26,
        span: 2439..2440,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "90",
                    after_decimal: "",
                },
            ),
        ),
        line: 89,
        column: 29,
        span: 2440..2443,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
        column: 30,
        span: 2443..2444,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
        column: 31,
        span: 2444..2445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        line: 90,
        column: 7,
        span: 2446..2452,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 90,
        column: 8,
        span: 2452..2453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 90,
        column: 9,
        span: 2453..2454,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 90,
        column: 10,
        span: 2454..2455,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 90,
        column: 12,
        span: 2456..2457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 90,
        column: 13,
        span: 2457..2458,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 90,
        column: 14,
        span: 2458..2459,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 90,
        column: 15,
        span: 2458..2460,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 90,
        column: 16,
        span: 2460..2461,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 90,
        column: 17,
        span: 2460..2462,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 90,
        column: 18,
        span: 2462..2463,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 90,
        column: 19,
        span: 2462..2464,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 90,
        column: 20,
        span: 2464..2465,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 90,
        column: 21,
        span: 2464..2466,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 90,
        column: 22,
        span: 2466..2467,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 90,
        column: 23,
        span: 2466..2468,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 90,
        column: 24,
        span: 2468..2469,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 90,
        column: 26,
        span: 2468..2471,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 90,
        column: 27,
        span: 2471..2472,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 90,
        column: 29,
        span: 2471..2474,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 90,
        column: 30,
        span: 2474..2475,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "90",
                    after_decimal: "",
                },
            ),
        ),
        line: 90,
        column: 32,
        span: 2474..2477,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 90,
        column: 33,
        span: 2477..2478,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 90,
        column: 34,
        span: 2478..2479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 92,
        column: 2,
        span: 2481..2482,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 92,
        column: 4,
        span: 2483..2484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 92,
        column: 9,
        span: 2485..2489,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 92,
        column: 10,
        span: 2489..2490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 92,
        column: 11,
        span: 2490..2491,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 92,
        column: 12,
        span: 2491..2492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 92,
        column: 17,
        span: 2492..2497,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 92,
        column: 18,
        span: 2497..2498,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concat 5; gettop; return .\"",
        ),
        line: 92,
        column: 46,
        span: 2498..2526,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 92,
        column: 47,
        span: 2526..2527,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 92,
        column: 53,
        span: 2528..2533,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 92,
        column: 54,
        span: 2533..2534,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 92,
        column: 56,
        span: 2534..2536,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 92,
        column: 57,
        span: 2536..2537,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 92,
        column: 59,
        span: 2537..2539,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 92,
        column: 60,
        span: 2539..2540,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"joao\"",
        ),
        line: 92,
        column: 67,
        span: 2541..2547,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 92,
        column: 68,
        span: 2547..2548,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 92,
        column: 71,
        span: 2548..2551,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 92,
        column: 72,
        span: 2551..2552,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 92,
        column: 73,
        span: 2552..2553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        line: 93,
        column: 7,
        span: 2554..2560,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
        column: 8,
        span: 2560..2561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 93,
        column: 9,
        span: 2561..2562,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 93,
        column: 10,
        span: 2562..2563,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 93,
        column: 12,
        span: 2564..2565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 93,
        column: 13,
        span: 2565..2566,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 93,
        column: 14,
        span: 2566..2567,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 93,
        column: 15,
        span: 2566..2568,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 93,
        column: 16,
        span: 2568..2569,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo23joao12\"",
        ),
        line: 93,
        column: 29,
        span: 2569..2582,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 93,
        column: 30,
        span: 2582..2583,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
        column: 31,
        span: 2583..2584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 96,
        column: 2,
        span: 2605..2606,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 96,
        column: 4,
        span: 2607..2608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 96,
        column: 9,
        span: 2609..2613,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 10,
        span: 2613..2614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 96,
        column: 11,
        span: 2614..2615,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 96,
        column: 12,
        span: 2615..2616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 96,
        column: 17,
        span: 2616..2621,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 18,
        span: 2621..2622,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call 2,-1; gettop; return .\"",
        ),
        line: 96,
        column: 47,
        span: 2622..2651,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 96,
        column: 48,
        span: 2651..2652,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 97,
        column: 14,
        span: 2658..2666,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
        column: 16,
        span: 2667..2668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 97,
        column: 17,
        span: 2668..2669,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 97,
        column: 18,
        span: 2669..2670,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 97,
        column: 19,
        span: 2670..2671,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
        column: 20,
        span: 2671..2672,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 97,
        column: 27,
        span: 2673..2679,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 97,
        column: 29,
        span: 2679..2681,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 97,
        column: 30,
        span: 2681..2682,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 97,
        column: 31,
        span: 2681..2683,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 97,
        column: 32,
        span: 2683..2684,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 97,
        column: 33,
        span: 2683..2685,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 97,
        column: 34,
        span: 2685..2686,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 97,
        column: 35,
        span: 2685..2687,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 97,
        column: 36,
        span: 2687..2688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 97,
        column: 37,
        span: 2688..2689,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 97,
        column: 38,
        span: 2689..2690,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 97,
        column: 39,
        span: 2690..2691,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 97,
        column: 43,
        span: 2692..2695,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 97,
        column: 44,
        span: 2695..2696,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 97,
        column: 50,
        span: 2697..2702,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 97,
        column: 51,
        span: 2702..2703,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"joao\"",
        ),
        line: 97,
        column: 58,
        span: 2704..2710,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
        column: 59,
        span: 2710..2711,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
        column: 60,
        span: 2711..2712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        line: 98,
        column: 7,
        span: 2713..2719,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
        column: 8,
        span: 2719..2720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 98,
        column: 9,
        span: 2720..2721,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 98,
        column: 10,
        span: 2721..2722,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 98,
        column: 12,
        span: 2723..2724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 98,
        column: 13,
        span: 2724..2725,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 98,
        column: 14,
        span: 2725..2726,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 98,
        column: 15,
        span: 2725..2727,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 98,
        column: 16,
        span: 2727..2728,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 98,
        column: 17,
        span: 2727..2729,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 98,
        column: 18,
        span: 2729..2730,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 98,
        column: 19,
        span: 2729..2731,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 98,
        column: 20,
        span: 2731..2732,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 98,
        column: 21,
        span: 2731..2733,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 98,
        column: 22,
        span: 2733..2734,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 98,
        column: 23,
        span: 2733..2735,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 98,
        column: 24,
        span: 2735..2736,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 98,
        column: 29,
        span: 2736..2741,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 98,
        column: 30,
        span: 2741..2742,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"joao\"",
        ),
        line: 98,
        column: 37,
        span: 2743..2749,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 98,
        column: 38,
        span: 2749..2750,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
        column: 39,
        span: 2750..2751,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 100,
        column: 3,
        span: 2753..2755,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 101,
        column: 8,
        span: 2819..2824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 101,
        column: 10,
        span: 2825..2826,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 101,
        column: 12,
        span: 2827..2828,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 101,
        column: 14,
        span: 2829..2830,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 101,
        column: 15,
        span: 2830..2831,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 102,
        column: 6,
        span: 2834..2837,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 102,
        column: 8,
        span: 2838..2839,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 102,
        column: 9,
        span: 2839..2840,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 102,
        column: 10,
        span: 2839..2841,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 102,
        column: 11,
        span: 2841..2842,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 102,
        column: 15,
        span: 2841..2846,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 102,
        column: 18,
        span: 2847..2849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 102,
        column: 20,
        span: 2850..2851,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 102,
        column: 21,
        span: 2851..2852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 102,
        column: 22,
        span: 2852..2853,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 102,
        column: 23,
        span: 2853..2854,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 102,
        column: 25,
        span: 2855..2856,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 102,
        column: 30,
        span: 2857..2861,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 102,
        column: 34,
        span: 2862..2865,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 102,
        column: 35,
        span: 2865..2866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 102,
        column: 37,
        span: 2867..2868,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 102,
        column: 38,
        span: 2868..2869,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "999",
                    after_decimal: "",
                },
            ),
        ),
        line: 102,
        column: 41,
        span: 2868..2872,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 102,
        column: 42,
        span: 2872..2873,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 102,
        column: 44,
        span: 2874..2875,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 102,
        column: 0,
        span: 2875..2878,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 103,
        column: 8,
        span: 2881..2886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 103,
        column: 10,
        span: 2887..2888,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 103,
        column: 12,
        span: 2889..2890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 103,
        column: 14,
        span: 2891..2892,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 103,
        column: 15,
        span: 2892..2893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 103,
        column: 20,
        span: 2893..2898,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 21,
        span: 2898..2899,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[pcall 1 -1; pop 1; tostring -1; return 1]]",
        ),
        line: 103,
        column: 65,
        span: 2899..2943,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 103,
        column: 66,
        span: 2943..2944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 104,
        column: 26,
        span: 2965..2970,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 104,
        column: 27,
        span: 2970..2971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 104,
        column: 33,
        span: 2971..2977,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 104,
        column: 34,
        span: 2977..2978,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 104,
        column: 36,
        span: 2979..2980,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
        column: 37,
        span: 2980..2981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 105,
        column: 9,
        span: 2984..2990,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
        column: 10,
        span: 2990..2991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 105,
        column: 11,
        span: 2991..2992,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 105,
        column: 14,
        span: 2993..2995,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10\"",
        ),
        line: 105,
        column: 19,
        span: 2996..3000,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
        column: 20,
        span: 3000..3001,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 106,
        column: 0,
        span: 3002..3005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 110,
        column: 3,
        span: 3027..3029,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 110,
        column: 4,
        span: 3029..3030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 110,
        column: 5,
        span: 3030..3031,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 110,
        column: 7,
        span: 3032..3033,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        line: 110,
        column: 10,
        span: 3033..3036,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 110,
        column: 11,
        span: 3036..3037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 110,
        column: 14,
        span: 3038..3040,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 110,
        column: 15,
        span: 3040..3041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 110,
        column: 16,
        span: 3041..3042,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 110,
        column: 18,
        span: 3043..3044,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a31\"",
        ),
        line: 110,
        column: 24,
        span: 3045..3050,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 111,
        column: 6,
        span: 3051..3056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 111,
        column: 8,
        span: 3057..3058,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 111,
        column: 10,
        span: 3059..3060,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 111,
        column: 12,
        span: 3061..3062,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 111,
        column: 13,
        span: 3062..3063,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 111,
        column: 14,
        span: 3063..3064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 111,
        column: 19,
        span: 3064..3069,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  getglobal a;\n  getglobal b;\n  getglobal b;\n  setglobal a;\n  gettop;\n  return .\n]]",
        ),
        line: 118,
        column: 3,
        span: 3069..3155,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 118,
        column: 4,
        span: 3155..3156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 119,
        column: 7,
        span: 3157..3163,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 119,
        column: 8,
        span: 3163..3164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 119,
        column: 9,
        span: 3164..3165,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 119,
        column: 10,
        span: 3165..3166,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 119,
        column: 11,
        span: 3165..3167,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 119,
        column: 12,
        span: 3167..3168,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 119,
        column: 15,
        span: 3169..3171,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        line: 119,
        column: 18,
        span: 3171..3174,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 119,
        column: 22,
        span: 3175..3178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 119,
        column: 24,
        span: 3179..3180,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 119,
        column: 25,
        span: 3180..3181,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 119,
        column: 26,
        span: 3180..3182,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 119,
        column: 27,
        span: 3182..3183,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 119,
        column: 30,
        span: 3184..3186,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a31\"",
        ),
        line: 119,
        column: 36,
        span: 3187..3192,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 119,
        column: 40,
        span: 3193..3196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 119,
        column: 42,
        span: 3197..3198,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 119,
        column: 43,
        span: 3198..3199,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 119,
        column: 44,
        span: 3198..3200,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 119,
        column: 45,
        span: 3200..3201,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 119,
        column: 48,
        span: 3202..3204,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 119,
        column: 52,
        span: 3205..3208,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 119,
        column: 56,
        span: 3209..3212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 119,
        column: 59,
        span: 3213..3215,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 119,
        column: 60,
        span: 3215..3216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 119,
        column: 61,
        span: 3216..3217,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 119,
        column: 64,
        span: 3218..3220,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a31\"",
        ),
        line: 119,
        column: 70,
        span: 3221..3226,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 119,
        column: 71,
        span: 3226..3227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 123,
        column: 7,
        span: 3247..3253,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
        column: 8,
        span: 3253..3254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 123,
        column: 9,
        span: 3254..3255,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 123,
        column: 10,
        span: 3255..3256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 123,
        column: 15,
        span: 3256..3261,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
        column: 16,
        span: 3261..3262,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 10; pushnum 20; arith /; return 1\"",
        ),
        line: 123,
        column: 59,
        span: 3262..3305,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
        column: 60,
        span: 3305..3306,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 123,
        column: 63,
        span: 3307..3309,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 123,
        column: 67,
        span: 3309..3313,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
        column: 68,
        span: 3313..3314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 124,
        column: 7,
        span: 3315..3321,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
        column: 8,
        span: 3321..3322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 124,
        column: 9,
        span: 3322..3323,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 124,
        column: 10,
        span: 3323..3324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 124,
        column: 15,
        span: 3324..3329,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
        column: 16,
        span: 3329..3330,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 10; pushnum 20; arith -; return 1\"",
        ),
        line: 124,
        column: 59,
        span: 3330..3373,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
        column: 60,
        span: 3373..3374,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 124,
        column: 63,
        span: 3375..3377,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 124,
        column: 65,
        span: 3378..3379,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 124,
        column: 67,
        span: 3378..3381,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
        column: 68,
        span: 3381..3382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 125,
        column: 7,
        span: 3383..3389,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 8,
        span: 3389..3390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 125,
        column: 9,
        span: 3390..3391,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 125,
        column: 10,
        span: 3391..3392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 125,
        column: 15,
        span: 3392..3397,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 16,
        span: 3397..3398,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 10; pushnum -20; arith *; return 1\"",
        ),
        line: 125,
        column: 60,
        span: 3398..3442,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
        column: 61,
        span: 3442..3443,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 125,
        column: 64,
        span: 3444..3446,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 125,
        column: 66,
        span: 3447..3448,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 69,
        span: 3447..3451,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
        column: 70,
        span: 3451..3452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 126,
        column: 7,
        span: 3453..3459,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 126,
        column: 8,
        span: 3459..3460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 126,
        column: 9,
        span: 3460..3461,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 126,
        column: 10,
        span: 3461..3462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 126,
        column: 15,
        span: 3462..3467,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 126,
        column: 16,
        span: 3467..3468,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 10; pushnum 3; arith ^; return 1\"",
        ),
        line: 126,
        column: 58,
        span: 3468..3510,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 126,
        column: 59,
        span: 3510..3511,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 126,
        column: 62,
        span: 3512..3514,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
        column: 67,
        span: 3514..3519,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 126,
        column: 68,
        span: 3519..3520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 127,
        column: 7,
        span: 3521..3527,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 127,
        column: 8,
        span: 3527..3528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 127,
        column: 9,
        span: 3528..3529,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 127,
        column: 10,
        span: 3529..3530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 127,
        column: 15,
        span: 3530..3535,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 127,
        column: 16,
        span: 3535..3536,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 10; pushstring 20; arith /; return 1\"",
        ),
        line: 127,
        column: 62,
        span: 3536..3582,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 127,
        column: 63,
        span: 3582..3583,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 127,
        column: 66,
        span: 3584..3586,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 127,
        column: 70,
        span: 3586..3590,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 127,
        column: 71,
        span: 3590..3591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 128,
        column: 7,
        span: 3592..3598,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 128,
        column: 8,
        span: 3598..3599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 128,
        column: 9,
        span: 3599..3600,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 128,
        column: 10,
        span: 3600..3601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 128,
        column: 15,
        span: 3601..3606,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 128,
        column: 16,
        span: 3606..3607,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushstring 10; pushnum 20; arith -; return 1\"",
        ),
        line: 128,
        column: 62,
        span: 3607..3653,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 128,
        column: 63,
        span: 3653..3654,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 128,
        column: 66,
        span: 3655..3657,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 128,
        column: 68,
        span: 3658..3659,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 128,
        column: 70,
        span: 3658..3661,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 128,
        column: 71,
        span: 3661..3662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 129,
        column: 7,
        span: 3663..3669,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
        column: 8,
        span: 3669..3670,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 129,
        column: 9,
        span: 3670..3671,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 129,
        column: 10,
        span: 3671..3672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 129,
        column: 15,
        span: 3672..3677,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
        column: 16,
        span: 3677..3678,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushstring 10; pushstring -20; arith *; return 1\"",
        ),
        line: 129,
        column: 66,
        span: 3678..3728,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 67,
        span: 3728..3729,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 129,
        column: 70,
        span: 3730..3732,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 129,
        column: 72,
        span: 3733..3734,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 129,
        column: 75,
        span: 3733..3737,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 76,
        span: 3737..3738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 130,
        column: 7,
        span: 3739..3745,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
        column: 8,
        span: 3745..3746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 130,
        column: 9,
        span: 3746..3747,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 130,
        column: 10,
        span: 3747..3748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 130,
        column: 15,
        span: 3748..3753,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
        column: 16,
        span: 3753..3754,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushstring 10; pushstring 3; arith ^; return 1\"",
        ),
        line: 130,
        column: 64,
        span: 3754..3802,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
        column: 65,
        span: 3802..3803,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 130,
        column: 68,
        span: 3804..3806,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
        column: 73,
        span: 3806..3811,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
        column: 74,
        span: 3811..3812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 131,
        column: 2,
        span: 3813..3814,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
        column: 3,
        span: 3814..3815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 131,
        column: 4,
        span: 3815..3816,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
        column: 5,
        span: 3816..3817,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 131,
        column: 6,
        span: 3817..3818,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 131,
        column: 8,
        span: 3819..3820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 131,
        column: 10,
        span: 3821..3822,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 131,
        column: 11,
        span: 3822..3823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 131,
        column: 16,
        span: 3823..3828,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
        column: 17,
        span: 3828..3829,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[pushnum 1;\n                  pushstring 10; arith _;\n                  pushstring 5; return 3]]",
        ),
        line: 133,
        column: 43,
        span: 3829..3926,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 44,
        span: 3926..3927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 134,
        column: 7,
        span: 3928..3934,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
        column: 8,
        span: 3934..3935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 134,
        column: 9,
        span: 3935..3936,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 134,
        column: 12,
        span: 3937..3939,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 134,
        column: 14,
        span: 3939..3941,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 134,
        column: 18,
        span: 3942..3945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 134,
        column: 20,
        span: 3946..3947,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 134,
        column: 23,
        span: 3948..3950,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 134,
        column: 25,
        span: 3951..3952,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 134,
        column: 27,
        span: 3951..3954,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 134,
        column: 31,
        span: 3955..3958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 134,
        column: 33,
        span: 3959..3960,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 134,
        column: 36,
        span: 3961..3963,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"5\"",
        ),
        line: 134,
        column: 40,
        span: 3964..3967,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
        column: 41,
        span: 3967..3968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 135,
        column: 3,
        span: 3969..3971,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 135,
        column: 5,
        span: 3972..3973,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 135,
        column: 7,
        span: 3974..3975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__add",
        ),
        line: 135,
        column: 12,
        span: 3975..3980,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 135,
        column: 14,
        span: 3981..3982,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 135,
        column: 23,
        span: 3983..3991,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 135,
        column: 25,
        span: 3992..3993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 135,
        column: 26,
        span: 3993..3994,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 135,
        column: 27,
        span: 3994..3995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 135,
        column: 28,
        span: 3995..3996,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 135,
        column: 29,
        span: 3996..3997,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 135,
        column: 36,
        span: 3998..4004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 135,
        column: 49,
        span: 4005..4017,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 135,
        column: 50,
        span: 4017..4018,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 135,
        column: 51,
        span: 4018..4019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 135,
        column: 52,
        span: 4019..4020,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 135,
        column: 53,
        span: 4020..4021,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 135,
        column: 54,
        span: 4020..4022,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 135,
        column: 55,
        span: 4022..4023,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 135,
        column: 57,
        span: 4024..4025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 135,
        column: 59,
        span: 4026..4027,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 135,
        column: 60,
        span: 4027..4028,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 135,
        column: 61,
        span: 4027..4029,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 135,
        column: 62,
        span: 4029..4030,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 135,
        column: 63,
        span: 4030..4031,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 135,
        column: 64,
        span: 4031..4032,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 135,
        column: 67,
        span: 4033..4035,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 135,
        column: 68,
        span: 4035..4036,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 135,
        column: 72,
        span: 4037..4040,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 135,
        column: 73,
        span: 4040..4041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mod",
        ),
        line: 136,
        column: 12,
        span: 4048..4053,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 136,
        column: 14,
        span: 4054..4055,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 136,
        column: 23,
        span: 4056..4064,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 136,
        column: 25,
        span: 4065..4066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 136,
        column: 26,
        span: 4066..4067,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
        column: 27,
        span: 4067..4068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 136,
        column: 28,
        span: 4068..4069,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 136,
        column: 29,
        span: 4069..4070,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 136,
        column: 36,
        span: 4071..4077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 136,
        column: 49,
        span: 4078..4090,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 136,
        column: 50,
        span: 4090..4091,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 136,
        column: 51,
        span: 4091..4092,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 136,
        column: 52,
        span: 4092..4093,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 136,
        column: 53,
        span: 4093..4094,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 136,
        column: 54,
        span: 4093..4095,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 136,
        column: 55,
        span: 4095..4096,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 136,
        column: 57,
        span: 4097..4098,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 136,
        column: 59,
        span: 4099..4100,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 136,
        column: 60,
        span: 4100..4101,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 136,
        column: 61,
        span: 4100..4102,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 136,
        column: 62,
        span: 4102..4103,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 136,
        column: 63,
        span: 4103..4104,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
        column: 64,
        span: 4104..4105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 136,
        column: 67,
        span: 4106..4108,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 136,
        column: 68,
        span: 4108..4109,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 136,
        column: 72,
        span: 4110..4113,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
        column: 73,
        span: 4113..4114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__unm",
        ),
        line: 137,
        column: 12,
        span: 4121..4126,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 137,
        column: 14,
        span: 4127..4128,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 137,
        column: 23,
        span: 4129..4137,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
        column: 25,
        span: 4138..4139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 137,
        column: 26,
        span: 4139..4140,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
        column: 27,
        span: 4140..4141,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 137,
        column: 34,
        span: 4142..4148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 137,
        column: 47,
        span: 4149..4161,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
        column: 48,
        span: 4161..4162,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 137,
        column: 49,
        span: 4162..4163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 137,
        column: 50,
        span: 4163..4164,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 137,
        column: 51,
        span: 4164..4165,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
        column: 52,
        span: 4164..4166,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 137,
        column: 53,
        span: 4166..4167,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 137,
        column: 54,
        span: 4167..4168,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
        column: 56,
        span: 4168..4170,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 137,
        column: 57,
        span: 4170..4171,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 137,
        column: 58,
        span: 4171..4172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 137,
        column: 61,
        span: 4173..4175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
        column: 62,
        span: 4175..4176,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 137,
        column: 66,
        span: 4177..4180,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 137,
        column: 67,
        span: 4180..4181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 138,
        column: 2,
        span: 4182..4183,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 138,
        column: 3,
        span: 4183..4184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 138,
        column: 4,
        span: 4184..4185,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 138,
        column: 5,
        span: 4185..4186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 138,
        column: 6,
        span: 4186..4187,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 138,
        column: 8,
        span: 4188..4189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 138,
        column: 21,
        span: 4190..4202,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 22,
        span: 4202..4203,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 138,
        column: 23,
        span: 4203..4204,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
        column: 24,
        span: 4203..4205,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 138,
        column: 25,
        span: 4205..4206,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 138,
        column: 26,
        span: 4206..4207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 138,
        column: 29,
        span: 4208..4210,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 30,
        span: 4210..4211,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 138,
        column: 31,
        span: 4211..4212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 139,
        column: 21,
        span: 4221..4233,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
        column: 22,
        span: 4233..4234,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 139,
        column: 23,
        span: 4234..4235,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 139,
        column: 24,
        span: 4234..4236,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 139,
        column: 25,
        span: 4236..4237,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
        column: 26,
        span: 4237..4238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 139,
        column: 29,
        span: 4239..4241,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 30,
        span: 4241..4242,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
        column: 31,
        span: 4242..4243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 140,
        column: 21,
        span: 4252..4264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 22,
        span: 4264..4265,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 140,
        column: 23,
        span: 4265..4266,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 140,
        column: 24,
        span: 4266..4267,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 140,
        column: 25,
        span: 4266..4268,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 140,
        column: 26,
        span: 4268..4269,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
        column: 27,
        span: 4269..4270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 140,
        column: 30,
        span: 4271..4273,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 31,
        span: 4273..4274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 141,
        column: 2,
        span: 4275..4276,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 141,
        column: 3,
        span: 4276..4277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 141,
        column: 4,
        span: 4277..4278,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 141,
        column: 5,
        span: 4278..4279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 141,
        column: 6,
        span: 4279..4280,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 141,
        column: 8,
        span: 4281..4282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 141,
        column: 10,
        span: 4283..4284,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 141,
        column: 11,
        span: 4284..4285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 141,
        column: 16,
        span: 4285..4290,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
        column: 17,
        span: 4290..4291,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"arith +; return 2\"",
        ),
        line: 141,
        column: 36,
        span: 4291..4310,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 141,
        column: 37,
        span: 4310..4311,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 141,
        column: 40,
        span: 4311..4314,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 141,
        column: 41,
        span: 4314..4315,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 141,
        column: 43,
        span: 4316..4317,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 141,
        column: 44,
        span: 4317..4318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 141,
        column: 46,
        span: 4319..4320,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
        column: 47,
        span: 4320..4321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 142,
        column: 7,
        span: 4322..4328,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 142,
        column: 8,
        span: 4328..4329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 142,
        column: 9,
        span: 4329..4330,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 142,
        column: 12,
        span: 4331..4333,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 142,
        column: 15,
        span: 4333..4336,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 142,
        column: 19,
        span: 4337..4340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 142,
        column: 21,
        span: 4341..4342,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 142,
        column: 22,
        span: 4342..4343,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 142,
        column: 23,
        span: 4342..4344,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 142,
        column: 24,
        span: 4344..4345,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 142,
        column: 27,
        span: 4346..4348,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 142,
        column: 30,
        span: 4348..4351,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 142,
        column: 34,
        span: 4352..4355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 142,
        column: 36,
        span: 4356..4357,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 142,
        column: 39,
        span: 4358..4360,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 142,
        column: 43,
        span: 4361..4364,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 142,
        column: 44,
        span: 4364..4365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 143,
        column: 7,
        span: 4366..4372,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 143,
        column: 8,
        span: 4372..4373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 143,
        column: 9,
        span: 4373..4374,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 143,
        column: 10,
        span: 4374..4375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 143,
        column: 15,
        span: 4375..4380,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 143,
        column: 16,
        span: 4380..4381,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"arith %; return 1\"",
        ),
        line: 143,
        column: 35,
        span: 4381..4400,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 143,
        column: 36,
        span: 4400..4401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 143,
        column: 38,
        span: 4402..4403,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 143,
        column: 39,
        span: 4403..4404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 143,
        column: 41,
        span: 4405..4406,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 143,
        column: 42,
        span: 4406..4407,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 143,
        column: 43,
        span: 4407..4408,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 143,
        column: 44,
        span: 4407..4409,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 143,
        column: 45,
        span: 4409..4410,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 143,
        column: 48,
        span: 4411..4413,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 143,
        column: 50,
        span: 4413..4415,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 143,
        column: 51,
        span: 4415..4416,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 143,
        column: 52,
        span: 4416..4417,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 143,
        column: 53,
        span: 4416..4418,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 143,
        column: 54,
        span: 4418..4419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 144,
        column: 7,
        span: 4420..4426,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
        column: 8,
        span: 4426..4427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 144,
        column: 9,
        span: 4427..4428,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 144,
        column: 10,
        span: 4428..4429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 144,
        column: 15,
        span: 4429..4434,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
        column: 16,
        span: 4434..4435,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"arith _; arith +; arith %; return 1\"",
        ),
        line: 144,
        column: 53,
        span: 4435..4472,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 144,
        column: 54,
        span: 4472..4473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 144,
        column: 56,
        span: 4474..4475,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 144,
        column: 57,
        span: 4475..4476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 144,
        column: 59,
        span: 4477..4478,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 144,
        column: 60,
        span: 4478..4479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 144,
        column: 62,
        span: 4480..4481,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
        column: 63,
        span: 4481..4482,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 144,
        column: 64,
        span: 4482..4483,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 144,
        column: 65,
        span: 4482..4484,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 144,
        column: 66,
        span: 4484..4485,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 144,
        column: 69,
        span: 4486..4488,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
        column: 17,
        span: 4503..4505,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 145,
        column: 19,
        span: 4506..4507,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
        column: 21,
        span: 4508..4509,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
        column: 22,
        span: 4508..4510,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 145,
        column: 24,
        span: 4511..4512,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
        column: 26,
        span: 4513..4514,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 145,
        column: 27,
        span: 4514..4515,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
        column: 28,
        span: 4514..4516,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
        column: 29,
        span: 4516..4517,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 145,
        column: 30,
        span: 4517..4518,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
        column: 31,
        span: 4517..4519,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
        column: 32,
        span: 4519..4520,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
        column: 33,
        span: 4520..4521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 152,
        column: 7,
        span: 4604..4610,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 8,
        span: 4610..4611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 152,
        column: 9,
        span: 4611..4612,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 152,
        column: 10,
        span: 4612..4613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 152,
        column: 15,
        span: 4613..4618,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 16,
        span: 4618..4619,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare 2 5 1, return 1\"",
        ),
        line: 152,
        column: 41,
        span: 4619..4644,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 152,
        column: 42,
        span: 4644..4645,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 152,
        column: 44,
        span: 4645..4647,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 152,
        column: 45,
        span: 4647..4648,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 152,
        column: 47,
        span: 4648..4650,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 152,
        column: 48,
        span: 4650..4651,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 152,
        column: 50,
        span: 4651..4653,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 152,
        column: 51,
        span: 4653..4654,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 152,
        column: 53,
        span: 4654..4656,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 152,
        column: 54,
        span: 4656..4657,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 152,
        column: 56,
        span: 4657..4659,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 152,
        column: 57,
        span: 4659..4660,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 152,
        column: 59,
        span: 4660..4662,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 60,
        span: 4662..4663,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 61,
        span: 4663..4664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 153,
        column: 7,
        span: 4665..4671,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
        column: 8,
        span: 4671..4672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 153,
        column: 9,
        span: 4672..4673,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 153,
        column: 10,
        span: 4673..4674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 153,
        column: 15,
        span: 4674..4679,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
        column: 16,
        span: 4679..4680,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare 2 5 2, return 1\"",
        ),
        line: 153,
        column: 41,
        span: 4680..4705,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 153,
        column: 42,
        span: 4705..4706,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 44,
        span: 4706..4708,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 153,
        column: 45,
        span: 4708..4709,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 47,
        span: 4709..4711,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 153,
        column: 48,
        span: 4711..4712,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 50,
        span: 4712..4714,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 153,
        column: 51,
        span: 4714..4715,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 53,
        span: 4715..4717,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 153,
        column: 54,
        span: 4717..4718,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 56,
        span: 4718..4720,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 153,
        column: 57,
        span: 4720..4721,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 59,
        span: 4721..4723,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
        column: 60,
        span: 4723..4724,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
        column: 61,
        span: 4724..4725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 154,
        column: 7,
        span: 4726..4732,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 8,
        span: 4732..4733,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 154,
        column: 11,
        span: 4733..4736,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 154,
        column: 13,
        span: 4737..4738,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 154,
        column: 14,
        span: 4738..4739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 154,
        column: 19,
        span: 4739..4744,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 20,
        span: 4744..4745,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare 3 4 1, return 1\"",
        ),
        line: 154,
        column: 45,
        span: 4745..4770,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 154,
        column: 46,
        span: 4770..4771,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 154,
        column: 48,
        span: 4771..4773,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 154,
        column: 49,
        span: 4773..4774,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 154,
        column: 51,
        span: 4774..4776,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 154,
        column: 52,
        span: 4776..4777,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 154,
        column: 54,
        span: 4777..4779,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 154,
        column: 55,
        span: 4779..4780,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 154,
        column: 57,
        span: 4780..4782,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 154,
        column: 58,
        span: 4782..4783,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 154,
        column: 60,
        span: 4783..4785,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 154,
        column: 61,
        span: 4785..4786,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 154,
        column: 63,
        span: 4786..4788,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 64,
        span: 4788..4789,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 65,
        span: 4789..4790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 155,
        column: 7,
        span: 4791..4797,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
        column: 8,
        span: 4797..4798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 155,
        column: 9,
        span: 4798..4799,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 155,
        column: 10,
        span: 4799..4800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 155,
        column: 15,
        span: 4800..4805,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
        column: 16,
        span: 4805..4806,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare 3 4 2, return 1\"",
        ),
        line: 155,
        column: 41,
        span: 4806..4831,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 155,
        column: 42,
        span: 4831..4832,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 155,
        column: 44,
        span: 4832..4834,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 155,
        column: 45,
        span: 4834..4835,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 155,
        column: 47,
        span: 4835..4837,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 155,
        column: 48,
        span: 4837..4838,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 155,
        column: 50,
        span: 4838..4840,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 155,
        column: 51,
        span: 4840..4841,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 155,
        column: 53,
        span: 4841..4843,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 155,
        column: 54,
        span: 4843..4844,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 155,
        column: 56,
        span: 4844..4846,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 155,
        column: 57,
        span: 4846..4847,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 155,
        column: 59,
        span: 4847..4849,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
        column: 60,
        span: 4849..4850,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
        column: 61,
        span: 4850..4851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 156,
        column: 7,
        span: 4852..4858,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
        column: 8,
        span: 4858..4859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 156,
        column: 9,
        span: 4859..4860,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 156,
        column: 10,
        span: 4860..4861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 156,
        column: 15,
        span: 4861..4866,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
        column: 16,
        span: 4866..4867,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare 5 2 1, return 1\"",
        ),
        line: 156,
        column: 41,
        span: 4867..4892,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 156,
        column: 42,
        span: 4892..4893,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 156,
        column: 44,
        span: 4893..4895,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 156,
        column: 45,
        span: 4895..4896,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 156,
        column: 47,
        span: 4896..4898,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 156,
        column: 48,
        span: 4898..4899,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 156,
        column: 50,
        span: 4899..4901,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 156,
        column: 51,
        span: 4901..4902,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 156,
        column: 53,
        span: 4902..4904,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 156,
        column: 54,
        span: 4904..4905,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 156,
        column: 56,
        span: 4905..4907,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 156,
        column: 57,
        span: 4907..4908,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 156,
        column: 59,
        span: 4908..4910,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
        column: 60,
        span: 4910..4911,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
        column: 61,
        span: 4911..4912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 157,
        column: 7,
        span: 4913..4919,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 157,
        column: 8,
        span: 4919..4920,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 157,
        column: 11,
        span: 4920..4923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 157,
        column: 13,
        span: 4924..4925,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 157,
        column: 14,
        span: 4925..4926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 157,
        column: 19,
        span: 4926..4931,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 157,
        column: 20,
        span: 4931..4932,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare 2 -3 1, return 1\"",
        ),
        line: 157,
        column: 46,
        span: 4932..4958,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
        column: 47,
        span: 4958..4959,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"4\"",
        ),
        line: 157,
        column: 51,
        span: 4960..4963,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
        column: 52,
        span: 4963..4964,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 157,
        column: 56,
        span: 4965..4968,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
        column: 57,
        span: 4968..4969,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 157,
        column: 61,
        span: 4970..4973,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
        column: 62,
        span: 4973..4974,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3\"",
        ),
        line: 157,
        column: 66,
        span: 4975..4978,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
        column: 67,
        span: 4978..4979,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 157,
        column: 71,
        span: 4980..4983,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
        column: 72,
        span: 4983..4984,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 157,
        column: 76,
        span: 4985..4988,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 157,
        column: 77,
        span: 4988..4989,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 157,
        column: 78,
        span: 4989..4990,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 158,
        column: 7,
        span: 4991..4997,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
        column: 8,
        span: 4997..4998,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 158,
        column: 11,
        span: 4998..5001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 158,
        column: 13,
        span: 5002..5003,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 158,
        column: 14,
        span: 5003..5004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 158,
        column: 19,
        span: 5004..5009,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
        column: 20,
        span: 5009..5010,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare -3 2 1, return 1\"",
        ),
        line: 158,
        column: 46,
        span: 5010..5036,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 158,
        column: 47,
        span: 5036..5037,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3\"",
        ),
        line: 158,
        column: 51,
        span: 5038..5041,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 158,
        column: 52,
        span: 5041..5042,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 158,
        column: 56,
        span: 5043..5046,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 158,
        column: 57,
        span: 5046..5047,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 158,
        column: 61,
        span: 5048..5051,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 158,
        column: 62,
        span: 5051..5052,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"4\"",
        ),
        line: 158,
        column: 66,
        span: 5053..5056,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 158,
        column: 67,
        span: 5056..5057,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 158,
        column: 71,
        span: 5058..5061,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 158,
        column: 72,
        span: 5061..5062,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 158,
        column: 76,
        span: 5063..5066,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
        column: 77,
        span: 5066..5067,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
        column: 78,
        span: 5067..5068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 161,
        column: 7,
        span: 5105..5111,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
        column: 8,
        span: 5111..5112,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 161,
        column: 11,
        span: 5112..5115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 161,
        column: 13,
        span: 5116..5117,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 161,
        column: 14,
        span: 5117..5118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 161,
        column: 19,
        span: 5118..5123,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
        column: 20,
        span: 5123..5124,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare 1 4 1, return 1\"",
        ),
        line: 161,
        column: 45,
        span: 5124..5149,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
        column: 46,
        span: 5149..5150,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
        column: 47,
        span: 5150..5151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 162,
        column: 7,
        span: 5152..5158,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
        column: 8,
        span: 5158..5159,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 162,
        column: 11,
        span: 5159..5162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 162,
        column: 13,
        span: 5163..5164,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 162,
        column: 14,
        span: 5164..5165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 162,
        column: 19,
        span: 5165..5170,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
        column: 20,
        span: 5170..5171,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare 9 1 2, return 1\"",
        ),
        line: 162,
        column: 45,
        span: 5171..5196,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
        column: 46,
        span: 5196..5197,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
        column: 47,
        span: 5197..5198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 163,
        column: 7,
        span: 5199..5205,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 163,
        column: 8,
        span: 5205..5206,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 163,
        column: 11,
        span: 5206..5209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 163,
        column: 13,
        span: 5210..5211,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 163,
        column: 14,
        span: 5211..5212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 163,
        column: 19,
        span: 5212..5217,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 163,
        column: 20,
        span: 5217..5218,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare 9 9 0, return 1\"",
        ),
        line: 163,
        column: 45,
        span: 5218..5243,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
        column: 46,
        span: 5243..5244,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
        column: 47,
        span: 5244..5245,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 165,
        column: 6,
        span: 5247..5252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 165,
        column: 8,
        span: 5253..5254,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 165,
        column: 10,
        span: 5255..5256,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 165,
        column: 12,
        span: 5257..5258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__lt",
        ),
        line: 165,
        column: 16,
        span: 5258..5262,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 165,
        column: 18,
        span: 5263..5264,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 165,
        column: 27,
        span: 5265..5273,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 29,
        span: 5274..5275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 165,
        column: 30,
        span: 5275..5276,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 165,
        column: 31,
        span: 5276..5277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 165,
        column: 32,
        span: 5277..5278,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 33,
        span: 5278..5279,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 165,
        column: 40,
        span: 5280..5286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 165,
        column: 42,
        span: 5287..5288,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 165,
        column: 43,
        span: 5288..5289,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 165,
        column: 44,
        span: 5288..5290,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 165,
        column: 45,
        span: 5290..5291,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 165,
        column: 47,
        span: 5292..5293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 165,
        column: 49,
        span: 5294..5295,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 165,
        column: 50,
        span: 5295..5296,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 165,
        column: 51,
        span: 5295..5297,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 165,
        column: 52,
        span: 5297..5298,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 165,
        column: 56,
        span: 5299..5302,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 165,
        column: 57,
        span: 5302..5303,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 166,
        column: 6,
        span: 5304..5309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 166,
        column: 9,
        span: 5310..5312,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 166,
        column: 10,
        span: 5312..5313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        line: 166,
        column: 12,
        span: 5313..5315,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 166,
        column: 13,
        span: 5315..5316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a4",
        ),
        line: 166,
        column: 15,
        span: 5316..5318,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 166,
        column: 17,
        span: 5319..5320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 166,
        column: 30,
        span: 5321..5333,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 31,
        span: 5333..5334,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 166,
        column: 32,
        span: 5334..5335,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 166,
        column: 33,
        span: 5334..5336,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 166,
        column: 34,
        span: 5336..5337,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 166,
        column: 35,
        span: 5337..5338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 166,
        column: 37,
        span: 5339..5340,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 38,
        span: 5340..5341,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 166,
        column: 39,
        span: 5341..5342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 167,
        column: 30,
        span: 5360..5372,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
        column: 31,
        span: 5372..5373,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 167,
        column: 32,
        span: 5373..5374,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 167,
        column: 33,
        span: 5373..5375,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 167,
        column: 34,
        span: 5375..5376,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 167,
        column: 35,
        span: 5376..5377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 167,
        column: 37,
        span: 5378..5379,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 38,
        span: 5379..5380,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 167,
        column: 39,
        span: 5380..5381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 168,
        column: 30,
        span: 5399..5411,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
        column: 31,
        span: 5411..5412,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 168,
        column: 32,
        span: 5412..5413,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 168,
        column: 33,
        span: 5412..5414,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 168,
        column: 34,
        span: 5414..5415,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 168,
        column: 35,
        span: 5415..5416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 168,
        column: 37,
        span: 5417..5418,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
        column: 38,
        span: 5418..5419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 169,
        column: 7,
        span: 5420..5426,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 8,
        span: 5426..5427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 169,
        column: 9,
        span: 5427..5428,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 169,
        column: 10,
        span: 5428..5429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 169,
        column: 15,
        span: 5429..5434,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 16,
        span: 5434..5435,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare 2 5 1, return 1\"",
        ),
        line: 169,
        column: 41,
        span: 5435..5460,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
        column: 42,
        span: 5460..5461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        line: 169,
        column: 45,
        span: 5462..5464,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
        column: 46,
        span: 5464..5465,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 48,
        span: 5465..5467,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
        column: 49,
        span: 5467..5468,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 51,
        span: 5468..5470,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
        column: 52,
        span: 5470..5471,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a4",
        ),
        line: 169,
        column: 55,
        span: 5472..5474,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
        column: 56,
        span: 5474..5475,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 58,
        span: 5475..5477,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
        column: 59,
        span: 5477..5478,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 61,
        span: 5478..5480,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 62,
        span: 5480..5481,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 63,
        span: 5481..5482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 170,
        column: 7,
        span: 5483..5489,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
        column: 8,
        span: 5489..5490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 170,
        column: 9,
        span: 5490..5491,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 170,
        column: 10,
        span: 5491..5492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 170,
        column: 15,
        span: 5492..5497,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
        column: 16,
        span: 5497..5498,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare 2 5 2, return 1\"",
        ),
        line: 170,
        column: 41,
        span: 5498..5523,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 170,
        column: 42,
        span: 5523..5524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        line: 170,
        column: 45,
        span: 5525..5527,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 170,
        column: 46,
        span: 5527..5528,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
        column: 48,
        span: 5528..5530,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 170,
        column: 49,
        span: 5530..5531,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
        column: 51,
        span: 5531..5533,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 170,
        column: 52,
        span: 5533..5534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a4",
        ),
        line: 170,
        column: 55,
        span: 5535..5537,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 170,
        column: 56,
        span: 5537..5538,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
        column: 58,
        span: 5538..5540,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 170,
        column: 59,
        span: 5540..5541,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
        column: 61,
        span: 5541..5543,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 62,
        span: 5543..5544,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 63,
        span: 5544..5545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 171,
        column: 7,
        span: 5546..5552,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 8,
        span: 5552..5553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 171,
        column: 9,
        span: 5553..5554,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 171,
        column: 10,
        span: 5554..5555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 171,
        column: 15,
        span: 5555..5560,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 16,
        span: 5560..5561,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare 5 -6 1, return 1\"",
        ),
        line: 171,
        column: 42,
        span: 5561..5587,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 171,
        column: 43,
        span: 5587..5588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a4",
        ),
        line: 171,
        column: 46,
        span: 5589..5591,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 171,
        column: 47,
        span: 5591..5592,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
        column: 49,
        span: 5592..5594,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 171,
        column: 50,
        span: 5594..5595,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
        column: 52,
        span: 5595..5597,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 171,
        column: 53,
        span: 5597..5598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        line: 171,
        column: 56,
        span: 5599..5601,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 171,
        column: 57,
        span: 5601..5602,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
        column: 59,
        span: 5602..5604,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 171,
        column: 60,
        span: 5604..5605,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
        column: 62,
        span: 5605..5607,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 63,
        span: 5607..5608,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 64,
        span: 5608..5609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 172,
        column: 2,
        span: 5610..5611,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 172,
        column: 3,
        span: 5611..5612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 172,
        column: 4,
        span: 5612..5613,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 172,
        column: 6,
        span: 5614..5615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 172,
        column: 8,
        span: 5616..5617,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 172,
        column: 9,
        span: 5617..5618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 172,
        column: 14,
        span: 5618..5623,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
        column: 15,
        span: 5623..5624,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare 5 -6 1, return 2\"",
        ),
        line: 172,
        column: 41,
        span: 5624..5650,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 172,
        column: 42,
        span: 5650..5651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 172,
        column: 45,
        span: 5652..5654,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 172,
        column: 46,
        span: 5654..5655,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 172,
        column: 48,
        span: 5655..5657,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 172,
        column: 49,
        span: 5657..5658,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 172,
        column: 51,
        span: 5658..5660,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 172,
        column: 52,
        span: 5660..5661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        line: 172,
        column: 55,
        span: 5662..5664,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 172,
        column: 56,
        span: 5664..5665,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 172,
        column: 58,
        span: 5665..5667,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 172,
        column: 59,
        span: 5667..5668,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 172,
        column: 62,
        span: 5668..5671,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
        column: 63,
        span: 5671..5672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 173,
        column: 7,
        span: 5673..5679,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
        column: 8,
        span: 5679..5680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 173,
        column: 9,
        span: 5680..5681,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 173,
        column: 12,
        span: 5682..5684,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 173,
        column: 15,
        span: 5684..5687,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 173,
        column: 19,
        span: 5688..5691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 173,
        column: 21,
        span: 5692..5693,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 173,
        column: 24,
        span: 5694..5696,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 173,
        column: 30,
        span: 5697..5702,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
        column: 31,
        span: 5702..5703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 174,
        column: 2,
        span: 5704..5705,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 3,
        span: 5705..5706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 174,
        column: 4,
        span: 5706..5707,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 174,
        column: 6,
        span: 5708..5709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 174,
        column: 8,
        span: 5710..5711,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 174,
        column: 9,
        span: 5711..5712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 174,
        column: 14,
        span: 5712..5717,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
        column: 15,
        span: 5717..5718,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare 5 -6 2, return 2\"",
        ),
        line: 174,
        column: 41,
        span: 5718..5744,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 42,
        span: 5744..5745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 174,
        column: 45,
        span: 5746..5748,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 46,
        span: 5748..5749,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
        column: 48,
        span: 5749..5751,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 49,
        span: 5751..5752,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
        column: 51,
        span: 5752..5754,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 52,
        span: 5754..5755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        line: 174,
        column: 55,
        span: 5756..5758,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 56,
        span: 5758..5759,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
        column: 58,
        span: 5759..5761,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 59,
        span: 5761..5762,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
        column: 62,
        span: 5762..5765,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
        column: 63,
        span: 5765..5766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 175,
        column: 7,
        span: 5767..5773,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
        column: 8,
        span: 5773..5774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 175,
        column: 9,
        span: 5774..5775,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 175,
        column: 12,
        span: 5776..5778,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 175,
        column: 15,
        span: 5778..5781,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 175,
        column: 19,
        span: 5782..5785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 175,
        column: 21,
        span: 5786..5787,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 175,
        column: 24,
        span: 5788..5790,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 175,
        column: 30,
        span: 5791..5796,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
        column: 31,
        span: 5796..5797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 176,
        column: 2,
        span: 5798..5799,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
        column: 3,
        span: 5799..5800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 176,
        column: 4,
        span: 5800..5801,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 176,
        column: 6,
        span: 5802..5803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 176,
        column: 8,
        span: 5804..5805,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 176,
        column: 9,
        span: 5805..5806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 176,
        column: 14,
        span: 5806..5811,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 15,
        span: 5811..5812,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare 5 -6 2, return 2\"",
        ),
        line: 176,
        column: 41,
        span: 5812..5838,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
        column: 42,
        span: 5838..5839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 176,
        column: 45,
        span: 5840..5842,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
        column: 46,
        span: 5842..5843,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
        column: 48,
        span: 5843..5845,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
        column: 49,
        span: 5845..5846,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
        column: 51,
        span: 5846..5848,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
        column: 52,
        span: 5848..5849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 176,
        column: 55,
        span: 5850..5852,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
        column: 56,
        span: 5852..5853,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
        column: 58,
        span: 5853..5855,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
        column: 59,
        span: 5855..5856,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
        column: 62,
        span: 5856..5859,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 63,
        span: 5859..5860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 177,
        column: 7,
        span: 5861..5867,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
        column: 8,
        span: 5867..5868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 177,
        column: 9,
        span: 5868..5869,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 177,
        column: 12,
        span: 5870..5872,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 177,
        column: 15,
        span: 5872..5875,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 177,
        column: 19,
        span: 5876..5879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 177,
        column: 21,
        span: 5880..5881,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 177,
        column: 24,
        span: 5882..5884,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 177,
        column: 29,
        span: 5885..5889,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
        column: 30,
        span: 5889..5890,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 180,
        column: 6,
        span: 5910..5915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 180,
        column: 8,
        span: 5916..5917,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 180,
        column: 10,
        span: 5918..5919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 180,
        column: 23,
        span: 5920..5932,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
        column: 24,
        span: 5932..5933,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 180,
        column: 25,
        span: 5933..5934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 180,
        column: 26,
        span: 5934..5935,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 180,
        column: 28,
        span: 5936..5937,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 180,
        column: 31,
        span: 5937..5940,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 180,
        column: 32,
        span: 5940..5941,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 180,
        column: 33,
        span: 5941..5942,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 180,
        column: 35,
        span: 5943..5944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__len",
        ),
        line: 180,
        column: 40,
        span: 5944..5949,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 180,
        column: 42,
        span: 5950..5951,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 180,
        column: 51,
        span: 5952..5960,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
        column: 53,
        span: 5961..5962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 180,
        column: 54,
        span: 5962..5963,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
        column: 55,
        span: 5963..5964,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 180,
        column: 62,
        span: 5965..5971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 180,
        column: 64,
        span: 5972..5973,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 180,
        column: 65,
        span: 5973..5974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 180,
        column: 66,
        span: 5974..5975,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 180,
        column: 70,
        span: 5976..5979,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 180,
        column: 71,
        span: 5979..5980,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
        column: 72,
        span: 5980..5981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 181,
        column: 2,
        span: 5982..5983,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
        column: 3,
        span: 5983..5984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 181,
        column: 4,
        span: 5984..5985,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
        column: 5,
        span: 5985..5986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 181,
        column: 6,
        span: 5986..5987,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 181,
        column: 8,
        span: 5988..5989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 181,
        column: 10,
        span: 5990..5991,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 181,
        column: 11,
        span: 5991..5992,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 181,
        column: 16,
        span: 5992..5997,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 181,
        column: 17,
        span: 5997..5998,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n   len 2;\n   Llen 2;\n   objsize 2;\n   return 3\n]]",
        ),
        line: 186,
        column: 3,
        span: 5998..6050,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 4,
        span: 6050..6051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 186,
        column: 6,
        span: 6052..6053,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 7,
        span: 6053..6054,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 187,
        column: 7,
        span: 6055..6061,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 187,
        column: 8,
        span: 6061..6062,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 187,
        column: 9,
        span: 6062..6063,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 187,
        column: 12,
        span: 6064..6066,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 187,
        column: 15,
        span: 6066..6069,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 187,
        column: 19,
        span: 6070..6073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 187,
        column: 21,
        span: 6074..6075,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 187,
        column: 24,
        span: 6076..6078,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 187,
        column: 27,
        span: 6078..6081,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 187,
        column: 31,
        span: 6082..6085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 187,
        column: 33,
        span: 6086..6087,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 187,
        column: 36,
        span: 6088..6090,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 187,
        column: 38,
        span: 6090..6092,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 187,
        column: 39,
        span: 6092..6093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 189,
        column: 2,
        span: 6095..6096,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 189,
        column: 3,
        span: 6096..6097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 189,
        column: 4,
        span: 6097..6098,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 189,
        column: 6,
        span: 6099..6100,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"234\"",
        ),
        line: 189,
        column: 12,
        span: 6101..6106,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 189,
        column: 13,
        span: 6106..6107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 189,
        column: 15,
        span: 6108..6109,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 189,
        column: 16,
        span: 6109..6110,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 189,
        column: 17,
        span: 6109..6111,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 189,
        column: 18,
        span: 6111..6112,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 189,
        column: 20,
        span: 6113..6114,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 189,
        column: 0,
        span: 6114..6117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 190,
        column: 2,
        span: 6118..6119,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 190,
        column: 3,
        span: 6119..6120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 190,
        column: 4,
        span: 6120..6121,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 190,
        column: 5,
        span: 6121..6122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 190,
        column: 6,
        span: 6122..6123,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 190,
        column: 8,
        span: 6124..6125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 190,
        column: 10,
        span: 6126..6127,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 190,
        column: 11,
        span: 6127..6128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 190,
        column: 16,
        span: 6128..6133,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 17,
        span: 6133..6134,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n   len 2;\n   Llen 2;\n   objsize 2;\n   return 3\n]]",
        ),
        line: 195,
        column: 3,
        span: 6134..6186,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 195,
        column: 4,
        span: 6186..6187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 195,
        column: 6,
        span: 6188..6189,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 7,
        span: 6189..6190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 196,
        column: 7,
        span: 6191..6197,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 196,
        column: 8,
        span: 6197..6198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 196,
        column: 9,
        span: 6198..6199,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 196,
        column: 12,
        span: 6200..6202,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"234\"",
        ),
        line: 196,
        column: 18,
        span: 6203..6208,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 196,
        column: 22,
        span: 6209..6212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 196,
        column: 24,
        span: 6213..6214,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 196,
        column: 27,
        span: 6215..6217,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "234",
                    after_decimal: "",
                },
            ),
        ),
        line: 196,
        column: 31,
        span: 6217..6221,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 196,
        column: 35,
        span: 6222..6225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 196,
        column: 37,
        span: 6226..6227,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 196,
        column: 40,
        span: 6228..6230,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 196,
        column: 42,
        span: 6230..6232,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 196,
        column: 43,
        span: 6232..6233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 198,
        column: 2,
        span: 6235..6236,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 198,
        column: 3,
        span: 6236..6237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 198,
        column: 4,
        span: 6237..6238,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 198,
        column: 6,
        span: 6239..6240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 198,
        column: 12,
        span: 6241..6246,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 198,
        column: 13,
        span: 6246..6247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 198,
        column: 15,
        span: 6248..6249,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 198,
        column: 16,
        span: 6249..6250,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 198,
        column: 17,
        span: 6249..6251,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 198,
        column: 18,
        span: 6251..6252,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 198,
        column: 20,
        span: 6253..6254,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 198,
        column: 0,
        span: 6254..6257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 199,
        column: 2,
        span: 6258..6259,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 199,
        column: 3,
        span: 6259..6260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 199,
        column: 4,
        span: 6260..6261,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 199,
        column: 6,
        span: 6262..6263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 199,
        column: 8,
        span: 6264..6265,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 199,
        column: 9,
        span: 6265..6266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 199,
        column: 14,
        span: 6266..6271,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 199,
        column: 15,
        span: 6271..6272,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n   len 2;\n   objsize 2;\n   return 2\n]]",
        ),
        line: 203,
        column: 3,
        span: 6272..6313,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 203,
        column: 4,
        span: 6313..6314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 203,
        column: 6,
        span: 6315..6316,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 7,
        span: 6316..6317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 204,
        column: 7,
        span: 6318..6324,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 8,
        span: 6324..6325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 204,
        column: 9,
        span: 6325..6326,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 204,
        column: 12,
        span: 6327..6329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 204,
        column: 18,
        span: 6330..6335,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 204,
        column: 22,
        span: 6336..6339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 204,
        column: 24,
        span: 6340..6341,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 204,
        column: 27,
        span: 6342..6344,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 29,
        span: 6344..6346,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 30,
        span: 6346..6347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 209,
        column: 2,
        span: 6371..6372,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 209,
        column: 4,
        span: 6373..6374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 209,
        column: 17,
        span: 6375..6387,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
        column: 18,
        span: 6387..6388,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 209,
        column: 19,
        span: 6388..6389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 209,
        column: 20,
        span: 6389..6390,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 209,
        column: 21,
        span: 6390..6391,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"u\"",
        ),
        line: 209,
        column: 24,
        span: 6391..6394,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 209,
        column: 25,
        span: 6394..6395,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 209,
        column: 26,
        span: 6395..6396,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 209,
        column: 28,
        span: 6397..6398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__concat",
        ),
        line: 209,
        column: 36,
        span: 6398..6406,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 209,
        column: 38,
        span: 6407..6408,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 209,
        column: 47,
        span: 6409..6417,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
        column: 49,
        span: 6418..6419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 209,
        column: 50,
        span: 6419..6420,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 209,
        column: 51,
        span: 6420..6421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 209,
        column: 52,
        span: 6421..6422,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
        column: 53,
        span: 6422..6423,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 209,
        column: 60,
        span: 6424..6430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 209,
        column: 62,
        span: 6431..6432,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 209,
        column: 63,
        span: 6432..6433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 209,
        column: 64,
        span: 6433..6434,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 209,
        column: 66,
        span: 6434..6436,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.'",
        ),
        line: 209,
        column: 69,
        span: 6436..6439,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 209,
        column: 71,
        span: 6439..6441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 209,
        column: 72,
        span: 6441..6442,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 209,
        column: 73,
        span: 6442..6443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 209,
        column: 74,
        span: 6443..6444,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 209,
        column: 78,
        span: 6445..6448,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 209,
        column: 79,
        span: 6448..6449,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
        column: 80,
        span: 6449..6450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 210,
        column: 2,
        span: 6451..6452,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 210,
        column: 3,
        span: 6452..6453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 210,
        column: 4,
        span: 6453..6454,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 210,
        column: 6,
        span: 6455..6456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 210,
        column: 8,
        span: 6457..6458,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 210,
        column: 9,
        span: 6458..6459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 210,
        column: 14,
        span: 6459..6464,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 15,
        span: 6464..6465,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  pushnum 5\n  pushvalue 2;\n  pushvalue 2;\n  concat 2;\n  pushvalue -2;\n  return 2;\n]]",
        ),
        line: 217,
        column: 3,
        span: 6465..6552,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 217,
        column: 4,
        span: 6552..6553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 217,
        column: 6,
        span: 6554..6555,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 217,
        column: 7,
        span: 6555..6556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 217,
        column: 9,
        span: 6557..6558,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 10,
        span: 6558..6559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 218,
        column: 7,
        span: 6560..6566,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
        column: 8,
        span: 6566..6567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 218,
        column: 9,
        span: 6567..6568,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 218,
        column: 12,
        span: 6569..6571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 218,
        column: 14,
        span: 6572..6573,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 218,
        column: 16,
        span: 6573..6575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 218,
        column: 17,
        span: 6575..6576,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 218,
        column: 21,
        span: 6577..6580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 218,
        column: 23,
        span: 6581..6582,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 218,
        column: 26,
        span: 6583..6585,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 218,
        column: 28,
        span: 6585..6587,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
        column: 29,
        span: 6587..6588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 221,
        column: 7,
        span: 6616..6622,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 8,
        span: 6622..6623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 221,
        column: 9,
        span: 6623..6624,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 221,
        column: 10,
        span: 6624..6625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 221,
        column: 15,
        span: 6625..6630,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 16,
        span: 6630..6631,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concat 0; return 1\"",
        ),
        line: 221,
        column: 36,
        span: 6631..6651,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 37,
        span: 6651..6652,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 221,
        column: 40,
        span: 6653..6655,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 221,
        column: 43,
        span: 6656..6658,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 44,
        span: 6658..6659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 224,
        column: 7,
        span: 6686..6692,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
        column: 8,
        span: 6692..6693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 224,
        column: 9,
        span: 6693..6694,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 224,
        column: 10,
        span: 6694..6695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 224,
        column: 15,
        span: 6695..6700,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
        column: 16,
        span: 6700..6701,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concat 1; return 1\"",
        ),
        line: 224,
        column: 36,
        span: 6701..6721,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 224,
        column: 37,
        span: 6721..6722,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 224,
        column: 44,
        span: 6723..6729,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 45,
        span: 6729..6730,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 224,
        column: 48,
        span: 6731..6733,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 224,
        column: 55,
        span: 6734..6740,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 56,
        span: 6740..6741,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 230,
        column: 9,
        span: 6764..6772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 230,
        column: 11,
        span: 6773..6774,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 230,
        column: 12,
        span: 6774..6775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 230,
        column: 13,
        span: 6775..6776,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 230,
        column: 14,
        span: 6776..6777,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 230,
        column: 21,
        span: 6778..6784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 230,
        column: 23,
        span: 6785..6786,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 230,
        column: 27,
        span: 6787..6790,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 230,
        column: 29,
        span: 6790..6792,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 230,
        column: 32,
        span: 6793..6795,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 230,
        column: 34,
        span: 6795..6797,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 230,
        column: 0,
        span: 6798..6801,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 232,
        column: 9,
        span: 6803..6811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 232,
        column: 15,
        span: 6812..6817,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 232,
        column: 17,
        span: 6818..6819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 232,
        column: 18,
        span: 6819..6820,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 232,
        column: 19,
        span: 6820..6821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 232,
        column: 21,
        span: 6822..6823,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 232,
        column: 22,
        span: 6823..6824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 233,
        column: 4,
        span: 6827..6828,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 233,
        column: 6,
        span: 6829..6830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 233,
        column: 8,
        span: 6831..6832,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 233,
        column: 11,
        span: 6833..6835,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 233,
        column: 0,
        span: 6835..6837,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 234,
        column: 8,
        span: 6840..6845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 234,
        column: 13,
        span: 6846..6850,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 234,
        column: 15,
        span: 6851..6852,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    isnumber %d;\n    isstring %d;\n    isfunction %d;\n    iscfunction %d;\n    istable %d;\n    isuserdata %d;\n    isnil %d;\n    isnull %d;\n    return 8\n  ]]",
        ),
        line: 244,
        column: 5,
        span: 6853..7010,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 245,
        column: 7,
        span: 7013..7017,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 245,
        column: 9,
        span: 7018..7019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 245,
        column: 16,
        span: 7020..7026,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 245,
        column: 17,
        span: 7026..7027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 245,
        column: 23,
        span: 7027..7033,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 245,
        column: 24,
        span: 7033..7034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 245,
        column: 28,
        span: 7034..7038,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
        column: 29,
        span: 7038..7039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 245,
        column: 31,
        span: 7040..7041,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
        column: 32,
        span: 7041..7042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 245,
        column: 34,
        span: 7043..7044,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
        column: 35,
        span: 7044..7045,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 245,
        column: 37,
        span: 7046..7047,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
        column: 38,
        span: 7047..7048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 245,
        column: 40,
        span: 7049..7050,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
        column: 41,
        span: 7050..7051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 245,
        column: 43,
        span: 7052..7053,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
        column: 44,
        span: 7053..7054,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 245,
        column: 46,
        span: 7055..7056,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
        column: 47,
        span: 7056..7057,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 245,
        column: 49,
        span: 7058..7059,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
        column: 50,
        span: 7059..7060,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 245,
        column: 52,
        span: 7061..7062,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 245,
        column: 53,
        span: 7062..7063,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 246,
        column: 8,
        span: 7066..7071,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 246,
        column: 10,
        span: 7072..7073,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 246,
        column: 11,
        span: 7073..7074,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 246,
        column: 12,
        span: 7074..7075,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 246,
        column: 13,
        span: 7075..7076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 246,
        column: 14,
        span: 7076..7077,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 246,
        column: 15,
        span: 7077..7078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 246,
        column: 16,
        span: 7078..7079,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 246,
        column: 17,
        span: 7079..7080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 246,
        column: 18,
        span: 7080..7081,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 246,
        column: 19,
        span: 7081..7082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 246,
        column: 20,
        span: 7082..7083,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 246,
        column: 21,
        span: 7083..7084,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 246,
        column: 22,
        span: 7084..7085,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 246,
        column: 23,
        span: 7085..7086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 246,
        column: 24,
        span: 7086..7087,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 246,
        column: 26,
        span: 7088..7089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 246,
        column: 28,
        span: 7090..7091,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 246,
        column: 29,
        span: 7091..7092,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 246,
        column: 34,
        span: 7092..7097,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 246,
        column: 35,
        span: 7097..7098,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 246,
        column: 39,
        span: 7098..7102,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 246,
        column: 40,
        span: 7102..7103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 246,
        column: 42,
        span: 7104..7105,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 246,
        column: 43,
        span: 7105..7106,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 247,
        column: 9,
        span: 7109..7115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 247,
        column: 11,
        span: 7116..7117,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 12,
        span: 7117..7118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 247,
        column: 13,
        span: 7118..7119,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 14,
        span: 7119..7120,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 247,
        column: 15,
        span: 7120..7121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 247,
        column: 16,
        span: 7121..7122,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 17,
        span: 7122..7123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 247,
        column: 18,
        span: 7123..7124,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 19,
        span: 7124..7125,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 247,
        column: 20,
        span: 7125..7126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 247,
        column: 21,
        span: 7126..7127,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 22,
        span: 7127..7128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 247,
        column: 23,
        span: 7128..7129,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 24,
        span: 7129..7130,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 247,
        column: 25,
        span: 7130..7131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 247,
        column: 26,
        span: 7131..7132,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 27,
        span: 7132..7133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 247,
        column: 28,
        span: 7133..7134,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 29,
        span: 7134..7135,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 247,
        column: 30,
        span: 7135..7136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 247,
        column: 31,
        span: 7136..7137,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 32,
        span: 7137..7138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 247,
        column: 33,
        span: 7138..7139,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 34,
        span: 7139..7140,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 247,
        column: 35,
        span: 7140..7141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 247,
        column: 36,
        span: 7141..7142,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 37,
        span: 7142..7143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 247,
        column: 38,
        span: 7143..7144,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 39,
        span: 7144..7145,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 247,
        column: 40,
        span: 7145..7146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 247,
        column: 41,
        span: 7146..7147,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 42,
        span: 7147..7148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 247,
        column: 43,
        span: 7148..7149,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 44,
        span: 7149..7150,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 247,
        column: 45,
        span: 7150..7151,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 46,
        span: 7151..7152,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 247,
        column: 49,
        span: 7151..7155,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 247,
        column: 50,
        span: 7155..7156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 247,
        column: 51,
        span: 7156..7157,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 52,
        span: 7157..7158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 247,
        column: 53,
        span: 7158..7159,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 54,
        span: 7159..7160,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 55,
        span: 7160..7161,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 248,
        column: 0,
        span: 7162..7165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 250,
        column: 7,
        span: 7167..7173,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
        column: 8,
        span: 7173..7174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 250,
        column: 13,
        span: 7174..7179,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
        column: 14,
        span: 7179..7180,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 250,
        column: 15,
        span: 7179..7181,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
        column: 16,
        span: 7181..7182,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 250,
        column: 19,
        span: 7183..7185,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 250,
        column: 21,
        span: 7185..7187,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
        column: 22,
        span: 7187..7188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 251,
        column: 7,
        span: 7189..7195,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 251,
        column: 8,
        span: 7195..7196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 251,
        column: 13,
        span: 7196..7201,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 251,
        column: 14,
        span: 7201..7202,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        line: 251,
        column: 19,
        span: 7202..7207,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 251,
        column: 20,
        span: 7207..7208,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 251,
        column: 23,
        span: 7209..7211,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 251,
        column: 25,
        span: 7211..7213,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 251,
        column: 26,
        span: 7213..7214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 252,
        column: 7,
        span: 7215..7221,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 8,
        span: 7221..7222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 252,
        column: 13,
        span: 7222..7227,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 14,
        span: 7227..7228,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'32'",
        ),
        line: 252,
        column: 18,
        span: 7228..7232,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 19,
        span: 7232..7233,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 252,
        column: 22,
        span: 7234..7236,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 252,
        column: 24,
        span: 7236..7238,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 25,
        span: 7238..7239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 253,
        column: 7,
        span: 7240..7246,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 8,
        span: 7246..7247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 253,
        column: 13,
        span: 7247..7252,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 14,
        span: 7252..7253,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 253,
        column: 15,
        span: 7253..7254,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 253,
        column: 16,
        span: 7254..7255,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 17,
        span: 7255..7256,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 253,
        column: 20,
        span: 7257..7259,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 253,
        column: 22,
        span: 7259..7261,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 23,
        span: 7261..7262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 254,
        column: 7,
        span: 7263..7269,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 8,
        span: 7269..7270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 254,
        column: 13,
        span: 7270..7275,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 14,
        span: 7275..7276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 254,
        column: 19,
        span: 7276..7281,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 20,
        span: 7281..7282,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 254,
        column: 23,
        span: 7283..7285,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 254,
        column: 25,
        span: 7285..7287,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 26,
        span: 7287..7288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 255,
        column: 7,
        span: 7289..7295,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 255,
        column: 8,
        span: 7295..7296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 255,
        column: 13,
        span: 7296..7301,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 255,
        column: 14,
        span: 7301..7302,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 255,
        column: 22,
        span: 7302..7310,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 255,
        column: 24,
        span: 7311..7312,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 255,
        column: 25,
        span: 7312..7313,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 255,
        column: 29,
        span: 7314..7317,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 255,
        column: 30,
        span: 7317..7318,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 255,
        column: 33,
        span: 7319..7321,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 255,
        column: 35,
        span: 7321..7323,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 255,
        column: 36,
        span: 7323..7324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 256,
        column: 7,
        span: 7325..7331,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
        column: 8,
        span: 7331..7332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 256,
        column: 13,
        span: 7332..7337,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
        column: 14,
        span: 7337..7338,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 256,
        column: 17,
        span: 7338..7341,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
        column: 18,
        span: 7341..7342,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 256,
        column: 21,
        span: 7343..7345,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 256,
        column: 23,
        span: 7345..7347,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
        column: 24,
        span: 7347..7348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 257,
        column: 7,
        span: 7349..7355,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
        column: 8,
        span: 7355..7356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 257,
        column: 13,
        span: 7356..7361,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
        column: 14,
        span: 7361..7362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 257,
        column: 16,
        span: 7362..7364,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 257,
        column: 17,
        span: 7364..7365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        line: 257,
        column: 22,
        span: 7365..7370,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
        column: 23,
        span: 7370..7371,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 257,
        column: 26,
        span: 7372..7374,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 257,
        column: 28,
        span: 7374..7376,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
        column: 29,
        span: 7376..7377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 258,
        column: 7,
        span: 7378..7384,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
        column: 8,
        span: 7384..7385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 258,
        column: 13,
        span: 7385..7390,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
        column: 14,
        span: 7390..7391,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 258,
        column: 17,
        span: 7391..7394,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 258,
        column: 18,
        span: 7394..7395,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
        column: 21,
        span: 7395..7398,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
        column: 22,
        span: 7398..7399,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 258,
        column: 25,
        span: 7400..7402,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
        column: 29,
        span: 7402..7406,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
        column: 30,
        span: 7406..7407,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 263,
        column: 9,
        span: 7432..7440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        line: 263,
        column: 12,
        span: 7441..7443,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 263,
        column: 14,
        span: 7444..7445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 263,
        column: 15,
        span: 7445..7446,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 263,
        column: 16,
        span: 7446..7447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 263,
        column: 18,
        span: 7448..7449,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 263,
        column: 19,
        span: 7449..7450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 263,
        column: 21,
        span: 7451..7452,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 263,
        column: 22,
        span: 7452..7453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 264,
        column: 4,
        span: 7456..7457,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 264,
        column: 6,
        span: 7458..7459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 264,
        column: 8,
        span: 7460..7461,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 264,
        column: 11,
        span: 7462..7464,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 264,
        column: 0,
        span: 7464..7466,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 265,
        column: 9,
        span: 7469..7475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 265,
        column: 11,
        span: 7476..7477,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 265,
        column: 12,
        span: 7477..7478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 265,
        column: 17,
        span: 7478..7483,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
        column: 18,
        span: 7483..7484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 265,
        column: 24,
        span: 7484..7490,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 265,
        column: 25,
        span: 7490..7491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 265,
        column: 31,
        span: 7491..7497,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
        column: 32,
        span: 7497..7498,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%s %d; return 1\"",
        ),
        line: 265,
        column: 49,
        span: 7498..7515,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 265,
        column: 50,
        span: 7515..7516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 265,
        column: 52,
        span: 7517..7518,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 265,
        column: 53,
        span: 7518..7519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 265,
        column: 55,
        span: 7520..7521,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
        column: 56,
        span: 7521..7522,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 265,
        column: 57,
        span: 7522..7523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 265,
        column: 59,
        span: 7524..7525,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
        column: 60,
        span: 7525..7526,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 266,
        column: 0,
        span: 7527..7530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 268,
        column: 7,
        span: 7532..7538,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
        column: 8,
        span: 7538..7539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        line: 268,
        column: 10,
        span: 7539..7541,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
        column: 11,
        span: 7541..7542,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tostring\"",
        ),
        line: 268,
        column: 21,
        span: 7542..7552,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 268,
        column: 22,
        span: 7552..7553,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 268,
        column: 24,
        span: 7554..7555,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 268,
        column: 25,
        span: 7555..7556,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
        column: 26,
        span: 7556..7557,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 268,
        column: 29,
        span: 7558..7560,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 268,
        column: 33,
        span: 7561..7564,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
        column: 34,
        span: 7564..7565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 269,
        column: 7,
        span: 7566..7572,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
        column: 8,
        span: 7572..7573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        line: 269,
        column: 10,
        span: 7573..7575,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
        column: 11,
        span: 7575..7576,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tostring\"",
        ),
        line: 269,
        column: 21,
        span: 7576..7586,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
        column: 22,
        span: 7586..7587,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 269,
        column: 28,
        span: 7588..7593,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
        column: 29,
        span: 7593..7594,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 269,
        column: 32,
        span: 7595..7597,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 269,
        column: 38,
        span: 7598..7603,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
        column: 39,
        span: 7603..7604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 270,
        column: 7,
        span: 7605..7611,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 270,
        column: 8,
        span: 7611..7612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        line: 270,
        column: 10,
        span: 7612..7614,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 270,
        column: 11,
        span: 7614..7615,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tostring\"",
        ),
        line: 270,
        column: 21,
        span: 7615..7625,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 270,
        column: 22,
        span: 7625..7626,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 270,
        column: 25,
        span: 7626..7629,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 270,
        column: 26,
        span: 7629..7630,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 270,
        column: 29,
        span: 7631..7633,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"12\"",
        ),
        line: 270,
        column: 34,
        span: 7634..7638,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 270,
        column: 35,
        span: 7638..7639,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 271,
        column: 7,
        span: 7640..7646,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 271,
        column: 8,
        span: 7646..7647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        line: 271,
        column: 10,
        span: 7647..7649,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 271,
        column: 11,
        span: 7649..7650,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tostring\"",
        ),
        line: 271,
        column: 21,
        span: 7650..7660,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 271,
        column: 22,
        span: 7660..7661,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 271,
        column: 25,
        span: 7661..7664,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 271,
        column: 26,
        span: 7664..7665,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 271,
        column: 28,
        span: 7665..7667,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 271,
        column: 29,
        span: 7667..7668,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 271,
        column: 32,
        span: 7669..7671,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 271,
        column: 36,
        span: 7672..7675,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 271,
        column: 37,
        span: 7675..7676,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 272,
        column: 7,
        span: 7677..7683,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 272,
        column: 8,
        span: 7683..7684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        line: 272,
        column: 10,
        span: 7684..7686,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 272,
        column: 11,
        span: 7686..7687,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize\"",
        ),
        line: 272,
        column: 20,
        span: 7687..7696,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 272,
        column: 21,
        span: 7696..7697,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 272,
        column: 23,
        span: 7698..7699,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 272,
        column: 24,
        span: 7699..7700,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 272,
        column: 25,
        span: 7700..7701,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 272,
        column: 28,
        span: 7702..7704,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 272,
        column: 30,
        span: 7704..7706,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 272,
        column: 31,
        span: 7706..7707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 273,
        column: 7,
        span: 7708..7714,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 273,
        column: 8,
        span: 7714..7715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        line: 273,
        column: 10,
        span: 7715..7717,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 273,
        column: 11,
        span: 7717..7718,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize\"",
        ),
        line: 273,
        column: 20,
        span: 7718..7727,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 273,
        column: 21,
        span: 7727..7728,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 273,
        column: 23,
        span: 7729..7730,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 273,
        column: 24,
        span: 7729..7731,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 273,
        column: 25,
        span: 7731..7732,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 273,
        column: 26,
        span: 7731..7733,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 273,
        column: 27,
        span: 7733..7734,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 273,
        column: 28,
        span: 7733..7735,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 273,
        column: 29,
        span: 7735..7736,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 273,
        column: 30,
        span: 7736..7737,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 273,
        column: 33,
        span: 7738..7740,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 273,
        column: 35,
        span: 7740..7742,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 273,
        column: 36,
        span: 7742..7743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 274,
        column: 7,
        span: 7744..7750,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
        column: 8,
        span: 7750..7751,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        line: 274,
        column: 10,
        span: 7751..7753,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
        column: 11,
        span: 7753..7754,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize\"",
        ),
        line: 274,
        column: 20,
        span: 7754..7763,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 274,
        column: 21,
        span: 7763..7764,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\\0\\0a\"",
        ),
        line: 274,
        column: 32,
        span: 7765..7775,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
        column: 33,
        span: 7775..7776,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 274,
        column: 36,
        span: 7777..7779,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 274,
        column: 38,
        span: 7779..7781,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
        column: 39,
        span: 7781..7782,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 275,
        column: 7,
        span: 7783..7789,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
        column: 8,
        span: 7789..7790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        line: 275,
        column: 10,
        span: 7790..7792,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
        column: 11,
        span: 7792..7793,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize\"",
        ),
        line: 275,
        column: 20,
        span: 7793..7802,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 275,
        column: 21,
        span: 7802..7803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 275,
        column: 23,
        span: 7804..7805,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 275,
        column: 24,
        span: 7805..7806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        line: 275,
        column: 35,
        span: 7806..7817,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
        column: 36,
        span: 7817..7818,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 275,
        column: 37,
        span: 7817..7819,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
        column: 38,
        span: 7819..7820,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
        column: 39,
        span: 7820..7821,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 275,
        column: 42,
        span: 7822..7824,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 275,
        column: 44,
        span: 7824..7826,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
        column: 45,
        span: 7826..7827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 276,
        column: 7,
        span: 7828..7834,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 276,
        column: 8,
        span: 7834..7835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        line: 276,
        column: 10,
        span: 7835..7837,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 276,
        column: 11,
        span: 7837..7838,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize\"",
        ),
        line: 276,
        column: 20,
        span: 7838..7847,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 276,
        column: 21,
        span: 7847..7848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 276,
        column: 23,
        span: 7849..7850,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 276,
        column: 24,
        span: 7850..7851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        line: 276,
        column: 35,
        span: 7851..7862,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 276,
        column: 36,
        span: 7862..7863,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        line: 276,
        column: 39,
        span: 7862..7866,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 276,
        column: 40,
        span: 7866..7867,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 276,
        column: 41,
        span: 7867..7868,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 276,
        column: 44,
        span: 7869..7871,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        line: 276,
        column: 48,
        span: 7871..7875,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 276,
        column: 49,
        span: 7875..7876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 277,
        column: 7,
        span: 7877..7883,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 8,
        span: 7883..7884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        line: 277,
        column: 10,
        span: 7884..7886,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 11,
        span: 7886..7887,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize\"",
        ),
        line: 277,
        column: 20,
        span: 7887..7896,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
        column: 21,
        span: 7896..7897,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "124",
                    after_decimal: "",
                },
            ),
        ),
        line: 277,
        column: 25,
        span: 7897..7901,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 26,
        span: 7901..7902,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 277,
        column: 29,
        span: 7903..7905,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 277,
        column: 31,
        span: 7905..7907,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 32,
        span: 7907..7908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 278,
        column: 7,
        span: 7909..7915,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 278,
        column: 8,
        span: 7915..7916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        line: 278,
        column: 10,
        span: 7916..7918,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 278,
        column: 11,
        span: 7918..7919,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize\"",
        ),
        line: 278,
        column: 20,
        span: 7919..7928,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 278,
        column: 21,
        span: 7928..7929,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 278,
        column: 26,
        span: 7930..7934,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
        column: 27,
        span: 7934..7935,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 278,
        column: 30,
        span: 7936..7938,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 278,
        column: 32,
        span: 7938..7940,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
        column: 33,
        span: 7940..7941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 279,
        column: 7,
        span: 7942..7948,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 279,
        column: 8,
        span: 7948..7949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        line: 279,
        column: 10,
        span: 7949..7951,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 279,
        column: 11,
        span: 7951..7952,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tonumber\"",
        ),
        line: 279,
        column: 21,
        span: 7952..7962,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 279,
        column: 22,
        span: 7962..7963,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 279,
        column: 24,
        span: 7964..7965,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 279,
        column: 25,
        span: 7965..7966,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 279,
        column: 26,
        span: 7966..7967,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 279,
        column: 29,
        span: 7968..7970,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 279,
        column: 31,
        span: 7970..7972,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 279,
        column: 32,
        span: 7972..7973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 280,
        column: 7,
        span: 7974..7980,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 280,
        column: 8,
        span: 7980..7981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        line: 280,
        column: 10,
        span: 7981..7983,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 280,
        column: 11,
        span: 7983..7984,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tonumber\"",
        ),
        line: 280,
        column: 21,
        span: 7984..7994,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 280,
        column: 22,
        span: 7994..7995,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"12\"",
        ),
        line: 280,
        column: 27,
        span: 7996..8000,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 280,
        column: 28,
        span: 8000..8001,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 280,
        column: 31,
        span: 8002..8004,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 280,
        column: 34,
        span: 8004..8007,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 280,
        column: 35,
        span: 8007..8008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 281,
        column: 7,
        span: 8009..8015,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 281,
        column: 8,
        span: 8015..8016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        line: 281,
        column: 10,
        span: 8016..8018,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 281,
        column: 11,
        span: 8018..8019,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tonumber\"",
        ),
        line: 281,
        column: 21,
        span: 8019..8029,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 281,
        column: 22,
        span: 8029..8030,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"s2\"",
        ),
        line: 281,
        column: 27,
        span: 8031..8035,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 281,
        column: 28,
        span: 8035..8036,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 281,
        column: 31,
        span: 8037..8039,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 281,
        column: 33,
        span: 8039..8041,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 281,
        column: 34,
        span: 8041..8042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 282,
        column: 7,
        span: 8043..8049,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 282,
        column: 8,
        span: 8049..8050,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        line: 282,
        column: 10,
        span: 8050..8052,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 282,
        column: 11,
        span: 8052..8053,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tonumber\"",
        ),
        line: 282,
        column: 21,
        span: 8053..8063,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 282,
        column: 22,
        span: 8063..8064,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 282,
        column: 24,
        span: 8064..8066,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 282,
        column: 25,
        span: 8066..8067,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 282,
        column: 28,
        span: 8067..8070,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 282,
        column: 29,
        span: 8070..8071,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 282,
        column: 32,
        span: 8072..8074,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 282,
        column: 34,
        span: 8074..8076,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 282,
        column: 35,
        span: 8076..8077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 283,
        column: 7,
        span: 8078..8084,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 283,
        column: 8,
        span: 8084..8085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        line: 283,
        column: 10,
        span: 8085..8087,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 283,
        column: 11,
        span: 8087..8088,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"topointer\"",
        ),
        line: 283,
        column: 22,
        span: 8088..8099,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 283,
        column: 23,
        span: 8099..8100,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 283,
        column: 26,
        span: 8100..8103,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 283,
        column: 27,
        span: 8103..8104,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 283,
        column: 30,
        span: 8105..8107,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 283,
        column: 32,
        span: 8107..8109,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 283,
        column: 33,
        span: 8109..8110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 284,
        column: 7,
        span: 8111..8117,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 284,
        column: 8,
        span: 8117..8118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        line: 284,
        column: 10,
        span: 8118..8120,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 284,
        column: 11,
        span: 8120..8121,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"topointer\"",
        ),
        line: 284,
        column: 22,
        span: 8121..8132,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 284,
        column: 23,
        span: 8132..8133,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 284,
        column: 28,
        span: 8134..8138,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 284,
        column: 29,
        span: 8138..8139,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 284,
        column: 32,
        span: 8140..8142,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 284,
        column: 34,
        span: 8142..8144,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 284,
        column: 35,
        span: 8144..8145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 285,
        column: 7,
        span: 8146..8152,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 285,
        column: 8,
        span: 8152..8153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        line: 285,
        column: 10,
        span: 8153..8155,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 285,
        column: 11,
        span: 8155..8156,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"topointer\"",
        ),
        line: 285,
        column: 22,
        span: 8156..8167,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 285,
        column: 23,
        span: 8167..8168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 285,
        column: 25,
        span: 8169..8170,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 285,
        column: 26,
        span: 8170..8171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pushuserdata",
        ),
        line: 285,
        column: 38,
        span: 8171..8183,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 285,
        column: 39,
        span: 8183..8184,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 285,
        column: 41,
        span: 8183..8186,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 285,
        column: 42,
        span: 8186..8187,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 285,
        column: 43,
        span: 8187..8188,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 285,
        column: 46,
        span: 8189..8191,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 285,
        column: 49,
        span: 8191..8194,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 285,
        column: 50,
        span: 8194..8195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 286,
        column: 7,
        span: 8196..8202,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 286,
        column: 8,
        span: 8202..8203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        line: 286,
        column: 10,
        span: 8203..8205,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 286,
        column: 11,
        span: 8205..8206,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"topointer\"",
        ),
        line: 286,
        column: 22,
        span: 8206..8217,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 286,
        column: 23,
        span: 8217..8218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 286,
        column: 26,
        span: 8219..8221,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 286,
        column: 27,
        span: 8221..8222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 286,
        column: 31,
        span: 8222..8226,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 286,
        column: 32,
        span: 8226..8227,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 286,
        column: 35,
        span: 8228..8230,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 286,
        column: 37,
        span: 8230..8232,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 286,
        column: 38,
        span: 8232..8233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 287,
        column: 7,
        span: 8234..8240,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 287,
        column: 8,
        span: 8240..8241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        line: 287,
        column: 10,
        span: 8241..8243,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 287,
        column: 11,
        span: 8243..8244,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"func2num\"",
        ),
        line: 287,
        column: 21,
        span: 8244..8254,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 287,
        column: 22,
        span: 8254..8255,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 287,
        column: 25,
        span: 8255..8258,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 287,
        column: 26,
        span: 8258..8259,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 287,
        column: 29,
        span: 8260..8262,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 287,
        column: 31,
        span: 8262..8264,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 287,
        column: 32,
        span: 8264..8265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 288,
        column: 7,
        span: 8266..8272,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 288,
        column: 8,
        span: 8272..8273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        line: 288,
        column: 10,
        span: 8273..8275,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 288,
        column: 11,
        span: 8275..8276,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"func2num\"",
        ),
        line: 288,
        column: 21,
        span: 8276..8286,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 288,
        column: 22,
        span: 8286..8287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 288,
        column: 24,
        span: 8288..8289,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 288,
        column: 25,
        span: 8289..8290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pushuserdata",
        ),
        line: 288,
        column: 37,
        span: 8290..8302,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 288,
        column: 38,
        span: 8302..8303,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 288,
        column: 40,
        span: 8302..8305,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 288,
        column: 41,
        span: 8305..8306,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 288,
        column: 42,
        span: 8306..8307,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 288,
        column: 45,
        span: 8308..8310,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 288,
        column: 47,
        span: 8310..8312,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 288,
        column: 48,
        span: 8312..8313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 289,
        column: 7,
        span: 8314..8320,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 289,
        column: 8,
        span: 8320..8321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        line: 289,
        column: 10,
        span: 8321..8323,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 289,
        column: 11,
        span: 8323..8324,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"func2num\"",
        ),
        line: 289,
        column: 21,
        span: 8324..8334,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 289,
        column: 22,
        span: 8334..8335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 289,
        column: 25,
        span: 8336..8338,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 289,
        column: 26,
        span: 8338..8339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 289,
        column: 30,
        span: 8339..8343,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 289,
        column: 31,
        span: 8343..8344,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 289,
        column: 34,
        span: 8345..8347,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 289,
        column: 36,
        span: 8347..8349,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 289,
        column: 37,
        span: 8349..8350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 290,
        column: 2,
        span: 8351..8352,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 290,
        column: 4,
        span: 8353..8354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        line: 290,
        column: 7,
        span: 8355..8357,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 290,
        column: 8,
        span: 8357..8358,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tocfunction\"",
        ),
        line: 290,
        column: 21,
        span: 8358..8371,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 290,
        column: 22,
        span: 8371..8372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 290,
        column: 27,
        span: 8373..8377,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 290,
        column: 28,
        span: 8377..8378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deg",
        ),
        line: 290,
        column: 31,
        span: 8378..8381,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 290,
        column: 32,
        span: 8381..8382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 291,
        column: 7,
        span: 8383..8389,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 291,
        column: 8,
        span: 8389..8390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 291,
        column: 9,
        span: 8390..8391,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 291,
        column: 10,
        span: 8391..8392,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 291,
        column: 11,
        span: 8391..8393,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 291,
        column: 12,
        span: 8393..8394,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 291,
        column: 15,
        span: 8395..8397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 291,
        column: 20,
        span: 8398..8402,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 291,
        column: 21,
        span: 8402..8403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deg",
        ),
        line: 291,
        column: 24,
        span: 8403..8406,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 291,
        column: 25,
        span: 8406..8407,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 291,
        column: 26,
        span: 8406..8408,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 291,
        column: 27,
        span: 8408..8409,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 291,
        column: 31,
        span: 8410..8413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 291,
        column: 33,
        span: 8414..8415,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 291,
        column: 36,
        span: 8416..8418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 291,
        column: 41,
        span: 8419..8423,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 291,
        column: 42,
        span: 8423..8424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deg",
        ),
        line: 291,
        column: 45,
        span: 8424..8427,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 291,
        column: 46,
        span: 8427..8428,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 296,
        column: 0,
        span: 8456..8458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 297,
        column: 17,
        span: 8461..8475,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
        column: 18,
        span: 8475..8476,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        line: 297,
        column: 24,
        span: 8476..8482,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
        column: 25,
        span: 8482..8483,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 298,
        column: 8,
        span: 8486..8491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 298,
        column: 10,
        span: 8492..8493,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 298,
        column: 11,
        span: 8493..8494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 298,
        column: 15,
        span: 8495..8498,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 298,
        column: 17,
        span: 8499..8500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 298,
        column: 23,
        span: 8501..8506,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 24,
        span: 8506..8507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 298,
        column: 25,
        span: 8507..8508,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 298,
        column: 26,
        span: 8508..8509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 298,
        column: 31,
        span: 8509..8514,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 298,
        column: 32,
        span: 8514..8515,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"checkstack 1000023 XXXX\"",
        ),
        line: 298,
        column: 58,
        span: 8516..8541,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 59,
        span: 8541..8542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 299,
        column: 9,
        span: 8559..8565,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
        column: 10,
        span: 8565..8566,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 299,
        column: 13,
        span: 8566..8569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 299,
        column: 15,
        span: 8570..8571,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 299,
        column: 19,
        span: 8572..8575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 299,
        column: 26,
        span: 8576..8582,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 299,
        column: 27,
        span: 8582..8583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 299,
        column: 31,
        span: 8583..8587,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
        column: 32,
        span: 8587..8588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 299,
        column: 35,
        span: 8588..8591,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 299,
        column: 36,
        span: 8591..8592,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XXXX\"",
        ),
        line: 299,
        column: 43,
        span: 8593..8599,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
        column: 44,
        span: 8599..8600,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
        column: 45,
        span: 8600..8601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 300,
        column: 4,
        span: 8604..8605,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 300,
        column: 6,
        span: 8606..8607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 300,
        column: 13,
        span: 8608..8614,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 300,
        column: 14,
        span: 8614..8615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 300,
        column: 17,
        span: 8615..8618,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 300,
        column: 18,
        span: 8618..8619,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnil;checkstack 1 XX;\"",
        ),
        line: 300,
        column: 44,
        span: 8619..8645,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 300,
        column: 45,
        span: 8645..8646,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000000",
                    after_decimal: "",
                },
            ),
        ),
        line: 300,
        column: 53,
        span: 8646..8654,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 300,
        column: 54,
        span: 8654..8655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 301,
        column: 4,
        span: 8658..8659,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 301,
        column: 5,
        span: 8659..8660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 301,
        column: 9,
        span: 8661..8664,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 301,
        column: 11,
        span: 8665..8666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 301,
        column: 17,
        span: 8667..8672,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 301,
        column: 18,
        span: 8672..8673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 301,
        column: 19,
        span: 8673..8674,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 301,
        column: 20,
        span: 8674..8675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 301,
        column: 25,
        span: 8675..8680,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 301,
        column: 26,
        span: 8680..8681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 301,
        column: 28,
        span: 8682..8683,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 301,
        column: 29,
        span: 8683..8684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 302,
        column: 9,
        span: 8687..8693,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 302,
        column: 10,
        span: 8693..8694,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 302,
        column: 13,
        span: 8694..8697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 302,
        column: 15,
        span: 8698..8699,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 302,
        column: 19,
        span: 8700..8703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 302,
        column: 26,
        span: 8704..8710,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 302,
        column: 27,
        span: 8710..8711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 302,
        column: 31,
        span: 8711..8715,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 302,
        column: 32,
        span: 8715..8716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 302,
        column: 35,
        span: 8716..8719,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 302,
        column: 36,
        span: 8719..8720,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XX\"",
        ),
        line: 302,
        column: 41,
        span: 8721..8725,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 302,
        column: 42,
        span: 8725..8726,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 302,
        column: 43,
        span: 8726..8727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 303,
        column: 17,
        span: 8730..8744,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 303,
        column: 18,
        span: 8744..8745,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"restart\"",
        ),
        line: 303,
        column: 27,
        span: 8745..8754,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 303,
        column: 28,
        span: 8754..8755,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 304,
        column: 0,
        span: 8756..8759,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 306,
        column: 6,
        span: 8761..8766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 306,
        column: 11,
        span: 8767..8771,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 306,
        column: 13,
        span: 8772..8773,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 306,
        column: 15,
        span: 8774..8775,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"checkstack 30000 msg\"",
        ),
        line: 306,
        column: 37,
        span: 8775..8797,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 306,
        column: 38,
        span: 8797..8798,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"newtable\"",
        ),
        line: 306,
        column: 49,
        span: 8799..8809,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 306,
        column: 50,
        span: 8809..8810,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 307,
        column: 4,
        span: 8811..8814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 307,
        column: 6,
        span: 8815..8816,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 307,
        column: 8,
        span: 8817..8818,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 307,
        column: 10,
        span: 8818..8820,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 307,
        column: 11,
        span: 8820..8821,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12000",
                    after_decimal: "",
                },
            ),
        ),
        line: 307,
        column: 16,
        span: 8820..8826,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 307,
        column: 0,
        span: 8827..8829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 308,
        column: 7,
        span: 8832..8836,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 308,
        column: 8,
        span: 8836..8837,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 308,
        column: 9,
        span: 8837..8838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 308,
        column: 13,
        span: 8838..8842,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 308,
        column: 15,
        span: 8843..8844,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 308,
        column: 17,
        span: 8844..8846,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 308,
        column: 18,
        span: 8846..8847,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 308,
        column: 20,
        span: 8848..8849,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum \"",
        ),
        line: 308,
        column: 31,
        span: 8850..8860,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 308,
        column: 34,
        span: 8861..8863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 308,
        column: 0,
        span: 8864..8865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 309,
        column: 7,
        span: 8868..8872,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 309,
        column: 8,
        span: 8872..8873,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 309,
        column: 9,
        span: 8873..8874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 309,
        column: 13,
        span: 8874..8878,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 309,
        column: 15,
        span: 8879..8880,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 309,
        column: 17,
        span: 8880..8882,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 309,
        column: 18,
        span: 8882..8883,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 309,
        column: 20,
        span: 8884..8885,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum \"",
        ),
        line: 309,
        column: 31,
        span: 8886..8896,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 309,
        column: 34,
        span: 8897..8899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 309,
        column: 36,
        span: 8900..8901,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 309,
        column: 38,
        span: 8902..8903,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 309,
        column: 0,
        span: 8903..8906,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 310,
        column: 0,
        span: 8907..8910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 312,
        column: 5,
        span: 8912..8916,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 312,
        column: 6,
        span: 8916..8917,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 312,
        column: 7,
        span: 8917..8918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 312,
        column: 11,
        span: 8918..8922,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 312,
        column: 13,
        span: 8923..8924,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 312,
        column: 15,
        span: 8924..8926,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 312,
        column: 16,
        span: 8926..8927,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 312,
        column: 18,
        span: 8928..8929,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rawgeti R 2\"",
        ),
        line: 312,
        column: 32,
        span: 8930..8943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 313,
        column: 5,
        span: 8978..8982,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 313,
        column: 6,
        span: 8982..8983,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 313,
        column: 7,
        span: 8983..8984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 313,
        column: 11,
        span: 8984..8988,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 313,
        column: 13,
        span: 8989..8990,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 313,
        column: 15,
        span: 8990..8992,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 313,
        column: 16,
        span: 8992..8993,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 313,
        column: 18,
        span: 8994..8995,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"insert \"",
        ),
        line: 313,
        column: 28,
        span: 8996..9005,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 313,
        column: 31,
        span: 9006..9008,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 313,
        column: 33,
        span: 9009..9010,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 313,
        column: 34,
        span: 9010..9011,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 313,
        column: 35,
        span: 9010..9012,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 313,
        column: 36,
        span: 9012..9013,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12000",
                    after_decimal: "",
                },
            ),
        ),
        line: 313,
        column: 41,
        span: 9012..9018,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 313,
        column: 43,
        span: 9019..9020,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 313,
        column: 45,
        span: 9020..9022,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 313,
        column: 46,
        span: 9022..9023,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 315,
        column: 4,
        span: 9025..9028,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 315,
        column: 6,
        span: 9029..9030,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 315,
        column: 8,
        span: 9031..9032,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 315,
        column: 10,
        span: 9032..9034,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 315,
        column: 11,
        span: 9034..9035,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12000",
                    after_decimal: "",
                },
            ),
        ),
        line: 315,
        column: 16,
        span: 9034..9040,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 315,
        column: 0,
        span: 9041..9043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 316,
        column: 7,
        span: 9046..9050,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 316,
        column: 8,
        span: 9050..9051,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 316,
        column: 9,
        span: 9051..9052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 316,
        column: 13,
        span: 9052..9056,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 316,
        column: 15,
        span: 9057..9058,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 316,
        column: 17,
        span: 9058..9060,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 316,
        column: 18,
        span: 9060..9061,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 316,
        column: 20,
        span: 9062..9063,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settable \"",
        ),
        line: 316,
        column: 32,
        span: 9064..9075,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 316,
        column: 35,
        span: 9076..9078,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 316,
        column: 37,
        span: 9079..9080,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 316,
        column: 38,
        span: 9080..9081,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 316,
        column: 39,
        span: 9080..9082,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 316,
        column: 40,
        span: 9082..9083,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 316,
        column: 41,
        span: 9083..9084,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12000",
                    after_decimal: "",
                },
            ),
        ),
        line: 316,
        column: 46,
        span: 9083..9089,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 316,
        column: 48,
        span: 9090..9091,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 316,
        column: 50,
        span: 9092..9093,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 316,
        column: 52,
        span: 9094..9095,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 316,
        column: 54,
        span: 9095..9097,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 316,
        column: 55,
        span: 9097..9098,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 316,
        column: 57,
        span: 9099..9100,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 316,
        column: 59,
        span: 9100..9102,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 316,
        column: 60,
        span: 9102..9103,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 317,
        column: 0,
        span: 9104..9107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 319,
        column: 5,
        span: 9109..9113,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 319,
        column: 6,
        span: 9113..9114,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 319,
        column: 7,
        span: 9114..9115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 319,
        column: 11,
        span: 9115..9119,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 319,
        column: 13,
        span: 9120..9121,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 319,
        column: 15,
        span: 9121..9123,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 319,
        column: 16,
        span: 9123..9124,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 319,
        column: 18,
        span: 9125..9126,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 2\"",
        ),
        line: 319,
        column: 29,
        span: 9127..9137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 321,
        column: 5,
        span: 9139..9143,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 321,
        column: 7,
        span: 9144..9145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 321,
        column: 13,
        span: 9146..9151,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 321,
        column: 14,
        span: 9151..9152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 321,
        column: 20,
        span: 9152..9158,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 321,
        column: 21,
        span: 9158..9159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 321,
        column: 25,
        span: 9159..9163,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 321,
        column: 26,
        span: 9163..9164,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        line: 321,
        column: 30,
        span: 9165..9168,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 321,
        column: 31,
        span: 9168..9169,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 322,
        column: 6,
        span: 9170..9175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 322,
        column: 8,
        span: 9176..9177,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 322,
        column: 9,
        span: 9177..9178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 322,
        column: 11,
        span: 9179..9180,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 322,
        column: 13,
        span: 9181..9182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 322,
        column: 15,
        span: 9183..9184,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 322,
        column: 16,
        span: 9184..9185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 322,
        column: 21,
        span: 9185..9190,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 322,
        column: 22,
        span: 9190..9191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 322,
        column: 26,
        span: 9191..9195,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 322,
        column: 27,
        span: 9195..9196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 323,
        column: 7,
        span: 9197..9203,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 323,
        column: 8,
        span: 9203..9204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 323,
        column: 9,
        span: 9204..9205,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 323,
        column: 12,
        span: 9206..9208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 323,
        column: 15,
        span: 9209..9211,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 323,
        column: 16,
        span: 9211..9212,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 324,
        column: 4,
        span: 9213..9216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 324,
        column: 6,
        span: 9217..9218,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 324,
        column: 8,
        span: 9219..9220,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 324,
        column: 10,
        span: 9220..9222,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 324,
        column: 11,
        span: 9222..9223,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12000",
                    after_decimal: "",
                },
            ),
        ),
        line: 324,
        column: 16,
        span: 9222..9228,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 324,
        column: 19,
        span: 9229..9231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 324,
        column: 26,
        span: 9232..9238,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 324,
        column: 27,
        span: 9238..9239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 324,
        column: 28,
        span: 9239..9240,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 324,
        column: 29,
        span: 9240..9241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 324,
        column: 30,
        span: 9241..9242,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 324,
        column: 31,
        span: 9242..9243,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 324,
        column: 34,
        span: 9244..9246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 324,
        column: 36,
        span: 9247..9248,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 324,
        column: 37,
        span: 9248..9249,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 324,
        column: 39,
        span: 9248..9251,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 324,
        column: 40,
        span: 9251..9252,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 324,
        column: 41,
        span: 9252..9253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 324,
        column: 43,
        span: 9254..9255,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 324,
        column: 44,
        span: 9255..9256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 324,
        column: 45,
        span: 9256..9257,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 324,
        column: 46,
        span: 9257..9258,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 324,
        column: 48,
        span: 9259..9260,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 324,
        column: 52,
        span: 9261..9264,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 324,
        column: 0,
        span: 9265..9268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 325,
        column: 7,
        span: 9269..9275,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 325,
        column: 8,
        span: 9275..9276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 325,
        column: 12,
        span: 9276..9280,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 325,
        column: 13,
        span: 9280..9281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 325,
        column: 14,
        span: 9281..9282,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 325,
        column: 15,
        span: 9282..9283,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 325,
        column: 18,
        span: 9284..9286,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 325,
        column: 22,
        span: 9287..9290,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 325,
        column: 23,
        span: 9290..9291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 326,
        column: 5,
        span: 9292..9296,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 326,
        column: 6,
        span: 9296..9297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 326,
        column: 8,
        span: 9298..9299,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 326,
        column: 9,
        span: 9299..9300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 326,
        column: 11,
        span: 9301..9302,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 326,
        column: 13,
        span: 9303..9304,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 326,
        column: 0,
        span: 9305..9308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 330,
        column: 2,
        span: 9329..9330,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 330,
        column: 4,
        span: 9331..9332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 330,
        column: 6,
        span: 9333..9334,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 330,
        column: 7,
        span: 9334..9335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 330,
        column: 12,
        span: 9335..9340,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 330,
        column: 13,
        span: 9340..9341,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  loadstring 2; pcall 0,1;\n  pushvalue 3; insert -2; pcall 1, 1;\n  pcall 0, 0;\n  return 1\n]]",
        ),
        line: 335,
        column: 3,
        span: 9341..9436,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 335,
        column: 4,
        span: 9436..9437,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x=150\"",
        ),
        line: 335,
        column: 12,
        span: 9438..9445,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 335,
        column: 13,
        span: 9445..9446,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 335,
        column: 22,
        span: 9447..9455,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 335,
        column: 24,
        span: 9456..9457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 335,
        column: 25,
        span: 9457..9458,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 335,
        column: 26,
        span: 9458..9459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 335,
        column: 33,
        span: 9460..9466,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 335,
        column: 34,
        span: 9466..9467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 335,
        column: 35,
        span: 9467..9468,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 335,
        column: 37,
        span: 9468..9470,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 335,
        column: 40,
        span: 9470..9473,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 335,
        column: 41,
        span: 9473..9474,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 335,
        column: 42,
        span: 9474..9475,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 335,
        column: 49,
        span: 9476..9482,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 335,
        column: 51,
        span: 9482..9484,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 335,
        column: 55,
        span: 9485..9488,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 335,
        column: 56,
        span: 9488..9489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 337,
        column: 7,
        span: 9491..9497,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 337,
        column: 8,
        span: 9497..9498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 337,
        column: 12,
        span: 9498..9502,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 337,
        column: 13,
        span: 9502..9503,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 337,
        column: 14,
        span: 9503..9504,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 337,
        column: 15,
        span: 9504..9505,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 337,
        column: 18,
        span: 9506..9508,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 337,
        column: 27,
        span: 9509..9517,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 337,
        column: 31,
        span: 9518..9521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 337,
        column: 33,
        span: 9522..9523,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 337,
        column: 36,
        span: 9524..9526,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "150",
                    after_decimal: "",
                },
            ),
        ),
        line: 337,
        column: 40,
        span: 9526..9530,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 337,
        column: 41,
        span: 9530..9531,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 339,
        column: 9,
        span: 9533..9541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check3",
        ),
        line: 339,
        column: 16,
        span: 9542..9548,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 339,
        column: 17,
        span: 9548..9549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 339,
        column: 18,
        span: 9549..9550,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 339,
        column: 19,
        span: 9550..9551,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 339,
        column: 23,
        span: 9552..9555,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 339,
        column: 24,
        span: 9555..9556,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 340,
        column: 8,
        span: 9559..9564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 340,
        column: 12,
        span: 9565..9568,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 340,
        column: 14,
        span: 9569..9570,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 340,
        column: 16,
        span: 9571..9572,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 340,
        column: 19,
        span: 9572..9575,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 340,
        column: 20,
        span: 9575..9576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 341,
        column: 9,
        span: 9579..9585,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 341,
        column: 10,
        span: 9585..9586,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 341,
        column: 11,
        span: 9586..9587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 341,
        column: 14,
        span: 9587..9590,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 341,
        column: 17,
        span: 9591..9593,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 341,
        column: 19,
        span: 9593..9595,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 341,
        column: 20,
        span: 9595..9596,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 342,
        column: 9,
        span: 9599..9605,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 10,
        span: 9605..9606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 342,
        column: 16,
        span: 9606..9612,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 342,
        column: 17,
        span: 9612..9613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 342,
        column: 21,
        span: 9613..9617,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 22,
        span: 9617..9618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 342,
        column: 25,
        span: 9618..9621,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 342,
        column: 26,
        span: 9621..9622,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 342,
        column: 27,
        span: 9621..9623,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 342,
        column: 28,
        span: 9623..9624,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 342,
        column: 29,
        span: 9624..9625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 342,
        column: 31,
        span: 9626..9627,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 32,
        span: 9627..9628,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 33,
        span: 9628..9629,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 343,
        column: 0,
        span: 9630..9633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check3",
        ),
        line: 344,
        column: 7,
        span: 9634..9640,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 344,
        column: 8,
        span: 9640..9641,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\":1:\"",
        ),
        line: 344,
        column: 13,
        span: 9641..9646,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 344,
        column: 14,
        span: 9646..9647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 344,
        column: 16,
        span: 9648..9649,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 344,
        column: 17,
        span: 9649..9650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 344,
        column: 22,
        span: 9650..9655,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 344,
        column: 23,
        span: 9655..9656,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"loadstring 2; gettop; return .\"",
        ),
        line: 344,
        column: 55,
        span: 9656..9688,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 344,
        column: 56,
        span: 9688..9689,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x=\"",
        ),
        line: 344,
        column: 61,
        span: 9690..9694,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 344,
        column: 62,
        span: 9694..9695,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 344,
        column: 63,
        span: 9695..9696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check3",
        ),
        line: 345,
        column: 7,
        span: 9697..9703,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 345,
        column: 8,
        span: 9703..9704,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cannot read\"",
        ),
        line: 345,
        column: 21,
        span: 9704..9717,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 345,
        column: 22,
        span: 9717..9718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 345,
        column: 24,
        span: 9719..9720,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 345,
        column: 25,
        span: 9720..9721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 345,
        column: 30,
        span: 9721..9726,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 345,
        column: 31,
        span: 9726..9727,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"loadfile 2; gettop; return .\"",
        ),
        line: 345,
        column: 61,
        span: 9727..9757,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 345,
        column: 62,
        span: 9757..9758,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        line: 345,
        column: 66,
        span: 9759..9762,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 345,
        column: 67,
        span: 9762..9763,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 345,
        column: 68,
        span: 9763..9764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check3",
        ),
        line: 346,
        column: 7,
        span: 9765..9771,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 346,
        column: 8,
        span: 9771..9772,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cannot open xxxx\"",
        ),
        line: 346,
        column: 26,
        span: 9772..9790,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 346,
        column: 27,
        span: 9790..9791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 346,
        column: 29,
        span: 9792..9793,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 346,
        column: 30,
        span: 9793..9794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 346,
        column: 35,
        span: 9794..9799,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 346,
        column: 36,
        span: 9799..9800,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"loadfile 2; gettop; return .\"",
        ),
        line: 346,
        column: 66,
        span: 9800..9830,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 346,
        column: 67,
        span: 9830..9831,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xxxx\"",
        ),
        line: 346,
        column: 74,
        span: 9832..9838,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 346,
        column: 75,
        span: 9838..9839,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 346,
        column: 76,
        span: 9839..9840,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 349,
        column: 9,
        span: 9882..9890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerrnopro",
        ),
        line: 349,
        column: 23,
        span: 9891..9904,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 349,
        column: 25,
        span: 9905..9906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "code",
        ),
        line: 349,
        column: 29,
        span: 9906..9910,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 349,
        column: 30,
        span: 9910..9911,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 349,
        column: 34,
        span: 9912..9915,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 349,
        column: 35,
        span: 9915..9916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        line: 350,
        column: 4,
        span: 9919..9920,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 350,
        column: 6,
        span: 9921..9922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 350,
        column: 16,
        span: 9923..9932,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 350,
        column: 17,
        span: 9932..9933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 350,
        column: 23,
        span: 9933..9939,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 350,
        column: 24,
        span: 9939..9940,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 350,
        column: 32,
        span: 9940..9948,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 350,
        column: 34,
        span: 9949..9950,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 350,
        column: 35,
        span: 9950..9951,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 350,
        column: 39,
        span: 9952..9955,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 350,
        column: 40,
        span: 9955..9956,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 351,
        column: 8,
        span: 9959..9964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stt",
        ),
        line: 351,
        column: 12,
        span: 9965..9968,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 351,
        column: 13,
        span: 9968..9969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 351,
        column: 17,
        span: 9970..9973,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 351,
        column: 19,
        span: 9974..9975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 351,
        column: 25,
        span: 9976..9981,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 351,
        column: 26,
        span: 9981..9982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 351,
        column: 27,
        span: 9982..9983,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 351,
        column: 28,
        span: 9983..9984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 351,
        column: 33,
        span: 9984..9989,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 351,
        column: 34,
        span: 9989..9990,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "code",
        ),
        line: 351,
        column: 39,
        span: 9991..9995,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 351,
        column: 40,
        span: 9995..9996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 352,
        column: 9,
        span: 9999..10005,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 352,
        column: 10,
        span: 10005..10006,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 352,
        column: 13,
        span: 10006..10009,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stt",
        ),
        line: 352,
        column: 17,
        span: 10010..10013,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 352,
        column: 21,
        span: 10014..10017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 352,
        column: 28,
        span: 10018..10024,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 352,
        column: 29,
        span: 10024..10025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 352,
        column: 33,
        span: 10025..10029,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 352,
        column: 34,
        span: 10029..10030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 352,
        column: 37,
        span: 10030..10033,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 352,
        column: 38,
        span: 10033..10034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 352,
        column: 42,
        span: 10035..10038,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 352,
        column: 43,
        span: 10038..10039,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 352,
        column: 44,
        span: 10039..10040,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 353,
        column: 0,
        span: 10041..10044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerrnopro",
        ),
        line: 355,
        column: 14,
        span: 10046..10059,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 355,
        column: 15,
        span: 10059..10060,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 3; call 0 0\"",
        ),
        line: 355,
        column: 36,
        span: 10060..10081,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 355,
        column: 37,
        span: 10081..10082,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"attempt to call\"",
        ),
        line: 355,
        column: 55,
        span: 10083..10100,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 355,
        column: 56,
        span: 10100..10101,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 356,
        column: 9,
        span: 10102..10110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 356,
        column: 11,
        span: 10111..10112,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 356,
        column: 13,
        span: 10113..10114,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
        column: 14,
        span: 10114..10115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 356,
        column: 16,
        span: 10116..10117,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 356,
        column: 17,
        span: 10117..10118,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
        column: 18,
        span: 10118..10119,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 356,
        column: 0,
        span: 10120..10123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerrnopro",
        ),
        line: 357,
        column: 14,
        span: 10124..10137,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 357,
        column: 15,
        span: 10137..10138,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"getglobal 'f'; call 0 0;\"",
        ),
        line: 357,
        column: 41,
        span: 10138..10164,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 357,
        column: 42,
        span: 10164..10165,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stack overflow\"",
        ),
        line: 357,
        column: 59,
        span: 10166..10182,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 357,
        column: 60,
        span: 10182..10183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 362,
        column: 2,
        span: 10211..10212,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 362,
        column: 4,
        span: 10213..10214,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 362,
        column: 6,
        span: 10215..10216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 362,
        column: 7,
        span: 10216..10217,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 362,
        column: 8,
        span: 10217..10218,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 362,
        column: 9,
        span: 10217..10219,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 362,
        column: 10,
        span: 10219..10220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 362,
        column: 12,
        span: 10221..10222,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 362,
        column: 13,
        span: 10222..10223,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 362,
        column: 15,
        span: 10222..10225,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 362,
        column: 16,
        span: 10225..10226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 363,
        column: 2,
        span: 10227..10228,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 363,
        column: 3,
        span: 10228..10229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 363,
        column: 5,
        span: 10230..10231,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 363,
        column: 7,
        span: 10232..10233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 363,
        column: 9,
        span: 10234..10235,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 363,
        column: 10,
        span: 10235..10236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 363,
        column: 15,
        span: 10236..10241,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 363,
        column: 16,
        span: 10241..10242,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gettable 2; pushvalue 4; gettable 2; return 2\"",
        ),
        line: 363,
        column: 63,
        span: 10242..10289,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 363,
        column: 64,
        span: 10289..10290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 364,
        column: 18,
        span: 10307..10308,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 364,
        column: 19,
        span: 10308..10309,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 364,
        column: 21,
        span: 10309..10311,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 364,
        column: 22,
        span: 10311..10312,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"y\"",
        ),
        line: 364,
        column: 26,
        span: 10313..10316,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 364,
        column: 27,
        span: 10316..10317,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 364,
        column: 29,
        span: 10317..10319,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 364,
        column: 30,
        span: 10319..10320,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 364,
        column: 34,
        span: 10321..10324,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 364,
        column: 35,
        span: 10324..10325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 365,
        column: 7,
        span: 10326..10332,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 365,
        column: 8,
        span: 10332..10333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 365,
        column: 9,
        span: 10333..10334,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 365,
        column: 12,
        span: 10335..10337,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 365,
        column: 14,
        span: 10337..10339,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 365,
        column: 18,
        span: 10340..10343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 365,
        column: 20,
        span: 10344..10345,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 365,
        column: 23,
        span: 10346..10348,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 365,
        column: 26,
        span: 10348..10351,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 365,
        column: 27,
        span: 10351..10352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 366,
        column: 2,
        span: 10353..10354,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 366,
        column: 3,
        span: 10354..10355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 366,
        column: 8,
        span: 10355..10360,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 366,
        column: 9,
        span: 10360..10361,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settable -5\"",
        ),
        line: 366,
        column: 22,
        span: 10361..10374,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 366,
        column: 23,
        span: 10374..10375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 366,
        column: 25,
        span: 10376..10377,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 366,
        column: 26,
        span: 10377..10378,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 366,
        column: 28,
        span: 10378..10380,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 366,
        column: 29,
        span: 10380..10381,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 366,
        column: 31,
        span: 10381..10383,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 366,
        column: 32,
        span: 10383..10384,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 366,
        column: 36,
        span: 10385..10388,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 366,
        column: 37,
        span: 10388..10389,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 366,
        column: 40,
        span: 10389..10392,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 366,
        column: 41,
        span: 10392..10393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 367,
        column: 7,
        span: 10394..10400,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 367,
        column: 8,
        span: 10400..10401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 367,
        column: 9,
        span: 10401..10402,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 367,
        column: 10,
        span: 10402..10403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 367,
        column: 11,
        span: 10403..10404,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 367,
        column: 14,
        span: 10405..10407,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 367,
        column: 17,
        span: 10407..10410,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 367,
        column: 18,
        span: 10410..10411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 368,
        column: 2,
        span: 10412..10413,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 368,
        column: 3,
        span: 10413..10414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 368,
        column: 4,
        span: 10414..10415,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 368,
        column: 5,
        span: 10415..10416,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 368,
        column: 7,
        span: 10417..10418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 368,
        column: 0,
        span: 10419..10424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 369,
        column: 2,
        span: 10425..10426,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 369,
        column: 4,
        span: 10427..10428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 369,
        column: 6,
        span: 10429..10430,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 369,
        column: 7,
        span: 10430..10431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 369,
        column: 12,
        span: 10431..10436,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 369,
        column: 13,
        span: 10436..10437,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gettable 2; return 1\"",
        ),
        line: 369,
        column: 35,
        span: 10437..10459,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 369,
        column: 36,
        span: 10459..10460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 369,
        column: 38,
        span: 10461..10462,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 369,
        column: 39,
        span: 10462..10463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 370,
        column: 7,
        span: 10503..10509,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 370,
        column: 8,
        span: 10509..10510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 370,
        column: 9,
        span: 10510..10511,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 370,
        column: 12,
        span: 10512..10514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 370,
        column: 18,
        span: 10515..10520,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 370,
        column: 19,
        span: 10520..10521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 371,
        column: 2,
        span: 10522..10523,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 371,
        column: 3,
        span: 10523..10524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 371,
        column: 8,
        span: 10524..10529,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 371,
        column: 9,
        span: 10529..10530,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settable 2\"",
        ),
        line: 371,
        column: 21,
        span: 10530..10542,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 371,
        column: 22,
        span: 10542..10543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 371,
        column: 24,
        span: 10544..10545,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 371,
        column: 25,
        span: 10545..10546,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 371,
        column: 29,
        span: 10547..10550,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 371,
        column: 30,
        span: 10550..10551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 372,
        column: 7,
        span: 10593..10599,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 372,
        column: 8,
        span: 10599..10600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 372,
        column: 9,
        span: 10600..10601,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 372,
        column: 10,
        span: 10601..10602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 372,
        column: 11,
        span: 10602..10603,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 372,
        column: 12,
        span: 10603..10604,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 372,
        column: 15,
        span: 10605..10607,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 372,
        column: 19,
        span: 10608..10611,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 372,
        column: 20,
        span: 10611..10612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 374,
        column: 2,
        span: 10614..10615,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 374,
        column: 4,
        span: 10616..10617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 374,
        column: 17,
        span: 10618..10630,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 374,
        column: 18,
        span: 10630..10631,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 374,
        column: 19,
        span: 10631..10632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 374,
        column: 20,
        span: 10632..10633,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 374,
        column: 22,
        span: 10634..10635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 374,
        column: 24,
        span: 10636..10637,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 374,
        column: 25,
        span: 10637..10638,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 374,
        column: 26,
        span: 10638..10639,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 374,
        column: 28,
        span: 10640..10641,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 374,
        column: 29,
        span: 10641..10642,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 374,
        column: 30,
        span: 10642..10643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 375,
        column: 13,
        span: 10644..10656,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 375,
        column: 14,
        span: 10656..10657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 375,
        column: 15,
        span: 10657..10658,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 375,
        column: 16,
        span: 10658..10659,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 375,
        column: 17,
        span: 10659..10660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 375,
        column: 24,
        span: 10660..10667,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 375,
        column: 26,
        span: 10668..10669,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 375,
        column: 35,
        span: 10670..10678,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 375,
        column: 37,
        span: 10679..10680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 375,
        column: 38,
        span: 10680..10681,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 375,
        column: 39,
        span: 10681..10682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 375,
        column: 41,
        span: 10683..10684,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 375,
        column: 42,
        span: 10684..10685,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 375,
        column: 49,
        span: 10686..10692,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 375,
        column: 51,
        span: 10693..10694,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 375,
        column: 52,
        span: 10694..10695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 375,
        column: 53,
        span: 10695..10696,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 375,
        column: 54,
        span: 10696..10697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 375,
        column: 55,
        span: 10697..10698,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 375,
        column: 56,
        span: 10698..10699,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 375,
        column: 0,
        span: 10700..10703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 376,
        column: 2,
        span: 10704..10705,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 376,
        column: 3,
        span: 10705..10706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 376,
        column: 5,
        span: 10707..10708,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 376,
        column: 7,
        span: 10709..10710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 376,
        column: 9,
        span: 10711..10712,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 376,
        column: 10,
        span: 10712..10713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 376,
        column: 15,
        span: 10713..10718,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 376,
        column: 16,
        span: 10718..10719,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gettable 3, return 2\"",
        ),
        line: 376,
        column: 38,
        span: 10719..10741,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 376,
        column: 39,
        span: 10741..10742,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 376,
        column: 41,
        span: 10742..10744,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 376,
        column: 42,
        span: 10744..10745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 376,
        column: 44,
        span: 10746..10747,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 376,
        column: 45,
        span: 10747..10748,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 376,
        column: 48,
        span: 10748..10751,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 376,
        column: 49,
        span: 10751..10752,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "35",
                    after_decimal: "",
                },
            ),
        ),
        line: 376,
        column: 52,
        span: 10752..10755,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 376,
        column: 53,
        span: 10755..10756,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 376,
        column: 57,
        span: 10757..10760,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 376,
        column: 58,
        span: 10760..10761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 377,
        column: 7,
        span: 10762..10768,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
        column: 8,
        span: 10768..10769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 377,
        column: 9,
        span: 10769..10770,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 377,
        column: 12,
        span: 10771..10773,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 377,
        column: 15,
        span: 10773..10776,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 377,
        column: 19,
        span: 10777..10780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 377,
        column: 21,
        span: 10781..10782,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 377,
        column: 24,
        span: 10783..10785,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "35",
                    after_decimal: "",
                },
            ),
        ),
        line: 377,
        column: 27,
        span: 10785..10788,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
        column: 28,
        span: 10788..10789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 378,
        column: 13,
        span: 10790..10802,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 378,
        column: 14,
        span: 10802..10803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 378,
        column: 15,
        span: 10803..10804,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 378,
        column: 16,
        span: 10804..10805,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 378,
        column: 17,
        span: 10805..10806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 378,
        column: 24,
        span: 10806..10813,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 378,
        column: 26,
        span: 10814..10815,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 378,
        column: 35,
        span: 10816..10824,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 378,
        column: 37,
        span: 10825..10826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 378,
        column: 38,
        span: 10826..10827,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 378,
        column: 39,
        span: 10827..10828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 378,
        column: 41,
        span: 10829..10830,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 378,
        column: 42,
        span: 10830..10831,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 378,
        column: 49,
        span: 10832..10838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 378,
        column: 51,
        span: 10839..10840,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 378,
        column: 52,
        span: 10840..10841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 378,
        column: 53,
        span: 10841..10842,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 378,
        column: 54,
        span: 10842..10843,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 378,
        column: 0,
        span: 10844..10847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 379,
        column: 13,
        span: 10848..10860,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 379,
        column: 14,
        span: 10860..10861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 379,
        column: 15,
        span: 10861..10862,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 379,
        column: 16,
        span: 10862..10863,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 379,
        column: 17,
        span: 10863..10864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__newindex",
        ),
        line: 379,
        column: 27,
        span: 10864..10874,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 379,
        column: 29,
        span: 10875..10876,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 379,
        column: 38,
        span: 10877..10885,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 379,
        column: 40,
        span: 10886..10887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 379,
        column: 41,
        span: 10887..10888,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 379,
        column: 42,
        span: 10888..10889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 379,
        column: 44,
        span: 10890..10891,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 379,
        column: 45,
        span: 10891..10892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 379,
        column: 46,
        span: 10892..10893,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 379,
        column: 48,
        span: 10894..10895,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 379,
        column: 50,
        span: 10896..10897,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 379,
        column: 51,
        span: 10897..10898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 379,
        column: 52,
        span: 10898..10899,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 379,
        column: 53,
        span: 10899..10900,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 379,
        column: 55,
        span: 10901..10902,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 379,
        column: 57,
        span: 10903..10904,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 379,
        column: 0,
        span: 10905..10908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 380,
        column: 2,
        span: 10909..10910,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 380,
        column: 4,
        span: 10911..10912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 380,
        column: 6,
        span: 10913..10914,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 380,
        column: 7,
        span: 10914..10915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 380,
        column: 12,
        span: 10915..10920,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 380,
        column: 13,
        span: 10920..10921,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"insert 2; gettable -5; return 1\"",
        ),
        line: 380,
        column: 46,
        span: 10921..10954,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 380,
        column: 47,
        span: 10954..10955,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 380,
        column: 49,
        span: 10955..10957,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 380,
        column: 50,
        span: 10957..10958,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 380,
        column: 52,
        span: 10958..10960,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 380,
        column: 53,
        span: 10960..10961,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 380,
        column: 55,
        span: 10961..10963,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 380,
        column: 56,
        span: 10963..10964,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"y\"",
        ),
        line: 380,
        column: 60,
        span: 10965..10968,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 380,
        column: 61,
        span: 10968..10969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 380,
        column: 63,
        span: 10970..10971,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 380,
        column: 64,
        span: 10971..10972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 381,
        column: 7,
        span: 10973..10979,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 381,
        column: 8,
        span: 10979..10980,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 381,
        column: 9,
        span: 10980..10981,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 381,
        column: 12,
        span: 10982..10984,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 381,
        column: 15,
        span: 10984..10987,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 381,
        column: 16,
        span: 10987..10988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 382,
        column: 2,
        span: 10989..10990,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 382,
        column: 4,
        span: 10991..10992,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 382,
        column: 6,
        span: 10993..10994,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 382,
        column: 7,
        span: 10994..10995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 382,
        column: 12,
        span: 10995..11000,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 382,
        column: 13,
        span: 11000..11001,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settable -5, return 1\"",
        ),
        line: 382,
        column: 36,
        span: 11001..11024,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 382,
        column: 37,
        span: 11024..11025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 382,
        column: 39,
        span: 11026..11027,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 382,
        column: 40,
        span: 11027..11028,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 382,
        column: 42,
        span: 11028..11030,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 382,
        column: 43,
        span: 11030..11031,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 382,
        column: 45,
        span: 11031..11033,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 382,
        column: 46,
        span: 11033..11034,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 382,
        column: 50,
        span: 11035..11038,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 382,
        column: 51,
        span: 11038..11039,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 382,
        column: 54,
        span: 11039..11042,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 382,
        column: 55,
        span: 11042..11043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 383,
        column: 7,
        span: 11044..11050,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 383,
        column: 8,
        span: 11050..11051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 383,
        column: 9,
        span: 11051..11052,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 383,
        column: 10,
        span: 11052..11053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 383,
        column: 11,
        span: 11053..11054,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 383,
        column: 14,
        span: 11055..11057,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 383,
        column: 17,
        span: 11057..11060,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 383,
        column: 21,
        span: 11061..11064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 383,
        column: 23,
        span: 11065..11066,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 383,
        column: 26,
        span: 11067..11069,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 383,
        column: 28,
        span: 11069..11071,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 383,
        column: 29,
        span: 11071..11072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 384,
        column: 2,
        span: 11073..11074,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 384,
        column: 3,
        span: 11074..11075,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 384,
        column: 4,
        span: 11075..11076,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 384,
        column: 5,
        span: 11076..11077,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 384,
        column: 7,
        span: 11078..11079,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu'",
        ),
        line: 384,
        column: 14,
        span: 11080..11086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 385,
        column: 2,
        span: 11087..11088,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 385,
        column: 4,
        span: 11089..11090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 385,
        column: 6,
        span: 11091..11092,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 385,
        column: 7,
        span: 11092..11093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 385,
        column: 12,
        span: 11093..11098,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 385,
        column: 13,
        span: 11098..11099,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gettable 2, return 1\"",
        ),
        line: 385,
        column: 35,
        span: 11099..11121,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 385,
        column: 36,
        span: 11121..11122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 385,
        column: 38,
        span: 11123..11124,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 385,
        column: 39,
        span: 11124..11125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 386,
        column: 7,
        span: 11126..11132,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 386,
        column: 8,
        span: 11132..11133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 386,
        column: 9,
        span: 11133..11134,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 386,
        column: 12,
        span: 11135..11137,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu'",
        ),
        line: 386,
        column: 19,
        span: 11138..11144,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 386,
        column: 20,
        span: 11144..11145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 387,
        column: 2,
        span: 11146..11147,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 387,
        column: 3,
        span: 11147..11148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 387,
        column: 8,
        span: 11148..11153,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 387,
        column: 9,
        span: 11153..11154,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settable 2\"",
        ),
        line: 387,
        column: 21,
        span: 11154..11166,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 387,
        column: 22,
        span: 11166..11167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 387,
        column: 24,
        span: 11168..11169,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 387,
        column: 25,
        span: 11169..11170,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "19",
                    after_decimal: "",
                },
            ),
        ),
        line: 387,
        column: 28,
        span: 11170..11173,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 387,
        column: 29,
        span: 11173..11174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 388,
        column: 7,
        span: 11175..11181,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 388,
        column: 8,
        span: 11181..11182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 388,
        column: 9,
        span: 11182..11183,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 388,
        column: 10,
        span: 11183..11184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 388,
        column: 11,
        span: 11184..11185,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 388,
        column: 12,
        span: 11185..11186,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 388,
        column: 15,
        span: 11187..11189,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "19",
                    after_decimal: "",
                },
            ),
        ),
        line: 388,
        column: 18,
        span: 11189..11192,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 388,
        column: 19,
        span: 11192..11193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 391,
        column: 2,
        span: 11211..11212,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 391,
        column: 4,
        span: 11213..11214,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 391,
        column: 6,
        span: 11215..11216,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 391,
        column: 7,
        span: 11216..11217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 392,
        column: 2,
        span: 11218..11219,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 392,
        column: 4,
        span: 11220..11221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 392,
        column: 9,
        span: 11222..11226,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 392,
        column: 10,
        span: 11226..11227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 392,
        column: 11,
        span: 11227..11228,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 392,
        column: 12,
        span: 11228..11229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 392,
        column: 17,
        span: 11229..11234,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 392,
        column: 18,
        span: 11234..11235,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"next; gettop; return .\"",
        ),
        line: 392,
        column: 42,
        span: 11235..11259,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 392,
        column: 43,
        span: 11259..11260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 392,
        column: 45,
        span: 11261..11262,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 392,
        column: 46,
        span: 11262..11263,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 392,
        column: 50,
        span: 11264..11267,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 392,
        column: 51,
        span: 11267..11268,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 392,
        column: 52,
        span: 11268..11269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        line: 393,
        column: 7,
        span: 11270..11276,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 393,
        column: 8,
        span: 11276..11277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 393,
        column: 9,
        span: 11277..11278,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 393,
        column: 10,
        span: 11278..11279,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 393,
        column: 12,
        span: 11280..11281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 393,
        column: 13,
        span: 11281..11282,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 393,
        column: 14,
        span: 11282..11283,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 393,
        column: 15,
        span: 11282..11284,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 393,
        column: 16,
        span: 11284..11285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 393,
        column: 17,
        span: 11285..11286,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 393,
        column: 18,
        span: 11286..11287,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 393,
        column: 19,
        span: 11287..11288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 394,
        column: 2,
        span: 11289..11290,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 394,
        column: 4,
        span: 11291..11292,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 394,
        column: 6,
        span: 11293..11294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 394,
        column: 7,
        span: 11294..11295,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 394,
        column: 8,
        span: 11295..11296,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 394,
        column: 9,
        span: 11295..11297,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 394,
        column: 10,
        span: 11297..11298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 395,
        column: 2,
        span: 11299..11300,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 395,
        column: 4,
        span: 11301..11302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 395,
        column: 9,
        span: 11303..11307,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 395,
        column: 10,
        span: 11307..11308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 395,
        column: 11,
        span: 11308..11309,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 395,
        column: 12,
        span: 11309..11310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 395,
        column: 17,
        span: 11310..11315,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 395,
        column: 18,
        span: 11315..11316,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"next; gettop; return .\"",
        ),
        line: 395,
        column: 42,
        span: 11316..11340,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 395,
        column: 43,
        span: 11340..11341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 395,
        column: 45,
        span: 11342..11343,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 395,
        column: 46,
        span: 11343..11344,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 395,
        column: 50,
        span: 11345..11348,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 395,
        column: 51,
        span: 11348..11349,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 395,
        column: 52,
        span: 11349..11350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        line: 396,
        column: 7,
        span: 11351..11357,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 396,
        column: 8,
        span: 11357..11358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 396,
        column: 9,
        span: 11358..11359,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 396,
        column: 10,
        span: 11359..11360,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 396,
        column: 12,
        span: 11361..11362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 396,
        column: 13,
        span: 11362..11363,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 396,
        column: 14,
        span: 11363..11364,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 396,
        column: 15,
        span: 11363..11365,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 396,
        column: 16,
        span: 11365..11366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 396,
        column: 17,
        span: 11366..11367,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 396,
        column: 18,
        span: 11367..11368,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 396,
        column: 21,
        span: 11368..11371,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 396,
        column: 22,
        span: 11371..11372,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 396,
        column: 23,
        span: 11371..11373,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 396,
        column: 24,
        span: 11373..11374,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 396,
        column: 25,
        span: 11374..11375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 397,
        column: 2,
        span: 11376..11377,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 397,
        column: 4,
        span: 11378..11379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 397,
        column: 9,
        span: 11380..11384,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 397,
        column: 10,
        span: 11384..11385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 397,
        column: 11,
        span: 11385..11386,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 397,
        column: 12,
        span: 11386..11387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 397,
        column: 17,
        span: 11387..11392,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 397,
        column: 18,
        span: 11392..11393,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"next; pop 1; next; gettop; return .\"",
        ),
        line: 397,
        column: 55,
        span: 11393..11430,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 397,
        column: 56,
        span: 11430..11431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 397,
        column: 58,
        span: 11432..11433,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 397,
        column: 59,
        span: 11433..11434,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 397,
        column: 63,
        span: 11435..11438,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 397,
        column: 64,
        span: 11438..11439,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 397,
        column: 65,
        span: 11439..11440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        line: 398,
        column: 7,
        span: 11441..11447,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 398,
        column: 8,
        span: 11447..11448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 398,
        column: 9,
        span: 11448..11449,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 398,
        column: 10,
        span: 11449..11450,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 398,
        column: 12,
        span: 11451..11452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 398,
        column: 13,
        span: 11452..11453,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 398,
        column: 14,
        span: 11453..11454,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
        column: 15,
        span: 11453..11455,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 398,
        column: 16,
        span: 11455..11456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 398,
        column: 17,
        span: 11456..11457,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 398,
        column: 18,
        span: 11457..11458,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 398,
        column: 19,
        span: 11458..11459,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 404,
        column: 0,
        span: 11484..11486,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 405,
        column: 8,
        span: 11489..11494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 405,
        column: 10,
        span: 11495..11496,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 405,
        column: 12,
        span: 11497..11498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 405,
        column: 14,
        span: 11499..11500,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 405,
        column: 15,
        span: 11500..11501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 405,
        column: 20,
        span: 11501..11506,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ pushnum 10; pushnum 20; pushcclosure 2; return 1]]",
        ),
        line: 405,
        column: 73,
        span: 11506..11559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 406,
        column: 4,
        span: 11562..11563,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 406,
        column: 5,
        span: 11563..11564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 406,
        column: 7,
        span: 11565..11566,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 406,
        column: 8,
        span: 11566..11567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 406,
        column: 10,
        span: 11568..11569,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 406,
        column: 12,
        span: 11570..11571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 406,
        column: 14,
        span: 11572..11573,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 406,
        column: 15,
        span: 11573..11574,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[pushvalue U0; pushvalue U1; pushvalue U2; return 3]]",
        ),
        line: 406,
        column: 69,
        span: 11574..11628,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 406,
        column: 70,
        span: 11628..11629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 407,
        column: 9,
        span: 11632..11638,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 407,
        column: 10,
        span: 11638..11639,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 407,
        column: 11,
        span: 11639..11640,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 407,
        column: 14,
        span: 11641..11643,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 407,
        column: 17,
        span: 11643..11646,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 407,
        column: 21,
        span: 11647..11650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 407,
        column: 23,
        span: 11651..11652,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 407,
        column: 26,
        span: 11653..11655,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 407,
        column: 29,
        span: 11655..11658,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 407,
        column: 33,
        span: 11659..11662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 407,
        column: 38,
        span: 11663..11667,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 407,
        column: 39,
        span: 11667..11668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 407,
        column: 40,
        span: 11668..11669,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 407,
        column: 41,
        span: 11669..11670,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 407,
        column: 44,
        span: 11671..11673,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        line: 407,
        column: 52,
        span: 11674..11681,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 407,
        column: 53,
        span: 11681..11682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 408,
        column: 4,
        span: 11685..11686,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 408,
        column: 5,
        span: 11686..11687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 408,
        column: 7,
        span: 11688..11689,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 408,
        column: 9,
        span: 11690..11691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 408,
        column: 11,
        span: 11692..11693,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 408,
        column: 12,
        span: 11693..11694,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[tostring U3; tonumber U4; return 2]]",
        ),
        line: 408,
        column: 50,
        span: 11694..11732,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 408,
        column: 51,
        span: 11732..11733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 409,
        column: 9,
        span: 11736..11742,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 409,
        column: 10,
        span: 11742..11743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 409,
        column: 11,
        span: 11743..11744,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 409,
        column: 14,
        span: 11745..11747,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 409,
        column: 18,
        span: 11748..11751,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 409,
        column: 22,
        span: 11752..11755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 409,
        column: 24,
        span: 11756..11757,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 409,
        column: 27,
        span: 11758..11760,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 409,
        column: 29,
        span: 11760..11762,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 409,
        column: 30,
        span: 11762..11763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 410,
        column: 4,
        span: 11766..11767,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
        column: 5,
        span: 11767..11768,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[pushnum 100; pushnum 200; replace U2; replace U1]]",
        ),
        line: 410,
        column: 57,
        span: 11768..11820,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
        column: 58,
        span: 11820..11821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 411,
        column: 4,
        span: 11824..11825,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 411,
        column: 5,
        span: 11825..11826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 411,
        column: 7,
        span: 11827..11828,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 411,
        column: 9,
        span: 11829..11830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 411,
        column: 11,
        span: 11831..11832,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
        column: 12,
        span: 11832..11833,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[pushvalue U1; pushvalue U2; return 2]]",
        ),
        line: 411,
        column: 52,
        span: 11833..11873,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
        column: 53,
        span: 11873..11874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 412,
        column: 9,
        span: 11877..11883,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 412,
        column: 10,
        span: 11883..11884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 412,
        column: 11,
        span: 11884..11885,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 412,
        column: 14,
        span: 11886..11888,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 412,
        column: 18,
        span: 11888..11892,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 412,
        column: 22,
        span: 11893..11896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 412,
        column: 24,
        span: 11897..11898,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 412,
        column: 27,
        span: 11899..11901,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 412,
        column: 31,
        span: 11901..11905,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 412,
        column: 32,
        span: 11905..11906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 413,
        column: 4,
        span: 11909..11910,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 413,
        column: 5,
        span: 11910..11911,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[replace U2; replace U1]]",
        ),
        line: 413,
        column: 31,
        span: 11911..11937,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 413,
        column: 32,
        span: 11937..11938,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 413,
        column: 34,
        span: 11939..11940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 413,
        column: 35,
        span: 11940..11941,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 413,
        column: 36,
        span: 11941..11942,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 413,
        column: 37,
        span: 11941..11943,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 413,
        column: 38,
        span: 11943..11944,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 413,
        column: 39,
        span: 11944..11945,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 413,
        column: 41,
        span: 11946..11947,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 413,
        column: 42,
        span: 11947..11948,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 413,
        column: 43,
        span: 11948..11949,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 413,
        column: 44,
        span: 11948..11950,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 413,
        column: 45,
        span: 11950..11951,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 413,
        column: 46,
        span: 11951..11952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 414,
        column: 4,
        span: 11955..11956,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 414,
        column: 5,
        span: 11956..11957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 414,
        column: 7,
        span: 11958..11959,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 414,
        column: 9,
        span: 11960..11961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 414,
        column: 11,
        span: 11962..11963,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 414,
        column: 12,
        span: 11963..11964,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[pushvalue U1; pushvalue U2; return 2]]",
        ),
        line: 414,
        column: 52,
        span: 11964..12004,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 414,
        column: 53,
        span: 12004..12005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 415,
        column: 9,
        span: 12008..12014,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 415,
        column: 10,
        span: 12014..12015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 415,
        column: 11,
        span: 12015..12016,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 415,
        column: 12,
        span: 12016..12017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 415,
        column: 13,
        span: 12017..12018,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 415,
        column: 16,
        span: 12019..12021,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 415,
        column: 18,
        span: 12021..12023,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 415,
        column: 22,
        span: 12024..12027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 415,
        column: 24,
        span: 12028..12029,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 415,
        column: 25,
        span: 12029..12030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 415,
        column: 26,
        span: 12030..12031,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 415,
        column: 29,
        span: 12032..12034,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 415,
        column: 31,
        span: 12034..12036,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 415,
        column: 32,
        span: 12036..12037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 416,
        column: 4,
        span: 12040..12041,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 416,
        column: 5,
        span: 12041..12042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmemory",
        ),
        line: 416,
        column: 16,
        span: 12042..12053,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 416,
        column: 17,
        span: 12053..12054,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 416,
        column: 18,
        span: 12054..12055,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 417,
        column: 0,
        span: 12056..12059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 421,
        column: 7,
        span: 12114..12120,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 421,
        column: 8,
        span: 12120..12121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 421,
        column: 9,
        span: 12121..12122,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 421,
        column: 10,
        span: 12122..12123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 421,
        column: 15,
        span: 12123..12128,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[isnull U1; return 1]]",
        ),
        line: 421,
        column: 38,
        span: 12128..12151,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 421,
        column: 41,
        span: 12152..12154,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 421,
        column: 46,
        span: 12155..12159,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 421,
        column: 47,
        span: 12159..12160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 422,
        column: 7,
        span: 12161..12167,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 422,
        column: 8,
        span: 12167..12168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 422,
        column: 9,
        span: 12168..12169,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 422,
        column: 10,
        span: 12169..12170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 422,
        column: 15,
        span: 12170..12175,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[isnull U100; return 1]]",
        ),
        line: 422,
        column: 40,
        span: 12175..12200,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 422,
        column: 43,
        span: 12201..12203,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 422,
        column: 48,
        span: 12204..12208,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 422,
        column: 49,
        span: 12208..12209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 423,
        column: 7,
        span: 12210..12216,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 423,
        column: 8,
        span: 12216..12217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 423,
        column: 9,
        span: 12217..12218,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 423,
        column: 10,
        span: 12218..12219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 423,
        column: 15,
        span: 12219..12224,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[pushvalue U1; return 1]]",
        ),
        line: 423,
        column: 41,
        span: 12224..12250,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 423,
        column: 44,
        span: 12251..12253,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 423,
        column: 48,
        span: 12254..12257,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 423,
        column: 49,
        span: 12257..12258,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 425,
        column: 6,
        span: 12260..12265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 425,
        column: 8,
        span: 12266..12267,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 425,
        column: 10,
        span: 12268..12269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 425,
        column: 12,
        span: 12270..12271,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 425,
        column: 13,
        span: 12271..12272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 425,
        column: 18,
        span: 12272..12277,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ pushnum 10; pushnum 20; pushcclosure 2; return 1]]",
        ),
        line: 425,
        column: 71,
        span: 12277..12330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 426,
        column: 7,
        span: 12331..12337,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 426,
        column: 8,
        span: 12337..12338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 426,
        column: 9,
        span: 12338..12339,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 426,
        column: 10,
        span: 12339..12340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalue",
        ),
        line: 426,
        column: 17,
        span: 12340..12347,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 426,
        column: 18,
        span: 12347..12348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 426,
        column: 19,
        span: 12348..12349,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 426,
        column: 20,
        span: 12349..12350,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 426,
        column: 22,
        span: 12350..12352,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 426,
        column: 23,
        span: 12352..12353,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 426,
        column: 26,
        span: 12354..12356,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 426,
        column: 29,
        span: 12356..12359,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 426,
        column: 0,
        span: 12360..12363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 427,
        column: 9,
        span: 12371..12372,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 427,
        column: 10,
        span: 12372..12373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalue",
        ),
        line: 427,
        column: 17,
        span: 12373..12380,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 427,
        column: 18,
        span: 12380..12381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 427,
        column: 19,
        span: 12381..12382,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 427,
        column: 20,
        span: 12382..12383,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 427,
        column: 22,
        span: 12383..12385,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 427,
        column: 23,
        span: 12385..12386,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 427,
        column: 26,
        span: 12387..12389,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 427,
        column: 29,
        span: 12389..12392,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 427,
        column: 0,
        span: 12393..12396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 428,
        column: 9,
        span: 12404..12405,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 428,
        column: 10,
        span: 12405..12406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalue",
        ),
        line: 428,
        column: 17,
        span: 12406..12413,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 428,
        column: 18,
        span: 12413..12414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 428,
        column: 19,
        span: 12414..12415,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 428,
        column: 20,
        span: 12415..12416,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 428,
        column: 22,
        span: 12416..12418,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 428,
        column: 23,
        span: 12418..12419,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 428,
        column: 26,
        span: 12420..12422,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 428,
        column: 30,
        span: 12423..12426,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 428,
        column: 31,
        span: 12426..12427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 429,
        column: 2,
        span: 12428..12429,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 429,
        column: 3,
        span: 12429..12430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalue",
        ),
        line: 429,
        column: 10,
        span: 12430..12437,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 429,
        column: 11,
        span: 12437..12438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 429,
        column: 12,
        span: 12438..12439,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 429,
        column: 13,
        span: 12439..12440,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 429,
        column: 15,
        span: 12440..12442,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 429,
        column: 16,
        span: 12442..12443,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 429,
        column: 23,
        span: 12444..12450,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 429,
        column: 24,
        span: 12450..12451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 430,
        column: 7,
        span: 12452..12458,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 430,
        column: 8,
        span: 12458..12459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 430,
        column: 9,
        span: 12459..12460,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 430,
        column: 10,
        span: 12460..12461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalue",
        ),
        line: 430,
        column: 17,
        span: 12461..12468,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 430,
        column: 18,
        span: 12468..12469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 430,
        column: 19,
        span: 12469..12470,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 430,
        column: 20,
        span: 12470..12471,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 430,
        column: 22,
        span: 12471..12473,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 430,
        column: 23,
        span: 12473..12474,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 430,
        column: 26,
        span: 12475..12477,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 430,
        column: 33,
        span: 12478..12484,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 430,
        column: 34,
        span: 12484..12485,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 434,
        column: 0,
        span: 12506..12508,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 435,
        column: 8,
        span: 12511..12516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 435,
        column: 10,
        span: 12517..12518,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 435,
        column: 12,
        span: 12519..12520,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"checkstack 300 msg;\"",
        ),
        line: 435,
        column: 34,
        span: 12521..12542,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 435,
        column: 37,
        span: 12543..12545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 436,
        column: 19,
        span: 12558..12564,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 436,
        column: 20,
        span: 12564..12565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 436,
        column: 23,
        span: 12565..12568,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 436,
        column: 24,
        span: 12568..12569,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 10;\"",
        ),
        line: 436,
        column: 37,
        span: 12569..12582,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 436,
        column: 38,
        span: 12582..12583,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        line: 436,
        column: 42,
        span: 12583..12587,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 436,
        column: 43,
        span: 12587..12588,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 436,
        column: 46,
        span: 12589..12591,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushcclosure 255; return 1\"",
        ),
        line: 437,
        column: 41,
        span: 12604..12632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 438,
        column: 4,
        span: 12635..12636,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 438,
        column: 6,
        span: 12637..12638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 438,
        column: 8,
        span: 12639..12640,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 438,
        column: 9,
        span: 12640..12641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 438,
        column: 14,
        span: 12641..12646,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 438,
        column: 15,
        span: 12646..12647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 438,
        column: 16,
        span: 12647..12648,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 438,
        column: 17,
        span: 12648..12649,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 439,
        column: 6,
        span: 12652..12655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 439,
        column: 8,
        span: 12656..12657,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 439,
        column: 9,
        span: 12657..12658,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 439,
        column: 10,
        span: 12657..12659,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 439,
        column: 11,
        span: 12659..12660,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        line: 439,
        column: 14,
        span: 12659..12663,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 439,
        column: 0,
        span: 12664..12666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 440,
        column: 11,
        span: 12671..12677,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 440,
        column: 12,
        span: 12677..12678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 440,
        column: 13,
        span: 12678..12679,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 440,
        column: 14,
        span: 12679..12680,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 440,
        column: 15,
        span: 12680..12681,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushvalue U%d; return 1\"",
        ),
        line: 440,
        column: 40,
        span: 12681..12706,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 440,
        column: 41,
        span: 12706..12707,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 440,
        column: 42,
        span: 12707..12708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 440,
        column: 48,
        span: 12708..12714,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 440,
        column: 49,
        span: 12714..12715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 440,
        column: 50,
        span: 12715..12716,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 440,
        column: 51,
        span: 12716..12717,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 440,
        column: 52,
        span: 12717..12718,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 440,
        column: 55,
        span: 12719..12721,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 440,
        column: 58,
        span: 12721..12724,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 440,
        column: 59,
        span: 12724..12725,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 441,
        column: 0,
        span: 12728..12731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 442,
        column: 9,
        span: 12734..12740,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 442,
        column: 10,
        span: 12740..12741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 442,
        column: 11,
        span: 12741..12742,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 442,
        column: 12,
        span: 12742..12743,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"isnull U256; return 1\"",
        ),
        line: 442,
        column: 35,
        span: 12743..12766,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 442,
        column: 36,
        span: 12766..12767,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 442,
        column: 37,
        span: 12767..12768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 443,
        column: 9,
        span: 12771..12777,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 443,
        column: 10,
        span: 12777..12778,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 443,
        column: 13,
        span: 12778..12781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 443,
        column: 15,
        span: 12782..12783,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 443,
        column: 16,
        span: 12783..12784,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"isnil U256; return 1\"",
        ),
        line: 443,
        column: 38,
        span: 12784..12806,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 443,
        column: 39,
        span: 12806..12807,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 443,
        column: 40,
        span: 12807..12808,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 444,
        column: 0,
        span: 12809..12812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 449,
        column: 7,
        span: 12834..12840,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 449,
        column: 8,
        span: 12840..12841,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 449,
        column: 11,
        span: 12841..12844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 449,
        column: 17,
        span: 12845..12850,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 449,
        column: 18,
        span: 12850..12851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 449,
        column: 23,
        span: 12851..12856,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 449,
        column: 24,
        span: 12856..12857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setuservalue",
        ),
        line: 449,
        column: 36,
        span: 12857..12869,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 449,
        column: 37,
        span: 12869..12870,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 449,
        column: 39,
        span: 12870..12872,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 449,
        column: 40,
        span: 12872..12873,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 449,
        column: 42,
        span: 12874..12875,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 449,
        column: 43,
        span: 12875..12876,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 449,
        column: 44,
        span: 12876..12877,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 449,
        column: 45,
        span: 12877..12878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 450,
        column: 7,
        span: 12879..12885,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 450,
        column: 8,
        span: 12885..12886,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 450,
        column: 11,
        span: 12886..12889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 450,
        column: 17,
        span: 12890..12895,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 450,
        column: 18,
        span: 12895..12896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 450,
        column: 23,
        span: 12896..12901,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 450,
        column: 24,
        span: 12901..12902,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setuservalue",
        ),
        line: 450,
        column: 36,
        span: 12902..12914,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 450,
        column: 37,
        span: 12914..12915,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 450,
        column: 41,
        span: 12916..12919,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 450,
        column: 42,
        span: 12919..12920,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 450,
        column: 44,
        span: 12921..12922,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 450,
        column: 45,
        span: 12922..12923,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 450,
        column: 46,
        span: 12923..12924,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 450,
        column: 47,
        span: 12924..12925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 451,
        column: 7,
        span: 12926..12932,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 451,
        column: 8,
        span: 12932..12933,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 451,
        column: 11,
        span: 12933..12936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 451,
        column: 17,
        span: 12937..12942,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 451,
        column: 18,
        span: 12942..12943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 451,
        column: 23,
        span: 12943..12948,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 451,
        column: 24,
        span: 12948..12949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setuservalue",
        ),
        line: 451,
        column: 36,
        span: 12949..12961,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 451,
        column: 37,
        span: 12961..12962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 451,
        column: 39,
        span: 12963..12964,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 451,
        column: 40,
        span: 12964..12965,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pushuserdata",
        ),
        line: 451,
        column: 52,
        span: 12965..12977,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 451,
        column: 53,
        span: 12977..12978,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 451,
        column: 54,
        span: 12977..12979,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 451,
        column: 55,
        span: 12979..12980,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 451,
        column: 56,
        span: 12980..12981,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 451,
        column: 58,
        span: 12982..12983,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 451,
        column: 59,
        span: 12983..12984,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 451,
        column: 60,
        span: 12984..12985,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 451,
        column: 61,
        span: 12985..12986,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 453,
        column: 6,
        span: 12988..12993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 453,
        column: 8,
        span: 12994..12995,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 453,
        column: 10,
        span: 12996..12997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 453,
        column: 12,
        span: 12998..12999,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 453,
        column: 13,
        span: 12999..13000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        line: 453,
        column: 24,
        span: 13000..13011,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 453,
        column: 25,
        span: 13011..13012,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 453,
        column: 26,
        span: 13011..13013,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 453,
        column: 27,
        span: 13013..13014,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 454,
        column: 6,
        span: 13015..13020,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 454,
        column: 8,
        span: 13021..13022,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 454,
        column: 10,
        span: 13023..13024,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 454,
        column: 12,
        span: 13025..13026,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 454,
        column: 13,
        span: 13026..13027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 455,
        column: 7,
        span: 13028..13034,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 455,
        column: 8,
        span: 13034..13035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 455,
        column: 13,
        span: 13035..13040,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 455,
        column: 14,
        span: 13040..13041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getuservalue",
        ),
        line: 455,
        column: 26,
        span: 13041..13053,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 455,
        column: 27,
        span: 13053..13054,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 455,
        column: 28,
        span: 13054..13055,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 455,
        column: 29,
        span: 13055..13056,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 455,
        column: 32,
        span: 13057..13059,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 455,
        column: 36,
        span: 13060..13063,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 455,
        column: 37,
        span: 13063..13064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 456,
        column: 7,
        span: 13065..13071,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 456,
        column: 8,
        span: 13071..13072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 456,
        column: 13,
        span: 13072..13077,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 456,
        column: 14,
        span: 13077..13078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setuservalue",
        ),
        line: 456,
        column: 26,
        span: 13078..13090,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 456,
        column: 27,
        span: 13090..13091,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 456,
        column: 28,
        span: 13091..13092,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 456,
        column: 29,
        span: 13092..13093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 456,
        column: 31,
        span: 13094..13095,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 456,
        column: 32,
        span: 13095..13096,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 456,
        column: 33,
        span: 13096..13097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 457,
        column: 7,
        span: 13098..13104,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 457,
        column: 8,
        span: 13104..13105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 457,
        column: 13,
        span: 13105..13110,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 457,
        column: 14,
        span: 13110..13111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getuservalue",
        ),
        line: 457,
        column: 26,
        span: 13111..13123,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 457,
        column: 27,
        span: 13123..13124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 457,
        column: 28,
        span: 13124..13125,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 457,
        column: 29,
        span: 13125..13126,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 457,
        column: 32,
        span: 13127..13129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 457,
        column: 34,
        span: 13130..13131,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 457,
        column: 35,
        span: 13131..13132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 458,
        column: 7,
        span: 13133..13139,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 458,
        column: 8,
        span: 13139..13140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 458,
        column: 13,
        span: 13140..13145,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 458,
        column: 14,
        span: 13145..13146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setuservalue",
        ),
        line: 458,
        column: 26,
        span: 13146..13158,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 458,
        column: 27,
        span: 13158..13159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 458,
        column: 28,
        span: 13159..13160,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 458,
        column: 29,
        span: 13160..13161,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 458,
        column: 33,
        span: 13162..13165,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 458,
        column: 34,
        span: 13165..13166,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 458,
        column: 35,
        span: 13166..13167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 459,
        column: 7,
        span: 13168..13174,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 459,
        column: 8,
        span: 13174..13175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 459,
        column: 13,
        span: 13175..13180,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 459,
        column: 14,
        span: 13180..13181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getuservalue",
        ),
        line: 459,
        column: 26,
        span: 13181..13193,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 459,
        column: 27,
        span: 13193..13194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 459,
        column: 28,
        span: 13194..13195,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 459,
        column: 29,
        span: 13195..13196,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 459,
        column: 32,
        span: 13197..13199,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 459,
        column: 36,
        span: 13200..13203,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 459,
        column: 37,
        span: 13203..13204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 461,
        column: 7,
        span: 13206..13212,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 461,
        column: 8,
        span: 13212..13213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 461,
        column: 13,
        span: 13213..13218,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 461,
        column: 14,
        span: 13218..13219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getuservalue",
        ),
        line: 461,
        column: 26,
        span: 13219..13231,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 461,
        column: 27,
        span: 13231..13232,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 461,
        column: 28,
        span: 13231..13233,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 461,
        column: 29,
        span: 13233..13234,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 461,
        column: 32,
        span: 13235..13237,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 461,
        column: 36,
        span: 13238..13241,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 461,
        column: 37,
        span: 13241..13242,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 468,
        column: 6,
        span: 13294..13299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 468,
        column: 8,
        span: 13300..13301,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 468,
        column: 10,
        span: 13302..13303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 468,
        column: 12,
        span: 13304..13305,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 468,
        column: 13,
        span: 13305..13306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        line: 468,
        column: 16,
        span: 13306..13309,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 468,
        column: 17,
        span: 13309..13310,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 468,
        column: 18,
        span: 13310..13311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 469,
        column: 2,
        span: 13312..13313,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 469,
        column: 3,
        span: 13313..13314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        line: 469,
        column: 8,
        span: 13314..13319,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 469,
        column: 9,
        span: 13319..13320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 469,
        column: 10,
        span: 13320..13321,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 469,
        column: 11,
        span: 13321..13322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 470,
        column: 7,
        span: 13323..13329,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 470,
        column: 8,
        span: 13329..13330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 470,
        column: 9,
        span: 13330..13331,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 470,
        column: 10,
        span: 13331..13332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        line: 470,
        column: 13,
        span: 13332..13335,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 470,
        column: 14,
        span: 13335..13336,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 470,
        column: 15,
        span: 13336..13337,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 470,
        column: 18,
        span: 13338..13340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 470,
        column: 20,
        span: 13341..13342,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 470,
        column: 21,
        span: 13342..13343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Arr",
        ),
        line: 472,
        column: 4,
        span: 13345..13348,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 472,
        column: 6,
        span: 13349..13350,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 472,
        column: 8,
        span: 13351..13352,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 472,
        column: 9,
        span: 13352..13353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Lim",
        ),
        line: 473,
        column: 4,
        span: 13354..13357,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 473,
        column: 6,
        span: 13358..13359,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 473,
        column: 0,
        span: 13359..13363,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 474,
        column: 4,
        span: 13364..13367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 474,
        column: 6,
        span: 13368..13369,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 474,
        column: 7,
        span: 13369..13370,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 474,
        column: 8,
        span: 13369..13371,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 474,
        column: 9,
        span: 13371..13372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Lim",
        ),
        line: 474,
        column: 12,
        span: 13372..13375,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 474,
        column: 15,
        span: 13376..13378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Arr",
        ),
        line: 475,
        column: 6,
        span: 13404..13407,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 475,
        column: 7,
        span: 13407..13408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 475,
        column: 8,
        span: 13408..13409,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 475,
        column: 9,
        span: 13409..13410,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 475,
        column: 11,
        span: 13411..13412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 475,
        column: 13,
        span: 13413..13414,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 475,
        column: 14,
        span: 13414..13415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        line: 475,
        column: 17,
        span: 13415..13418,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 475,
        column: 18,
        span: 13418..13419,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 475,
        column: 19,
        span: 13419..13420,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 475,
        column: 20,
        span: 13420..13421,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 475,
        column: 21,
        span: 13421..13422,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 476,
        column: 0,
        span: 13423..13426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 478,
        column: 7,
        span: 13428..13434,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 478,
        column: 8,
        span: 13434..13435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 478,
        column: 9,
        span: 13435..13436,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 478,
        column: 10,
        span: 13436..13437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        line: 478,
        column: 13,
        span: 13437..13440,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 478,
        column: 14,
        span: 13440..13441,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 478,
        column: 17,
        span: 13441..13444,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 478,
        column: 18,
        span: 13444..13445,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 478,
        column: 21,
        span: 13446..13448,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 478,
        column: 23,
        span: 13449..13450,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 478,
        column: 24,
        span: 13449..13451,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 478,
        column: 28,
        span: 13452..13455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 478,
        column: 30,
        span: 13456..13457,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 478,
        column: 31,
        span: 13457..13458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getref",
        ),
        line: 478,
        column: 37,
        span: 13458..13464,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 478,
        column: 38,
        span: 13464..13465,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 478,
        column: 39,
        span: 13465..13466,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 478,
        column: 40,
        span: 13465..13467,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 478,
        column: 41,
        span: 13467..13468,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 478,
        column: 44,
        span: 13469..13471,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 478,
        column: 48,
        span: 13472..13475,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 478,
        column: 49,
        span: 13475..13476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 479,
        column: 2,
        span: 13477..13478,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 479,
        column: 3,
        span: 13478..13479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        line: 479,
        column: 8,
        span: 13479..13484,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 479,
        column: 9,
        span: 13484..13485,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 479,
        column: 10,
        span: 13485..13486,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 479,
        column: 11,
        span: 13485..13487,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 479,
        column: 12,
        span: 13487..13488,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 479,
        column: 13,
        span: 13488..13489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 479,
        column: 15,
        span: 13490..13491,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 479,
        column: 16,
        span: 13491..13492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        line: 479,
        column: 21,
        span: 13492..13497,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 479,
        column: 22,
        span: 13497..13498,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 479,
        column: 23,
        span: 13498..13499,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 479,
        column: 24,
        span: 13498..13500,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 479,
        column: 25,
        span: 13500..13501,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 481,
        column: 4,
        span: 13503..13506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 481,
        column: 6,
        span: 13507..13508,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 481,
        column: 7,
        span: 13508..13509,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 481,
        column: 8,
        span: 13508..13510,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 481,
        column: 9,
        span: 13510..13511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Lim",
        ),
        line: 481,
        column: 12,
        span: 13511..13514,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 481,
        column: 15,
        span: 13515..13517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 482,
        column: 4,
        span: 13541..13542,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 482,
        column: 5,
        span: 13542..13543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        line: 482,
        column: 10,
        span: 13543..13548,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 482,
        column: 11,
        span: 13548..13549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Arr",
        ),
        line: 482,
        column: 14,
        span: 13549..13552,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 482,
        column: 15,
        span: 13552..13553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 482,
        column: 16,
        span: 13553..13554,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 482,
        column: 17,
        span: 13554..13555,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 482,
        column: 18,
        span: 13555..13556,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 483,
        column: 0,
        span: 13557..13560,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 485,
        column: 9,
        span: 13562..13570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "printlocks",
        ),
        line: 485,
        column: 20,
        span: 13571..13581,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 485,
        column: 22,
        span: 13582..13583,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 485,
        column: 23,
        span: 13583..13584,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 486,
        column: 8,
        span: 13587..13592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 486,
        column: 10,
        span: 13593..13594,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 486,
        column: 12,
        span: 13595..13596,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 486,
        column: 14,
        span: 13597..13598,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 486,
        column: 15,
        span: 13598..13599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "makeCfunc",
        ),
        line: 486,
        column: 24,
        span: 13599..13608,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 486,
        column: 25,
        span: 13608..13609,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gettable R; return 1\"",
        ),
        line: 486,
        column: 47,
        span: 13609..13631,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 486,
        column: 48,
        span: 13631..13632,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 487,
        column: 8,
        span: 13635..13640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 487,
        column: 10,
        span: 13641..13642,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 487,
        column: 12,
        span: 13643..13644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 487,
        column: 14,
        span: 13645..13646,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 487,
        column: 15,
        span: 13646..13647,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 487,
        column: 18,
        span: 13647..13650,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 487,
        column: 19,
        span: 13650..13651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 488,
        column: 8,
        span: 13654..13659,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 488,
        column: 9,
        span: 13659..13660,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 488,
        column: 12,
        span: 13660..13663,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 488,
        column: 13,
        span: 13663..13664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 488,
        column: 15,
        span: 13665..13666,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 488,
        column: 16,
        span: 13666..13667,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 489,
        column: 6,
        span: 13670..13673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 489,
        column: 8,
        span: 13674..13675,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 489,
        column: 9,
        span: 13675..13676,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 489,
        column: 10,
        span: 13675..13677,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 489,
        column: 11,
        span: 13677..13678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 489,
        column: 12,
        span: 13678..13679,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 489,
        column: 0,
        span: 13680..13682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 490,
        column: 10,
        span: 13687..13692,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 490,
        column: 11,
        span: 13692..13693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 490,
        column: 12,
        span: 13693..13694,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 490,
        column: 13,
        span: 13694..13695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 490,
        column: 15,
        span: 13696..13697,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 490,
        column: 16,
        span: 13697..13698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 490,
        column: 17,
        span: 13698..13699,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 490,
        column: 18,
        span: 13699..13700,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 490,
        column: 19,
        span: 13700..13701,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 491,
        column: 0,
        span: 13704..13707,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 492,
        column: 0,
        span: 13708..13711,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 495,
        column: 4,
        span: 13714..13717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 495,
        column: 6,
        span: 13718..13719,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 495,
        column: 7,
        span: 13719..13720,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 495,
        column: 8,
        span: 13719..13721,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 495,
        column: 9,
        span: 13721..13722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Lim",
        ),
        line: 495,
        column: 12,
        span: 13722..13725,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 495,
        column: 15,
        span: 13726..13728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Arr",
        ),
        line: 496,
        column: 6,
        span: 13754..13757,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 496,
        column: 7,
        span: 13757..13758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 496,
        column: 8,
        span: 13758..13759,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 496,
        column: 9,
        span: 13759..13760,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 496,
        column: 11,
        span: 13761..13762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 496,
        column: 13,
        span: 13763..13764,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 496,
        column: 14,
        span: 13764..13765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        line: 496,
        column: 17,
        span: 13765..13768,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 496,
        column: 18,
        span: 13768..13769,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 496,
        column: 19,
        span: 13769..13770,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 496,
        column: 20,
        span: 13770..13771,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 496,
        column: 21,
        span: 13771..13772,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 497,
        column: 0,
        span: 13773..13776,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 499,
        column: 4,
        span: 13778..13781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 499,
        column: 6,
        span: 13782..13783,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 499,
        column: 7,
        span: 13783..13784,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 499,
        column: 8,
        span: 13783..13785,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 499,
        column: 9,
        span: 13785..13786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Lim",
        ),
        line: 499,
        column: 12,
        span: 13786..13789,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 499,
        column: 13,
        span: 13789..13790,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 499,
        column: 14,
        span: 13789..13791,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 499,
        column: 17,
        span: 13792..13794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 500,
        column: 4,
        span: 13822..13823,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 500,
        column: 5,
        span: 13823..13824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        line: 500,
        column: 10,
        span: 13824..13829,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 500,
        column: 11,
        span: 13829..13830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Arr",
        ),
        line: 500,
        column: 14,
        span: 13830..13833,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 500,
        column: 15,
        span: 13833..13834,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 500,
        column: 16,
        span: 13834..13835,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 500,
        column: 17,
        span: 13835..13836,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 500,
        column: 18,
        span: 13836..13837,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 501,
        column: 0,
        span: 13838..13841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 503,
        column: 7,
        span: 13843..13849,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 503,
        column: 8,
        span: 13849..13850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 503,
        column: 12,
        span: 13850..13854,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 503,
        column: 13,
        span: 13854..13855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 503,
        column: 14,
        span: 13855..13856,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 503,
        column: 15,
        span: 13856..13857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getref",
        ),
        line: 503,
        column: 21,
        span: 13857..13863,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 503,
        column: 22,
        span: 13863..13864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Arr",
        ),
        line: 503,
        column: 25,
        span: 13864..13867,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 503,
        column: 26,
        span: 13867..13868,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 503,
        column: 27,
        span: 13867..13869,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 503,
        column: 28,
        span: 13869..13870,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 503,
        column: 29,
        span: 13870..13871,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 503,
        column: 30,
        span: 13871..13872,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 503,
        column: 33,
        span: 13873..13875,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        line: 503,
        column: 41,
        span: 13876..13883,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 503,
        column: 42,
        span: 13883..13884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 506,
        column: 7,
        span: 13887..13893,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 506,
        column: 8,
        span: 13893..13894,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 506,
        column: 9,
        span: 13894..13895,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 506,
        column: 10,
        span: 13895..13896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getref",
        ),
        line: 506,
        column: 16,
        span: 13896..13902,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 506,
        column: 17,
        span: 13902..13903,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 506,
        column: 18,
        span: 13903..13904,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 506,
        column: 19,
        span: 13903..13905,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 506,
        column: 20,
        span: 13905..13906,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 506,
        column: 23,
        span: 13907..13909,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 506,
        column: 27,
        span: 13910..13913,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 506,
        column: 28,
        span: 13913..13914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 509,
        column: 2,
        span: 13917..13918,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 509,
        column: 4,
        span: 13919..13920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 509,
        column: 6,
        span: 13921..13922,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 509,
        column: 7,
        span: 13922..13923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        line: 509,
        column: 10,
        span: 13923..13926,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 509,
        column: 11,
        span: 13926..13927,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 509,
        column: 12,
        span: 13927..13928,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 509,
        column: 13,
        span: 13928..13929,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 509,
        column: 14,
        span: 13929..13930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 511,
        column: 15,
        span: 13932..13946,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 511,
        column: 16,
        span: 13946..13947,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 511,
        column: 17,
        span: 13947..13948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 513,
        column: 7,
        span: 13950..13956,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 513,
        column: 8,
        span: 13956..13957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 513,
        column: 12,
        span: 13957..13961,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 513,
        column: 13,
        span: 13961..13962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 513,
        column: 14,
        span: 13962..13963,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 513,
        column: 15,
        span: 13963..13964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getref",
        ),
        line: 513,
        column: 21,
        span: 13964..13970,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 513,
        column: 22,
        span: 13970..13971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 513,
        column: 23,
        span: 13971..13972,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 513,
        column: 24,
        span: 13972..13973,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 513,
        column: 25,
        span: 13973..13974,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 513,
        column: 28,
        span: 13975..13977,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        line: 513,
        column: 36,
        span: 13978..13985,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 513,
        column: 37,
        span: 13985..13986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        line: 517,
        column: 3,
        span: 14041..14043,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 517,
        column: 5,
        span: 14044..14045,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 517,
        column: 7,
        span: 14046..14047,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 517,
        column: 8,
        span: 14047..14048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        line: 518,
        column: 3,
        span: 14049..14051,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 518,
        column: 5,
        span: 14052..14053,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 518,
        column: 7,
        span: 14054..14055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 518,
        column: 8,
        span: 14055..14056,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 518,
        column: 9,
        span: 14056..14057,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 518,
        column: 10,
        span: 14056..14058,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 518,
        column: 11,
        span: 14058..14059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 519,
        column: 2,
        span: 14060..14061,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 519,
        column: 4,
        span: 14062..14063,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 519,
        column: 8,
        span: 14064..14067,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 519,
        column: 9,
        span: 14067..14068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 519,
        column: 11,
        span: 14069..14070,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 519,
        column: 13,
        span: 14071..14072,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 519,
        column: 0,
        span: 14073..14076,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 520,
        column: 6,
        span: 14077..14082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 520,
        column: 0,
        span: 14083..14084,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 521,
        column: 2,
        span: 14085..14086,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 521,
        column: 4,
        span: 14087..14088,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 521,
        column: 13,
        span: 14089..14097,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 521,
        column: 15,
        span: 14098..14099,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 521,
        column: 16,
        span: 14099..14100,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 521,
        column: 17,
        span: 14100..14101,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 522,
        column: 8,
        span: 14104..14109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udval",
        ),
        line: 522,
        column: 14,
        span: 14110..14115,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 522,
        column: 16,
        span: 14116..14117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 522,
        column: 18,
        span: 14118..14119,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 522,
        column: 19,
        span: 14119..14120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        line: 522,
        column: 27,
        span: 14120..14128,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 522,
        column: 28,
        span: 14128..14129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 522,
        column: 29,
        span: 14129..14130,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 522,
        column: 30,
        span: 14130..14131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 523,
        column: 8,
        span: 14134..14139,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 523,
        column: 9,
        span: 14139..14140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 523,
        column: 15,
        span: 14140..14146,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 523,
        column: 16,
        span: 14146..14147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        line: 523,
        column: 18,
        span: 14147..14149,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 523,
        column: 19,
        span: 14149..14150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udval",
        ),
        line: 523,
        column: 25,
        span: 14151..14156,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 523,
        column: 26,
        span: 14156..14157,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 524,
        column: 8,
        span: 14160..14165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 524,
        column: 10,
        span: 14166..14167,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 524,
        column: 12,
        span: 14168..14169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 524,
        column: 14,
        span: 14170..14171,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 524,
        column: 15,
        span: 14171..14172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        line: 524,
        column: 26,
        span: 14172..14183,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 524,
        column: 27,
        span: 14183..14184,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 524,
        column: 30,
        span: 14183..14187,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 524,
        column: 31,
        span: 14187..14188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 525,
        column: 4,
        span: 14206..14207,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 525,
        column: 6,
        span: 14208..14209,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 525,
        column: 0,
        span: 14210..14213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 526,
        column: 9,
        span: 14216..14222,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 526,
        column: 10,
        span: 14222..14223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 526,
        column: 15,
        span: 14223..14228,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 526,
        column: 16,
        span: 14228..14229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 526,
        column: 28,
        span: 14229..14241,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 526,
        column: 29,
        span: 14241..14242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 526,
        column: 30,
        span: 14242..14243,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 526,
        column: 31,
        span: 14243..14244,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 526,
        column: 32,
        span: 14244..14245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 526,
        column: 36,
        span: 14245..14249,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 526,
        column: 39,
        span: 14250..14252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 526,
        column: 41,
        span: 14253..14254,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 526,
        column: 42,
        span: 14254..14255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 527,
        column: 9,
        span: 14258..14264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 527,
        column: 10,
        span: 14264..14265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 527,
        column: 14,
        span: 14265..14269,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 527,
        column: 15,
        span: 14269..14270,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table.insert({}, {})\"",
        ),
        line: 527,
        column: 37,
        span: 14270..14292,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 527,
        column: 38,
        span: 14292..14293,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 527,
        column: 39,
        span: 14293..14294,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 527,
        column: 40,
        span: 14294..14295,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 527,
        column: 41,
        span: 14295..14296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 528,
        column: 17,
        span: 14319..14333,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 528,
        column: 18,
        span: 14333..14334,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 528,
        column: 19,
        span: 14334..14335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 529,
        column: 9,
        span: 14380..14386,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 529,
        column: 10,
        span: 14386..14387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 529,
        column: 15,
        span: 14387..14392,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 529,
        column: 16,
        span: 14392..14393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 529,
        column: 28,
        span: 14393..14405,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 529,
        column: 29,
        span: 14405..14406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 529,
        column: 30,
        span: 14406..14407,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 529,
        column: 31,
        span: 14407..14408,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 529,
        column: 32,
        span: 14408..14409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 529,
        column: 36,
        span: 14409..14413,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 529,
        column: 39,
        span: 14414..14416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 529,
        column: 41,
        span: 14417..14418,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 529,
        column: 42,
        span: 14418..14419,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 530,
        column: 8,
        span: 14459..14464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        line: 530,
        column: 14,
        span: 14465..14470,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 530,
        column: 16,
        span: 14471..14472,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 530,
        column: 18,
        span: 14473..14474,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 530,
        column: 19,
        span: 14474..14475,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 531,
        column: 5,
        span: 14509..14511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 531,
        column: 7,
        span: 14512..14513,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 531,
        column: 10,
        span: 14514..14516,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 531,
        column: 14,
        span: 14517..14520,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 531,
        column: 0,
        span: 14521..14525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 532,
        column: 11,
        span: 14530..14536,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 532,
        column: 12,
        span: 14536..14537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 532,
        column: 16,
        span: 14537..14541,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 532,
        column: 17,
        span: 14541..14542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 532,
        column: 18,
        span: 14542..14543,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 532,
        column: 19,
        span: 14543..14544,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 532,
        column: 22,
        span: 14545..14547,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"userdata\"",
        ),
        line: 532,
        column: 33,
        span: 14548..14558,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 532,
        column: 34,
        span: 14558..14559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 533,
        column: 11,
        span: 14564..14570,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 533,
        column: 12,
        span: 14570..14571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 533,
        column: 13,
        span: 14571..14572,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 533,
        column: 14,
        span: 14572..14573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        line: 533,
        column: 22,
        span: 14573..14581,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 533,
        column: 23,
        span: 14581..14582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 533,
        column: 24,
        span: 14582..14583,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 533,
        column: 25,
        span: 14583..14584,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 533,
        column: 28,
        span: 14585..14587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 533,
        column: 30,
        span: 14588..14589,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 533,
        column: 31,
        span: 14589..14590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 534,
        column: 10,
        span: 14595..14600,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 534,
        column: 11,
        span: 14600..14601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 534,
        column: 23,
        span: 14601..14613,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 534,
        column: 24,
        span: 14613..14614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 534,
        column: 25,
        span: 14614..14615,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 534,
        column: 26,
        span: 14615..14616,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 535,
        column: 0,
        span: 14639..14642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 536,
        column: 4,
        span: 14645..14646,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 536,
        column: 6,
        span: 14647..14648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 536,
        column: 8,
        span: 14649..14650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 537,
        column: 4,
        span: 14677..14678,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 537,
        column: 6,
        span: 14679..14680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udval",
        ),
        line: 537,
        column: 0,
        span: 14681..14686,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 538,
        column: 9,
        span: 14689..14695,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 538,
        column: 11,
        span: 14695..14697,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 538,
        column: 12,
        span: 14697..14698,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 538,
        column: 13,
        span: 14697..14699,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 538,
        column: 14,
        span: 14699..14700,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 538,
        column: 0,
        span: 14699..14701,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 539,
        column: 0,
        span: 14702..14705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        line: 540,
        column: 3,
        span: 14706..14708,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 540,
        column: 4,
        span: 14708..14709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 540,
        column: 8,
        span: 14709..14713,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 540,
        column: 10,
        span: 14714..14715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 540,
        column: 0,
        span: 14716..14717,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 543,
        column: 0,
        span: 14783..14785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 544,
        column: 17,
        span: 14788..14802,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 544,
        column: 18,
        span: 14802..14803,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 544,
        column: 19,
        span: 14803..14804,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 544,
        column: 20,
        span: 14804..14805,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 545,
        column: 17,
        span: 14808..14822,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 545,
        column: 18,
        span: 14822..14823,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 545,
        column: 19,
        span: 14823..14824,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 545,
        column: 20,
        span: 14824..14825,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 546,
        column: 8,
        span: 14828..14833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 546,
        column: 10,
        span: 14834..14835,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 546,
        column: 12,
        span: 14836..14837,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 546,
        column: 27,
        span: 14838..14852,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 546,
        column: 28,
        span: 14852..14853,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        line: 546,
        column: 35,
        span: 14853..14860,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 546,
        column: 36,
        span: 14860..14861,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 546,
        column: 37,
        span: 14861..14862,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 547,
        column: 8,
        span: 14865..14870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 547,
        column: 10,
        span: 14871..14872,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 547,
        column: 12,
        span: 14873..14874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 547,
        column: 14,
        span: 14875..14876,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 547,
        column: 15,
        span: 14876..14877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        line: 547,
        column: 26,
        span: 14877..14888,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 547,
        column: 27,
        span: 14888..14889,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5001",
                    after_decimal: "",
                },
            ),
        ),
        line: 547,
        column: 31,
        span: 14888..14893,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 547,
        column: 32,
        span: 14893..14894,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 548,
        column: 9,
        span: 14897..14903,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 548,
        column: 10,
        span: 14903..14904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 548,
        column: 11,
        span: 14904..14905,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 548,
        column: 12,
        span: 14905..14906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 548,
        column: 17,
        span: 14906..14911,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 548,
        column: 18,
        span: 14911..14912,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize 2; return 1\"",
        ),
        line: 548,
        column: 39,
        span: 14912..14933,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 548,
        column: 40,
        span: 14933..14934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 548,
        column: 42,
        span: 14935..14936,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 548,
        column: 43,
        span: 14936..14937,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 548,
        column: 46,
        span: 14938..14940,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5001",
                    after_decimal: "",
                },
            ),
        ),
        line: 548,
        column: 51,
        span: 14940..14945,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 548,
        column: 52,
        span: 14945..14946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 549,
        column: 9,
        span: 14949..14955,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 549,
        column: 10,
        span: 14955..14956,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 549,
        column: 24,
        span: 14956..14970,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 549,
        column: 25,
        span: 14970..14971,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        line: 549,
        column: 32,
        span: 14971..14978,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 549,
        column: 33,
        span: 14978..14979,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 549,
        column: 36,
        span: 14980..14982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 549,
        column: 38,
        span: 14983..14984,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 549,
        column: 39,
        span: 14984..14985,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 549,
        column: 40,
        span: 14984..14986,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 549,
        column: 41,
        span: 14986..14987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 550,
        column: 4,
        span: 14991..14992,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 550,
        column: 6,
        span: 14993..14994,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 550,
        column: 0,
        span: 14995..14998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 551,
        column: 17,
        span: 15001..15015,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 551,
        column: 18,
        span: 15015..15016,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 551,
        column: 19,
        span: 15016..15017,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 551,
        column: 20,
        span: 15017..15018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 552,
        column: 9,
        span: 15021..15027,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 552,
        column: 10,
        span: 15027..15028,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 552,
        column: 24,
        span: 15028..15042,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 552,
        column: 25,
        span: 15042..15043,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        line: 552,
        column: 32,
        span: 15043..15050,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 552,
        column: 33,
        span: 15050..15051,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 552,
        column: 36,
        span: 15052..15054,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 552,
        column: 38,
        span: 15055..15056,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 552,
        column: 39,
        span: 15056..15057,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 552,
        column: 40,
        span: 15056..15058,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 552,
        column: 41,
        span: 15058..15059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 554,
        column: 4,
        span: 15091..15092,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 554,
        column: 6,
        span: 15093..15094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 554,
        column: 21,
        span: 15095..15109,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 554,
        column: 22,
        span: 15109..15110,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        line: 554,
        column: 29,
        span: 15110..15117,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 554,
        column: 30,
        span: 15117..15118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 555,
        column: 17,
        span: 15121..15135,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 555,
        column: 18,
        span: 15135..15136,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        line: 555,
        column: 24,
        span: 15136..15142,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 555,
        column: 25,
        span: 15142..15143,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 556,
        column: 6,
        span: 15146..15149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 556,
        column: 8,
        span: 15150..15151,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 556,
        column: 9,
        span: 15151..15152,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 556,
        column: 10,
        span: 15151..15153,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 556,
        column: 11,
        span: 15153..15154,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 556,
        column: 15,
        span: 15153..15158,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 556,
        column: 18,
        span: 15159..15161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 556,
        column: 20,
        span: 15162..15163,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 556,
        column: 21,
        span: 15163..15164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        line: 556,
        column: 32,
        span: 15164..15175,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 556,
        column: 33,
        span: 15175..15176,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 556,
        column: 34,
        span: 15175..15177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 556,
        column: 35,
        span: 15177..15178,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 556,
        column: 0,
        span: 15179..15182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 557,
        column: 9,
        span: 15185..15191,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 557,
        column: 10,
        span: 15191..15192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 557,
        column: 24,
        span: 15192..15206,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 557,
        column: 25,
        span: 15206..15207,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        line: 557,
        column: 32,
        span: 15207..15214,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 557,
        column: 33,
        span: 15214..15215,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 557,
        column: 35,
        span: 15216..15217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 557,
        column: 37,
        span: 15218..15219,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 557,
        column: 38,
        span: 15219..15220,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 557,
        column: 40,
        span: 15219..15222,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 557,
        column: 41,
        span: 15222..15223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 558,
        column: 17,
        span: 15226..15240,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 558,
        column: 18,
        span: 15240..15241,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 558,
        column: 19,
        span: 15241..15242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 559,
        column: 9,
        span: 15245..15251,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 559,
        column: 10,
        span: 15251..15252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 559,
        column: 24,
        span: 15252..15266,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 559,
        column: 25,
        span: 15266..15267,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        line: 559,
        column: 32,
        span: 15267..15274,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 559,
        column: 33,
        span: 15274..15275,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 559,
        column: 36,
        span: 15276..15278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 559,
        column: 38,
        span: 15279..15280,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 559,
        column: 39,
        span: 15280..15281,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 559,
        column: 40,
        span: 15280..15282,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 559,
        column: 41,
        span: 15282..15283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 561,
        column: 4,
        span: 15312..15313,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 561,
        column: 6,
        span: 15314..15315,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 561,
        column: 21,
        span: 15316..15330,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 561,
        column: 22,
        span: 15330..15331,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        line: 561,
        column: 29,
        span: 15331..15338,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 561,
        column: 30,
        span: 15338..15339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 562,
        column: 17,
        span: 15342..15356,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 562,
        column: 18,
        span: 15356..15357,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 562,
        column: 19,
        span: 15357..15358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 563,
        column: 17,
        span: 15361..15375,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 563,
        column: 18,
        span: 15375..15376,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        line: 563,
        column: 24,
        span: 15376..15382,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 563,
        column: 25,
        span: 15382..15383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 564,
        column: 4,
        span: 15386..15387,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 564,
        column: 6,
        span: 15388..15389,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 564,
        column: 8,
        span: 15390..15391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 564,
        column: 12,
        span: 15391..15395,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 564,
        column: 14,
        span: 15396..15397,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 564,
        column: 23,
        span: 15398..15406,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 564,
        column: 25,
        span: 15407..15408,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 564,
        column: 26,
        span: 15408..15409,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 564,
        column: 30,
        span: 15410..15413,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 564,
        column: 31,
        span: 15413..15414,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 565,
        column: 6,
        span: 15417..15420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 565,
        column: 8,
        span: 15421..15422,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 565,
        column: 9,
        span: 15422..15423,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 565,
        column: 10,
        span: 15422..15424,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 565,
        column: 11,
        span: 15424..15425,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 565,
        column: 15,
        span: 15424..15429,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 565,
        column: 18,
        span: 15430..15432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 565,
        column: 24,
        span: 15433..15438,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 565,
        column: 25,
        span: 15438..15439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 565,
        column: 37,
        span: 15439..15451,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 565,
        column: 38,
        span: 15451..15452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 565,
        column: 39,
        span: 15452..15453,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 565,
        column: 40,
        span: 15453..15454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        line: 565,
        column: 51,
        span: 15454..15465,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 565,
        column: 52,
        span: 15465..15466,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 565,
        column: 53,
        span: 15465..15467,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 565,
        column: 54,
        span: 15467..15468,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 565,
        column: 55,
        span: 15468..15469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 565,
        column: 57,
        span: 15470..15471,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 565,
        column: 58,
        span: 15471..15472,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 565,
        column: 0,
        span: 15473..15476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 566,
        column: 9,
        span: 15479..15485,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 566,
        column: 10,
        span: 15485..15486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 566,
        column: 24,
        span: 15486..15500,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 566,
        column: 25,
        span: 15500..15501,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        line: 566,
        column: 32,
        span: 15501..15508,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 566,
        column: 33,
        span: 15508..15509,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 566,
        column: 36,
        span: 15510..15512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 566,
        column: 38,
        span: 15513..15514,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 566,
        column: 39,
        span: 15514..15515,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 566,
        column: 41,
        span: 15514..15517,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 566,
        column: 42,
        span: 15517..15518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 567,
        column: 17,
        span: 15521..15535,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 567,
        column: 18,
        span: 15535..15536,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 567,
        column: 19,
        span: 15536..15537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 568,
        column: 9,
        span: 15598..15604,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 568,
        column: 10,
        span: 15604..15605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 568,
        column: 24,
        span: 15605..15619,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 568,
        column: 25,
        span: 15619..15620,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        line: 568,
        column: 32,
        span: 15620..15627,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 568,
        column: 33,
        span: 15627..15628,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 568,
        column: 36,
        span: 15629..15631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 568,
        column: 38,
        span: 15632..15633,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 568,
        column: 39,
        span: 15633..15634,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 568,
        column: 41,
        span: 15633..15636,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 568,
        column: 42,
        span: 15636..15637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 569,
        column: 17,
        span: 15640..15654,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 569,
        column: 18,
        span: 15654..15655,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 569,
        column: 19,
        span: 15655..15656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 570,
        column: 9,
        span: 15680..15686,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 570,
        column: 10,
        span: 15686..15687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 570,
        column: 24,
        span: 15687..15701,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 570,
        column: 25,
        span: 15701..15702,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        line: 570,
        column: 32,
        span: 15702..15709,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 570,
        column: 33,
        span: 15709..15710,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 570,
        column: 36,
        span: 15711..15713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 570,
        column: 38,
        span: 15714..15715,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 570,
        column: 39,
        span: 15715..15716,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 570,
        column: 40,
        span: 15715..15717,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 570,
        column: 41,
        span: 15717..15718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 571,
        column: 17,
        span: 15721..15735,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 571,
        column: 18,
        span: 15735..15736,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"restart\"",
        ),
        line: 571,
        column: 27,
        span: 15736..15745,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 571,
        column: 28,
        span: 15745..15746,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 572,
        column: 0,
        span: 15747..15750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 575,
        column: 15,
        span: 15753..15767,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 575,
        column: 16,
        span: 15767..15768,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        line: 575,
        column: 22,
        span: 15768..15774,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 575,
        column: 23,
        span: 15774..15775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 578,
        column: 2,
        span: 15813..15814,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 578,
        column: 4,
        span: 15815..15816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 578,
        column: 6,
        span: 15817..15818,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 578,
        column: 7,
        span: 15818..15819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        line: 578,
        column: 18,
        span: 15819..15830,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 578,
        column: 19,
        span: 15830..15831,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 578,
        column: 20,
        span: 15830..15832,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 578,
        column: 21,
        span: 15832..15833,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 578,
        column: 22,
        span: 15833..15834,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 578,
        column: 28,
        span: 15835..15840,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 578,
        column: 29,
        span: 15840..15841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 578,
        column: 41,
        span: 15841..15853,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 578,
        column: 42,
        span: 15853..15854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 578,
        column: 43,
        span: 15854..15855,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 578,
        column: 44,
        span: 15855..15856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        line: 578,
        column: 47,
        span: 15857..15859,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 578,
        column: 48,
        span: 15859..15860,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 578,
        column: 49,
        span: 15860..15861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        line: 578,
        column: 52,
        span: 15862..15864,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 578,
        column: 54,
        span: 15865..15866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 578,
        column: 56,
        span: 15867..15868,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 578,
        column: 57,
        span: 15868..15869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        line: 578,
        column: 65,
        span: 15869..15877,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 578,
        column: 66,
        span: 15877..15878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 578,
        column: 67,
        span: 15878..15879,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 578,
        column: 68,
        span: 15879..15880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 579,
        column: 2,
        span: 15881..15882,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 579,
        column: 4,
        span: 15883..15884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 579,
        column: 6,
        span: 15885..15886,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 579,
        column: 7,
        span: 15886..15887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        line: 579,
        column: 18,
        span: 15887..15898,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 579,
        column: 19,
        span: 15898..15899,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 579,
        column: 20,
        span: 15898..15900,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 579,
        column: 21,
        span: 15900..15901,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 579,
        column: 22,
        span: 15901..15902,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 579,
        column: 28,
        span: 15903..15908,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 579,
        column: 29,
        span: 15908..15909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 579,
        column: 41,
        span: 15909..15921,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 579,
        column: 42,
        span: 15921..15922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 579,
        column: 43,
        span: 15922..15923,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 579,
        column: 44,
        span: 15923..15924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        line: 579,
        column: 47,
        span: 15925..15927,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 579,
        column: 48,
        span: 15927..15928,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 579,
        column: 49,
        span: 15928..15929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nb",
        ),
        line: 579,
        column: 52,
        span: 15930..15932,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 579,
        column: 54,
        span: 15933..15934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 579,
        column: 56,
        span: 15935..15936,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 579,
        column: 57,
        span: 15936..15937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        line: 579,
        column: 65,
        span: 15937..15945,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 579,
        column: 66,
        span: 15945..15946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 579,
        column: 67,
        span: 15946..15947,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 579,
        column: 68,
        span: 15947..15948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 580,
        column: 2,
        span: 15949..15950,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 580,
        column: 4,
        span: 15951..15952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 580,
        column: 6,
        span: 15953..15954,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 580,
        column: 7,
        span: 15954..15955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        line: 580,
        column: 18,
        span: 15955..15966,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 580,
        column: 19,
        span: 15966..15967,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 580,
        column: 20,
        span: 15966..15968,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 580,
        column: 21,
        span: 15968..15969,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 580,
        column: 22,
        span: 15969..15970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 580,
        column: 28,
        span: 15971..15976,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 580,
        column: 29,
        span: 15976..15977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 580,
        column: 41,
        span: 15977..15989,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 580,
        column: 42,
        span: 15989..15990,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 580,
        column: 43,
        span: 15990..15991,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 580,
        column: 44,
        span: 15991..15992,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        line: 580,
        column: 47,
        span: 15993..15995,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 580,
        column: 48,
        span: 15995..15996,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 580,
        column: 49,
        span: 15996..15997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nc",
        ),
        line: 580,
        column: 52,
        span: 15998..16000,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 580,
        column: 54,
        span: 16001..16002,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 580,
        column: 56,
        span: 16003..16004,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 580,
        column: 57,
        span: 16004..16005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        line: 580,
        column: 65,
        span: 16005..16013,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 580,
        column: 66,
        span: 16013..16014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 580,
        column: 67,
        span: 16014..16015,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 580,
        column: 68,
        span: 16015..16016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 583,
        column: 2,
        span: 16056..16057,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 583,
        column: 4,
        span: 16058..16059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 583,
        column: 6,
        span: 16060..16061,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 583,
        column: 7,
        span: 16061..16062,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        line: 583,
        column: 18,
        span: 16062..16073,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 583,
        column: 19,
        span: 16073..16074,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 583,
        column: 20,
        span: 16073..16075,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 583,
        column: 21,
        span: 16075..16076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 584,
        column: 2,
        span: 16077..16078,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 584,
        column: 4,
        span: 16079..16080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 584,
        column: 6,
        span: 16081..16082,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 584,
        column: 7,
        span: 16082..16083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        line: 584,
        column: 18,
        span: 16083..16094,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 584,
        column: 19,
        span: 16094..16095,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 584,
        column: 20,
        span: 16094..16096,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 584,
        column: 21,
        span: 16096..16097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 586,
        column: 7,
        span: 16099..16105,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 586,
        column: 8,
        span: 16105..16106,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 586,
        column: 11,
        span: 16106..16109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 586,
        column: 17,
        span: 16110..16115,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 586,
        column: 18,
        span: 16115..16116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 586,
        column: 20,
        span: 16116..16118,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 586,
        column: 21,
        span: 16118..16119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 586,
        column: 26,
        span: 16119..16124,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 586,
        column: 27,
        span: 16124..16125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 586,
        column: 29,
        span: 16126..16127,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 586,
        column: 30,
        span: 16127..16128,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 586,
        column: 31,
        span: 16128..16129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 587,
        column: 7,
        span: 16130..16136,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 587,
        column: 8,
        span: 16136..16137,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 587,
        column: 11,
        span: 16137..16140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 587,
        column: 17,
        span: 16141..16146,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 587,
        column: 18,
        span: 16146..16147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 587,
        column: 20,
        span: 16147..16149,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 587,
        column: 21,
        span: 16149..16150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 587,
        column: 26,
        span: 16150..16155,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 587,
        column: 27,
        span: 16155..16156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 587,
        column: 29,
        span: 16157..16158,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 587,
        column: 30,
        span: 16158..16159,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 587,
        column: 31,
        span: 16159..16160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 589,
        column: 7,
        span: 16162..16168,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 589,
        column: 8,
        span: 16168..16169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 589,
        column: 13,
        span: 16169..16174,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 589,
        column: 14,
        span: 16174..16175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 589,
        column: 26,
        span: 16175..16187,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 589,
        column: 27,
        span: 16187..16188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 589,
        column: 28,
        span: 16188..16189,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 589,
        column: 29,
        span: 16189..16190,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 589,
        column: 32,
        span: 16191..16193,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 589,
        column: 36,
        span: 16194..16197,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 589,
        column: 40,
        span: 16198..16201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 589,
        column: 46,
        span: 16202..16207,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 589,
        column: 47,
        span: 16207..16208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 589,
        column: 59,
        span: 16208..16220,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 589,
        column: 60,
        span: 16220..16221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 589,
        column: 61,
        span: 16221..16222,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 589,
        column: 62,
        span: 16222..16223,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 589,
        column: 65,
        span: 16224..16226,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 589,
        column: 69,
        span: 16227..16230,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 589,
        column: 70,
        span: 16230..16231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 591,
        column: 2,
        span: 16233..16234,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 591,
        column: 3,
        span: 16234..16235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 591,
        column: 4,
        span: 16235..16236,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 591,
        column: 5,
        span: 16236..16237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        line: 591,
        column: 8,
        span: 16237..16240,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 591,
        column: 9,
        span: 16240..16241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 591,
        column: 10,
        span: 16241..16242,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 591,
        column: 11,
        span: 16242..16243,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 591,
        column: 12,
        span: 16243..16244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 592,
        column: 2,
        span: 16245..16246,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 592,
        column: 3,
        span: 16246..16247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 592,
        column: 4,
        span: 16247..16248,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 592,
        column: 5,
        span: 16248..16249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        line: 592,
        column: 8,
        span: 16249..16252,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 592,
        column: 9,
        span: 16252..16253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 592,
        column: 10,
        span: 16253..16254,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 592,
        column: 11,
        span: 16254..16255,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 592,
        column: 12,
        span: 16255..16256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 593,
        column: 2,
        span: 16257..16258,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 593,
        column: 3,
        span: 16258..16259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 593,
        column: 4,
        span: 16259..16260,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 593,
        column: 5,
        span: 16260..16261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        line: 593,
        column: 8,
        span: 16261..16264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 593,
        column: 9,
        span: 16264..16265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 593,
        column: 10,
        span: 16265..16266,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 593,
        column: 11,
        span: 16266..16267,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 593,
        column: 12,
        span: 16267..16268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 594,
        column: 2,
        span: 16269..16270,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 594,
        column: 4,
        span: 16271..16272,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 594,
        column: 6,
        span: 16273..16274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 594,
        column: 7,
        span: 16274..16275,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 594,
        column: 8,
        span: 16275..16276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getref",
        ),
        line: 594,
        column: 14,
        span: 16276..16282,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 594,
        column: 15,
        span: 16282..16283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 594,
        column: 16,
        span: 16283..16284,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 594,
        column: 17,
        span: 16284..16285,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 594,
        column: 18,
        span: 16285..16286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 594,
        column: 20,
        span: 16287..16288,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 594,
        column: 21,
        span: 16288..16289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getref",
        ),
        line: 594,
        column: 27,
        span: 16289..16295,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 594,
        column: 28,
        span: 16295..16296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 594,
        column: 29,
        span: 16296..16297,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 594,
        column: 30,
        span: 16297..16298,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 594,
        column: 31,
        span: 16298..16299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 594,
        column: 33,
        span: 16300..16301,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 594,
        column: 34,
        span: 16301..16302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getref",
        ),
        line: 594,
        column: 40,
        span: 16302..16308,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 594,
        column: 41,
        span: 16308..16309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 594,
        column: 42,
        span: 16309..16310,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 594,
        column: 43,
        span: 16310..16311,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 594,
        column: 44,
        span: 16311..16312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 595,
        column: 7,
        span: 16313..16319,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 595,
        column: 8,
        span: 16319..16320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 595,
        column: 9,
        span: 16320..16321,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 595,
        column: 10,
        span: 16321..16322,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 595,
        column: 11,
        span: 16321..16323,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 595,
        column: 12,
        span: 16323..16324,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 595,
        column: 15,
        span: 16325..16327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 595,
        column: 17,
        span: 16328..16329,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 595,
        column: 21,
        span: 16330..16333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 595,
        column: 23,
        span: 16334..16335,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 595,
        column: 24,
        span: 16335..16336,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 595,
        column: 25,
        span: 16335..16337,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 595,
        column: 26,
        span: 16337..16338,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 595,
        column: 29,
        span: 16339..16341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 595,
        column: 31,
        span: 16342..16343,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 595,
        column: 35,
        span: 16344..16347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 595,
        column: 37,
        span: 16348..16349,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 595,
        column: 38,
        span: 16349..16350,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 595,
        column: 39,
        span: 16349..16351,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 595,
        column: 40,
        span: 16351..16352,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 595,
        column: 43,
        span: 16353..16355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 595,
        column: 45,
        span: 16356..16357,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 595,
        column: 46,
        span: 16357..16358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 597,
        column: 2,
        span: 16360..16361,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 597,
        column: 3,
        span: 16361..16362,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 597,
        column: 6,
        span: 16362..16365,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 597,
        column: 7,
        span: 16365..16366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 597,
        column: 9,
        span: 16367..16368,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 597,
        column: 10,
        span: 16368..16369,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 597,
        column: 13,
        span: 16369..16372,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 597,
        column: 14,
        span: 16372..16373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 597,
        column: 16,
        span: 16374..16375,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 597,
        column: 17,
        span: 16375..16376,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 597,
        column: 20,
        span: 16376..16379,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 597,
        column: 21,
        span: 16379..16380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 598,
        column: 2,
        span: 16381..16382,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 598,
        column: 3,
        span: 16382..16383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        line: 598,
        column: 8,
        span: 16383..16388,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 598,
        column: 9,
        span: 16388..16389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 598,
        column: 10,
        span: 16389..16390,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 598,
        column: 11,
        span: 16390..16391,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 598,
        column: 12,
        span: 16391..16392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 598,
        column: 14,
        span: 16393..16394,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 598,
        column: 15,
        span: 16394..16395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        line: 598,
        column: 20,
        span: 16395..16400,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 598,
        column: 21,
        span: 16400..16401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 598,
        column: 22,
        span: 16401..16402,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 598,
        column: 23,
        span: 16402..16403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 600,
        column: 15,
        span: 16405..16419,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 600,
        column: 16,
        span: 16419..16420,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 600,
        column: 17,
        span: 16420..16421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 603,
        column: 7,
        span: 16471..16477,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 603,
        column: 8,
        span: 16477..16478,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 603,
        column: 9,
        span: 16478..16479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        line: 603,
        column: 11,
        span: 16479..16481,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 603,
        column: 14,
        span: 16482..16484,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 603,
        column: 16,
        span: 16484..16486,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 603,
        column: 20,
        span: 16487..16490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        line: 603,
        column: 23,
        span: 16491..16493,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 603,
        column: 24,
        span: 16493..16494,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 603,
        column: 25,
        span: 16493..16495,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 603,
        column: 26,
        span: 16495..16496,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 603,
        column: 29,
        span: 16497..16499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nc",
        ),
        line: 603,
        column: 32,
        span: 16500..16502,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 603,
        column: 33,
        span: 16502..16503,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 605,
        column: 2,
        span: 16505..16506,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 605,
        column: 4,
        span: 16507..16508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 605,
        column: 6,
        span: 16509..16510,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 605,
        column: 7,
        span: 16510..16511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getref",
        ),
        line: 605,
        column: 13,
        span: 16511..16517,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 605,
        column: 14,
        span: 16517..16518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 605,
        column: 15,
        span: 16518..16519,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 605,
        column: 16,
        span: 16519..16520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 606,
        column: 7,
        span: 16521..16527,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 606,
        column: 8,
        span: 16527..16528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 606,
        column: 12,
        span: 16528..16532,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 606,
        column: 13,
        span: 16532..16533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 606,
        column: 14,
        span: 16533..16534,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 606,
        column: 15,
        span: 16534..16535,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 606,
        column: 18,
        span: 16536..16538,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'userdata'",
        ),
        line: 606,
        column: 29,
        span: 16539..16549,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 606,
        column: 33,
        span: 16550..16553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 606,
        column: 39,
        span: 16554..16559,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 606,
        column: 40,
        span: 16559..16560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 606,
        column: 52,
        span: 16560..16572,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 606,
        column: 53,
        span: 16572..16573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 606,
        column: 54,
        span: 16573..16574,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 606,
        column: 55,
        span: 16574..16575,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 606,
        column: 58,
        span: 16576..16578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        line: 606,
        column: 61,
        span: 16579..16581,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 606,
        column: 62,
        span: 16581..16582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 607,
        column: 2,
        span: 16583..16584,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 607,
        column: 4,
        span: 16585..16586,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 607,
        column: 0,
        span: 16586..16589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        line: 608,
        column: 3,
        span: 16590..16592,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 608,
        column: 4,
        span: 16592..16593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 608,
        column: 5,
        span: 16593..16594,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 608,
        column: 7,
        span: 16595..16596,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 608,
        column: 9,
        span: 16597..16598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        line: 609,
        column: 3,
        span: 16616..16618,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 609,
        column: 4,
        span: 16618..16619,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 609,
        column: 7,
        span: 16619..16622,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 610,
        column: 2,
        span: 16645..16646,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 610,
        column: 4,
        span: 16647..16648,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 610,
        column: 0,
        span: 16649..16652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 611,
        column: 2,
        span: 16653..16654,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 611,
        column: 4,
        span: 16655..16656,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 611,
        column: 0,
        span: 16657..16660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 612,
        column: 2,
        span: 16661..16662,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 612,
        column: 3,
        span: 16662..16663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        line: 612,
        column: 8,
        span: 16663..16668,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 612,
        column: 9,
        span: 16668..16669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 612,
        column: 10,
        span: 16669..16670,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 612,
        column: 11,
        span: 16670..16671,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 612,
        column: 12,
        span: 16671..16672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n5",
        ),
        line: 613,
        column: 3,
        span: 16673..16675,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 613,
        column: 5,
        span: 16676..16677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 613,
        column: 7,
        span: 16678..16679,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 613,
        column: 8,
        span: 16679..16680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        line: 613,
        column: 19,
        span: 16680..16691,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 613,
        column: 20,
        span: 16691..16692,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 613,
        column: 21,
        span: 16691..16693,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 613,
        column: 22,
        span: 16693..16694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 614,
        column: 6,
        span: 16695..16700,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 614,
        column: 7,
        span: 16700..16701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 614,
        column: 19,
        span: 16701..16713,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 614,
        column: 20,
        span: 16713..16714,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n5",
        ),
        line: 614,
        column: 22,
        span: 16714..16716,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 614,
        column: 23,
        span: 16716..16717,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 614,
        column: 25,
        span: 16718..16719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 614,
        column: 29,
        span: 16719..16723,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 614,
        column: 30,
        span: 16723..16724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 614,
        column: 31,
        span: 16724..16725,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 614,
        column: 32,
        span: 16725..16726,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 614,
        column: 33,
        span: 16726..16727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n5",
        ),
        line: 615,
        column: 3,
        span: 16728..16730,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 615,
        column: 5,
        span: 16731..16732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 615,
        column: 7,
        span: 16733..16734,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 615,
        column: 8,
        span: 16734..16735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        line: 615,
        column: 16,
        span: 16735..16743,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 615,
        column: 17,
        span: 16743..16744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n5",
        ),
        line: 615,
        column: 19,
        span: 16744..16746,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 615,
        column: 20,
        span: 16746..16747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 616,
        column: 15,
        span: 16748..16762,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 616,
        column: 16,
        span: 16762..16763,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 616,
        column: 17,
        span: 16763..16764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 617,
        column: 7,
        span: 16765..16771,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 617,
        column: 8,
        span: 16771..16772,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 617,
        column: 9,
        span: 16772..16773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        line: 617,
        column: 11,
        span: 16773..16775,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 617,
        column: 14,
        span: 16776..16778,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 617,
        column: 16,
        span: 16778..16780,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 617,
        column: 17,
        span: 16780..16781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 619,
        column: 7,
        span: 16811..16817,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 619,
        column: 8,
        span: 16817..16818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        line: 619,
        column: 10,
        span: 16818..16820,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 619,
        column: 11,
        span: 16820..16821,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 619,
        column: 12,
        span: 16820..16822,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 619,
        column: 13,
        span: 16822..16823,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 619,
        column: 16,
        span: 16824..16826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n5",
        ),
        line: 619,
        column: 19,
        span: 16827..16829,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 619,
        column: 23,
        span: 16830..16833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        line: 619,
        column: 26,
        span: 16834..16836,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 619,
        column: 27,
        span: 16836..16837,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 619,
        column: 28,
        span: 16836..16838,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 619,
        column: 29,
        span: 16838..16839,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 619,
        column: 32,
        span: 16840..16842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nb",
        ),
        line: 619,
        column: 35,
        span: 16843..16845,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 619,
        column: 39,
        span: 16846..16849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        line: 619,
        column: 42,
        span: 16850..16852,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 619,
        column: 43,
        span: 16852..16853,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 619,
        column: 44,
        span: 16852..16854,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 619,
        column: 45,
        span: 16854..16855,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 619,
        column: 48,
        span: 16856..16858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        line: 619,
        column: 51,
        span: 16859..16861,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 619,
        column: 52,
        span: 16861..16862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 621,
        column: 15,
        span: 16864..16878,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"restart\"",
        ),
        line: 621,
        column: 24,
        span: 16878..16887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 624,
        column: 2,
        span: 16890..16891,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 624,
        column: 3,
        span: 16891..16892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        line: 624,
        column: 6,
        span: 16893..16895,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 624,
        column: 8,
        span: 16896..16897,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 624,
        column: 10,
        span: 16898..16899,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 624,
        column: 11,
        span: 16899..16900,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 624,
        column: 12,
        span: 16900..16901,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 624,
        column: 14,
        span: 16902..16903,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 624,
        column: 15,
        span: 16903..16904,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 625,
        column: 4,
        span: 16905..16908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 625,
        column: 6,
        span: 16909..16910,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 625,
        column: 7,
        span: 16910..16911,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 625,
        column: 9,
        span: 16910..16913,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 625,
        column: 10,
        span: 16913..16914,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 625,
        column: 11,
        span: 16913..16915,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 625,
        column: 12,
        span: 16915..16916,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 625,
        column: 13,
        span: 16916..16917,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 625,
        column: 14,
        span: 16916..16918,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 625,
        column: 0,
        span: 16919..16921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 626,
        column: 4,
        span: 16924..16925,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 626,
        column: 5,
        span: 16925..16926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 626,
        column: 6,
        span: 16926..16927,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 626,
        column: 7,
        span: 16927..16928,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 626,
        column: 9,
        span: 16929..16930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 626,
        column: 11,
        span: 16931..16932,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 626,
        column: 12,
        span: 16932..16933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        line: 626,
        column: 23,
        span: 16933..16944,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 626,
        column: 24,
        span: 16944..16945,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 626,
        column: 25,
        span: 16944..16946,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 626,
        column: 26,
        span: 16946..16947,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 627,
        column: 8,
        span: 16950..16955,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 627,
        column: 9,
        span: 16955..16956,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 627,
        column: 21,
        span: 16956..16968,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 627,
        column: 22,
        span: 16968..16969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 627,
        column: 23,
        span: 16969..16970,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 627,
        column: 24,
        span: 16970..16971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 627,
        column: 25,
        span: 16971..16972,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 627,
        column: 26,
        span: 16972..16973,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 627,
        column: 27,
        span: 16973..16974,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 627,
        column: 29,
        span: 16975..16976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 627,
        column: 33,
        span: 16976..16980,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 627,
        column: 34,
        span: 16980..16981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 627,
        column: 35,
        span: 16981..16982,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 627,
        column: 36,
        span: 16982..16983,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 627,
        column: 37,
        span: 16983..16984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        line: 628,
        column: 5,
        span: 16987..16989,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 628,
        column: 6,
        span: 16989..16990,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 628,
        column: 7,
        span: 16990..16991,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 628,
        column: 8,
        span: 16991..16992,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 628,
        column: 10,
        span: 16993..16994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 628,
        column: 12,
        span: 16995..16996,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 628,
        column: 13,
        span: 16996..16997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        line: 628,
        column: 21,
        span: 16997..17005,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 628,
        column: 22,
        span: 17005..17006,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 628,
        column: 23,
        span: 17006..17007,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 628,
        column: 24,
        span: 17007..17008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 628,
        column: 25,
        span: 17008..17009,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 628,
        column: 26,
        span: 17009..17010,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 628,
        column: 27,
        span: 17010..17011,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 629,
        column: 0,
        span: 17012..17015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        line: 630,
        column: 3,
        span: 17016..17018,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 630,
        column: 5,
        span: 17019..17020,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 630,
        column: 7,
        span: 17021..17022,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 630,
        column: 8,
        span: 17022..17023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 631,
        column: 2,
        span: 17024..17025,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 631,
        column: 4,
        span: 17026..17027,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 631,
        column: 8,
        span: 17028..17031,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 631,
        column: 9,
        span: 17031..17032,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 631,
        column: 24,
        span: 17033..17047,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 631,
        column: 25,
        span: 17047..17048,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 631,
        column: 26,
        span: 17048..17049,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 632,
        column: 7,
        span: 17050..17056,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 632,
        column: 8,
        span: 17056..17057,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 632,
        column: 9,
        span: 17057..17058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        line: 632,
        column: 11,
        span: 17058..17060,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 632,
        column: 14,
        span: 17061..17063,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 632,
        column: 17,
        span: 17063..17066,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 632,
        column: 18,
        span: 17066..17067,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 633,
        column: 4,
        span: 17068..17071,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 633,
        column: 6,
        span: 17072..17073,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 633,
        column: 7,
        span: 17073..17074,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 633,
        column: 8,
        span: 17073..17075,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 633,
        column: 9,
        span: 17075..17076,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 633,
        column: 11,
        span: 17075..17078,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 633,
        column: 14,
        span: 17079..17081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 633,
        column: 21,
        span: 17082..17088,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 633,
        column: 22,
        span: 17088..17089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        line: 633,
        column: 24,
        span: 17089..17091,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 633,
        column: 25,
        span: 17091..17092,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 633,
        column: 26,
        span: 17092..17093,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 633,
        column: 27,
        span: 17093..17094,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 633,
        column: 30,
        span: 17095..17097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        line: 633,
        column: 33,
        span: 17098..17100,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 633,
        column: 34,
        span: 17100..17101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 633,
        column: 35,
        span: 17101..17102,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 633,
        column: 36,
        span: 17102..17103,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 633,
        column: 37,
        span: 17103..17104,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 633,
        column: 0,
        span: 17105..17108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        line: 634,
        column: 3,
        span: 17109..17111,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 634,
        column: 5,
        span: 17112..17113,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 634,
        column: 0,
        span: 17114..17117,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 637,
        column: 4,
        span: 17120..17123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 637,
        column: 6,
        span: 17124..17125,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 637,
        column: 7,
        span: 17125..17126,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 637,
        column: 8,
        span: 17125..17127,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 637,
        column: 9,
        span: 17127..17128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Lim",
        ),
        line: 637,
        column: 12,
        span: 17128..17131,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 637,
        column: 13,
        span: 17131..17132,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 637,
        column: 14,
        span: 17131..17133,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 637,
        column: 17,
        span: 17134..17136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 638,
        column: 4,
        span: 17166..17167,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 638,
        column: 5,
        span: 17167..17168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        line: 638,
        column: 10,
        span: 17168..17173,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 638,
        column: 11,
        span: 17173..17174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Arr",
        ),
        line: 638,
        column: 14,
        span: 17174..17177,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 638,
        column: 15,
        span: 17177..17178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 638,
        column: 16,
        span: 17178..17179,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 638,
        column: 17,
        span: 17179..17180,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 638,
        column: 18,
        span: 17180..17181,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 639,
        column: 0,
        span: 17182..17185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 641,
        column: 2,
        span: 17187..17188,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 641,
        column: 4,
        span: 17189..17190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 641,
        column: 6,
        span: 17191..17192,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 641,
        column: 7,
        span: 17192..17193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        line: 641,
        column: 18,
        span: 17193..17204,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 641,
        column: 19,
        span: 17204..17205,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "41",
                    after_decimal: "",
                },
            ),
        ),
        line: 641,
        column: 21,
        span: 17204..17207,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 641,
        column: 22,
        span: 17207..17208,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 641,
        column: 23,
        span: 17208..17209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 641,
        column: 29,
        span: 17210..17215,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 641,
        column: 30,
        span: 17215..17216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 641,
        column: 42,
        span: 17216..17228,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 641,
        column: 43,
        span: 17228..17229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 641,
        column: 44,
        span: 17229..17230,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 641,
        column: 45,
        span: 17230..17231,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 641,
        column: 47,
        span: 17232..17233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 641,
        column: 51,
        span: 17233..17237,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 641,
        column: 52,
        span: 17237..17238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 641,
        column: 53,
        span: 17238..17239,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 641,
        column: 54,
        span: 17239..17240,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 641,
        column: 55,
        span: 17240..17241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 642,
        column: 7,
        span: 17242..17248,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 642,
        column: 8,
        span: 17248..17249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 642,
        column: 9,
        span: 17249..17250,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 642,
        column: 10,
        span: 17250..17251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 642,
        column: 15,
        span: 17251..17256,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 642,
        column: 16,
        span: 17256..17257,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize 2; return 1\"",
        ),
        line: 642,
        column: 37,
        span: 17257..17278,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 642,
        column: 38,
        span: 17278..17279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 642,
        column: 40,
        span: 17280..17281,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 642,
        column: 41,
        span: 17281..17282,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 642,
        column: 44,
        span: 17283..17285,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "41",
                    after_decimal: "",
                },
            ),
        ),
        line: 642,
        column: 47,
        span: 17285..17288,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 642,
        column: 48,
        span: 17288..17289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        line: 643,
        column: 3,
        span: 17290..17292,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 643,
        column: 5,
        span: 17293..17294,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 643,
        column: 7,
        span: 17295..17296,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 643,
        column: 8,
        span: 17296..17297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 644,
        column: 2,
        span: 17298..17299,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 644,
        column: 4,
        span: 17300..17301,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 644,
        column: 6,
        span: 17302..17303,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 644,
        column: 7,
        span: 17303..17304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 644,
        column: 8,
        span: 17304..17305,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 644,
        column: 9,
        span: 17305..17306,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 644,
        column: 11,
        span: 17307..17308,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 644,
        column: 13,
        span: 17308..17310,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 644,
        column: 14,
        span: 17310..17311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 645,
        column: 2,
        span: 17312..17313,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 645,
        column: 4,
        span: 17314..17315,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 645,
        column: 6,
        span: 17316..17317,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 645,
        column: 7,
        span: 17317..17318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        line: 645,
        column: 15,
        span: 17318..17326,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 645,
        column: 16,
        span: 17326..17327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 645,
        column: 17,
        span: 17327..17328,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 645,
        column: 18,
        span: 17328..17329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 646,
        column: 15,
        span: 17330..17344,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 646,
        column: 16,
        span: 17344..17345,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 646,
        column: 17,
        span: 17345..17346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 648,
        column: 7,
        span: 17398..17404,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 648,
        column: 8,
        span: 17404..17405,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 648,
        column: 9,
        span: 17405..17406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        line: 648,
        column: 11,
        span: 17406..17408,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 648,
        column: 14,
        span: 17409..17411,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 648,
        column: 16,
        span: 17411..17413,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 648,
        column: 17,
        span: 17413..17414,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 649,
        column: 4,
        span: 17415..17418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 649,
        column: 6,
        span: 17419..17420,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 649,
        column: 9,
        span: 17421..17423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 649,
        column: 15,
        span: 17424..17429,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 649,
        column: 16,
        span: 17429..17430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 649,
        column: 17,
        span: 17430..17431,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 649,
        column: 18,
        span: 17431..17432,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 649,
        column: 21,
        span: 17433..17435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 649,
        column: 23,
        span: 17436..17437,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 649,
        column: 24,
        span: 17437..17438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 649,
        column: 25,
        span: 17438..17439,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 649,
        column: 26,
        span: 17439..17440,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 649,
        column: 28,
        span: 17441..17442,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 649,
        column: 32,
        span: 17443..17446,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 649,
        column: 0,
        span: 17447..17450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 650,
        column: 15,
        span: 17451..17465,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 650,
        column: 16,
        span: 17465..17466,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 650,
        column: 17,
        span: 17466..17467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 651,
        column: 7,
        span: 17468..17474,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 651,
        column: 8,
        span: 17474..17475,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 651,
        column: 9,
        span: 17475..17476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        line: 651,
        column: 11,
        span: 17476..17478,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 651,
        column: 14,
        span: 17479..17481,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 651,
        column: 16,
        span: 17481..17483,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 651,
        column: 20,
        span: 17484..17487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        line: 651,
        column: 23,
        span: 17488..17490,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 651,
        column: 24,
        span: 17490..17491,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 651,
        column: 25,
        span: 17490..17492,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 651,
        column: 26,
        span: 17492..17493,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 651,
        column: 29,
        span: 17494..17496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 651,
        column: 31,
        span: 17497..17498,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 651,
        column: 32,
        span: 17498..17499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 654,
        column: 7,
        span: 17553..17559,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 654,
        column: 8,
        span: 17559..17560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 654,
        column: 9,
        span: 17560..17561,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 654,
        column: 10,
        span: 17561..17562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 654,
        column: 15,
        span: 17562..17567,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 654,
        column: 16,
        span: 17567..17568,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare 2 4 0; return 1\"",
        ),
        line: 654,
        column: 41,
        span: 17568..17593,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 654,
        column: 42,
        span: 17593..17594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 654,
        column: 48,
        span: 17595..17600,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 654,
        column: 49,
        span: 17600..17601,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 654,
        column: 51,
        span: 17601..17603,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 654,
        column: 52,
        span: 17603..17604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 654,
        column: 58,
        span: 17605..17610,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 654,
        column: 59,
        span: 17610..17611,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 654,
        column: 62,
        span: 17611..17614,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 654,
        column: 63,
        span: 17614..17615,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 654,
        column: 64,
        span: 17615..17616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 655,
        column: 7,
        span: 17617..17623,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 655,
        column: 8,
        span: 17623..17624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 655,
        column: 9,
        span: 17624..17625,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 655,
        column: 10,
        span: 17625..17626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 655,
        column: 15,
        span: 17626..17631,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 655,
        column: 16,
        span: 17631..17632,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare 3 2 0; return 1\"",
        ),
        line: 655,
        column: 41,
        span: 17632..17657,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 655,
        column: 42,
        span: 17657..17658,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        line: 655,
        column: 48,
        span: 17659..17664,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 655,
        column: 49,
        span: 17664..17665,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 655,
        column: 55,
        span: 17666..17671,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 655,
        column: 56,
        span: 17671..17672,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 655,
        column: 57,
        span: 17672..17673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 656,
        column: 7,
        span: 17674..17680,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 656,
        column: 8,
        span: 17680..17681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 656,
        column: 9,
        span: 17681..17682,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 656,
        column: 10,
        span: 17682..17683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 656,
        column: 15,
        span: 17683..17688,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 656,
        column: 16,
        span: 17688..17689,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare 2 3 0; return 1\"",
        ),
        line: 656,
        column: 41,
        span: 17689..17714,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 656,
        column: 42,
        span: 17714..17715,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 656,
        column: 46,
        span: 17716..17719,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 656,
        column: 47,
        span: 17719..17720,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 656,
        column: 51,
        span: 17721..17724,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 656,
        column: 52,
        span: 17724..17725,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 656,
        column: 53,
        span: 17725..17726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 657,
        column: 7,
        span: 17727..17733,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 657,
        column: 8,
        span: 17733..17734,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 657,
        column: 11,
        span: 17734..17737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 657,
        column: 13,
        span: 17738..17739,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 657,
        column: 14,
        span: 17739..17740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 657,
        column: 19,
        span: 17740..17745,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 657,
        column: 20,
        span: 17745..17746,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare 2 3 0; return 1\"",
        ),
        line: 657,
        column: 45,
        span: 17746..17771,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 657,
        column: 46,
        span: 17771..17772,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 657,
        column: 48,
        span: 17773..17774,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 657,
        column: 49,
        span: 17774..17775,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 657,
        column: 50,
        span: 17775..17776,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 657,
        column: 52,
        span: 17777..17778,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 657,
        column: 53,
        span: 17778..17779,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 657,
        column: 54,
        span: 17779..17780,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 657,
        column: 55,
        span: 17780..17781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 658,
        column: 7,
        span: 17782..17788,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 658,
        column: 8,
        span: 17788..17789,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 658,
        column: 11,
        span: 17789..17792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 658,
        column: 13,
        span: 17793..17794,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 658,
        column: 14,
        span: 17794..17795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 658,
        column: 19,
        span: 17795..17800,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 658,
        column: 20,
        span: 17800..17801,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare 2 3 0; return 1\"",
        ),
        line: 658,
        column: 45,
        span: 17801..17826,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 658,
        column: 46,
        span: 17826..17827,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 658,
        column: 47,
        span: 17827..17828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 659,
        column: 7,
        span: 17829..17835,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 659,
        column: 8,
        span: 17835..17836,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 659,
        column: 11,
        span: 17836..17839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 659,
        column: 13,
        span: 17840..17841,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 659,
        column: 14,
        span: 17841..17842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 659,
        column: 19,
        span: 17842..17847,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 659,
        column: 20,
        span: 17847..17848,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare 2 3 0; return 1\"",
        ),
        line: 659,
        column: 45,
        span: 17848..17873,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 659,
        column: 46,
        span: 17873..17874,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 659,
        column: 48,
        span: 17874..17876,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 659,
        column: 49,
        span: 17876..17877,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 659,
        column: 50,
        span: 17877..17878,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 662,
        column: 0,
        span: 17916..17918,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 663,
        column: 8,
        span: 17921..17926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "map",
        ),
        line: 663,
        column: 12,
        span: 17927..17930,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 663,
        column: 14,
        span: 17931..17932,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 663,
        column: 16,
        span: 17933..17934,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 663,
        column: 17,
        span: 17934..17935,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 664,
        column: 8,
        span: 17938..17943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 664,
        column: 10,
        span: 17944..17945,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 664,
        column: 12,
        span: 17946..17947,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 664,
        column: 14,
        span: 17948..17949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__eq",
        ),
        line: 664,
        column: 18,
        span: 17949..17953,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 664,
        column: 20,
        span: 17954..17955,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 664,
        column: 29,
        span: 17956..17964,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 664,
        column: 31,
        span: 17965..17966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 664,
        column: 32,
        span: 17966..17967,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 664,
        column: 33,
        span: 17967..17968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 664,
        column: 34,
        span: 17968..17969,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 664,
        column: 35,
        span: 17969..17970,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 664,
        column: 42,
        span: 17971..17977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "map",
        ),
        line: 664,
        column: 46,
        span: 17978..17981,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 664,
        column: 47,
        span: 17981..17982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 664,
        column: 48,
        span: 17982..17983,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 664,
        column: 49,
        span: 17983..17984,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 664,
        column: 52,
        span: 17985..17987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "map",
        ),
        line: 664,
        column: 56,
        span: 17988..17991,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 664,
        column: 57,
        span: 17991..17992,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 664,
        column: 58,
        span: 17992..17993,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 664,
        column: 59,
        span: 17993..17994,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 664,
        column: 63,
        span: 17995..17998,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 664,
        column: 64,
        span: 17998..17999,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 665,
        column: 8,
        span: 18002..18007,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 665,
        column: 17,
        span: 18008..18016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 665,
        column: 19,
        span: 18017..18018,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 665,
        column: 20,
        span: 18018..18019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 665,
        column: 21,
        span: 18019..18020,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 665,
        column: 22,
        span: 18020..18021,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 666,
        column: 10,
        span: 18026..18031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 666,
        column: 12,
        span: 18032..18033,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 666,
        column: 14,
        span: 18034..18035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 666,
        column: 16,
        span: 18036..18037,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 666,
        column: 17,
        span: 18037..18038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        line: 666,
        column: 28,
        span: 18038..18049,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 666,
        column: 29,
        span: 18049..18050,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 666,
        column: 30,
        span: 18049..18051,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 666,
        column: 31,
        span: 18051..18052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 667,
        column: 10,
        span: 18057..18062,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 667,
        column: 11,
        span: 18062..18063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 667,
        column: 23,
        span: 18063..18075,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 667,
        column: 24,
        span: 18075..18076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 667,
        column: 25,
        span: 18076..18077,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 667,
        column: 26,
        span: 18077..18078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 667,
        column: 28,
        span: 18079..18080,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 667,
        column: 29,
        span: 18080..18081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "map",
        ),
        line: 668,
        column: 8,
        span: 18086..18089,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 668,
        column: 9,
        span: 18089..18090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 668,
        column: 10,
        span: 18090..18091,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 668,
        column: 11,
        span: 18091..18092,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 668,
        column: 13,
        span: 18093..18094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 668,
        column: 0,
        span: 18095..18096,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 669,
        column: 11,
        span: 18101..18107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 669,
        column: 0,
        span: 18108..18109,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 670,
        column: 0,
        span: 18112..18115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 671,
        column: 9,
        span: 18118..18124,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 671,
        column: 10,
        span: 18124..18125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 671,
        column: 11,
        span: 18125..18126,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 671,
        column: 12,
        span: 18126..18127,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 671,
        column: 14,
        span: 18126..18129,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 671,
        column: 15,
        span: 18129..18130,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 671,
        column: 18,
        span: 18131..18133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 671,
        column: 20,
        span: 18134..18135,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 671,
        column: 21,
        span: 18135..18136,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 671,
        column: 23,
        span: 18135..18138,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 671,
        column: 24,
        span: 18138..18139,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 671,
        column: 25,
        span: 18139..18140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 672,
        column: 9,
        span: 18143..18149,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 672,
        column: 10,
        span: 18149..18150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 672,
        column: 11,
        span: 18150..18151,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 672,
        column: 12,
        span: 18151..18152,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 672,
        column: 14,
        span: 18151..18154,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 672,
        column: 15,
        span: 18154..18155,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 672,
        column: 18,
        span: 18156..18158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 672,
        column: 20,
        span: 18159..18160,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 672,
        column: 21,
        span: 18160..18161,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 672,
        column: 23,
        span: 18160..18163,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 672,
        column: 24,
        span: 18163..18164,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 672,
        column: 25,
        span: 18164..18165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 673,
        column: 9,
        span: 18168..18174,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 673,
        column: 10,
        span: 18174..18175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 673,
        column: 11,
        span: 18175..18176,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 673,
        column: 12,
        span: 18176..18177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 673,
        column: 17,
        span: 18177..18182,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 673,
        column: 18,
        span: 18182..18183,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare 2 3 0; return 1\"",
        ),
        line: 673,
        column: 43,
        span: 18183..18208,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 673,
        column: 44,
        span: 18208..18209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 673,
        column: 46,
        span: 18210..18211,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 673,
        column: 47,
        span: 18211..18212,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 673,
        column: 49,
        span: 18211..18214,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 673,
        column: 50,
        span: 18214..18215,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 673,
        column: 51,
        span: 18215..18216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 673,
        column: 53,
        span: 18217..18218,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 673,
        column: 54,
        span: 18218..18219,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 673,
        column: 56,
        span: 18218..18221,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 673,
        column: 57,
        span: 18221..18222,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 673,
        column: 58,
        span: 18222..18223,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 673,
        column: 59,
        span: 18223..18224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 674,
        column: 9,
        span: 18227..18233,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 674,
        column: 10,
        span: 18233..18234,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 674,
        column: 13,
        span: 18234..18237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 674,
        column: 15,
        span: 18238..18239,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 674,
        column: 16,
        span: 18239..18240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 674,
        column: 21,
        span: 18240..18245,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 674,
        column: 22,
        span: 18245..18246,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare 2 3 0; return 1\"",
        ),
        line: 674,
        column: 47,
        span: 18246..18271,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 674,
        column: 48,
        span: 18271..18272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 674,
        column: 50,
        span: 18273..18274,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 674,
        column: 51,
        span: 18274..18275,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 674,
        column: 53,
        span: 18274..18277,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 674,
        column: 54,
        span: 18277..18278,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 674,
        column: 55,
        span: 18278..18279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 674,
        column: 57,
        span: 18280..18281,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 674,
        column: 58,
        span: 18281..18282,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 674,
        column: 60,
        span: 18281..18284,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 674,
        column: 61,
        span: 18284..18285,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 674,
        column: 62,
        span: 18285..18286,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 674,
        column: 63,
        span: 18286..18287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 675,
        column: 4,
        span: 18290..18291,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 675,
        column: 5,
        span: 18291..18292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__eq",
        ),
        line: 675,
        column: 9,
        span: 18292..18296,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 675,
        column: 11,
        span: 18297..18298,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 675,
        column: 0,
        span: 18299..18302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 676,
        column: 9,
        span: 18305..18311,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 676,
        column: 10,
        span: 18311..18312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 676,
        column: 11,
        span: 18312..18313,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 676,
        column: 12,
        span: 18313..18314,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 676,
        column: 14,
        span: 18313..18316,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 676,
        column: 15,
        span: 18316..18317,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 676,
        column: 18,
        span: 18318..18320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 676,
        column: 20,
        span: 18321..18322,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 676,
        column: 21,
        span: 18322..18323,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 676,
        column: 23,
        span: 18322..18325,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 676,
        column: 24,
        span: 18325..18326,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 676,
        column: 25,
        span: 18326..18327,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 677,
        column: 0,
        span: 18328..18331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 679,
        column: 6,
        span: 18333..18338,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 679,
        column: 9,
        span: 18338..18341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 684,
        column: 3,
        span: 18384..18386,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 684,
        column: 4,
        span: 18386..18387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 684,
        column: 5,
        span: 18387..18388,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 684,
        column: 7,
        span: 18389..18390,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 684,
        column: 9,
        span: 18391..18392,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 684,
        column: 10,
        span: 18392..18393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 685,
        column: 2,
        span: 18394..18395,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 685,
        column: 3,
        span: 18395..18396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 685,
        column: 10,
        span: 18396..18403,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 685,
        column: 11,
        span: 18403..18404,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  # set a line hook after 3 count hooks\n  sethook 4 0 '\n    getglobal t;\n    pushvalue -3; append -2\n    pushvalue -2; append -2\n  ']]",
        ),
        line: 691,
        column: 6,
        span: 18404..18541,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 691,
        column: 7,
        span: 18541..18542,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c\"",
        ),
        line: 691,
        column: 11,
        span: 18543..18546,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 691,
        column: 12,
        span: 18546..18547,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 691,
        column: 14,
        span: 18547..18549,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 691,
        column: 15,
        span: 18549..18550,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 692,
        column: 6,
        span: 18551..18556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 692,
        column: 8,
        span: 18557..18558,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 692,
        column: 10,
        span: 18559..18560,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 692,
        column: 12,
        span: 18560..18562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 693,
        column: 2,
        span: 18577..18578,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 693,
        column: 4,
        span: 18579..18580,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 693,
        column: 6,
        span: 18580..18582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 694,
        column: 2,
        span: 18597..18598,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 694,
        column: 4,
        span: 18599..18600,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 694,
        column: 6,
        span: 18600..18602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 695,
        column: 2,
        span: 18635..18636,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 695,
        column: 4,
        span: 18637..18638,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 695,
        column: 6,
        span: 18638..18640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 696,
        column: 2,
        span: 18656..18657,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 696,
        column: 4,
        span: 18658..18659,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 696,
        column: 6,
        span: 18659..18661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 697,
        column: 6,
        span: 18677..18682,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 697,
        column: 7,
        span: 18682..18683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 697,
        column: 14,
        span: 18683..18690,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 697,
        column: 15,
        span: 18690..18691,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 697,
        column: 16,
        span: 18691..18692,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 698,
        column: 2,
        span: 18693..18694,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 698,
        column: 4,
        span: 18695..18696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 698,
        column: 7,
        span: 18697..18699,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 698,
        column: 8,
        span: 18699..18700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 698,
        column: 0,
        span: 18700..18701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 699,
        column: 7,
        span: 18702..18708,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 699,
        column: 8,
        span: 18708..18709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 699,
        column: 9,
        span: 18709..18710,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 699,
        column: 10,
        span: 18710..18711,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 699,
        column: 11,
        span: 18710..18712,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 699,
        column: 12,
        span: 18712..18713,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 699,
        column: 15,
        span: 18714..18716,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line\"",
        ),
        line: 699,
        column: 22,
        span: 18717..18723,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 699,
        column: 23,
        span: 18723..18724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 700,
        column: 5,
        span: 18725..18729,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 700,
        column: 7,
        span: 18730..18731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 700,
        column: 9,
        span: 18732..18733,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 700,
        column: 10,
        span: 18733..18734,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 700,
        column: 11,
        span: 18733..18735,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 700,
        column: 12,
        span: 18735..18736,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 701,
        column: 7,
        span: 18737..18743,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 701,
        column: 8,
        span: 18743..18744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 701,
        column: 9,
        span: 18744..18745,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 701,
        column: 10,
        span: 18745..18746,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 701,
        column: 11,
        span: 18745..18747,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 701,
        column: 12,
        span: 18747..18748,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 701,
        column: 15,
        span: 18749..18751,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line\"",
        ),
        line: 701,
        column: 22,
        span: 18752..18758,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 701,
        column: 26,
        span: 18759..18762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 701,
        column: 28,
        span: 18763..18764,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 701,
        column: 29,
        span: 18764..18765,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 701,
        column: 30,
        span: 18764..18766,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 701,
        column: 31,
        span: 18766..18767,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 701,
        column: 34,
        span: 18768..18770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 701,
        column: 39,
        span: 18771..18775,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 701,
        column: 41,
        span: 18776..18777,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 701,
        column: 43,
        span: 18777..18779,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 701,
        column: 44,
        span: 18779..18780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 702,
        column: 7,
        span: 18781..18787,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 702,
        column: 8,
        span: 18787..18788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 702,
        column: 9,
        span: 18788..18789,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 702,
        column: 10,
        span: 18789..18790,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 702,
        column: 11,
        span: 18789..18791,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 702,
        column: 12,
        span: 18791..18792,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 702,
        column: 15,
        span: 18793..18795,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line\"",
        ),
        line: 702,
        column: 22,
        span: 18796..18802,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 702,
        column: 26,
        span: 18803..18806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 702,
        column: 28,
        span: 18807..18808,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 702,
        column: 29,
        span: 18808..18809,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 702,
        column: 30,
        span: 18808..18810,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 702,
        column: 31,
        span: 18810..18811,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 702,
        column: 34,
        span: 18812..18814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 702,
        column: 39,
        span: 18815..18819,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 702,
        column: 41,
        span: 18820..18821,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 702,
        column: 43,
        span: 18821..18823,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 702,
        column: 44,
        span: 18823..18824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 703,
        column: 7,
        span: 18825..18831,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 703,
        column: 8,
        span: 18831..18832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 703,
        column: 9,
        span: 18832..18833,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 703,
        column: 10,
        span: 18833..18834,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 703,
        column: 11,
        span: 18833..18835,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 703,
        column: 12,
        span: 18835..18836,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 703,
        column: 15,
        span: 18837..18839,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 703,
        column: 19,
        span: 18840..18843,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 703,
        column: 20,
        span: 18843..18844,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 707,
        column: 3,
        span: 18921..18923,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 708,
        column: 8,
        span: 18956..18961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 708,
        column: 10,
        span: 18962..18963,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 708,
        column: 12,
        span: 18964..18965,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 708,
        column: 14,
        span: 18966..18967,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 708,
        column: 15,
        span: 18967..18968,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 709,
        column: 6,
        span: 18971..18974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 709,
        column: 8,
        span: 18975..18976,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 709,
        column: 9,
        span: 18976..18977,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 709,
        column: 10,
        span: 18976..18978,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 709,
        column: 11,
        span: 18978..18979,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 709,
        column: 13,
        span: 18978..18981,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 709,
        column: 0,
        span: 18982..18984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 710,
        column: 6,
        span: 18989..18990,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 710,
        column: 7,
        span: 18990..18991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 710,
        column: 8,
        span: 18991..18992,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 710,
        column: 9,
        span: 18992..18993,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 710,
        column: 11,
        span: 18994..18995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 710,
        column: 13,
        span: 18996..18997,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 710,
        column: 14,
        span: 18997..18998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        line: 710,
        column: 25,
        span: 18998..19009,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 710,
        column: 26,
        span: 19009..19010,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 710,
        column: 27,
        span: 19010..19011,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 710,
        column: 28,
        span: 19011..19012,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 711,
        column: 0,
        span: 19042..19045,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 712,
        column: 6,
        span: 19048..19051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 712,
        column: 8,
        span: 19052..19053,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 712,
        column: 9,
        span: 19053..19054,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 712,
        column: 10,
        span: 19053..19055,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 712,
        column: 11,
        span: 19055..19056,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 712,
        column: 13,
        span: 19055..19058,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 712,
        column: 14,
        span: 19058..19059,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 712,
        column: 15,
        span: 19058..19060,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 712,
        column: 18,
        span: 19061..19063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 713,
        column: 10,
        span: 19117..19122,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 713,
        column: 11,
        span: 19122..19123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 713,
        column: 23,
        span: 19123..19135,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 713,
        column: 24,
        span: 19135..19136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 713,
        column: 25,
        span: 19136..19137,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 713,
        column: 26,
        span: 19137..19138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 713,
        column: 27,
        span: 19138..19139,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 713,
        column: 28,
        span: 19139..19140,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 713,
        column: 29,
        span: 19140..19141,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 713,
        column: 31,
        span: 19142..19143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 713,
        column: 35,
        span: 19143..19147,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 713,
        column: 37,
        span: 19148..19149,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 713,
        column: 46,
        span: 19150..19158,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 713,
        column: 48,
        span: 19159..19160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 713,
        column: 49,
        span: 19160..19161,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 713,
        column: 50,
        span: 19161..19162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 713,
        column: 56,
        span: 19163..19168,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 713,
        column: 57,
        span: 19168..19169,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error inside gc\"",
        ),
        line: 713,
        column: 74,
        span: 19169..19186,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 713,
        column: 75,
        span: 19186..19187,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 713,
        column: 79,
        span: 19188..19191,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 713,
        column: 80,
        span: 19191..19192,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 713,
        column: 81,
        span: 19192..19193,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 714,
        column: 0,
        span: 19196..19199,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 715,
        column: 6,
        span: 19202..19205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 715,
        column: 8,
        span: 19206..19207,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 715,
        column: 9,
        span: 19207..19208,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 715,
        column: 10,
        span: 19207..19209,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 715,
        column: 11,
        span: 19209..19210,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 715,
        column: 13,
        span: 19209..19212,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 715,
        column: 14,
        span: 19212..19213,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 715,
        column: 15,
        span: 19212..19214,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 715,
        column: 18,
        span: 19215..19217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 716,
        column: 10,
        span: 19283..19288,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 716,
        column: 11,
        span: 19288..19289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 716,
        column: 23,
        span: 19289..19301,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 716,
        column: 24,
        span: 19301..19302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 716,
        column: 25,
        span: 19302..19303,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 716,
        column: 26,
        span: 19303..19304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 716,
        column: 27,
        span: 19304..19305,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 716,
        column: 28,
        span: 19305..19306,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 716,
        column: 29,
        span: 19306..19307,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 716,
        column: 31,
        span: 19308..19309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 716,
        column: 35,
        span: 19309..19313,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 716,
        column: 37,
        span: 19314..19315,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 716,
        column: 46,
        span: 19316..19324,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 716,
        column: 48,
        span: 19325..19326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 716,
        column: 49,
        span: 19326..19327,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 716,
        column: 50,
        span: 19327..19328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 716,
        column: 55,
        span: 19329..19333,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 716,
        column: 56,
        span: 19333..19334,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A=A+1\"",
        ),
        line: 716,
        column: 63,
        span: 19334..19341,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 716,
        column: 64,
        span: 19341..19342,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 716,
        column: 65,
        span: 19342..19343,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 716,
        column: 66,
        span: 19343..19344,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 716,
        column: 70,
        span: 19345..19348,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 716,
        column: 71,
        span: 19348..19349,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 716,
        column: 72,
        span: 19349..19350,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 717,
        column: 0,
        span: 19353..19356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 718,
        column: 5,
        span: 19359..19361,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 718,
        column: 6,
        span: 19361..19362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 718,
        column: 7,
        span: 19362..19363,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 718,
        column: 9,
        span: 19364..19365,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 718,
        column: 0,
        span: 19365..19367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 719,
        column: 4,
        span: 19370..19371,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 719,
        column: 6,
        span: 19372..19373,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 719,
        column: 0,
        span: 19373..19375,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 720,
        column: 8,
        span: 19378..19383,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 720,
        column: 10,
        span: 19383..19385,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 720,
        column: 0,
        span: 19386..19388,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 721,
        column: 10,
        span: 19393..19398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stat",
        ),
        line: 721,
        column: 15,
        span: 19399..19403,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 721,
        column: 16,
        span: 19403..19404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 721,
        column: 20,
        span: 19405..19408,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 721,
        column: 22,
        span: 19409..19410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 721,
        column: 28,
        span: 19411..19416,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 721,
        column: 29,
        span: 19416..19417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 721,
        column: 43,
        span: 19417..19431,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 721,
        column: 44,
        span: 19431..19432,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 722,
        column: 7,
        span: 19437..19439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stat",
        ),
        line: 722,
        column: 12,
        span: 19440..19444,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 722,
        column: 0,
        span: 19445..19449,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 723,
        column: 12,
        span: 19456..19461,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 724,
        column: 0,
        span: 19496..19500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 725,
        column: 8,
        span: 19507..19508,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 725,
        column: 10,
        span: 19509..19510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 725,
        column: 12,
        span: 19511..19512,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 725,
        column: 14,
        span: 19513..19514,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 725,
        column: 0,
        span: 19514..19516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 726,
        column: 13,
        span: 19523..19529,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 726,
        column: 14,
        span: 19529..19530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 726,
        column: 20,
        span: 19530..19536,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 726,
        column: 21,
        span: 19536..19537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 726,
        column: 25,
        span: 19537..19541,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 726,
        column: 26,
        span: 19541..19542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 726,
        column: 29,
        span: 19542..19545,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 726,
        column: 30,
        span: 19545..19546,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"__gc\"",
        ),
        line: 726,
        column: 37,
        span: 19547..19553,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 726,
        column: 38,
        span: 19553..19554,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 726,
        column: 39,
        span: 19554..19555,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 727,
        column: 0,
        span: 19560..19563,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 728,
        column: 0,
        span: 19566..19569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 729,
        column: 9,
        span: 19572..19578,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 729,
        column: 10,
        span: 19578..19579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 729,
        column: 11,
        span: 19579..19580,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 729,
        column: 14,
        span: 19581..19583,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 729,
        column: 17,
        span: 19583..19586,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 729,
        column: 18,
        span: 19586..19587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 731,
        column: 9,
        span: 19612..19618,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 731,
        column: 10,
        span: 19618..19619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 731,
        column: 11,
        span: 19619..19620,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 731,
        column: 14,
        span: 19621..19623,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 731,
        column: 17,
        span: 19623..19626,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 731,
        column: 18,
        span: 19626..19627,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 732,
        column: 0,
        span: 19661..19664,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 735,
        column: 0,
        span: 19765..19767,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 736,
        column: 8,
        span: 19770..19775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 736,
        column: 10,
        span: 19776..19777,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 736,
        column: 12,
        span: 19778..19779,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 736,
        column: 14,
        span: 19780..19781,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 736,
        column: 15,
        span: 19781..19782,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 736,
        column: 16,
        span: 19782..19783,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 736,
        column: 22,
        span: 19784..19789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 736,
        column: 26,
        span: 19790..19793,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 736,
        column: 28,
        span: 19794..19795,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 736,
        column: 0,
        span: 19795..19798,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 737,
        column: 6,
        span: 19801..19804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 737,
        column: 8,
        span: 19805..19806,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 737,
        column: 9,
        span: 19806..19807,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 737,
        column: 10,
        span: 19806..19808,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 737,
        column: 11,
        span: 19808..19809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 737,
        column: 14,
        span: 19809..19812,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 737,
        column: 17,
        span: 19813..19815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 737,
        column: 19,
        span: 19816..19817,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 737,
        column: 20,
        span: 19817..19818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 737,
        column: 21,
        span: 19818..19819,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 737,
        column: 22,
        span: 19819..19820,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 737,
        column: 24,
        span: 19821..19822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 737,
        column: 26,
        span: 19823..19824,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 737,
        column: 27,
        span: 19824..19825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pushuserdata",
        ),
        line: 737,
        column: 39,
        span: 19825..19837,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 737,
        column: 40,
        span: 19837..19838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 737,
        column: 41,
        span: 19838..19839,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 737,
        column: 42,
        span: 19839..19840,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 737,
        column: 0,
        span: 19841..19844,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 738,
        column: 6,
        span: 19847..19850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 738,
        column: 8,
        span: 19851..19852,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 738,
        column: 9,
        span: 19852..19853,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 738,
        column: 10,
        span: 19852..19854,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 738,
        column: 11,
        span: 19854..19855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 738,
        column: 14,
        span: 19855..19858,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 738,
        column: 17,
        span: 19859..19861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 738,
        column: 24,
        span: 19862..19868,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 738,
        column: 25,
        span: 19868..19869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 738,
        column: 26,
        span: 19869..19870,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 738,
        column: 27,
        span: 19870..19871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        line: 738,
        column: 35,
        span: 19871..19879,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 738,
        column: 36,
        span: 19879..19880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 738,
        column: 37,
        span: 19880..19881,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 738,
        column: 38,
        span: 19881..19882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 738,
        column: 39,
        span: 19882..19883,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 738,
        column: 40,
        span: 19883..19884,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 738,
        column: 41,
        span: 19884..19885,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 738,
        column: 44,
        span: 19886..19888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 738,
        column: 46,
        span: 19889..19890,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 738,
        column: 47,
        span: 19890..19891,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 738,
        column: 0,
        span: 19892..19895,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 739,
        column: 6,
        span: 19898..19901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 739,
        column: 8,
        span: 19902..19903,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 739,
        column: 9,
        span: 19903..19904,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 739,
        column: 10,
        span: 19903..19905,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 739,
        column: 11,
        span: 19905..19906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 739,
        column: 14,
        span: 19906..19909,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 739,
        column: 17,
        span: 19910..19912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 739,
        column: 24,
        span: 19913..19919,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 739,
        column: 25,
        span: 19919..19920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 739,
        column: 26,
        span: 19920..19921,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 739,
        column: 27,
        span: 19921..19922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pushuserdata",
        ),
        line: 739,
        column: 39,
        span: 19922..19934,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 739,
        column: 40,
        span: 19934..19935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 739,
        column: 41,
        span: 19935..19936,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 739,
        column: 42,
        span: 19936..19937,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 739,
        column: 45,
        span: 19938..19940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 739,
        column: 47,
        span: 19941..19942,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 739,
        column: 48,
        span: 19942..19943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 739,
        column: 49,
        span: 19943..19944,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 739,
        column: 50,
        span: 19944..19945,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 739,
        column: 51,
        span: 19945..19946,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 739,
        column: 0,
        span: 19947..19950,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 740,
        column: 6,
        span: 19953..19956,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 740,
        column: 8,
        span: 19957..19958,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 740,
        column: 9,
        span: 19958..19959,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 740,
        column: 10,
        span: 19958..19960,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 740,
        column: 11,
        span: 19960..19961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 740,
        column: 14,
        span: 19961..19964,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 740,
        column: 17,
        span: 19965..19967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 740,
        column: 19,
        span: 19968..19969,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 740,
        column: 20,
        span: 19969..19970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 740,
        column: 21,
        span: 19970..19971,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 740,
        column: 22,
        span: 19971..19972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 740,
        column: 23,
        span: 19972..19973,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 740,
        column: 24,
        span: 19973..19974,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 740,
        column: 25,
        span: 19974..19975,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 740,
        column: 27,
        span: 19976..19977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 740,
        column: 29,
        span: 19978..19979,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 740,
        column: 0,
        span: 19980..19983,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 741,
        column: 6,
        span: 19986..19989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 741,
        column: 8,
        span: 19990..19991,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 741,
        column: 9,
        span: 19991..19992,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 741,
        column: 10,
        span: 19991..19993,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 741,
        column: 11,
        span: 19993..19994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 741,
        column: 14,
        span: 19994..19997,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 741,
        column: 17,
        span: 19998..20000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 741,
        column: 19,
        span: 20001..20002,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 741,
        column: 20,
        span: 20002..20003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 741,
        column: 21,
        span: 20003..20004,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 741,
        column: 22,
        span: 20004..20005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pushuserdata",
        ),
        line: 741,
        column: 34,
        span: 20005..20017,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 741,
        column: 35,
        span: 20017..20018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 741,
        column: 36,
        span: 20018..20019,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 741,
        column: 37,
        span: 20019..20020,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 741,
        column: 38,
        span: 20020..20021,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 741,
        column: 40,
        span: 20022..20023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 741,
        column: 42,
        span: 20024..20025,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 741,
        column: 0,
        span: 20026..20029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 742,
        column: 9,
        span: 20032..20038,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 742,
        column: 10,
        span: 20038..20039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 742,
        column: 14,
        span: 20039..20043,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 742,
        column: 15,
        span: 20043..20044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 742,
        column: 23,
        span: 20044..20052,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 742,
        column: 24,
        span: 20052..20053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 742,
        column: 25,
        span: 20053..20054,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 742,
        column: 26,
        span: 20054..20055,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 742,
        column: 27,
        span: 20054..20056,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 742,
        column: 28,
        span: 20056..20057,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 742,
        column: 29,
        span: 20057..20058,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 742,
        column: 30,
        span: 20058..20059,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 742,
        column: 33,
        span: 20060..20062,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 742,
        column: 42,
        span: 20063..20071,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 742,
        column: 43,
        span: 20071..20072,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 743,
        column: 0,
        span: 20073..20076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 748,
        column: 2,
        span: 20180..20181,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 748,
        column: 3,
        span: 20181..20182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closestate",
        ),
        line: 748,
        column: 13,
        span: 20182..20192,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 748,
        column: 14,
        span: 20192..20193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 748,
        column: 15,
        span: 20193..20194,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 748,
        column: 16,
        span: 20194..20195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newstate",
        ),
        line: 748,
        column: 24,
        span: 20195..20203,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 748,
        column: 25,
        span: 20203..20204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 748,
        column: 26,
        span: 20204..20205,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 748,
        column: 27,
        span: 20205..20206,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 748,
        column: 28,
        span: 20206..20207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        line: 749,
        column: 3,
        span: 20208..20210,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 749,
        column: 5,
        span: 20211..20212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 749,
        column: 7,
        span: 20213..20214,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 749,
        column: 8,
        span: 20214..20215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newstate",
        ),
        line: 749,
        column: 16,
        span: 20215..20223,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 749,
        column: 17,
        span: 20223..20224,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 749,
        column: 18,
        span: 20224..20225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 750,
        column: 7,
        span: 20226..20232,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 750,
        column: 8,
        span: 20232..20233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        line: 750,
        column: 10,
        span: 20233..20235,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 750,
        column: 11,
        span: 20235..20236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 752,
        column: 7,
        span: 20238..20244,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 752,
        column: 8,
        span: 20244..20245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 752,
        column: 9,
        span: 20245..20246,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 752,
        column: 10,
        span: 20246..20247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        line: 752,
        column: 18,
        span: 20247..20255,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 752,
        column: 19,
        span: 20255..20256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        line: 752,
        column: 21,
        span: 20256..20258,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 752,
        column: 22,
        span: 20258..20259,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X='a'; return 'a'\"",
        ),
        line: 752,
        column: 42,
        span: 20260..20279,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 752,
        column: 43,
        span: 20279..20280,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 752,
        column: 46,
        span: 20281..20283,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 752,
        column: 50,
        span: 20284..20287,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 752,
        column: 51,
        span: 20287..20288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 755,
        column: 7,
        span: 20291..20297,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 755,
        column: 8,
        span: 20297..20298,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 755,
        column: 9,
        span: 20298..20299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 755,
        column: 13,
        span: 20299..20303,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 755,
        column: 14,
        span: 20303..20304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 755,
        column: 15,
        span: 20304..20305,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 755,
        column: 16,
        span: 20305..20306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        line: 755,
        column: 24,
        span: 20306..20314,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 755,
        column: 25,
        span: 20314..20315,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        line: 755,
        column: 27,
        span: 20315..20317,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 755,
        column: 28,
        span: 20317..20318,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function f () return 'alo', 3 end; f()\"",
        ),
        line: 755,
        column: 69,
        span: 20319..20359,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 755,
        column: 70,
        span: 20359..20360,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 755,
        column: 71,
        span: 20360..20361,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 755,
        column: 74,
        span: 20362..20364,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 755,
        column: 76,
        span: 20364..20366,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 755,
        column: 77,
        span: 20366..20367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 757,
        column: 2,
        span: 20369..20370,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 757,
        column: 3,
        span: 20370..20371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 757,
        column: 5,
        span: 20372..20373,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 757,
        column: 7,
        span: 20374..20375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 757,
        column: 9,
        span: 20376..20377,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 757,
        column: 10,
        span: 20377..20378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        line: 757,
        column: 18,
        span: 20378..20386,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 757,
        column: 19,
        span: 20386..20387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        line: 757,
        column: 21,
        span: 20387..20389,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 757,
        column: 22,
        span: 20389..20390,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return f()\"",
        ),
        line: 757,
        column: 35,
        span: 20391..20403,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 757,
        column: 36,
        span: 20403..20404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 758,
        column: 7,
        span: 20405..20411,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 758,
        column: 8,
        span: 20411..20412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 758,
        column: 9,
        span: 20412..20413,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 758,
        column: 12,
        span: 20414..20416,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        line: 758,
        column: 18,
        span: 20417..20422,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 758,
        column: 22,
        span: 20423..20426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 758,
        column: 24,
        span: 20427..20428,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 758,
        column: 27,
        span: 20429..20431,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'3'",
        ),
        line: 758,
        column: 31,
        span: 20432..20435,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 758,
        column: 32,
        span: 20435..20436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 760,
        column: 2,
        span: 20438..20439,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 760,
        column: 3,
        span: 20439..20440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        line: 760,
        column: 11,
        span: 20440..20448,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 760,
        column: 12,
        span: 20448..20449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        line: 760,
        column: 14,
        span: 20449..20451,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 760,
        column: 15,
        span: 20451..20452,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"_ERRORMESSAGE = nil\"",
        ),
        line: 760,
        column: 37,
        span: 20453..20474,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 760,
        column: 38,
        span: 20474..20475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 762,
        column: 2,
        span: 20507..20508,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 762,
        column: 3,
        span: 20508..20509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 762,
        column: 5,
        span: 20510..20511,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 762,
        column: 6,
        span: 20511..20512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 762,
        column: 8,
        span: 20513..20514,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 762,
        column: 10,
        span: 20515..20516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 762,
        column: 12,
        span: 20517..20518,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 762,
        column: 13,
        span: 20518..20519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        line: 762,
        column: 21,
        span: 20519..20527,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 762,
        column: 22,
        span: 20527..20528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        line: 762,
        column: 24,
        span: 20528..20530,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 762,
        column: 25,
        span: 20530..20531,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return sin(1)\"",
        ),
        line: 762,
        column: 41,
        span: 20532..20547,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 762,
        column: 42,
        span: 20547..20548,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 763,
        column: 7,
        span: 20549..20555,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 763,
        column: 8,
        span: 20555..20556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 763,
        column: 9,
        span: 20556..20557,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 763,
        column: 12,
        span: 20558..20560,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 763,
        column: 16,
        span: 20561..20564,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 763,
        column: 20,
        span: 20565..20568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 763,
        column: 22,
        span: 20569..20570,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 763,
        column: 25,
        span: 20571..20573,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 763,
        column: 27,
        span: 20573..20575,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 763,
        column: 28,
        span: 20575..20576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 766,
        column: 2,
        span: 20626..20627,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 766,
        column: 3,
        span: 20627..20628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 766,
        column: 5,
        span: 20629..20630,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 766,
        column: 6,
        span: 20630..20631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 766,
        column: 8,
        span: 20632..20633,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 766,
        column: 10,
        span: 20634..20635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 766,
        column: 12,
        span: 20636..20637,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 766,
        column: 13,
        span: 20637..20638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        line: 766,
        column: 21,
        span: 20638..20646,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 766,
        column: 22,
        span: 20646..20647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        line: 766,
        column: 24,
        span: 20647..20649,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 766,
        column: 25,
        span: 20649..20650,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return a+\"",
        ),
        line: 766,
        column: 37,
        span: 20651..20662,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 766,
        column: 38,
        span: 20662..20663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 767,
        column: 7,
        span: 20664..20670,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 767,
        column: 8,
        span: 20670..20671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 767,
        column: 9,
        span: 20671..20672,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 767,
        column: 12,
        span: 20673..20675,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 767,
        column: 16,
        span: 20676..20679,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 767,
        column: 20,
        span: 20680..20683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 767,
        column: 22,
        span: 20684..20685,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 767,
        column: 25,
        span: 20686..20688,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 767,
        column: 27,
        span: 20688..20690,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 767,
        column: 31,
        span: 20691..20694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 767,
        column: 36,
        span: 20695..20699,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 767,
        column: 37,
        span: 20699..20700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 767,
        column: 38,
        span: 20700..20701,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 767,
        column: 39,
        span: 20701..20702,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 767,
        column: 42,
        span: 20703..20705,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 767,
        column: 51,
        span: 20706..20714,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 767,
        column: 52,
        span: 20714..20715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 769,
        column: 2,
        span: 20740..20741,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 769,
        column: 3,
        span: 20741..20742,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        line: 769,
        column: 10,
        span: 20742..20749,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 769,
        column: 11,
        span: 20749..20750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        line: 769,
        column: 13,
        span: 20750..20752,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 769,
        column: 14,
        span: 20752..20753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 770,
        column: 2,
        span: 20754..20755,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 770,
        column: 3,
        span: 20755..20756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 770,
        column: 5,
        span: 20757..20758,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 770,
        column: 6,
        span: 20758..20759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 770,
        column: 8,
        span: 20760..20761,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 770,
        column: 10,
        span: 20762..20763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 770,
        column: 12,
        span: 20764..20765,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 770,
        column: 13,
        span: 20765..20766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        line: 770,
        column: 21,
        span: 20766..20774,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 770,
        column: 22,
        span: 20774..20775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        line: 770,
        column: 24,
        span: 20775..20777,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 770,
        column: 25,
        span: 20777..20778,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  string = require'string'\n  a = require'_G'; assert(a == _G and require(\"_G\") == a)\n  io = require'io'; assert(type(io.read) == \"function\")\n  assert(require(\"io\") == io)\n  a = require'table'; assert(type(a.insert) == \"function\")\n  a = require'debug'; assert(type(a.getlocal) == \"function\")\n  a = require'math'; assert(type(a.sin) == \"function\")\n  return string.sub('okinama', 1, 2)\n]]",
        ),
        line: 779,
        column: 3,
        span: 20779..21167,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 779,
        column: 4,
        span: 21167..21168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 780,
        column: 7,
        span: 21169..21175,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 780,
        column: 8,
        span: 21175..21176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 780,
        column: 9,
        span: 21176..21177,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 780,
        column: 12,
        span: 21178..21180,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ok\"",
        ),
        line: 780,
        column: 17,
        span: 21181..21185,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 780,
        column: 18,
        span: 21185..21186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 782,
        column: 2,
        span: 21188..21189,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 782,
        column: 3,
        span: 21189..21190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closestate",
        ),
        line: 782,
        column: 13,
        span: 21190..21200,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 782,
        column: 14,
        span: 21200..21201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        line: 782,
        column: 16,
        span: 21201..21203,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 782,
        column: 17,
        span: 21203..21204,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 782,
        column: 18,
        span: 21204..21205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        line: 785,
        column: 3,
        span: 21208..21210,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 785,
        column: 5,
        span: 21211..21212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 785,
        column: 7,
        span: 21213..21214,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 785,
        column: 8,
        span: 21214..21215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newstate",
        ),
        line: 785,
        column: 16,
        span: 21215..21223,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 785,
        column: 17,
        span: 21223..21224,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 785,
        column: 18,
        span: 21224..21225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 786,
        column: 2,
        span: 21226..21227,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 786,
        column: 3,
        span: 21227..21228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        line: 786,
        column: 10,
        span: 21228..21235,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 786,
        column: 11,
        span: 21235..21236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        line: 786,
        column: 13,
        span: 21236..21238,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 786,
        column: 14,
        span: 21238..21239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 787,
        column: 2,
        span: 21240..21241,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 787,
        column: 3,
        span: 21241..21242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        line: 787,
        column: 11,
        span: 21242..21250,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 787,
        column: 12,
        span: 21250..21251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        line: 787,
        column: 14,
        span: 21251..21253,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 787,
        column: 15,
        span: 21253..21254,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = {}\"",
        ),
        line: 787,
        column: 24,
        span: 21255..21263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 787,
        column: 25,
        span: 21263..21264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 788,
        column: 2,
        span: 21265..21266,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 788,
        column: 3,
        span: 21266..21267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 788,
        column: 8,
        span: 21267..21272,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 788,
        column: 9,
        span: 21272..21273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        line: 788,
        column: 11,
        span: 21273..21275,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 788,
        column: 12,
        span: 21275..21276,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[getglobal \"a\"; pushstring \"x\"; pushnum 1;\n             settable -3]]",
        ),
        line: 789,
        column: 27,
        span: 21277..21347,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 789,
        column: 28,
        span: 21347..21348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 790,
        column: 7,
        span: 21349..21355,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 790,
        column: 8,
        span: 21355..21356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 790,
        column: 9,
        span: 21356..21357,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 790,
        column: 10,
        span: 21357..21358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        line: 790,
        column: 18,
        span: 21358..21366,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 790,
        column: 19,
        span: 21366..21367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        line: 790,
        column: 21,
        span: 21367..21369,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 790,
        column: 22,
        span: 21369..21370,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return a.x\"",
        ),
        line: 790,
        column: 35,
        span: 21371..21383,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 790,
        column: 36,
        span: 21383..21384,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 790,
        column: 39,
        span: 21385..21387,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\"",
        ),
        line: 790,
        column: 43,
        span: 21388..21391,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 790,
        column: 44,
        span: 21391..21392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 792,
        column: 2,
        span: 21394..21395,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 792,
        column: 3,
        span: 21395..21396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closestate",
        ),
        line: 792,
        column: 13,
        span: 21396..21406,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 792,
        column: 14,
        span: 21406..21407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        line: 792,
        column: 16,
        span: 21407..21409,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 792,
        column: 17,
        span: 21409..21410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        line: 794,
        column: 3,
        span: 21412..21414,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 794,
        column: 5,
        span: 21415..21416,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 794,
        column: 0,
        span: 21417..21420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 796,
        column: 6,
        span: 21422..21427,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 796,
        column: 7,
        span: 21427..21428,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 796,
        column: 10,
        span: 21428..21431,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 796,
        column: 11,
        span: 21431..21432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 801,
        column: 7,
        span: 21607..21613,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 801,
        column: 8,
        span: 21613..21614,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 801,
        column: 11,
        span: 21614..21617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 801,
        column: 17,
        span: 21618..21623,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 801,
        column: 18,
        span: 21623..21624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 801,
        column: 19,
        span: 21624..21625,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 801,
        column: 20,
        span: 21625..21626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        line: 801,
        column: 31,
        span: 21626..21637,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 801,
        column: 32,
        span: 21637..21638,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 801,
        column: 34,
        span: 21638..21640,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 801,
        column: 35,
        span: 21640..21641,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 801,
        column: 37,
        span: 21640..21643,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 801,
        column: 38,
        span: 21643..21644,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 801,
        column: 39,
        span: 21643..21645,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 801,
        column: 40,
        span: 21645..21646,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 801,
        column: 41,
        span: 21646..21647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 802,
        column: 15,
        span: 21648..21662,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 802,
        column: 16,
        span: 21662..21663,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 802,
        column: 17,
        span: 21663..21664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 803,
        column: 2,
        span: 21665..21666,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 803,
        column: 3,
        span: 21666..21667,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 803,
        column: 11,
        span: 21667..21675,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 803,
        column: 12,
        span: 21675..21676,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 803,
        column: 13,
        span: 21676..21677,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 803,
        column: 14,
        span: 21677..21678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 803,
        column: 22,
        span: 21678..21686,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 803,
        column: 23,
        span: 21686..21687,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 803,
        column: 24,
        span: 21687..21688,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 803,
        column: 25,
        span: 21688..21689,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5000",
                    after_decimal: "",
                },
            ),
        ),
        line: 803,
        column: 29,
        span: 21688..21693,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 803,
        column: 30,
        span: 21693..21694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 804,
        column: 7,
        span: 21727..21733,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 804,
        column: 8,
        span: 21733..21734,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 804,
        column: 11,
        span: 21734..21737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 804,
        column: 17,
        span: 21738..21743,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 804,
        column: 18,
        span: 21743..21744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 804,
        column: 22,
        span: 21744..21748,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a={}; for i=1,100000 do a[i]=i end\"",
        ),
        line: 804,
        column: 64,
        span: 21748..21790,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 804,
        column: 65,
        span: 21790..21791,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 804,
        column: 66,
        span: 21791..21792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 805,
        column: 2,
        span: 21793..21794,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 805,
        column: 3,
        span: 21794..21795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 805,
        column: 11,
        span: 21795..21803,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 805,
        column: 12,
        span: 21803..21804,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000000000",
                    after_decimal: "",
                },
            ),
        ),
        line: 805,
        column: 22,
        span: 21803..21814,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 805,
        column: 23,
        span: 21814..21815,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 810,
        column: 9,
        span: 22045..22053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        line: 810,
        column: 18,
        span: 22054..22062,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 810,
        column: 20,
        span: 22063..22064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 810,
        column: 21,
        span: 22064..22065,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 810,
        column: 22,
        span: 22065..22066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 810,
        column: 24,
        span: 22067..22068,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 810,
        column: 25,
        span: 22068..22069,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 811,
        column: 17,
        span: 22072..22086,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 811,
        column: 18,
        span: 22086..22087,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 811,
        column: 19,
        span: 22087..22088,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 811,
        column: 20,
        span: 22088..22089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 811,
        column: 35,
        span: 22090..22104,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 811,
        column: 36,
        span: 22104..22105,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 811,
        column: 37,
        span: 22105..22106,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 812,
        column: 8,
        span: 22109..22114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "M",
        ),
        line: 812,
        column: 10,
        span: 22115..22116,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 812,
        column: 12,
        span: 22117..22118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 812,
        column: 14,
        span: 22119..22120,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 812,
        column: 15,
        span: 22120..22121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 812,
        column: 23,
        span: 22121..22129,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 812,
        column: 24,
        span: 22129..22130,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 812,
        column: 25,
        span: 22130..22131,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 813,
        column: 8,
        span: 22134..22139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldM",
        ),
        line: 813,
        column: 13,
        span: 22140..22144,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 813,
        column: 15,
        span: 22145..22146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "M",
        ),
        line: 813,
        column: 0,
        span: 22147..22148,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 814,
        column: 8,
        span: 22151..22156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 814,
        column: 10,
        span: 22157..22158,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 814,
        column: 11,
        span: 22158..22159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 814,
        column: 12,
        span: 22159..22160,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 814,
        column: 14,
        span: 22161..22162,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 814,
        column: 0,
        span: 22163..22166,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 815,
        column: 8,
        span: 22169..22174,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 815,
        column: 10,
        span: 22174..22176,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 815,
        column: 0,
        span: 22177..22179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "M",
        ),
        line: 816,
        column: 6,
        span: 22184..22185,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 816,
        column: 8,
        span: 22186..22187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "M",
        ),
        line: 816,
        column: 10,
        span: 22188..22189,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 816,
        column: 11,
        span: 22189..22190,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 816,
        column: 12,
        span: 22189..22191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 817,
        column: 6,
        span: 22238..22239,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 817,
        column: 7,
        span: 22239..22240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 817,
        column: 15,
        span: 22240..22248,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 817,
        column: 16,
        span: 22248..22249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "M",
        ),
        line: 817,
        column: 17,
        span: 22249..22250,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 817,
        column: 18,
        span: 22250..22251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 818,
        column: 6,
        span: 22256..22257,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 818,
        column: 7,
        span: 22257..22258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 818,
        column: 9,
        span: 22259..22260,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 818,
        column: 11,
        span: 22261..22262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 818,
        column: 17,
        span: 22263..22268,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 818,
        column: 18,
        span: 22268..22269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 818,
        column: 19,
        span: 22269..22270,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 818,
        column: 20,
        span: 22270..22271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 819,
        column: 6,
        span: 22276..22277,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 819,
        column: 7,
        span: 22277..22278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 819,
        column: 15,
        span: 22278..22286,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 819,
        column: 16,
        span: 22286..22287,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000000000",
                    after_decimal: "",
                },
            ),
        ),
        line: 819,
        column: 26,
        span: 22286..22297,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 819,
        column: 27,
        span: 22297..22298,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 820,
        column: 7,
        span: 22326..22328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 820,
        column: 9,
        span: 22329..22330,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 820,
        column: 13,
        span: 22331..22334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 820,
        column: 15,
        span: 22335..22336,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 820,
        column: 20,
        span: 22337..22341,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 820,
        column: 26,
        span: 22342..22347,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 820,
        column: 30,
        span: 22348..22351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 821,
        column: 19,
        span: 22390..22404,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 821,
        column: 20,
        span: 22404..22405,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 821,
        column: 21,
        span: 22405..22406,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 822,
        column: 7,
        span: 22411..22413,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 822,
        column: 11,
        span: 22414..22417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 822,
        column: 13,
        span: 22418..22419,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 822,
        column: 17,
        span: 22420..22423,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 822,
        column: 21,
        span: 22424..22427,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 823,
        column: 8,
        span: 22454..22455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 823,
        column: 14,
        span: 22455..22461,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 823,
        column: 15,
        span: 22461..22462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 823,
        column: 19,
        span: 22462..22466,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 823,
        column: 20,
        span: 22466..22467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 823,
        column: 21,
        span: 22467..22468,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 823,
        column: 22,
        span: 22468..22469,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"memory\"",
        ),
        line: 823,
        column: 31,
        span: 22470..22478,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 823,
        column: 32,
        span: 22478..22479,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 823,
        column: 35,
        span: 22480..22482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 823,
        column: 42,
        span: 22483..22489,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 823,
        column: 43,
        span: 22489..22490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 823,
        column: 47,
        span: 22490..22494,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 823,
        column: 48,
        span: 22494..22495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 823,
        column: 49,
        span: 22495..22496,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 823,
        column: 50,
        span: 22496..22497,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"overflow\"",
        ),
        line: 823,
        column: 61,
        span: 22498..22508,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 823,
        column: 62,
        span: 22508..22509,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 823,
        column: 63,
        span: 22509..22510,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 823,
        column: 0,
        span: 22511..22515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 824,
        column: 12,
        span: 22522..22527,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 824,
        column: 13,
        span: 22527..22528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 824,
        column: 14,
        span: 22528..22529,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 824,
        column: 15,
        span: 22529..22530,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 824,
        column: 17,
        span: 22530..22532,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 824,
        column: 18,
        span: 22532..22533,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 825,
        column: 0,
        span: 22556..22559,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 826,
        column: 0,
        span: 22562..22565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 827,
        column: 8,
        span: 22568..22573,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 827,
        column: 9,
        span: 22573..22574,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\nlimit for \"",
        ),
        line: 827,
        column: 23,
        span: 22574..22588,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 827,
        column: 26,
        span: 22589..22591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 827,
        column: 28,
        span: 22592..22593,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 827,
        column: 31,
        span: 22594..22596,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\": \"",
        ),
        line: 827,
        column: 36,
        span: 22597..22601,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 827,
        column: 39,
        span: 22602..22604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "M",
        ),
        line: 827,
        column: 41,
        span: 22605..22606,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 827,
        column: 42,
        span: 22606..22607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldM",
        ),
        line: 827,
        column: 46,
        span: 22607..22611,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 827,
        column: 47,
        span: 22611..22612,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 828,
        column: 9,
        span: 22615..22621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 828,
        column: 0,
        span: 22622..22623,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 829,
        column: 0,
        span: 22624..22627,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 834,
        column: 2,
        span: 22682..22683,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 834,
        column: 4,
        span: 22684..22685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        line: 834,
        column: 13,
        span: 22686..22694,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 834,
        column: 14,
        span: 22694..22695,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"state creation\"",
        ),
        line: 834,
        column: 30,
        span: 22695..22711,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 834,
        column: 31,
        span: 22711..22712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 834,
        column: 33,
        span: 22713..22714,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 834,
        column: 34,
        span: 22714..22715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newstate",
        ),
        line: 834,
        column: 42,
        span: 22715..22723,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 834,
        column: 43,
        span: 22723..22724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 835,
        column: 2,
        span: 22725..22726,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 835,
        column: 3,
        span: 22726..22727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closestate",
        ),
        line: 835,
        column: 13,
        span: 22727..22737,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 835,
        column: 14,
        span: 22737..22738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 835,
        column: 15,
        span: 22738..22739,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 835,
        column: 16,
        span: 22739..22740,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 835,
        column: 17,
        span: 22740..22741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 841,
        column: 3,
        span: 22853..22855,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 841,
        column: 5,
        span: 22856..22857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 841,
        column: 7,
        span: 22858..22859,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 841,
        column: 8,
        span: 22859..22860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 841,
        column: 13,
        span: 22860..22865,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 841,
        column: 14,
        span: 22865..22866,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rawgeti R 1; return 1\"",
        ),
        line: 841,
        column: 37,
        span: 22866..22889,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 841,
        column: 38,
        span: 22889..22890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 842,
        column: 7,
        span: 22891..22897,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 842,
        column: 8,
        span: 22897..22898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 842,
        column: 12,
        span: 22898..22902,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 842,
        column: 13,
        span: 22902..22903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 842,
        column: 15,
        span: 22903..22905,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 842,
        column: 16,
        span: 22905..22906,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 842,
        column: 19,
        span: 22907..22909,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"thread\"",
        ),
        line: 842,
        column: 28,
        span: 22910..22918,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 842,
        column: 32,
        span: 22919..22922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 842,
        column: 42,
        span: 22923..22932,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 842,
        column: 43,
        span: 22932..22933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "running",
        ),
        line: 842,
        column: 50,
        span: 22933..22940,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 842,
        column: 51,
        span: 22940..22941,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 842,
        column: 52,
        span: 22941..22942,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 842,
        column: 55,
        span: 22943..22945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 842,
        column: 58,
        span: 22946..22948,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 842,
        column: 59,
        span: 22948..22949,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 846,
        column: 9,
        span: 22953..22961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expand",
        ),
        line: 846,
        column: 16,
        span: 22962..22968,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 846,
        column: 18,
        span: 22969..22970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 846,
        column: 19,
        span: 22970..22971,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 846,
        column: 20,
        span: 22971..22972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 846,
        column: 21,
        span: 22972..22973,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 846,
        column: 22,
        span: 22973..22974,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 847,
        column: 5,
        span: 22977..22979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 847,
        column: 7,
        span: 22980..22981,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 847,
        column: 9,
        span: 22981..22983,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 847,
        column: 10,
        span: 22982..22984,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 847,
        column: 15,
        span: 22985..22989,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 847,
        column: 22,
        span: 22990..22996,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 847,
        column: 25,
        span: 22997..22999,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 847,
        column: 0,
        span: 23000..23003,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 848,
        column: 8,
        span: 23006..23011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 848,
        column: 10,
        span: 23012..23013,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 848,
        column: 12,
        span: 23014..23015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 848,
        column: 19,
        span: 23016..23022,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 848,
        column: 20,
        span: 23022..23023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 848,
        column: 23,
        span: 23023..23026,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 848,
        column: 24,
        span: 23026..23027,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=\"",
        ),
        line: 848,
        column: 27,
        span: 23027..23030,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 848,
        column: 28,
        span: 23030..23031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 848,
        column: 30,
        span: 23032..23033,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 848,
        column: 31,
        span: 23033..23034,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 849,
        column: 9,
        span: 23037..23043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 849,
        column: 16,
        span: 23044..23050,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 849,
        column: 17,
        span: 23050..23051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 849,
        column: 23,
        span: 23051..23057,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 849,
        column: 24,
        span: 23057..23058,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"T.doonnewstack([%s[ %s;\\n collectgarbage(); %s]%s])\\n\"",
        ),
        line: 849,
        column: 79,
        span: 23058..23113,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 849,
        column: 80,
        span: 23113..23114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 850,
        column: 32,
        span: 23145..23146,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 850,
        column: 33,
        span: 23146..23147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 850,
        column: 35,
        span: 23148..23149,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 850,
        column: 36,
        span: 23149..23150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expand",
        ),
        line: 850,
        column: 43,
        span: 23151..23157,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 850,
        column: 44,
        span: 23157..23158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 850,
        column: 45,
        span: 23158..23159,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 850,
        column: 46,
        span: 23159..23160,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 850,
        column: 47,
        span: 23159..23161,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 850,
        column: 48,
        span: 23161..23162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 850,
        column: 49,
        span: 23162..23163,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 850,
        column: 50,
        span: 23163..23164,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 850,
        column: 51,
        span: 23164..23165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 850,
        column: 53,
        span: 23166..23167,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 850,
        column: 54,
        span: 23167..23168,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 851,
        column: 0,
        span: 23169..23172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "G",
        ),
        line: 853,
        column: 2,
        span: 23174..23175,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 853,
        column: 3,
        span: 23175..23176,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 853,
        column: 4,
        span: 23175..23177,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 853,
        column: 5,
        span: 23177..23178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 853,
        column: 20,
        span: 23179..23193,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 853,
        column: 21,
        span: 23193..23194,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 853,
        column: 22,
        span: 23194..23195,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 853,
        column: 23,
        span: 23195..23196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 853,
        column: 25,
        span: 23197..23198,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 853,
        column: 27,
        span: 23199..23200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 853,
        column: 41,
        span: 23200..23214,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 853,
        column: 42,
        span: 23214..23215,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        line: 853,
        column: 49,
        span: 23215..23222,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 853,
        column: 50,
        span: 23222..23223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 854,
        column: 5,
        span: 23224..23228,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 854,
        column: 6,
        span: 23228..23229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expand",
        ),
        line: 854,
        column: 12,
        span: 23229..23235,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 854,
        column: 13,
        span: 23235..23236,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 854,
        column: 15,
        span: 23235..23238,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 854,
        column: 16,
        span: 23238..23239,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"G=G+1\"",
        ),
        line: 854,
        column: 23,
        span: 23239..23246,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 854,
        column: 24,
        span: 23246..23247,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 854,
        column: 25,
        span: 23247..23248,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 854,
        column: 26,
        span: 23248..23249,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 854,
        column: 27,
        span: 23249..23250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 855,
        column: 7,
        span: 23251..23257,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 855,
        column: 8,
        span: 23257..23258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "G",
        ),
        line: 855,
        column: 9,
        span: 23258..23259,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 855,
        column: 11,
        span: 23259..23261,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 855,
        column: 13,
        span: 23260..23263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 855,
        column: 14,
        span: 23263..23264,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 855,
        column: 15,
        span: 23264..23265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 855,
        column: 30,
        span: 23266..23280,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 855,
        column: 31,
        span: 23280..23281,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 855,
        column: 32,
        span: 23281..23282,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 855,
        column: 33,
        span: 23282..23283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        line: 857,
        column: 9,
        span: 23313..23321,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 857,
        column: 10,
        span: 23321..23322,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"thread creation\"",
        ),
        line: 857,
        column: 27,
        span: 23322..23339,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 857,
        column: 28,
        span: 23339..23340,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 857,
        column: 37,
        span: 23341..23349,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 857,
        column: 39,
        span: 23350..23351,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 857,
        column: 40,
        span: 23351..23352,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 858,
        column: 9,
        span: 23355..23361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 858,
        column: 11,
        span: 23362..23363,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 858,
        column: 12,
        span: 23363..23364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doonnewstack",
        ),
        line: 858,
        column: 24,
        span: 23364..23376,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 858,
        column: 25,
        span: 23376..23377,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x=1\"",
        ),
        line: 858,
        column: 30,
        span: 23377..23382,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 858,
        column: 31,
        span: 23382..23383,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 858,
        column: 34,
        span: 23384..23386,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 858,
        column: 36,
        span: 23386..23388,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 859,
        column: 4,
        span: 23414..23417,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 859,
        column: 5,
        span: 23417..23418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        line: 864,
        column: 9,
        span: 23451..23459,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 864,
        column: 10,
        span: 23459..23460,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"loadstring\"",
        ),
        line: 864,
        column: 22,
        span: 23460..23472,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 864,
        column: 23,
        span: 23472..23473,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 864,
        column: 32,
        span: 23474..23482,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 864,
        column: 34,
        span: 23483..23484,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 864,
        column: 35,
        span: 23484..23485,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 865,
        column: 9,
        span: 23488..23494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 865,
        column: 14,
        span: 23495..23499,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 865,
        column: 15,
        span: 23499..23500,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x=1\"",
        ),
        line: 865,
        column: 20,
        span: 23500..23505,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 865,
        column: 21,
        span: 23505..23506,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 866,
        column: 4,
        span: 23535..23538,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 866,
        column: 5,
        span: 23538..23539,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 869,
        column: 6,
        span: 23542..23547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testprog",
        ),
        line: 869,
        column: 15,
        span: 23548..23556,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 869,
        column: 17,
        span: 23557..23558,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal function foo () return end\nlocal t = {\"x\"}\na = \"aaa\"\nfor i = 1, #t do a=a..t[i] end\nreturn true\n]]",
        ),
        line: 875,
        column: 3,
        span: 23559..23666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 878,
        column: 3,
        span: 23695..23697,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 878,
        column: 4,
        span: 23697..23698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 878,
        column: 5,
        span: 23698..23699,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 878,
        column: 7,
        span: 23700..23701,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 878,
        column: 0,
        span: 23702..23705,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 879,
        column: 6,
        span: 23706..23711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 879,
        column: 8,
        span: 23712..23713,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 879,
        column: 10,
        span: 23714..23715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 879,
        column: 12,
        span: 23715..23717,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 879,
        column: 13,
        span: 23717..23718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpname",
        ),
        line: 879,
        column: 20,
        span: 23718..23725,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 879,
        column: 21,
        span: 23725..23726,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 879,
        column: 22,
        span: 23726..23727,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 880,
        column: 6,
        span: 23728..23733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 880,
        column: 8,
        span: 23734..23735,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 880,
        column: 10,
        span: 23736..23737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 880,
        column: 17,
        span: 23738..23744,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 880,
        column: 18,
        span: 23744..23745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 880,
        column: 20,
        span: 23745..23747,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 880,
        column: 21,
        span: 23747..23748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 880,
        column: 25,
        span: 23748..23752,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 880,
        column: 26,
        span: 23752..23753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 880,
        column: 27,
        span: 23753..23754,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 880,
        column: 28,
        span: 23754..23755,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"w\"",
        ),
        line: 880,
        column: 32,
        span: 23756..23759,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 880,
        column: 33,
        span: 23759..23760,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 880,
        column: 34,
        span: 23760..23761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 881,
        column: 2,
        span: 23762..23763,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 881,
        column: 3,
        span: 23763..23764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 881,
        column: 8,
        span: 23764..23769,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 881,
        column: 9,
        span: 23769..23770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testprog",
        ),
        line: 881,
        column: 17,
        span: 23770..23778,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 881,
        column: 18,
        span: 23778..23779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 882,
        column: 2,
        span: 23780..23781,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 882,
        column: 3,
        span: 23781..23782,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 882,
        column: 8,
        span: 23782..23787,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 882,
        column: 9,
        span: 23787..23788,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 882,
        column: 10,
        span: 23788..23789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        line: 883,
        column: 9,
        span: 23790..23798,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 883,
        column: 10,
        span: 23798..23799,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"dofile\"",
        ),
        line: 883,
        column: 18,
        span: 23799..23807,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 883,
        column: 19,
        span: 23807..23808,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 883,
        column: 28,
        span: 23809..23817,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 883,
        column: 30,
        span: 23818..23819,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 883,
        column: 31,
        span: 23819..23820,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 884,
        column: 8,
        span: 23823..23828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 884,
        column: 10,
        span: 23829..23830,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 884,
        column: 12,
        span: 23831..23832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 884,
        column: 21,
        span: 23833..23841,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 884,
        column: 22,
        span: 23841..23842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 884,
        column: 23,
        span: 23842..23843,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 884,
        column: 24,
        span: 23843..23844,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 885,
        column: 9,
        span: 23847..23853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 885,
        column: 11,
        span: 23854..23855,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 885,
        column: 15,
        span: 23856..23859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 885,
        column: 17,
        span: 23860..23861,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 885,
        column: 18,
        span: 23861..23862,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 885,
        column: 19,
        span: 23862..23863,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 886,
        column: 4,
        span: 23864..23867,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 886,
        column: 5,
        span: 23867..23868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 887,
        column: 7,
        span: 23869..23875,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 887,
        column: 8,
        span: 23875..23876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 887,
        column: 10,
        span: 23876..23878,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 887,
        column: 11,
        span: 23878..23879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 887,
        column: 17,
        span: 23879..23885,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 887,
        column: 18,
        span: 23885..23886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 887,
        column: 19,
        span: 23886..23887,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 887,
        column: 20,
        span: 23887..23888,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 887,
        column: 21,
        span: 23888..23889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 888,
        column: 7,
        span: 23890..23896,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 888,
        column: 8,
        span: 23896..23897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 888,
        column: 10,
        span: 23897..23899,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 888,
        column: 11,
        span: 23899..23900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 888,
        column: 12,
        span: 23900..23901,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 888,
        column: 15,
        span: 23902..23904,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaax\"",
        ),
        line: 888,
        column: 22,
        span: 23905..23911,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 888,
        column: 23,
        span: 23911..23912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        line: 893,
        column: 9,
        span: 23939..23947,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 893,
        column: 10,
        span: 23947..23948,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string creation\"",
        ),
        line: 893,
        column: 27,
        span: 23948..23965,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 893,
        column: 28,
        span: 23965..23966,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 893,
        column: 37,
        span: 23967..23975,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 893,
        column: 39,
        span: 23976..23977,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 893,
        column: 40,
        span: 23977..23978,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 894,
        column: 8,
        span: 23981..23986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 894,
        column: 10,
        span: 23987..23988,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 894,
        column: 11,
        span: 23988..23989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 894,
        column: 13,
        span: 23990..23991,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 894,
        column: 15,
        span: 23992..23993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 894,
        column: 22,
        span: 23994..24000,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 894,
        column: 23,
        span: 24000..24001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 894,
        column: 27,
        span: 24001..24005,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 894,
        column: 28,
        span: 24005..24006,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        line: 894,
        column: 37,
        span: 24006..24015,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 894,
        column: 38,
        span: 24015..24016,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(a)\"",
        ),
        line: 894,
        column: 44,
        span: 24017..24022,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 894,
        column: 45,
        span: 24022..24023,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 894,
        column: 54,
        span: 24024..24032,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 894,
        column: 56,
        span: 24033..24034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 894,
        column: 57,
        span: 24034..24035,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 894,
        column: 58,
        span: 24035..24036,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 894,
        column: 65,
        span: 24037..24043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 894,
        column: 67,
        span: 24044..24045,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 894,
        column: 69,
        span: 24045..24047,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 894,
        column: 72,
        span: 24047..24050,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 894,
        column: 76,
        span: 24051..24054,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 894,
        column: 77,
        span: 24054..24055,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 895,
        column: 9,
        span: 24058..24064,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 895,
        column: 11,
        span: 24065..24066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 895,
        column: 12,
        span: 24066..24067,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 895,
        column: 15,
        span: 24068..24070,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ablo ablo'",
        ),
        line: 895,
        column: 27,
        span: 24071..24082,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 895,
        column: 28,
        span: 24082..24083,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 896,
        column: 4,
        span: 24084..24087,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 896,
        column: 5,
        span: 24087..24088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        line: 898,
        column: 9,
        span: 24090..24098,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 898,
        column: 10,
        span: 24098..24099,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"dump/undump\"",
        ),
        line: 898,
        column: 23,
        span: 24099..24112,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 898,
        column: 24,
        span: 24112..24113,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 898,
        column: 33,
        span: 24114..24122,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 898,
        column: 35,
        span: 24123..24124,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 898,
        column: 36,
        span: 24124..24125,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 899,
        column: 8,
        span: 24128..24133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 899,
        column: 10,
        span: 24134..24135,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 899,
        column: 12,
        span: 24136..24137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 899,
        column: 17,
        span: 24138..24142,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 899,
        column: 18,
        span: 24142..24143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testprog",
        ),
        line: 899,
        column: 26,
        span: 24143..24151,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 899,
        column: 27,
        span: 24151..24152,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 900,
        column: 8,
        span: 24155..24160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 900,
        column: 10,
        span: 24161..24162,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 900,
        column: 12,
        span: 24163..24164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 900,
        column: 14,
        span: 24165..24166,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 900,
        column: 18,
        span: 24167..24170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 900,
        column: 25,
        span: 24171..24177,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 900,
        column: 26,
        span: 24177..24178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 900,
        column: 30,
        span: 24178..24182,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 900,
        column: 31,
        span: 24182..24183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 900,
        column: 32,
        span: 24183..24184,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 900,
        column: 33,
        span: 24184..24185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 901,
        column: 4,
        span: 24188..24189,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 901,
        column: 6,
        span: 24190..24191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 901,
        column: 8,
        span: 24192..24193,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 901,
        column: 12,
        span: 24194..24197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 901,
        column: 17,
        span: 24198..24202,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 901,
        column: 18,
        span: 24202..24203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 901,
        column: 19,
        span: 24203..24204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 901,
        column: 20,
        span: 24204..24205,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 902,
        column: 9,
        span: 24208..24214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 902,
        column: 11,
        span: 24215..24216,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 902,
        column: 15,
        span: 24217..24220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 902,
        column: 17,
        span: 24221..24222,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 902,
        column: 18,
        span: 24222..24223,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 902,
        column: 19,
        span: 24223..24224,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 903,
        column: 4,
        span: 24225..24228,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 903,
        column: 5,
        span: 24228..24229,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 905,
        column: 6,
        span: 24231..24236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 905,
        column: 8,
        span: 24237..24238,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 905,
        column: 10,
        span: 24239..24240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 905,
        column: 13,
        span: 24241..24243,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 905,
        column: 14,
        span: 24243..24244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpname",
        ),
        line: 905,
        column: 21,
        span: 24244..24251,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 905,
        column: 22,
        span: 24251..24252,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 905,
        column: 23,
        span: 24252..24253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        line: 906,
        column: 9,
        span: 24254..24262,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 906,
        column: 10,
        span: 24262..24263,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file creation\"",
        ),
        line: 906,
        column: 25,
        span: 24263..24278,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 906,
        column: 26,
        span: 24278..24279,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 906,
        column: 35,
        span: 24280..24288,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 906,
        column: 37,
        span: 24289..24290,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 906,
        column: 38,
        span: 24290..24291,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 907,
        column: 8,
        span: 24294..24299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 907,
        column: 10,
        span: 24300..24301,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 907,
        column: 12,
        span: 24302..24303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 907,
        column: 19,
        span: 24304..24310,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 907,
        column: 20,
        span: 24310..24311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 907,
        column: 22,
        span: 24311..24313,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 907,
        column: 23,
        span: 24313..24314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 907,
        column: 27,
        span: 24314..24318,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 907,
        column: 28,
        span: 24318..24319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 907,
        column: 29,
        span: 24319..24320,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 907,
        column: 30,
        span: 24320..24321,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'w'",
        ),
        line: 907,
        column: 34,
        span: 24322..24325,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 907,
        column: 35,
        span: 24325..24326,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 907,
        column: 36,
        span: 24326..24327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 908,
        column: 9,
        span: 24330..24336,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 908,
        column: 11,
        span: 24337..24338,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 908,
        column: 14,
        span: 24338..24341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 908,
        column: 17,
        span: 24342..24344,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 908,
        column: 18,
        span: 24344..24345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 908,
        column: 22,
        span: 24345..24349,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"nomenaoexistente\"",
        ),
        line: 908,
        column: 40,
        span: 24349..24367,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 908,
        column: 41,
        span: 24367..24368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 909,
        column: 5,
        span: 24371..24373,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 909,
        column: 6,
        span: 24373..24374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 909,
        column: 11,
        span: 24374..24379,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 909,
        column: 12,
        span: 24379..24380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 909,
        column: 13,
        span: 24380..24381,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 909,
        column: 14,
        span: 24381..24382,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 909,
        column: 15,
        span: 24382..24383,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 910,
        column: 9,
        span: 24386..24392,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 910,
        column: 13,
        span: 24393..24396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 910,
        column: 22,
        span: 24397..24405,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'nomenaoexistente'",
        ),
        line: 910,
        column: 40,
        span: 24405..24423,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 911,
        column: 4,
        span: 24424..24427,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 911,
        column: 5,
        span: 24427..24428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 912,
        column: 7,
        span: 24429..24435,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 912,
        column: 8,
        span: 24435..24436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 912,
        column: 10,
        span: 24436..24438,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 912,
        column: 11,
        span: 24438..24439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 912,
        column: 17,
        span: 24439..24445,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 912,
        column: 18,
        span: 24445..24446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 912,
        column: 19,
        span: 24446..24447,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 912,
        column: 20,
        span: 24447..24448,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 912,
        column: 21,
        span: 24448..24449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        line: 914,
        column: 9,
        span: 24451..24459,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 914,
        column: 10,
        span: 24459..24460,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table creation\"",
        ),
        line: 914,
        column: 26,
        span: 24460..24476,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 914,
        column: 27,
        span: 24476..24477,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 914,
        column: 36,
        span: 24478..24486,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 914,
        column: 38,
        span: 24487..24488,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 914,
        column: 39,
        span: 24488..24489,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 915,
        column: 8,
        span: 24492..24497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 915,
        column: 10,
        span: 24498..24499,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 915,
        column: 11,
        span: 24499..24500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 915,
        column: 15,
        span: 24501..24504,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 915,
        column: 17,
        span: 24505..24506,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 915,
        column: 19,
        span: 24507..24508,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 915,
        column: 20,
        span: 24508..24509,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 915,
        column: 21,
        span: 24509..24510,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 915,
        column: 0,
        span: 24510..24513,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 916,
        column: 6,
        span: 24516..24519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 916,
        column: 8,
        span: 24520..24521,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 916,
        column: 9,
        span: 24521..24522,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 916,
        column: 10,
        span: 24521..24523,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 916,
        column: 11,
        span: 24523..24524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 916,
        column: 14,
        span: 24524..24527,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 916,
        column: 17,
        span: 24528..24530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 916,
        column: 19,
        span: 24531..24532,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 916,
        column: 20,
        span: 24532..24533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 916,
        column: 21,
        span: 24533..24534,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 916,
        column: 22,
        span: 24534..24535,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 916,
        column: 24,
        span: 24536..24537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 916,
        column: 26,
        span: 24538..24539,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 916,
        column: 27,
        span: 24539..24540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 916,
        column: 29,
        span: 24541..24542,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 916,
        column: 30,
        span: 24542..24543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 916,
        column: 31,
        span: 24543..24544,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 916,
        column: 33,
        span: 24544..24546,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 916,
        column: 36,
        span: 24546..24549,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 916,
        column: 37,
        span: 24549..24550,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 916,
        column: 39,
        span: 24551..24552,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 916,
        column: 41,
        span: 24553..24554,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 916,
        column: 42,
        span: 24554..24555,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 916,
        column: 0,
        span: 24556..24559,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 917,
        column: 9,
        span: 24562..24568,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 917,
        column: 11,
        span: 24569..24570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 917,
        column: 15,
        span: 24570..24574,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 917,
        column: 16,
        span: 24574..24575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 917,
        column: 17,
        span: 24575..24576,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 917,
        column: 18,
        span: 24576..24577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 917,
        column: 21,
        span: 24577..24580,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 917,
        column: 23,
        span: 24580..24582,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 917,
        column: 26,
        span: 24582..24585,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 917,
        column: 27,
        span: 24585..24586,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 917,
        column: 28,
        span: 24586..24587,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 917,
        column: 31,
        span: 24588..24590,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        line: 917,
        column: 39,
        span: 24591..24598,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 917,
        column: 43,
        span: 24599..24602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 917,
        column: 45,
        span: 24603..24604,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 917,
        column: 46,
        span: 24604..24605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 917,
        column: 49,
        span: 24605..24608,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 917,
        column: 50,
        span: 24608..24609,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 917,
        column: 53,
        span: 24610..24612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 917,
        column: 57,
        span: 24613..24616,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 917,
        column: 58,
        span: 24616..24617,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 918,
        column: 4,
        span: 24618..24621,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 918,
        column: 5,
        span: 24621..24622,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        line: 920,
        column: 9,
        span: 24624..24632,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 920,
        column: 10,
        span: 24632..24633,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"constructors\"",
        ),
        line: 920,
        column: 24,
        span: 24633..24647,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 920,
        column: 25,
        span: 24647..24648,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 920,
        column: 34,
        span: 24649..24657,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 920,
        column: 36,
        span: 24658..24659,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 920,
        column: 37,
        span: 24659..24660,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 921,
        column: 8,
        span: 24663..24668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 921,
        column: 10,
        span: 24669..24670,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 921,
        column: 12,
        span: 24671..24672,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 921,
        column: 14,
        span: 24673..24674,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 921,
        column: 16,
        span: 24673..24676,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 921,
        column: 17,
        span: 24676..24677,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 921,
        column: 20,
        span: 24677..24680,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 921,
        column: 21,
        span: 24680..24681,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 921,
        column: 24,
        span: 24681..24684,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 921,
        column: 25,
        span: 24684..24685,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 921,
        column: 28,
        span: 24685..24688,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 921,
        column: 29,
        span: 24688..24689,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        line: 921,
        column: 32,
        span: 24689..24692,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 921,
        column: 33,
        span: 24692..24693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 921,
        column: 35,
        span: 24694..24695,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 921,
        column: 36,
        span: 24695..24696,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 921,
        column: 37,
        span: 24695..24697,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 921,
        column: 38,
        span: 24697..24698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 921,
        column: 40,
        span: 24699..24700,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 921,
        column: 41,
        span: 24700..24701,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 921,
        column: 42,
        span: 24700..24702,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 921,
        column: 43,
        span: 24702..24703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 921,
        column: 45,
        span: 24704..24705,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 921,
        column: 46,
        span: 24705..24706,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 921,
        column: 47,
        span: 24705..24707,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 921,
        column: 48,
        span: 24707..24708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 921,
        column: 50,
        span: 24709..24710,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 921,
        column: 51,
        span: 24710..24711,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 921,
        column: 52,
        span: 24710..24712,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 921,
        column: 53,
        span: 24712..24713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 921,
        column: 55,
        span: 24714..24715,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 921,
        column: 56,
        span: 24715..24716,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 921,
        column: 57,
        span: 24715..24717,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 921,
        column: 58,
        span: 24717..24718,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 922,
        column: 9,
        span: 24721..24727,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 922,
        column: 11,
        span: 24728..24729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 922,
        column: 15,
        span: 24729..24733,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 922,
        column: 16,
        span: 24733..24734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 922,
        column: 17,
        span: 24734..24735,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 922,
        column: 18,
        span: 24735..24736,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 922,
        column: 21,
        span: 24737..24739,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        line: 922,
        column: 29,
        span: 24740..24747,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 922,
        column: 33,
        span: 24748..24751,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 922,
        column: 35,
        span: 24752..24753,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 922,
        column: 36,
        span: 24753..24754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 922,
        column: 37,
        span: 24754..24755,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 922,
        column: 40,
        span: 24756..24758,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 922,
        column: 42,
        span: 24758..24760,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 922,
        column: 43,
        span: 24760..24761,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 923,
        column: 4,
        span: 24762..24765,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 923,
        column: 5,
        span: 24765..24766,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 925,
        column: 6,
        span: 24768..24773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 925,
        column: 8,
        span: 24774..24775,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 925,
        column: 10,
        span: 24776..24777,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 925,
        column: 0,
        span: 24777..24779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 926,
        column: 6,
        span: 24780..24785,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 926,
        column: 8,
        span: 24786..24787,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 926,
        column: 0,
        span: 24788..24791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        line: 927,
        column: 9,
        span: 24792..24800,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 927,
        column: 10,
        span: 24800..24801,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"closure creation\"",
        ),
        line: 927,
        column: 28,
        span: 24801..24819,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 927,
        column: 29,
        span: 24819..24820,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 927,
        column: 38,
        span: 24821..24829,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 927,
        column: 40,
        span: 24830..24831,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 927,
        column: 41,
        span: 24831..24832,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 928,
        column: 11,
        span: 24835..24843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 928,
        column: 17,
        span: 24844..24849,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 928,
        column: 19,
        span: 24850..24851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 928,
        column: 20,
        span: 24851..24852,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 928,
        column: 21,
        span: 24852..24853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 928,
        column: 22,
        span: 24853..24854,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 928,
        column: 23,
        span: 24854..24855,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 929,
        column: 10,
        span: 24859..24865,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 929,
        column: 19,
        span: 24866..24874,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 929,
        column: 21,
        span: 24875..24876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 929,
        column: 22,
        span: 24876..24877,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 929,
        column: 23,
        span: 24877..24878,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 929,
        column: 30,
        span: 24879..24885,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 929,
        column: 32,
        span: 24886..24887,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 929,
        column: 33,
        span: 24887..24888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 929,
        column: 34,
        span: 24888..24889,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 929,
        column: 35,
        span: 24889..24890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 929,
        column: 36,
        span: 24890..24891,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 929,
        column: 37,
        span: 24891..24892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 929,
        column: 38,
        span: 24892..24893,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 929,
        column: 0,
        span: 24894..24897,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 930,
        column: 0,
        span: 24900..24903,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 931,
        column: 9,
        span: 24906..24912,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 931,
        column: 11,
        span: 24913..24914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 931,
        column: 16,
        span: 24914..24919,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 931,
        column: 17,
        span: 24919..24920,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 931,
        column: 18,
        span: 24919..24921,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 931,
        column: 19,
        span: 24921..24922,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 931,
        column: 20,
        span: 24921..24923,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 931,
        column: 21,
        span: 24923..24924,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 931,
        column: 22,
        span: 24924..24925,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 931,
        column: 23,
        span: 24924..24926,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 931,
        column: 24,
        span: 24926..24927,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 931,
        column: 27,
        span: 24928..24930,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 931,
        column: 30,
        span: 24930..24933,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 931,
        column: 31,
        span: 24933..24934,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 932,
        column: 4,
        span: 24935..24938,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 932,
        column: 5,
        span: 24938..24939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        line: 934,
        column: 9,
        span: 24941..24949,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 934,
        column: 10,
        span: 24949..24950,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"coroutines\"",
        ),
        line: 934,
        column: 22,
        span: 24950..24962,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 934,
        column: 23,
        span: 24962..24963,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 934,
        column: 32,
        span: 24964..24972,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 934,
        column: 34,
        span: 24973..24974,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 934,
        column: 35,
        span: 24974..24975,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 935,
        column: 8,
        span: 24978..24983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 935,
        column: 10,
        span: 24984..24985,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 935,
        column: 12,
        span: 24986..24987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 935,
        column: 22,
        span: 24988..24997,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 935,
        column: 23,
        span: 24997..24998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 935,
        column: 27,
        span: 24998..25002,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 935,
        column: 28,
        span: 25002..25003,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 935,
        column: 36,
        span: 25003..25011,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 935,
        column: 38,
        span: 25012..25013,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 935,
        column: 39,
        span: 25013..25014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 936,
        column: 24,
        span: 25029..25038,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 936,
        column: 25,
        span: 25038..25039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 936,
        column: 30,
        span: 25039..25044,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 936,
        column: 31,
        span: 25044..25045,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 936,
        column: 37,
        span: 25045..25051,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 936,
        column: 38,
        span: 25051..25052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 936,
        column: 41,
        span: 25052..25055,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 936,
        column: 42,
        span: 25055..25056,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 936,
        column: 45,
        span: 25056..25059,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 936,
        column: 46,
        span: 25059..25060,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 936,
        column: 49,
        span: 25060..25063,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 936,
        column: 50,
        span: 25063..25064,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 936,
        column: 51,
        span: 25064..25065,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 937,
        column: 21,
        span: 25080..25086,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 937,
        column: 23,
        span: 25087..25088,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 937,
        column: 24,
        span: 25088..25089,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 938,
        column: 16,
        span: 25102..25105,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 938,
        column: 17,
        span: 25105..25106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 939,
        column: 9,
        span: 25109..25115,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 939,
        column: 10,
        span: 25115..25116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 939,
        column: 16,
        span: 25116..25122,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 939,
        column: 17,
        span: 25122..25123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 939,
        column: 20,
        span: 25123..25126,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 939,
        column: 21,
        span: 25126..25127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 939,
        column: 22,
        span: 25127..25128,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 939,
        column: 23,
        span: 25128..25129,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 939,
        column: 24,
        span: 25129..25130,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 939,
        column: 25,
        span: 25130..25131,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 939,
        column: 28,
        span: 25132..25134,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 939,
        column: 31,
        span: 25134..25137,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 939,
        column: 32,
        span: 25137..25138,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 940,
        column: 9,
        span: 25141..25147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 940,
        column: 11,
        span: 25148..25149,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 940,
        column: 12,
        span: 25149..25150,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 940,
        column: 13,
        span: 25150..25151,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 941,
        column: 4,
        span: 25152..25155,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 941,
        column: 5,
        span: 25155..25156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 943,
        column: 6,
        span: 25158..25163,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 943,
        column: 9,
        span: 25163..25166,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 946,
        column: 6,
        span: 25201..25206,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 946,
        column: 15,
        span: 25207..25215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 946,
        column: 20,
        span: 25216..25220,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 946,
        column: 22,
        span: 25221..25222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 946,
        column: 23,
        span: 25222..25223,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 946,
        column: 24,
        span: 25223..25224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 946,
        column: 26,
        span: 25225..25226,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 946,
        column: 27,
        span: 25226..25227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 946,
        column: 29,
        span: 25228..25229,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 946,
        column: 30,
        span: 25229..25230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 947,
        column: 4,
        span: 25233..25234,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 947,
        column: 5,
        span: 25234..25235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 947,
        column: 7,
        span: 25236..25237,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 947,
        column: 9,
        span: 25238..25239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 947,
        column: 11,
        span: 25240..25241,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 947,
        column: 12,
        span: 25241..25242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 947,
        column: 17,
        span: 25242..25247,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 947,
        column: 18,
        span: 25247..25248,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gsub 2 3 4; gettop; return 2\"",
        ),
        line: 947,
        column: 48,
        span: 25248..25278,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 947,
        column: 49,
        span: 25278..25279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 947,
        column: 51,
        span: 25280..25281,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 947,
        column: 52,
        span: 25281..25282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 947,
        column: 54,
        span: 25283..25284,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 947,
        column: 55,
        span: 25284..25285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 947,
        column: 57,
        span: 25286..25287,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 947,
        column: 58,
        span: 25287..25288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 948,
        column: 9,
        span: 25291..25297,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 948,
        column: 10,
        span: 25297..25298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 948,
        column: 11,
        span: 25298..25299,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 948,
        column: 14,
        span: 25300..25302,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 948,
        column: 16,
        span: 25302..25304,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 948,
        column: 17,
        span: 25304..25305,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 949,
        column: 9,
        span: 25308..25314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 949,
        column: 0,
        span: 25315..25316,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 950,
        column: 0,
        span: 25317..25320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 952,
        column: 7,
        span: 25322..25328,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 952,
        column: 8,
        span: 25328..25329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 952,
        column: 12,
        span: 25329..25333,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 952,
        column: 13,
        span: 25333..25334,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo.alo.uhuh.\"",
        ),
        line: 952,
        column: 28,
        span: 25334..25349,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 952,
        column: 29,
        span: 25349..25350,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        line: 952,
        column: 33,
        span: 25351..25354,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 952,
        column: 34,
        span: 25354..25355,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"//\"",
        ),
        line: 952,
        column: 39,
        span: 25356..25360,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 952,
        column: 40,
        span: 25360..25361,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 952,
        column: 43,
        span: 25362..25364,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo//alo//uhuh//\"",
        ),
        line: 952,
        column: 62,
        span: 25365..25383,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 952,
        column: 63,
        span: 25383..25384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 953,
        column: 7,
        span: 25385..25391,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 953,
        column: 8,
        span: 25391..25392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 953,
        column: 12,
        span: 25392..25396,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 953,
        column: 13,
        span: 25396..25397,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo.alo.uhuh.\"",
        ),
        line: 953,
        column: 28,
        span: 25397..25412,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 953,
        column: 29,
        span: 25412..25413,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 953,
        column: 35,
        span: 25414..25419,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 953,
        column: 36,
        span: 25419..25420,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"//\"",
        ),
        line: 953,
        column: 41,
        span: 25421..25425,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 953,
        column: 42,
        span: 25425..25426,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 953,
        column: 45,
        span: 25427..25429,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"//.//.uhuh.\"",
        ),
        line: 953,
        column: 59,
        span: 25430..25443,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 953,
        column: 60,
        span: 25443..25444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 954,
        column: 7,
        span: 25445..25451,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 954,
        column: 8,
        span: 25451..25452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 954,
        column: 12,
        span: 25452..25456,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 954,
        column: 13,
        span: 25456..25457,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 954,
        column: 15,
        span: 25457..25459,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 954,
        column: 16,
        span: 25459..25460,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 954,
        column: 22,
        span: 25461..25466,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 954,
        column: 23,
        span: 25466..25467,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"//\"",
        ),
        line: 954,
        column: 28,
        span: 25468..25472,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 954,
        column: 29,
        span: 25472..25473,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 954,
        column: 32,
        span: 25474..25476,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 954,
        column: 35,
        span: 25477..25479,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 954,
        column: 36,
        span: 25479..25480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 955,
        column: 7,
        span: 25481..25487,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 955,
        column: 8,
        span: 25487..25488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 955,
        column: 12,
        span: 25488..25492,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 955,
        column: 13,
        span: 25492..25493,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"...\"",
        ),
        line: 955,
        column: 18,
        span: 25493..25498,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 955,
        column: 19,
        span: 25498..25499,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        line: 955,
        column: 23,
        span: 25500..25503,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 955,
        column: 24,
        span: 25503..25504,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"/.\"",
        ),
        line: 955,
        column: 29,
        span: 25505..25509,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 955,
        column: 30,
        span: 25509..25510,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 955,
        column: 33,
        span: 25511..25513,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"/././.\"",
        ),
        line: 955,
        column: 42,
        span: 25514..25522,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 955,
        column: 43,
        span: 25522..25523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 956,
        column: 7,
        span: 25524..25530,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 956,
        column: 8,
        span: 25530..25531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 956,
        column: 12,
        span: 25531..25535,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 956,
        column: 13,
        span: 25535..25536,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"...\"",
        ),
        line: 956,
        column: 18,
        span: 25536..25541,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 956,
        column: 19,
        span: 25541..25542,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"...\"",
        ),
        line: 956,
        column: 25,
        span: 25543..25548,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 956,
        column: 26,
        span: 25548..25549,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 956,
        column: 29,
        span: 25550..25552,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 956,
        column: 30,
        span: 25552..25553,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 956,
        column: 33,
        span: 25554..25556,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 956,
        column: 36,
        span: 25557..25559,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 956,
        column: 37,
        span: 25559..25560,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 960,
        column: 6,
        span: 25592..25597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt_xuxu",
        ),
        line: 960,
        column: 14,
        span: 25598..25605,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 960,
        column: 15,
        span: 25605..25606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 960,
        column: 19,
        span: 25607..25610,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 960,
        column: 20,
        span: 25610..25611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        line: 960,
        column: 24,
        span: 25612..25615,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 960,
        column: 26,
        span: 25616..25617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 960,
        column: 28,
        span: 25618..25619,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 960,
        column: 29,
        span: 25619..25620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 960,
        column: 34,
        span: 25620..25625,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 960,
        column: 35,
        span: 25625..25626,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"newmetatable xuxu; gettop; return 3\"",
        ),
        line: 960,
        column: 72,
        span: 25626..25663,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 960,
        column: 73,
        span: 25663..25664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 961,
        column: 7,
        span: 25665..25671,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 961,
        column: 8,
        span: 25671..25672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 961,
        column: 12,
        span: 25672..25676,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 961,
        column: 13,
        span: 25676..25677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt_xuxu",
        ),
        line: 961,
        column: 20,
        span: 25677..25684,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 961,
        column: 21,
        span: 25684..25685,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 961,
        column: 24,
        span: 25686..25688,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        line: 961,
        column: 32,
        span: 25689..25696,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 961,
        column: 36,
        span: 25697..25700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 961,
        column: 40,
        span: 25701..25704,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 961,
        column: 44,
        span: 25705..25708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        line: 961,
        column: 48,
        span: 25709..25712,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 961,
        column: 51,
        span: 25713..25715,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 961,
        column: 53,
        span: 25715..25717,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 961,
        column: 54,
        span: 25717..25718,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 962,
        column: 6,
        span: 25719..25724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 962,
        column: 8,
        span: 25725..25726,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 962,
        column: 9,
        span: 25726..25727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 962,
        column: 13,
        span: 25728..25731,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 962,
        column: 14,
        span: 25731..25732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        line: 962,
        column: 18,
        span: 25733..25736,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 962,
        column: 20,
        span: 25737..25738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 962,
        column: 22,
        span: 25739..25740,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 962,
        column: 23,
        span: 25740..25741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 962,
        column: 28,
        span: 25741..25746,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 962,
        column: 29,
        span: 25746..25747,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"newmetatable xuxu; gettop; return 3\"",
        ),
        line: 962,
        column: 66,
        span: 25747..25784,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 962,
        column: 67,
        span: 25784..25785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 963,
        column: 7,
        span: 25786..25792,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 963,
        column: 8,
        span: 25792..25793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt_xuxu",
        ),
        line: 963,
        column: 15,
        span: 25793..25800,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 963,
        column: 18,
        span: 25801..25803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 963,
        column: 20,
        span: 25804..25805,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 963,
        column: 24,
        span: 25806..25809,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 963,
        column: 28,
        span: 25810..25813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 963,
        column: 32,
        span: 25814..25817,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 963,
        column: 36,
        span: 25818..25821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        line: 963,
        column: 40,
        span: 25822..25825,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 963,
        column: 43,
        span: 25826..25828,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 963,
        column: 45,
        span: 25828..25830,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 963,
        column: 46,
        span: 25830..25831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 964,
        column: 2,
        span: 25832..25833,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 964,
        column: 3,
        span: 25833..25834,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 964,
        column: 7,
        span: 25835..25838,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 964,
        column: 8,
        span: 25838..25839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        line: 964,
        column: 12,
        span: 25840..25843,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 964,
        column: 14,
        span: 25844..25845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 964,
        column: 16,
        span: 25846..25847,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 964,
        column: 17,
        span: 25847..25848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 964,
        column: 22,
        span: 25848..25853,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 964,
        column: 23,
        span: 25853..25854,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"newmetatable xuxu1; gettop; return 3\"",
        ),
        line: 964,
        column: 61,
        span: 25854..25892,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 964,
        column: 62,
        span: 25892..25893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 965,
        column: 7,
        span: 25894..25900,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 965,
        column: 8,
        span: 25900..25901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt_xuxu",
        ),
        line: 965,
        column: 15,
        span: 25901..25908,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 965,
        column: 18,
        span: 25909..25911,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 965,
        column: 20,
        span: 25912..25913,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 965,
        column: 24,
        span: 25914..25917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 965,
        column: 28,
        span: 25918..25921,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 965,
        column: 32,
        span: 25922..25925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        line: 965,
        column: 36,
        span: 25926..25929,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 965,
        column: 39,
        span: 25930..25932,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 965,
        column: 41,
        span: 25932..25934,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 965,
        column: 42,
        span: 25934..25935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 967,
        column: 2,
        span: 25937..25938,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 967,
        column: 4,
        span: 25939..25940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 967,
        column: 6,
        span: 25941..25942,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 967,
        column: 7,
        span: 25942..25943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        line: 967,
        column: 18,
        span: 25943..25954,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 967,
        column: 19,
        span: 25954..25955,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 967,
        column: 20,
        span: 25954..25956,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 967,
        column: 21,
        span: 25956..25957,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 967,
        column: 22,
        span: 25957..25958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 968,
        column: 2,
        span: 25959..25960,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 968,
        column: 4,
        span: 25961..25962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 968,
        column: 6,
        span: 25963..25964,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 968,
        column: 7,
        span: 25964..25965,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        line: 968,
        column: 18,
        span: 25965..25976,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 968,
        column: 19,
        span: 25976..25977,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 968,
        column: 20,
        span: 25976..25978,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 968,
        column: 21,
        span: 25978..25979,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 968,
        column: 22,
        span: 25979..25980,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 969,
        column: 2,
        span: 25981..25982,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 969,
        column: 3,
        span: 25982..25983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 969,
        column: 8,
        span: 25983..25988,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 969,
        column: 9,
        span: 25988..25989,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushstring xuxu; gettable R; setmetatable 2\"",
        ),
        line: 969,
        column: 54,
        span: 25989..26034,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 969,
        column: 55,
        span: 26034..26035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 969,
        column: 57,
        span: 26036..26037,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 969,
        column: 58,
        span: 26037..26038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 970,
        column: 7,
        span: 26039..26045,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 970,
        column: 8,
        span: 26045..26046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 970,
        column: 20,
        span: 26046..26058,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 970,
        column: 21,
        span: 26058..26059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 970,
        column: 22,
        span: 26059..26060,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 970,
        column: 23,
        span: 26060..26061,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 970,
        column: 26,
        span: 26062..26064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt_xuxu",
        ),
        line: 970,
        column: 34,
        span: 26065..26072,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 970,
        column: 35,
        span: 26072..26073,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 974,
        column: 6,
        span: 26122..26127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res1",
        ),
        line: 974,
        column: 11,
        span: 26128..26132,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 974,
        column: 12,
        span: 26132..26133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res2",
        ),
        line: 974,
        column: 17,
        span: 26134..26138,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 974,
        column: 18,
        span: 26138..26139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        line: 974,
        column: 22,
        span: 26140..26143,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 974,
        column: 24,
        span: 26144..26145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 974,
        column: 26,
        span: 26146..26147,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 974,
        column: 27,
        span: 26147..26148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 974,
        column: 32,
        span: 26148..26153,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 974,
        column: 33,
        span: 26153..26154,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[testudata -1 xuxu\n   \t \t\t\t  testudata 2 xuxu\n\t\t\t\t  gettop\n\t\t\t\t  return 3]]",
        ),
        line: 977,
        column: 17,
        span: 26154..26230,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 977,
        column: 18,
        span: 26230..26231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 977,
        column: 20,
        span: 26232..26233,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 977,
        column: 21,
        span: 26233..26234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 978,
        column: 7,
        span: 26235..26241,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 978,
        column: 8,
        span: 26241..26242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res1",
        ),
        line: 978,
        column: 12,
        span: 26242..26246,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 978,
        column: 16,
        span: 26247..26250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res2",
        ),
        line: 978,
        column: 21,
        span: 26251..26255,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 978,
        column: 25,
        span: 26256..26259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        line: 978,
        column: 29,
        span: 26260..26263,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 978,
        column: 32,
        span: 26264..26266,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 978,
        column: 34,
        span: 26266..26268,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 978,
        column: 35,
        span: 26268..26269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res1",
        ),
        line: 981,
        column: 5,
        span: 26290..26294,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 981,
        column: 6,
        span: 26294..26295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res2",
        ),
        line: 981,
        column: 11,
        span: 26296..26300,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 981,
        column: 12,
        span: 26300..26301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        line: 981,
        column: 16,
        span: 26302..26305,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 981,
        column: 18,
        span: 26306..26307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 981,
        column: 20,
        span: 26308..26309,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 981,
        column: 21,
        span: 26309..26310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 981,
        column: 26,
        span: 26310..26315,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 981,
        column: 27,
        span: 26315..26316,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[testudata -1 xuxu1\n\t\t\t    testudata 2 xuxu1\n\t\t\t    gettop\n\t\t\t    return 3]]",
        ),
        line: 984,
        column: 18,
        span: 26316..26393,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 984,
        column: 19,
        span: 26393..26394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 984,
        column: 21,
        span: 26395..26396,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 984,
        column: 22,
        span: 26396..26397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 985,
        column: 7,
        span: 26398..26404,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 985,
        column: 8,
        span: 26404..26405,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 985,
        column: 11,
        span: 26405..26408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res1",
        ),
        line: 985,
        column: 16,
        span: 26409..26413,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 985,
        column: 20,
        span: 26414..26417,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 985,
        column: 24,
        span: 26418..26421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res2",
        ),
        line: 985,
        column: 29,
        span: 26422..26426,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 985,
        column: 33,
        span: 26427..26430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        line: 985,
        column: 37,
        span: 26431..26434,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 985,
        column: 40,
        span: 26435..26437,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 985,
        column: 42,
        span: 26437..26439,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 985,
        column: 43,
        span: 26439..26440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res1",
        ),
        line: 988,
        column: 5,
        span: 26463..26467,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 988,
        column: 6,
        span: 26467..26468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res2",
        ),
        line: 988,
        column: 11,
        span: 26469..26473,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 988,
        column: 12,
        span: 26473..26474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        line: 988,
        column: 16,
        span: 26475..26478,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 988,
        column: 18,
        span: 26479..26480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 988,
        column: 20,
        span: 26481..26482,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 988,
        column: 21,
        span: 26482..26483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 988,
        column: 26,
        span: 26483..26488,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 988,
        column: 27,
        span: 26488..26489,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[testudata -1 xuxu2\n\t\t\t    testudata 2 xuxu2\n\t\t\t    gettop\n\t\t\t    return 3]]",
        ),
        line: 991,
        column: 18,
        span: 26489..26566,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 991,
        column: 19,
        span: 26566..26567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 991,
        column: 21,
        span: 26568..26569,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 991,
        column: 22,
        span: 26569..26570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 992,
        column: 7,
        span: 26571..26577,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 992,
        column: 8,
        span: 26577..26578,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 992,
        column: 11,
        span: 26578..26581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res1",
        ),
        line: 992,
        column: 16,
        span: 26582..26586,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 992,
        column: 20,
        span: 26587..26590,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 992,
        column: 24,
        span: 26591..26594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res2",
        ),
        line: 992,
        column: 29,
        span: 26595..26599,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 992,
        column: 33,
        span: 26600..26603,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        line: 992,
        column: 37,
        span: 26604..26607,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 992,
        column: 40,
        span: 26608..26610,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 992,
        column: 42,
        span: 26610..26612,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 992,
        column: 43,
        span: 26612..26613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res1",
        ),
        line: 995,
        column: 5,
        span: 26644..26648,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 995,
        column: 6,
        span: 26648..26649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res2",
        ),
        line: 995,
        column: 11,
        span: 26650..26654,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 995,
        column: 12,
        span: 26654..26655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        line: 995,
        column: 16,
        span: 26656..26659,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 995,
        column: 18,
        span: 26660..26661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 995,
        column: 20,
        span: 26662..26663,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 995,
        column: 21,
        span: 26663..26664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        line: 995,
        column: 26,
        span: 26664..26669,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 995,
        column: 27,
        span: 26669..26670,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[testudata -1 xuxu\n\t\t\t    testudata 2 xuxu\n\t\t\t    gettop\n\t\t\t    return 3]]",
        ),
        line: 998,
        column: 18,
        span: 26670..26745,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 998,
        column: 19,
        span: 26745..26746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 998,
        column: 21,
        span: 26747..26748,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 998,
        column: 22,
        span: 26748..26749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 999,
        column: 7,
        span: 26750..26756,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 999,
        column: 8,
        span: 26756..26757,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 999,
        column: 11,
        span: 26757..26760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res1",
        ),
        line: 999,
        column: 16,
        span: 26761..26765,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 999,
        column: 20,
        span: 26766..26769,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 999,
        column: 24,
        span: 26770..26773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res2",
        ),
        line: 999,
        column: 29,
        span: 26774..26778,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 999,
        column: 33,
        span: 26779..26782,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        line: 999,
        column: 37,
        span: 26783..26786,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 999,
        column: 40,
        span: 26787..26789,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 999,
        column: 42,
        span: 26789..26791,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 999,
        column: 43,
        span: 26791..26792,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 1002,
        column: 0,
        span: 26814..26816,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 1003,
        column: 8,
        span: 26819..26824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 1003,
        column: 10,
        span: 26825..26826,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 1003,
        column: 12,
        span: 26827..26828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 1003,
        column: 18,
        span: 26829..26834,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1003,
        column: 19,
        span: 26834..26835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getregistry",
        ),
        line: 1003,
        column: 30,
        span: 26835..26846,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1003,
        column: 31,
        span: 26846..26847,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1003,
        column: 32,
        span: 26847..26848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 1004,
        column: 9,
        span: 26851..26857,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1004,
        column: 10,
        span: 26857..26858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 1004,
        column: 11,
        span: 26858..26859,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1004,
        column: 12,
        span: 26859..26860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu",
        ),
        line: 1004,
        column: 16,
        span: 26860..26864,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 1004,
        column: 19,
        span: 26865..26867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt_xuxu",
        ),
        line: 1004,
        column: 27,
        span: 26868..26875,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 1004,
        column: 31,
        span: 26876..26879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 1004,
        column: 33,
        span: 26880..26881,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1004,
        column: 34,
        span: 26881..26882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu1",
        ),
        line: 1004,
        column: 39,
        span: 26882..26887,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 1004,
        column: 42,
        span: 26888..26890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 1004,
        column: 44,
        span: 26891..26892,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1004,
        column: 45,
        span: 26892..26893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 1005,
        column: 4,
        span: 26896..26897,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1005,
        column: 5,
        span: 26897..26898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu",
        ),
        line: 1005,
        column: 9,
        span: 26898..26902,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 1005,
        column: 11,
        span: 26903..26904,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 1005,
        column: 15,
        span: 26905..26908,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 1005,
        column: 16,
        span: 26908..26909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 1005,
        column: 18,
        span: 26910..26911,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1005,
        column: 19,
        span: 26911..26912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu1",
        ),
        line: 1005,
        column: 24,
        span: 26912..26917,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 1005,
        column: 26,
        span: 26918..26919,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 1005,
        column: 0,
        span: 26920..26923,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 1006,
        column: 0,
        span: 26924..26927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 1008,
        column: 6,
        span: 26929..26934,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 1008,
        column: 10,
        span: 26934..26938,
    },
]
