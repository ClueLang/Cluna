---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.2-tests/all.lua
---
[
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 3,
            column: 6,
            span: 10..15,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "version",
        ),
        position: Position {
            line: 3,
            column: 14,
            span: 16..23,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 3,
            column: 16,
            span: 24..25,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Lua 5.2\"",
        ),
        position: Position {
            line: 3,
            column: 26,
            span: 26..35,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 4,
            column: 3,
            span: 36..38,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_VERSION",
        ),
        position: Position {
            line: 4,
            column: 12,
            span: 39..47,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 4,
            column: 15,
            span: 48..50,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "version",
        ),
        position: Position {
            line: 4,
            column: 23,
            span: 51..58,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 4,
            column: 0,
            span: 59..63,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 5,
            column: 5,
            span: 66..68,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 5,
            column: 6,
            span: 68..69,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stderr",
        ),
        position: Position {
            line: 5,
            column: 12,
            span: 69..75,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 5,
            column: 13,
            span: 75..76,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 5,
            column: 18,
            span: 76..81,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 5,
            column: 19,
            span: 81..82,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\nThis test suite is for \"",
        ),
        position: Position {
            line: 5,
            column: 46,
            span: 82..109,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 5,
            column: 47,
            span: 109..110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "version",
        ),
        position: Position {
            line: 5,
            column: 55,
            span: 111..118,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 5,
            column: 56,
            span: 118..119,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\", not for \"",
        ),
        position: Position {
            line: 5,
            column: 69,
            span: 120..132,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 5,
            column: 70,
            span: 132..133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_VERSION",
        ),
        position: Position {
            line: 5,
            column: 79,
            span: 134..142,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 5,
            column: 80,
            span: 142..143,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\nExiting tests\\n\"",
        ),
        position: Position {
            line: 6,
            column: 24,
            span: 148..167,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 6,
            column: 25,
            span: 167..168,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 7,
            column: 0,
            span: 171..177,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 8,
            column: 0,
            span: 178..181,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        position: Position {
            line: 15,
            column: 6,
            span: 352..357,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 15,
            column: 8,
            span: 358..359,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 15,
            column: 14,
            span: 360..365,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        position: Position {
            line: 16,
            column: 6,
            span: 419..424,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 16,
            column: 8,
            span: 425..426,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 16,
            column: 14,
            span: 427..432,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_no32",
        ),
        position: Position {
            line: 17,
            column: 6,
            span: 474..479,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 17,
            column: 8,
            span: 480..481,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 17,
            column: 14,
            span: 482..487,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_nomsg",
        ),
        position: Position {
            line: 18,
            column: 7,
            span: 536..542,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 18,
            column: 9,
            span: 543..544,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 18,
            column: 15,
            span: 545..550,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_noposix",
        ),
        position: Position {
            line: 19,
            column: 9,
            span: 607..615,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 19,
            column: 11,
            span: 616..617,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 19,
            column: 17,
            span: 618..623,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_nolonglong",
        ),
        position: Position {
            line: 20,
            column: 12,
            span: 657..668,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 20,
            column: 14,
            span: 669..670,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 20,
            column: 20,
            span: 671..676,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_noformatA",
        ),
        position: Position {
            line: 21,
            column: 11,
            span: 712..722,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 21,
            column: 13,
            span: 723..724,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 21,
            column: 19,
            span: 725..730,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 24,
            column: 6,
            span: 768..773,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "usertests",
        ),
        position: Position {
            line: 24,
            column: 16,
            span: 774..783,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 24,
            column: 18,
            span: 784..785,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        position: Position {
            line: 24,
            column: 25,
            span: 786..792,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 24,
            column: 26,
            span: 792..793,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 24,
            column: 28,
            span: 793..795,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 24,
            column: 29,
            span: 795..796,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"_U\"",
        ),
        position: Position {
            line: 24,
            column: 34,
            span: 797..801,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 24,
            column: 35,
            span: 801..802,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 26,
            column: 3,
            span: 804..806,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "usertests",
        ),
        position: Position {
            line: 26,
            column: 13,
            span: 807..816,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 26,
            column: 0,
            span: 817..821,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        position: Position {
            line: 28,
            column: 8,
            span: 866..871,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 28,
            column: 10,
            span: 872..873,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 28,
            column: 0,
            span: 874..878,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        position: Position {
            line: 29,
            column: 8,
            span: 881..886,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 29,
            column: 10,
            span: 887..888,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 29,
            column: 0,
            span: 889..893,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_no32",
        ),
        position: Position {
            line: 30,
            column: 8,
            span: 896..901,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 30,
            column: 10,
            span: 902..903,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 30,
            column: 0,
            span: 904..908,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_nomsg",
        ),
        position: Position {
            line: 31,
            column: 9,
            span: 911..917,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 31,
            column: 11,
            span: 918..919,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 31,
            column: 0,
            span: 920..924,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_noposix",
        ),
        position: Position {
            line: 32,
            column: 11,
            span: 927..935,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 32,
            column: 13,
            span: 936..937,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 32,
            column: 0,
            span: 938..942,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_nolonglong",
        ),
        position: Position {
            line: 33,
            column: 14,
            span: 945..956,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 33,
            column: 16,
            span: 957..958,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 33,
            column: 0,
            span: 959..963,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_noformatA",
        ),
        position: Position {
            line: 34,
            column: 13,
            span: 966..976,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 34,
            column: 15,
            span: 977..978,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 34,
            column: 20,
            span: 979..983,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 34,
            column: 21,
            span: 983..984,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 35,
            column: 0,
            span: 986..989,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 38,
            column: 3,
            span: 1029..1031,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "usertests",
        ),
        position: Position {
            line: 38,
            column: 13,
            span: 1032..1041,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 38,
            column: 18,
            span: 1042..1046,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 38,
            column: 20,
            span: 1047..1048,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 38,
            column: 22,
            span: 1049..1050,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 38,
            column: 26,
            span: 1051..1054,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 38,
            column: 0,
            span: 1055..1058,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 40,
            column: 2,
            span: 1060..1061,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 40,
            column: 4,
            span: 1062..1063,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        position: Position {
            line: 40,
            column: 11,
            span: 1064..1070,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 40,
            column: 12,
            span: 1070..1071,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 40,
            column: 14,
            span: 1071..1073,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 40,
            column: 15,
            span: 1073..1074,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"T\"",
        ),
        position: Position {
            line: 40,
            column: 19,
            span: 1075..1078,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 40,
            column: 20,
            span: 1078..1079,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 42,
            column: 8,
            span: 1121..1128,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 42,
            column: 9,
            span: 1128..1129,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        position: Position {
            line: 42,
            column: 13,
            span: 1129..1133,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 42,
            column: 15,
            span: 1134..1135,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?;./?.lua\"",
        ),
        position: Position {
            line: 42,
            column: 27,
            span: 1136..1147,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 42,
            column: 30,
            span: 1148..1150,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 42,
            column: 38,
            span: 1151..1158,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 42,
            column: 39,
            span: 1158..1159,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        position: Position {
            line: 42,
            column: 0,
            span: 1159..1163,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 44,
            column: 5,
            span: 1165..1169,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 44,
            column: 6,
            span: 1169..1170,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "randomseed",
        ),
        position: Position {
            line: 44,
            column: 16,
            span: 1170..1180,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 44,
            column: 17,
            span: 1180..1181,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 44,
            column: 18,
            span: 1180..1182,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 44,
            column: 19,
            span: 1182..1183,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 46,
            column: 15,
            span: 1185..1199,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 46,
            column: 16,
            span: 1199..1200,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"setstepmul\"",
        ),
        position: Position {
            line: 46,
            column: 28,
            span: 1200..1212,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 46,
            column: 29,
            span: 1212..1213,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 46,
            column: 33,
            span: 1213..1217,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 46,
            column: 34,
            span: 1217..1218,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 47,
            column: 15,
            span: 1219..1233,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 47,
            column: 16,
            span: 1233..1234,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"setpause\"",
        ),
        position: Position {
            line: 47,
            column: 26,
            span: 1234..1244,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 47,
            column: 27,
            span: 1244..1245,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 47,
            column: 31,
            span: 1245..1249,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 47,
            column: 32,
            span: 1249..1250,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 56,
            column: 6,
            span: 1327..1332,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 56,
            column: 7,
            span: 1332..1333,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"current path:\\n****\"",
        ),
        position: Position {
            line: 56,
            column: 28,
            span: 1333..1354,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 56,
            column: 31,
            span: 1355..1357,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 56,
            column: 39,
            span: 1358..1365,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 56,
            column: 40,
            span: 1365..1366,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        position: Position {
            line: 56,
            column: 44,
            span: 1366..1370,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 56,
            column: 47,
            span: 1371..1373,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"****\\n\"",
        ),
        position: Position {
            line: 56,
            column: 56,
            span: 1374..1382,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 56,
            column: 57,
            span: 1382..1383,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 59,
            column: 6,
            span: 1386..1391,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 59,
            column: 8,
            span: 1392..1393,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 59,
            column: 10,
            span: 1394..1395,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 59,
            column: 13,
            span: 1396..1398,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 59,
            column: 14,
            span: 1398..1399,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        position: Position {
            line: 59,
            column: 19,
            span: 1399..1404,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 59,
            column: 20,
            span: 1404..1405,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 59,
            column: 21,
            span: 1405..1406,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 61,
            column: 6,
            span: 1408..1413,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 61,
            column: 21,
            span: 1414..1428,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 61,
            column: 23,
            span: 1429..1430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 61,
            column: 0,
            span: 1431..1445,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 63,
            column: 3,
            span: 1447..1449,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 66,
            column: 6,
            span: 1500..1505,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgs",
        ),
        position: Position {
            line: 66,
            column: 11,
            span: 1506..1510,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 66,
            column: 13,
            span: 1511..1512,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 66,
            column: 15,
            span: 1513..1514,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 66,
            column: 16,
            span: 1514..1515,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 67,
            column: 9,
            span: 1516..1524,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        position: Position {
            line: 67,
            column: 17,
            span: 1525..1532,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 67,
            column: 19,
            span: 1533..1534,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 67,
            column: 20,
            span: 1534..1535,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 67,
            column: 21,
            span: 1535..1536,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 68,
            column: 5,
            span: 1539..1541,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 68,
            column: 9,
            span: 1542..1545,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_nomsg",
        ),
        position: Position {
            line: 68,
            column: 16,
            span: 1546..1552,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 68,
            column: 0,
            span: 1553..1557,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 69,
            column: 10,
            span: 1562..1567,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 69,
            column: 11,
            span: 1567..1568,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 69,
            column: 12,
            span: 1568..1569,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 69,
            column: 13,
            span: 1569..1570,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgs",
        ),
        position: Position {
            line: 70,
            column: 9,
            span: 1575..1579,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 70,
            column: 10,
            span: 1579..1580,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 70,
            column: 11,
            span: 1580..1581,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgs",
        ),
        position: Position {
            line: 70,
            column: 15,
            span: 1581..1585,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 70,
            column: 16,
            span: 1585..1586,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 70,
            column: 17,
            span: 1585..1587,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 70,
            column: 18,
            span: 1587..1588,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 70,
            column: 20,
            span: 1589..1590,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 70,
            column: 27,
            span: 1591..1597,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 70,
            column: 28,
            span: 1597..1598,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        position: Position {
            line: 70,
            column: 31,
            span: 1598..1601,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 70,
            column: 32,
            span: 1601..1602,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 70,
            column: 33,
            span: 1602..1603,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 70,
            column: 34,
            span: 1603..1604,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 70,
            column: 36,
            span: 1604..1606,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 70,
            column: 37,
            span: 1606..1607,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 70,
            column: 39,
            span: 1608..1609,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 70,
            column: 40,
            span: 1608..1610,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 70,
            column: 41,
            span: 1610..1611,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 71,
            column: 0,
            span: 1614..1617,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 72,
            column: 0,
            span: 1618..1621,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 74,
            column: 7,
            span: 1623..1629,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 74,
            column: 8,
            span: 1629..1630,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 74,
            column: 10,
            span: 1630..1632,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 74,
            column: 11,
            span: 1632..1633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocale",
        ),
        position: Position {
            line: 74,
            column: 20,
            span: 1633..1642,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C\"",
        ),
        position: Position {
            line: 74,
            column: 23,
            span: 1642..1645,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 74,
            column: 24,
            span: 1645..1646,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 76,
            column: 6,
            span: 1648..1653,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 76,
            column: 8,
            span: 1654..1655,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 9,
            span: 1655..1656,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 76,
            column: 14,
            span: 1656..1661,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 15,
            span: 1661..1662,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 76,
            column: 21,
            span: 1662..1668,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 22,
            span: 1668..1669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 76,
            column: 27,
            span: 1669..1674,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 28,
            span: 1674..1675,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 76,
            column: 34,
            span: 1675..1681,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 35,
            span: 1681..1682,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 76,
            column: 39,
            span: 1682..1686,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 40,
            span: 1686..1687,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 76,
            column: 46,
            span: 1687..1693,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 47,
            span: 1693..1694,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        position: Position {
            line: 76,
            column: 52,
            span: 1694..1699,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 76,
            column: 54,
            span: 1700..1701,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 77,
            column: 8,
            span: 1708..1709,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 9,
            span: 1709..1710,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 77,
            column: 14,
            span: 1710..1715,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 15,
            span: 1715..1716,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 77,
            column: 21,
            span: 1716..1722,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 77,
            column: 22,
            span: 1722..1723,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 77,
            column: 28,
            span: 1723..1729,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 29,
            span: 1729..1730,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 77,
            column: 31,
            span: 1730..1732,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 77,
            column: 32,
            span: 1732..1733,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 77,
            column: 37,
            span: 1733..1738,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 38,
            span: 1738..1739,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 77,
            column: 44,
            span: 1739..1745,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 45,
            span: 1745..1746,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 77,
            column: 49,
            span: 1746..1750,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 50,
            span: 1750..1751,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 77,
            column: 55,
            span: 1751..1756,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 77,
            column: 56,
            span: 1756..1757,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 77,
            column: 62,
            span: 1757..1763,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 63,
            span: 1763..1764,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 77,
            column: 67,
            span: 1764..1768,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 77,
            column: 68,
            span: 1768..1769,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        position: Position {
            line: 77,
            column: 0,
            span: 1769..1774,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 80,
            column: 6,
            span: 1831..1836,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 80,
            column: 15,
            span: 1837..1845,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 80,
            column: 17,
            span: 1846..1847,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 80,
            column: 19,
            span: 1848..1849,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 80,
            column: 20,
            span: 1849..1850,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 80,
            column: 21,
            span: 1850..1851,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 81,
            column: 8,
            span: 1854..1859,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 81,
            column: 17,
            span: 1860..1868,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "round",
        ),
        position: Position {
            line: 81,
            column: 23,
            span: 1869..1874,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 81,
            column: 25,
            span: 1875..1876,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 81,
            column: 26,
            span: 1876..1877,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 81,
            column: 27,
            span: 1877..1878,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 82,
            column: 6,
            span: 1883..1884,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 82,
            column: 8,
            span: 1885..1886,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 82,
            column: 10,
            span: 1887..1888,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 82,
            column: 12,
            span: 1889..1890,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".04999",
                },
            ),
        ),
        position: Position {
            line: 82,
            column: 0,
            span: 1890..1898,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 83,
            column: 11,
            span: 1903..1909,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 83,
            column: 13,
            span: 1910..1911,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 83,
            column: 15,
            span: 1912..1913,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 83,
            column: 17,
            span: 1914..1915,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 83,
            column: 18,
            span: 1915..1916,
        },
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        position: Position {
            line: 83,
            column: 20,
            span: 1917..1918,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
            ),
        ),
        position: Position {
            line: 83,
            column: 24,
            span: 1918..1922,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 83,
            column: 25,
            span: 1922..1923,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 84,
            column: 0,
            span: 1956..1959,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 85,
            column: 5,
            span: 1962..1964,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 85,
            column: 7,
            span: 1965..1966,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 85,
            column: 9,
            span: 1967..1968,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 85,
            column: 14,
            span: 1968..1973,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 85,
            column: 19,
            span: 1974..1978,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 85,
            column: 26,
            span: 1979..1985,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 85,
            column: 0,
            span: 1986..1987,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 86,
            column: 0,
            span: 1990..1994,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 87,
            column: 6,
            span: 1999..2000,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 87,
            column: 8,
            span: 2001..2002,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 87,
            column: 10,
            span: 2003..2004,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 87,
            column: 12,
            span: 2005..2006,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 87,
            column: 0,
            span: 2006..2011,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 88,
            column: 7,
            span: 2016..2018,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 88,
            column: 9,
            span: 2019..2020,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 88,
            column: 11,
            span: 2021..2022,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 88,
            column: 16,
            span: 2022..2027,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 88,
            column: 21,
            span: 2028..2032,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 88,
            column: 28,
            span: 2033..2039,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "round",
        ),
        position: Position {
            line: 88,
            column: 34,
            span: 2040..2045,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 88,
            column: 35,
            span: 2045..2046,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 88,
            column: 36,
            span: 2046..2047,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 88,
            column: 37,
            span: 2047..2048,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 88,
            column: 39,
            span: 2048..2050,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"K\"",
        ),
        position: Position {
            line: 88,
            column: 42,
            span: 2050..2053,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 89,
            column: 0,
            span: 2058..2062,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 90,
            column: 13,
            span: 2069..2075,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "round",
        ),
        position: Position {
            line: 90,
            column: 19,
            span: 2076..2081,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 90,
            column: 20,
            span: 2081..2082,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 90,
            column: 21,
            span: 2082..2083,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 90,
            column: 22,
            span: 2083..2084,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 90,
            column: 26,
            span: 2083..2088,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 90,
            column: 27,
            span: 2088..2089,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 90,
            column: 29,
            span: 2089..2091,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"M\"",
        ),
        position: Position {
            line: 90,
            column: 32,
            span: 2091..2094,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 91,
            column: 0,
            span: 2099..2102,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 92,
            column: 0,
            span: 2105..2108,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 93,
            column: 0,
            span: 2109..2112,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 95,
            column: 6,
            span: 2114..2119,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        position: Position {
            line: 95,
            column: 0,
            span: 2120..2127,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 96,
            column: 3,
            span: 2128..2130,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 96,
            column: 7,
            span: 2131..2134,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 96,
            column: 9,
            span: 2135..2136,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 96,
            column: 0,
            span: 2137..2141,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 97,
            column: 8,
            span: 2144..2149,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        position: Position {
            line: 97,
            column: 12,
            span: 2150..2153,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 97,
            column: 14,
            span: 2154..2155,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 97,
            column: 0,
            span: 2155..2157,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        position: Position {
            line: 98,
            column: 10,
            span: 2160..2167,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 98,
            column: 12,
            span: 2168..2169,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 98,
            column: 21,
            span: 2170..2178,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 98,
            column: 23,
            span: 2179..2180,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 98,
            column: 24,
            span: 2180..2181,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 99,
            column: 10,
            span: 2186..2191,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 99,
            column: 12,
            span: 2192..2193,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 99,
            column: 14,
            span: 2194..2195,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 99,
            column: 29,
            span: 2196..2210,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 99,
            column: 30,
            span: 2210..2211,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 99,
            column: 37,
            span: 2211..2218,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 99,
            column: 38,
            span: 2218..2219,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 99,
            column: 40,
            span: 2220..2221,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1024",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 99,
            column: 0,
            span: 2221..2226,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        position: Position {
            line: 100,
            column: 8,
            span: 2231..2234,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 100,
            column: 10,
            span: 2235..2236,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 100,
            column: 12,
            span: 2237..2238,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 100,
            column: 13,
            span: 2238..2239,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 100,
            column: 15,
            span: 2240..2241,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        position: Position {
            line: 100,
            column: 19,
            span: 2242..2245,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 100,
            column: 20,
            span: 2245..2246,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 100,
            column: 24,
            span: 2247..2250,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 100,
            column: 26,
            span: 2251..2252,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 100,
            column: 29,
            span: 2253..2255,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        position: Position {
            line: 100,
            column: 0,
            span: 2256..2259,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 101,
            column: 10,
            span: 2264..2269,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 101,
            column: 11,
            span: 2269..2270,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 101,
            column: 17,
            span: 2270..2276,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 101,
            column: 18,
            span: 2276..2277,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"    ---- total memory: %s, max memory: %s ----\\n\"",
        ),
        position: Position {
            line: 101,
            column: 68,
            span: 2277..2327,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 101,
            column: 69,
            span: 2327..2328,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 102,
            column: 12,
            span: 2339..2340,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 102,
            column: 13,
            span: 2340..2341,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 102,
            column: 14,
            span: 2341..2342,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 102,
            column: 15,
            span: 2342..2343,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 102,
            column: 16,
            span: 2343..2344,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 102,
            column: 18,
            span: 2345..2346,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 102,
            column: 19,
            span: 2346..2347,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        position: Position {
            line: 102,
            column: 22,
            span: 2347..2350,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 102,
            column: 23,
            span: 2350..2351,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 102,
            column: 24,
            span: 2351..2352,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 102,
            column: 25,
            span: 2352..2353,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 103,
            column: 0,
            span: 2356..2359,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 104,
            column: 0,
            span: 2360..2364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        position: Position {
            line: 105,
            column: 10,
            span: 2367..2374,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 105,
            column: 12,
            span: 2375..2376,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 105,
            column: 21,
            span: 2377..2385,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 105,
            column: 23,
            span: 2386..2387,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 105,
            column: 24,
            span: 2387..2388,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 106,
            column: 6,
            span: 2393..2394,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 106,
            column: 7,
            span: 2394..2395,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmemory",
        ),
        position: Position {
            line: 106,
            column: 18,
            span: 2395..2406,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 106,
            column: 19,
            span: 2406..2407,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 106,
            column: 20,
            span: 2407..2408,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 107,
            column: 10,
            span: 2413..2418,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "total",
        ),
        position: Position {
            line: 107,
            column: 16,
            span: 2419..2424,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 107,
            column: 17,
            span: 2424..2425,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "numblocks",
        ),
        position: Position {
            line: 107,
            column: 27,
            span: 2426..2435,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 107,
            column: 28,
            span: 2435..2436,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxmem",
        ),
        position: Position {
            line: 107,
            column: 35,
            span: 2437..2443,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 107,
            column: 37,
            span: 2444..2445,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 107,
            column: 39,
            span: 2446..2447,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 107,
            column: 40,
            span: 2447..2448,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 107,
            column: 48,
            span: 2448..2456,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 107,
            column: 49,
            span: 2456..2457,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 107,
            column: 50,
            span: 2457..2458,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 108,
            column: 10,
            span: 2463..2468,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 108,
            column: 16,
            span: 2469..2474,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 108,
            column: 18,
            span: 2475..2476,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 108,
            column: 33,
            span: 2477..2491,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 108,
            column: 34,
            span: 2491..2492,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 108,
            column: 41,
            span: 2492..2499,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 108,
            column: 42,
            span: 2499..2500,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 109,
            column: 10,
            span: 2505..2510,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 109,
            column: 11,
            span: 2510..2511,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 109,
            column: 17,
            span: 2511..2517,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 109,
            column: 18,
            span: 2517..2518,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n    ---- total memory: %s (%.0fK), max use: %s,  blocks: %d\\n\"",
        ),
        position: Position {
            line: 110,
            column: 72,
            span: 2525..2590,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 110,
            column: 73,
            span: 2590..2591,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 111,
            column: 8,
            span: 2598..2599,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 111,
            column: 9,
            span: 2599..2600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "total",
        ),
        position: Position {
            line: 111,
            column: 14,
            span: 2600..2605,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 111,
            column: 15,
            span: 2605..2606,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 111,
            column: 16,
            span: 2606..2607,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 111,
            column: 22,
            span: 2608..2613,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 111,
            column: 23,
            span: 2613..2614,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 111,
            column: 25,
            span: 2615..2616,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 111,
            column: 26,
            span: 2616..2617,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxmem",
        ),
        position: Position {
            line: 111,
            column: 32,
            span: 2617..2623,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 111,
            column: 33,
            span: 2623..2624,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 111,
            column: 34,
            span: 2624..2625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "numblocks",
        ),
        position: Position {
            line: 111,
            column: 44,
            span: 2626..2635,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 111,
            column: 45,
            span: 2635..2636,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 111,
            column: 46,
            span: 2636..2637,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 112,
            column: 10,
            span: 2642..2647,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 112,
            column: 11,
            span: 2647..2648,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 112,
            column: 17,
            span: 2648..2654,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 112,
            column: 18,
            span: 2654..2655,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\t(strings:  %d, tables: %d, functions: %d, \"",
        ),
        position: Position {
            line: 112,
            column: 64,
            span: 2655..2701,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 112,
            column: 66,
            span: 2701..2703,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\tudata: %d, threads: %d)\"",
        ),
        position: Position {
            line: 113,
            column: 47,
            span: 2721..2750,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 113,
            column: 48,
            span: 2750..2751,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 114,
            column: 19,
            span: 2769..2770,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 114,
            column: 20,
            span: 2770..2771,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 114,
            column: 28,
            span: 2771..2779,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        position: Position {
            line: 114,
            column: 36,
            span: 2779..2787,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 114,
            column: 37,
            span: 2787..2788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 114,
            column: 39,
            span: 2789..2790,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 114,
            column: 40,
            span: 2790..2791,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 114,
            column: 48,
            span: 2791..2799,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        position: Position {
            line: 114,
            column: 55,
            span: 2799..2806,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 114,
            column: 56,
            span: 2806..2807,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 114,
            column: 58,
            span: 2808..2809,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 114,
            column: 59,
            span: 2809..2810,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 114,
            column: 67,
            span: 2810..2818,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        position: Position {
            line: 114,
            column: 77,
            span: 2818..2828,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 114,
            column: 78,
            span: 2828..2829,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 115,
            column: 19,
            span: 2847..2848,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 115,
            column: 20,
            span: 2848..2849,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 115,
            column: 28,
            span: 2849..2857,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"userdata\"",
        ),
        position: Position {
            line: 115,
            column: 38,
            span: 2857..2867,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 115,
            column: 39,
            span: 2867..2868,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 115,
            column: 41,
            span: 2869..2870,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 115,
            column: 42,
            span: 2870..2871,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 115,
            column: 50,
            span: 2871..2879,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"thread\"",
        ),
        position: Position {
            line: 115,
            column: 58,
            span: 2879..2887,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 115,
            column: 59,
            span: 2887..2888,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 115,
            column: 60,
            span: 2888..2889,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 116,
            column: 0,
            span: 2892..2895,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 117,
            column: 0,
            span: 2896..2899,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 123,
            column: 6,
            span: 2960..2965,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 123,
            column: 15,
            span: 2966..2974,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "report",
        ),
        position: Position {
            line: 123,
            column: 22,
            span: 2975..2981,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 123,
            column: 24,
            span: 2982..2983,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 123,
            column: 25,
            span: 2983..2984,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 123,
            column: 26,
            span: 2984..2985,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 123,
            column: 32,
            span: 2986..2991,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 123,
            column: 33,
            span: 2991..2992,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n***** FILE '\"",
        ),
        position: Position {
            line: 123,
            column: 49,
            span: 2992..3008,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 123,
            column: 51,
            span: 3008..3010,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 123,
            column: 52,
            span: 3010..3011,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 123,
            column: 54,
            span: 3011..3013,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'*****\"",
        ),
        position: Position {
            line: 123,
            column: 62,
            span: 3013..3021,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 123,
            column: 63,
            span: 3021..3022,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 123,
            column: 0,
            span: 3023..3026,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 124,
            column: 6,
            span: 3027..3032,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "olddofile",
        ),
        position: Position {
            line: 124,
            column: 16,
            span: 3033..3042,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 124,
            column: 18,
            span: 3043..3044,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 124,
            column: 0,
            span: 3045..3051,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 125,
            column: 7,
            span: 3052..3058,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 125,
            column: 9,
            span: 3059..3060,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 125,
            column: 18,
            span: 3061..3069,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 125,
            column: 20,
            span: 3070..3071,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 125,
            column: 21,
            span: 3071..3072,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 125,
            column: 22,
            span: 3072..3073,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        position: Position {
            line: 126,
            column: 10,
            span: 3076..3083,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 126,
            column: 11,
            span: 3083..3084,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 126,
            column: 12,
            span: 3084..3085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "report",
        ),
        position: Position {
            line: 127,
            column: 9,
            span: 3088..3094,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 127,
            column: 10,
            span: 3094..3095,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 127,
            column: 11,
            span: 3095..3096,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 127,
            column: 12,
            span: 3096..3097,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 128,
            column: 8,
            span: 3100..3105,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 128,
            column: 10,
            span: 3106..3107,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 128,
            column: 12,
            span: 3108..3109,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 128,
            column: 19,
            span: 3110..3116,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 128,
            column: 20,
            span: 3116..3117,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        position: Position {
            line: 128,
            column: 28,
            span: 3117..3125,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 128,
            column: 29,
            span: 3125..3126,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 128,
            column: 30,
            span: 3126..3127,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 128,
            column: 31,
            span: 3127..3128,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 128,
            column: 32,
            span: 3128..3129,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 129,
            column: 8,
            span: 3132..3137,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 129,
            column: 10,
            span: 3138..3139,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 129,
            column: 12,
            span: 3140..3141,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 129,
            column: 19,
            span: 3142..3148,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 129,
            column: 20,
            span: 3148..3149,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        position: Position {
            line: 129,
            column: 24,
            span: 3149..3153,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 129,
            column: 25,
            span: 3153..3154,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 129,
            column: 26,
            span: 3154..3155,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 129,
            column: 27,
            span: 3155..3156,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 130,
            column: 4,
            span: 3159..3160,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 130,
            column: 6,
            span: 3161..3162,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 130,
            column: 13,
            span: 3163..3169,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 130,
            column: 14,
            span: 3169..3170,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 130,
            column: 18,
            span: 3170..3174,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 130,
            column: 19,
            span: 3174..3175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 130,
            column: 20,
            span: 3175..3176,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 130,
            column: 21,
            span: 3176..3177,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 130,
            column: 22,
            span: 3177..3178,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 131,
            column: 9,
            span: 3181..3187,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 131,
            column: 11,
            span: 3188..3189,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 131,
            column: 12,
            span: 3189..3190,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 131,
            column: 13,
            span: 3190..3191,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 132,
            column: 0,
            span: 3192..3195,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 134,
            column: 7,
            span: 3197..3203,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 134,
            column: 8,
            span: 3203..3204,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'main.lua'",
        ),
        position: Position {
            line: 134,
            column: 18,
            span: 3204..3214,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 134,
            column: 19,
            span: 3214..3215,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 136,
            column: 0,
            span: 3217..3219,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 137,
            column: 8,
            span: 3222..3227,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        position: Position {
            line: 137,
            column: 13,
            span: 3228..3232,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 137,
            column: 14,
            span: 3232..3233,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 137,
            column: 27,
            span: 3234..3246,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 137,
            column: 28,
            span: 3246..3247,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stderr",
        ),
        position: Position {
            line: 137,
            column: 35,
            span: 3248..3254,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 137,
            column: 37,
            span: 3255..3256,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        position: Position {
            line: 137,
            column: 42,
            span: 3257..3261,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 137,
            column: 43,
            span: 3261..3262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 137,
            column: 56,
            span: 3263..3275,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 137,
            column: 57,
            span: 3275..3276,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 137,
            column: 60,
            span: 3277..3279,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 137,
            column: 61,
            span: 3279..3280,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stderr",
        ),
        position: Position {
            line: 137,
            column: 0,
            span: 3280..3286,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 138,
            column: 8,
            span: 3289..3294,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 138,
            column: 11,
            span: 3295..3297,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 138,
            column: 13,
            span: 3298..3299,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 138,
            column: 15,
            span: 3300..3301,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 138,
            column: 16,
            span: 3301..3302,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 141,
            column: 5,
            span: 3391..3393,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 141,
            column: 6,
            span: 3393..3394,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        position: Position {
            line: 141,
            column: 10,
            span: 3394..3398,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 141,
            column: 12,
            span: 3399..3400,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 141,
            column: 21,
            span: 3401..3409,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 141,
            column: 23,
            span: 3410..3411,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        position: Position {
            line: 141,
            column: 24,
            span: 3411..3412,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 141,
            column: 25,
            span: 3412..3413,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stderr",
        ),
        position: Position {
            line: 142,
            column: 11,
            span: 3418..3424,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 142,
            column: 12,
            span: 3424..3425,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 142,
            column: 17,
            span: 3425..3430,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.'",
        ),
        position: Position {
            line: 142,
            column: 20,
            span: 3430..3433,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 143,
            column: 10,
            span: 3458..3463,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 143,
            column: 12,
            span: 3464..3465,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 143,
            column: 14,
            span: 3466..3467,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 143,
            column: 27,
            span: 3468..3480,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 143,
            column: 28,
            span: 3480..3481,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 143,
            column: 29,
            span: 3481..3482,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 143,
            column: 30,
            span: 3482..3483,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 143,
            column: 31,
            span: 3483..3484,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 143,
            column: 34,
            span: 3485..3487,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 143,
            column: 35,
            span: 3487..3488,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        position: Position {
            line: 144,
            column: 6,
            span: 3515..3516,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 144,
            column: 8,
            span: 3517..3518,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 144,
            column: 0,
            span: 3519..3522,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 145,
            column: 10,
            span: 3527..3532,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 145,
            column: 12,
            span: 3533..3534,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 145,
            column: 13,
            span: 3534..3535,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 145,
            column: 14,
            span: 3535..3536,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 145,
            column: 15,
            span: 3536..3537,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 145,
            column: 16,
            span: 3537..3538,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 145,
            column: 17,
            span: 3538..3539,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 145,
            column: 18,
            span: 3539..3540,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 145,
            column: 19,
            span: 3540..3541,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 145,
            column: 20,
            span: 3541..3542,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 145,
            column: 22,
            span: 3543..3544,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 145,
            column: 26,
            span: 3545..3548,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 146,
            column: 0,
            span: 3582..3585,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 147,
            column: 8,
            span: 3588..3593,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 147,
            column: 10,
            span: 3594..3595,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 147,
            column: 12,
            span: 3596..3597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 147,
            column: 25,
            span: 3598..3610,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 147,
            column: 26,
            span: 3610..3611,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 147,
            column: 27,
            span: 3611..3612,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 147,
            column: 28,
            span: 3612..3613,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 147,
            column: 29,
            span: 3613..3614,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 147,
            column: 32,
            span: 3615..3617,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 147,
            column: 33,
            span: 3617..3618,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 148,
            column: 0,
            span: 3641..3644,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "report",
        ),
        position: Position {
            line: 150,
            column: 7,
            span: 3646..3652,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gc.lua\"",
        ),
        position: Position {
            line: 150,
            column: 15,
            span: 3652..3660,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 151,
            column: 6,
            span: 3661..3666,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 151,
            column: 8,
            span: 3667..3668,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 151,
            column: 10,
            span: 3669..3670,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 151,
            column: 17,
            span: 3671..3677,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 151,
            column: 18,
            span: 3677..3678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        position: Position {
            line: 151,
            column: 26,
            span: 3678..3686,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 151,
            column: 27,
            span: 3686..3687,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'gc.lua'",
        ),
        position: Position {
            line: 151,
            column: 35,
            span: 3687..3695,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 151,
            column: 36,
            span: 3695..3696,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 151,
            column: 37,
            span: 3696..3697,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 152,
            column: 2,
            span: 3698..3699,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 152,
            column: 3,
            span: 3699..3700,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 152,
            column: 4,
            span: 3700..3701,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 154,
            column: 15,
            span: 3703..3717,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 154,
            column: 16,
            span: 3717..3718,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"generational\"",
        ),
        position: Position {
            line: 154,
            column: 30,
            span: 3718..3732,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 154,
            column: 31,
            span: 3732..3733,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 155,
            column: 7,
            span: 3734..3740,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 155,
            column: 8,
            span: 3740..3741,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'db.lua'",
        ),
        position: Position {
            line: 155,
            column: 16,
            span: 3741..3749,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 155,
            column: 17,
            span: 3749..3750,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 156,
            column: 7,
            span: 3751..3757,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 156,
            column: 8,
            span: 3757..3758,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 156,
            column: 14,
            span: 3758..3764,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 156,
            column: 15,
            span: 3764..3765,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'calls.lua'",
        ),
        position: Position {
            line: 156,
            column: 26,
            span: 3765..3776,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 156,
            column: 27,
            span: 3776..3777,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 156,
            column: 30,
            span: 3778..3780,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        position: Position {
            line: 156,
            column: 35,
            span: 3781..3785,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 156,
            column: 39,
            span: 3786..3789,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        position: Position {
            line: 156,
            column: 44,
            span: 3790..3794,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 156,
            column: 45,
            span: 3794..3795,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "olddofile",
        ),
        position: Position {
            line: 157,
            column: 10,
            span: 3796..3805,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 157,
            column: 11,
            span: 3805..3806,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'strings.lua'",
        ),
        position: Position {
            line: 157,
            column: 24,
            span: 3806..3819,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 157,
            column: 25,
            span: 3819..3820,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "olddofile",
        ),
        position: Position {
            line: 158,
            column: 10,
            span: 3821..3830,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 158,
            column: 11,
            span: 3830..3831,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'literals.lua'",
        ),
        position: Position {
            line: 158,
            column: 25,
            span: 3831..3845,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 158,
            column: 26,
            span: 3845..3846,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 159,
            column: 7,
            span: 3847..3853,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 159,
            column: 8,
            span: 3853..3854,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 159,
            column: 14,
            span: 3854..3860,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 159,
            column: 15,
            span: 3860..3861,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'attrib.lua'",
        ),
        position: Position {
            line: 159,
            column: 27,
            span: 3861..3873,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 159,
            column: 28,
            span: 3873..3874,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 159,
            column: 31,
            span: 3875..3877,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "27",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 159,
            column: 34,
            span: 3877..3880,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 159,
            column: 35,
            span: 3880..3881,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 161,
            column: 15,
            span: 3883..3897,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 161,
            column: 16,
            span: 3897..3898,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"incremental\"",
        ),
        position: Position {
            line: 161,
            column: 29,
            span: 3898..3911,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 161,
            column: 30,
            span: 3911..3912,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "olddofile",
        ),
        position: Position {
            line: 162,
            column: 10,
            span: 3954..3963,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 162,
            column: 11,
            span: 3963..3964,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'strings.lua'",
        ),
        position: Position {
            line: 162,
            column: 24,
            span: 3964..3977,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 162,
            column: 25,
            span: 3977..3978,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "olddofile",
        ),
        position: Position {
            line: 163,
            column: 10,
            span: 3979..3988,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 163,
            column: 11,
            span: 3988..3989,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'literals.lua'",
        ),
        position: Position {
            line: 163,
            column: 25,
            span: 3989..4003,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 163,
            column: 26,
            span: 4003..4004,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 164,
            column: 7,
            span: 4005..4011,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 164,
            column: 8,
            span: 4011..4012,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'constructs.lua'",
        ),
        position: Position {
            line: 164,
            column: 24,
            span: 4012..4028,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 164,
            column: 25,
            span: 4028..4029,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 165,
            column: 7,
            span: 4030..4036,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 165,
            column: 8,
            span: 4036..4037,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'api.lua'",
        ),
        position: Position {
            line: 165,
            column: 17,
            span: 4037..4046,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 165,
            column: 18,
            span: 4046..4047,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 167,
            column: 15,
            span: 4049..4063,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 167,
            column: 16,
            span: 4063..4064,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"generational\"",
        ),
        position: Position {
            line: 167,
            column: 30,
            span: 4064..4078,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 167,
            column: 31,
            span: 4078..4079,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 168,
            column: 15,
            span: 4111..4125,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 168,
            column: 16,
            span: 4125..4126,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"setpause\"",
        ),
        position: Position {
            line: 168,
            column: 26,
            span: 4126..4136,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 168,
            column: 27,
            span: 4136..4137,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 168,
            column: 31,
            span: 4137..4141,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 168,
            column: 32,
            span: 4141..4142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 169,
            column: 15,
            span: 4143..4157,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 169,
            column: 16,
            span: 4157..4158,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"setmajorinc\"",
        ),
        position: Position {
            line: 169,
            column: 29,
            span: 4158..4171,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 169,
            column: 30,
            span: 4171..4172,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "500",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 169,
            column: 34,
            span: 4172..4176,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 169,
            column: 35,
            span: 4176..4177,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 170,
            column: 7,
            span: 4178..4184,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 170,
            column: 8,
            span: 4184..4185,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 170,
            column: 14,
            span: 4185..4191,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 170,
            column: 15,
            span: 4191..4192,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'locals.lua'",
        ),
        position: Position {
            line: 170,
            column: 27,
            span: 4192..4204,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 170,
            column: 28,
            span: 4204..4205,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 170,
            column: 31,
            span: 4206..4208,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 170,
            column: 33,
            span: 4208..4210,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 170,
            column: 34,
            span: 4210..4211,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 171,
            column: 7,
            span: 4212..4218,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 171,
            column: 8,
            span: 4218..4219,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'constructs.lua'",
        ),
        position: Position {
            line: 171,
            column: 24,
            span: 4219..4235,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 171,
            column: 25,
            span: 4235..4236,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 172,
            column: 7,
            span: 4237..4243,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 172,
            column: 8,
            span: 4243..4244,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'code.lua'",
        ),
        position: Position {
            line: 172,
            column: 18,
            span: 4244..4254,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 172,
            column: 19,
            span: 4254..4255,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 173,
            column: 3,
            span: 4256..4258,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 173,
            column: 7,
            span: 4259..4262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 173,
            column: 10,
            span: 4263..4265,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 173,
            column: 11,
            span: 4265..4266,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        position: Position {
            line: 173,
            column: 16,
            span: 4266..4271,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 173,
            column: 0,
            span: 4272..4276,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "report",
        ),
        position: Position {
            line: 174,
            column: 9,
            span: 4279..4285,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 174,
            column: 10,
            span: 4285..4286,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'big.lua'",
        ),
        position: Position {
            line: 174,
            column: 19,
            span: 4286..4295,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 174,
            column: 20,
            span: 4295..4296,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 175,
            column: 8,
            span: 4299..4304,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 175,
            column: 10,
            span: 4305..4306,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 175,
            column: 12,
            span: 4307..4308,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 175,
            column: 22,
            span: 4309..4318,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 175,
            column: 23,
            span: 4318..4319,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 175,
            column: 27,
            span: 4319..4323,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 175,
            column: 28,
            span: 4323..4324,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 175,
            column: 34,
            span: 4324..4330,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 175,
            column: 35,
            span: 4330..4331,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        position: Position {
            line: 175,
            column: 43,
            span: 4331..4339,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 175,
            column: 44,
            span: 4339..4340,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'big.lua'",
        ),
        position: Position {
            line: 175,
            column: 53,
            span: 4340..4349,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 175,
            column: 54,
            span: 4349..4350,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 175,
            column: 55,
            span: 4350..4351,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 175,
            column: 56,
            span: 4351..4352,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 176,
            column: 9,
            span: 4355..4361,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 176,
            column: 10,
            span: 4361..4362,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 176,
            column: 11,
            span: 4362..4363,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 176,
            column: 12,
            span: 4363..4364,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 176,
            column: 13,
            span: 4364..4365,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 176,
            column: 16,
            span: 4366..4368,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        position: Position {
            line: 176,
            column: 20,
            span: 4369..4372,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 176,
            column: 21,
            span: 4372..4373,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 177,
            column: 9,
            span: 4376..4382,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 177,
            column: 10,
            span: 4382..4383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 177,
            column: 11,
            span: 4383..4384,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 177,
            column: 12,
            span: 4384..4385,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 177,
            column: 13,
            span: 4385..4386,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 177,
            column: 16,
            span: 4387..4389,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 177,
            column: 20,
            span: 4390..4393,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 177,
            column: 21,
            span: 4393..4394,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 178,
            column: 0,
            span: 4395..4398,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 179,
            column: 7,
            span: 4399..4405,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 179,
            column: 8,
            span: 4405..4406,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'nextvar.lua'",
        ),
        position: Position {
            line: 179,
            column: 21,
            span: 4406..4419,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 179,
            column: 22,
            span: 4419..4420,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 180,
            column: 7,
            span: 4421..4427,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 180,
            column: 8,
            span: 4427..4428,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'pm.lua'",
        ),
        position: Position {
            line: 180,
            column: 16,
            span: 4428..4436,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 180,
            column: 17,
            span: 4436..4437,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 181,
            column: 7,
            span: 4438..4444,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 181,
            column: 8,
            span: 4444..4445,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'api.lua'",
        ),
        position: Position {
            line: 181,
            column: 17,
            span: 4445..4454,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 181,
            column: 18,
            span: 4454..4455,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 182,
            column: 7,
            span: 4456..4462,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 182,
            column: 8,
            span: 4462..4463,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 182,
            column: 14,
            span: 4463..4469,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 182,
            column: 15,
            span: 4469..4470,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'events.lua'",
        ),
        position: Position {
            line: 182,
            column: 27,
            span: 4470..4482,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 182,
            column: 28,
            span: 4482..4483,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 182,
            column: 31,
            span: 4484..4486,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 182,
            column: 34,
            span: 4486..4489,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 182,
            column: 35,
            span: 4489..4490,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 183,
            column: 7,
            span: 4491..4497,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 183,
            column: 8,
            span: 4497..4498,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'vararg.lua'",
        ),
        position: Position {
            line: 183,
            column: 20,
            span: 4498..4510,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 183,
            column: 21,
            span: 4510..4511,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 184,
            column: 7,
            span: 4512..4518,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 184,
            column: 8,
            span: 4518..4519,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'closure.lua'",
        ),
        position: Position {
            line: 184,
            column: 21,
            span: 4519..4532,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 184,
            column: 22,
            span: 4532..4533,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 185,
            column: 7,
            span: 4534..4540,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 185,
            column: 8,
            span: 4540..4541,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'coroutine.lua'",
        ),
        position: Position {
            line: 185,
            column: 23,
            span: 4541..4556,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 185,
            column: 24,
            span: 4556..4557,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 186,
            column: 7,
            span: 4558..4564,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 186,
            column: 8,
            span: 4564..4565,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'goto.lua'",
        ),
        position: Position {
            line: 186,
            column: 18,
            span: 4565..4575,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 186,
            column: 19,
            span: 4575..4576,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 187,
            column: 7,
            span: 4577..4583,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 187,
            column: 8,
            span: 4583..4584,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'errors.lua'",
        ),
        position: Position {
            line: 187,
            column: 20,
            span: 4584..4596,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 187,
            column: 21,
            span: 4596..4597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 188,
            column: 7,
            span: 4598..4604,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 188,
            column: 8,
            span: 4604..4605,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'math.lua'",
        ),
        position: Position {
            line: 188,
            column: 18,
            span: 4605..4615,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 188,
            column: 19,
            span: 4615..4616,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 189,
            column: 7,
            span: 4617..4623,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 189,
            column: 8,
            span: 4623..4624,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'sort.lua'",
        ),
        position: Position {
            line: 189,
            column: 18,
            span: 4624..4634,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 189,
            column: 19,
            span: 4634..4635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 190,
            column: 7,
            span: 4636..4642,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 190,
            column: 8,
            span: 4642..4643,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'bitwise.lua'",
        ),
        position: Position {
            line: 190,
            column: 21,
            span: 4643..4656,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 190,
            column: 22,
            span: 4656..4657,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 191,
            column: 7,
            span: 4658..4664,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 191,
            column: 8,
            span: 4664..4665,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 191,
            column: 14,
            span: 4665..4671,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 191,
            column: 15,
            span: 4671..4672,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'verybig.lua'",
        ),
        position: Position {
            line: 191,
            column: 28,
            span: 4672..4685,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 191,
            column: 29,
            span: 4685..4686,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 191,
            column: 32,
            span: 4687..4689,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 191,
            column: 35,
            span: 4689..4692,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 191,
            column: 36,
            span: 4692..4693,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 191,
            column: 37,
            span: 4693..4694,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 191,
            column: 52,
            span: 4695..4709,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 191,
            column: 53,
            span: 4709..4710,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 191,
            column: 54,
            span: 4710..4711,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 192,
            column: 7,
            span: 4712..4718,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 192,
            column: 8,
            span: 4718..4719,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'files.lua'",
        ),
        position: Position {
            line: 192,
            column: 19,
            span: 4719..4730,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 192,
            column: 20,
            span: 4730..4731,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 194,
            column: 3,
            span: 4733..4735,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 194,
            column: 5,
            span: 4736..4737,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgs",
        ),
        position: Position {
            line: 194,
            column: 9,
            span: 4737..4741,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 194,
            column: 11,
            span: 4742..4743,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 194,
            column: 13,
            span: 4743..4745,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 194,
            column: 0,
            span: 4746..4750,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 195,
            column: 8,
            span: 4753..4758,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 195,
            column: 9,
            span: 4758..4759,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\ntests not performed:\"",
        ),
        position: Position {
            line: 195,
            column: 33,
            span: 4759..4783,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 195,
            column: 34,
            span: 4783..4784,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 196,
            column: 6,
            span: 4787..4790,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 196,
            column: 8,
            span: 4791..4792,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 196,
            column: 9,
            span: 4792..4793,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 196,
            column: 10,
            span: 4792..4794,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 196,
            column: 11,
            span: 4794..4795,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 196,
            column: 12,
            span: 4795..4796,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgs",
        ),
        position: Position {
            line: 196,
            column: 16,
            span: 4796..4800,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 196,
            column: 0,
            span: 4801..4803,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 197,
            column: 10,
            span: 4808..4813,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 197,
            column: 11,
            span: 4813..4814,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgs",
        ),
        position: Position {
            line: 197,
            column: 15,
            span: 4814..4818,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 197,
            column: 16,
            span: 4818..4819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 197,
            column: 17,
            span: 4819..4820,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 197,
            column: 18,
            span: 4820..4821,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 197,
            column: 19,
            span: 4821..4822,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 198,
            column: 0,
            span: 4825..4828,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 199,
            column: 8,
            span: 4831..4836,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 199,
            column: 9,
            span: 4836..4837,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 199,
            column: 10,
            span: 4837..4838,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 200,
            column: 0,
            span: 4839..4842,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 202,
            column: 6,
            span: 4844..4849,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 202,
            column: 7,
            span: 4849..4850,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"final OK !!!\"",
        ),
        position: Position {
            line: 202,
            column: 21,
            span: 4850..4864,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 202,
            column: 22,
            span: 4864..4865,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 204,
            column: 6,
            span: 4867..4872,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 204,
            column: 12,
            span: 4873..4878,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 204,
            column: 14,
            span: 4879..4880,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 204,
            column: 22,
            span: 4881..4888,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        position: Position {
            line: 204,
            column: 30,
            span: 4889..4896,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 206,
            column: 6,
            span: 4898..4903,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 206,
            column: 7,
            span: 4903..4904,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 206,
            column: 14,
            span: 4904..4911,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 206,
            column: 15,
            span: 4911..4912,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 206,
            column: 23,
            span: 4912..4920,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 206,
            column: 25,
            span: 4921..4922,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 206,
            column: 26,
            span: 4922..4923,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 206,
            column: 27,
            span: 4923..4924,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 206,
            column: 34,
            span: 4925..4931,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 206,
            column: 35,
            span: 4931..4932,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 206,
            column: 39,
            span: 4932..4936,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 206,
            column: 40,
            span: 4936..4937,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 206,
            column: 41,
            span: 4937..4938,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 206,
            column: 42,
            span: 4938..4939,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 206,
            column: 45,
            span: 4940..4942,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        position: Position {
            line: 206,
            column: 54,
            span: 4943..4951,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 206,
            column: 55,
            span: 4951..4952,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 206,
            column: 59,
            span: 4953..4956,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 206,
            column: 60,
            span: 4956..4957,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cr\"",
        ),
        position: Position {
            line: 206,
            column: 65,
            span: 4958..4962,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 206,
            column: 66,
            span: 4962..4963,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 209,
            column: 3,
            span: 4993..4995,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 209,
            column: 4,
            span: 4995..4996,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        position: Position {
            line: 209,
            column: 11,
            span: 4996..5003,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 209,
            column: 13,
            span: 5004..5005,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        position: Position {
            line: 209,
            column: 0,
            span: 5006..5013,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 211,
            column: 4,
            span: 5015..5018,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 213,
            column: 6,
            span: 5026..5031,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 213,
            column: 9,
            span: 5032..5034,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 213,
            column: 10,
            span: 5034..5035,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        position: Position {
            line: 213,
            column: 18,
            span: 5036..5043,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 213,
            column: 19,
            span: 5043..5044,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 213,
            column: 25,
            span: 5045..5050,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 213,
            column: 26,
            span: 5050..5051,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 213,
            column: 33,
            span: 5052..5058,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 213,
            column: 34,
            span: 5058..5059,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        position: Position {
            line: 213,
            column: 40,
            span: 5060..5065,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 213,
            column: 41,
            span: 5065..5066,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 213,
            column: 48,
            span: 5067..5073,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 213,
            column: 49,
            span: 5073..5074,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 213,
            column: 54,
            span: 5075..5079,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 213,
            column: 56,
            span: 5080..5081,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 214,
            column: 9,
            span: 5088..5090,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 214,
            column: 10,
            span: 5090..5091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        position: Position {
            line: 214,
            column: 18,
            span: 5092..5099,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 214,
            column: 19,
            span: 5099..5100,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 214,
            column: 25,
            span: 5101..5106,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 214,
            column: 26,
            span: 5106..5107,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 214,
            column: 33,
            span: 5108..5114,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 214,
            column: 34,
            span: 5114..5115,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 214,
            column: 40,
            span: 5115..5121,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 214,
            column: 41,
            span: 5121..5122,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 214,
            column: 44,
            span: 5123..5125,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 214,
            column: 45,
            span: 5125..5126,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        position: Position {
            line: 214,
            column: 50,
            span: 5126..5131,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 214,
            column: 51,
            span: 5131..5132,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 214,
            column: 58,
            span: 5133..5139,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 214,
            column: 59,
            span: 5139..5140,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 214,
            column: 62,
            span: 5141..5143,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 214,
            column: 63,
            span: 5143..5144,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 214,
            column: 0,
            span: 5144..5148,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 217,
            column: 6,
            span: 5191..5196,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fname",
        ),
        position: Position {
            line: 217,
            column: 12,
            span: 5197..5202,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 217,
            column: 14,
            span: 5203..5204,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 217,
            column: 16,
            span: 5205..5206,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 217,
            column: 20,
            span: 5207..5210,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"time-debug.txt\"",
        ),
        position: Position {
            line: 217,
            column: 37,
            span: 5211..5227,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 217,
            column: 40,
            span: 5228..5230,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"time.txt\"",
        ),
        position: Position {
            line: 217,
            column: 51,
            span: 5231..5241,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 218,
            column: 6,
            span: 5242..5247,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lasttime",
        ),
        position: Position {
            line: 218,
            column: 0,
            span: 5248..5256,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 220,
            column: 3,
            span: 5258..5260,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 220,
            column: 7,
            span: 5261..5264,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "usertests",
        ),
        position: Position {
            line: 220,
            column: 17,
            span: 5265..5274,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 220,
            column: 0,
            span: 5275..5279,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 222,
            column: 8,
            span: 5330..5335,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 222,
            column: 10,
            span: 5336..5337,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 222,
            column: 12,
            span: 5338..5339,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 222,
            column: 15,
            span: 5340..5342,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 222,
            column: 16,
            span: 5342..5343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 222,
            column: 20,
            span: 5343..5347,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 222,
            column: 21,
            span: 5347..5348,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fname",
        ),
        position: Position {
            line: 222,
            column: 26,
            span: 5348..5353,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 222,
            column: 27,
            span: 5353..5354,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 223,
            column: 5,
            span: 5357..5359,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 223,
            column: 7,
            span: 5360..5361,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 223,
            column: 0,
            span: 5362..5366,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lasttime",
        ),
        position: Position {
            line: 224,
            column: 13,
            span: 5371..5379,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 224,
            column: 15,
            span: 5380..5381,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 224,
            column: 22,
            span: 5382..5388,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 224,
            column: 23,
            span: 5388..5389,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        position: Position {
            line: 224,
            column: 31,
            span: 5389..5397,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 224,
            column: 32,
            span: 5397..5398,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 224,
            column: 33,
            span: 5398..5399,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 224,
            column: 34,
            span: 5399..5400,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 224,
            column: 38,
            span: 5400..5404,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'*a'",
        ),
        position: Position {
            line: 224,
            column: 42,
            span: 5404..5408,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 224,
            column: 43,
            span: 5408..5409,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 224,
            column: 44,
            span: 5409..5410,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 225,
            column: 6,
            span: 5415..5416,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 225,
            column: 7,
            span: 5416..5417,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 225,
            column: 12,
            span: 5417..5422,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 225,
            column: 13,
            span: 5422..5423,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 225,
            column: 14,
            span: 5423..5424,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 225,
            column: 15,
            span: 5424..5425,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 226,
            column: 7,
            span: 5428..5432,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lasttime",
        ),
        position: Position {
            line: 227,
            column: 13,
            span: 5499..5507,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 227,
            column: 15,
            span: 5508..5509,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 227,
            column: 0,
            span: 5510..5513,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 228,
            column: 0,
            span: 5516..5519,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 229,
            column: 0,
            span: 5520..5523,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 232,
            column: 6,
            span: 5555..5560,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 232,
            column: 7,
            span: 5560..5561,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'cleaning all!!!!'",
        ),
        position: Position {
            line: 232,
            column: 25,
            span: 5561..5579,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 232,
            column: 26,
            span: 5579..5580,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 233,
            column: 4,
            span: 5581..5584,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 233,
            column: 6,
            span: 5585..5586,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 233,
            column: 9,
            span: 5587..5589,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        position: Position {
            line: 233,
            column: 15,
            span: 5590..5595,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 233,
            column: 16,
            span: 5595..5596,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 233,
            column: 18,
            span: 5596..5598,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 233,
            column: 19,
            span: 5598..5599,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 233,
            column: 0,
            span: 5600..5602,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 234,
            column: 5,
            span: 5605..5607,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 234,
            column: 9,
            span: 5608..5611,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 234,
            column: 11,
            span: 5612..5613,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 234,
            column: 12,
            span: 5613..5614,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "___Glob",
        ),
        position: Position {
            line: 234,
            column: 19,
            span: 5614..5621,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 234,
            column: 21,
            span: 5622..5623,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 234,
            column: 23,
            span: 5623..5625,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 234,
            column: 24,
            span: 5625..5626,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        position: Position {
            line: 234,
            column: 33,
            span: 5627..5635,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 234,
            column: 35,
            span: 5636..5637,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 234,
            column: 37,
            span: 5637..5639,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 234,
            column: 38,
            span: 5639..5640,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 234,
            column: 39,
            span: 5640..5641,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 234,
            column: 40,
            span: 5641..5642,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 234,
            column: 41,
            span: 5642..5643,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 234,
            column: 42,
            span: 5643..5644,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 234,
            column: 0,
            span: 5645..5649,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 235,
            column: 7,
            span: 5654..5656,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 235,
            column: 8,
            span: 5656..5657,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 235,
            column: 9,
            span: 5657..5658,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 235,
            column: 10,
            span: 5658..5659,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 235,
            column: 12,
            span: 5660..5661,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 235,
            column: 0,
            span: 5662..5665,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 236,
            column: 0,
            span: 5668..5671,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 237,
            column: 0,
            span: 5672..5675,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 240,
            column: 15,
            span: 5678..5692,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 240,
            column: 16,
            span: 5692..5693,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 240,
            column: 17,
            span: 5693..5694,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 241,
            column: 15,
            span: 5695..5709,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 241,
            column: 16,
            span: 5709..5710,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 241,
            column: 17,
            span: 5710..5711,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 242,
            column: 15,
            span: 5712..5726,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 242,
            column: 16,
            span: 5726..5727,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 242,
            column: 17,
            span: 5727..5728,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 243,
            column: 15,
            span: 5729..5743,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 243,
            column: 16,
            span: 5743..5744,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 243,
            column: 17,
            span: 5744..5745,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 244,
            column: 15,
            span: 5746..5760,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 244,
            column: 16,
            span: 5760..5761,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 244,
            column: 17,
            span: 5761..5762,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 245,
            column: 15,
            span: 5763..5777,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 245,
            column: 16,
            span: 5777..5778,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 245,
            column: 17,
            span: 5778..5779,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 245,
            column: 18,
            span: 5779..5780,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        position: Position {
            line: 245,
            column: 25,
            span: 5780..5787,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 245,
            column: 26,
            span: 5787..5788,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 245,
            column: 27,
            span: 5788..5789,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 247,
            column: 6,
            span: 5791..5796,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        position: Position {
            line: 247,
            column: 11,
            span: 5797..5801,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 247,
            column: 13,
            span: 5802..5803,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        position: Position {
            line: 247,
            column: 19,
            span: 5804..5809,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 247,
            column: 20,
            span: 5809..5810,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 247,
            column: 21,
            span: 5810..5811,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 247,
            column: 23,
            span: 5812..5813,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 247,
            column: 0,
            span: 5814..5815,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 249,
            column: 6,
            span: 5817..5822,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 249,
            column: 7,
            span: 5822..5823,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 249,
            column: 13,
            span: 5823..5829,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 249,
            column: 14,
            span: 5829..5830,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\ntotal time: %.2f\\n\"",
        ),
        position: Position {
            line: 249,
            column: 38,
            span: 5830..5854,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 249,
            column: 39,
            span: 5854..5855,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        position: Position {
            line: 249,
            column: 44,
            span: 5856..5860,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 249,
            column: 45,
            span: 5860..5861,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 249,
            column: 46,
            span: 5861..5862,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 251,
            column: 3,
            span: 5864..5866,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 251,
            column: 7,
            span: 5867..5870,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "usertests",
        ),
        position: Position {
            line: 251,
            column: 17,
            span: 5871..5880,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 251,
            column: 0,
            span: 5881..5885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lasttime",
        ),
        position: Position {
            line: 252,
            column: 11,
            span: 5888..5896,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 252,
            column: 13,
            span: 5897..5898,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lasttime",
        ),
        position: Position {
            line: 252,
            column: 22,
            span: 5899..5907,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 252,
            column: 25,
            span: 5908..5910,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        position: Position {
            line: 252,
            column: 30,
            span: 5911..5915,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 254,
            column: 8,
            span: 6041..6046,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        position: Position {
            line: 254,
            column: 13,
            span: 6047..6051,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 254,
            column: 15,
            span: 6052..6053,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 254,
            column: 17,
            span: 6054..6055,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        position: Position {
            line: 254,
            column: 21,
            span: 6055..6059,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 254,
            column: 23,
            span: 6060..6061,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lasttime",
        ),
        position: Position {
            line: 254,
            column: 32,
            span: 6062..6070,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 254,
            column: 33,
            span: 6070..6071,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 254,
            column: 35,
            span: 6072..6073,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        position: Position {
            line: 254,
            column: 0,
            span: 6074..6078,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 255,
            column: 8,
            span: 6081..6086,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tolerance",
        ),
        position: Position {
            line: 255,
            column: 18,
            span: 6087..6096,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 255,
            column: 20,
            span: 6097..6098,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".05",
                },
            ),
        ),
        position: Position {
            line: 255,
            column: 25,
            span: 6098..6103,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 256,
            column: 9,
            span: 6115..6121,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 256,
            column: 10,
            span: 6121..6122,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        position: Position {
            line: 256,
            column: 14,
            span: 6122..6126,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 256,
            column: 16,
            span: 6127..6128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tolerance",
        ),
        position: Position {
            line: 256,
            column: 26,
            span: 6129..6138,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 256,
            column: 30,
            span: 6139..6142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        position: Position {
            line: 256,
            column: 35,
            span: 6143..6147,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 256,
            column: 37,
            span: 6148..6149,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 256,
            column: 39,
            span: 6150..6151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tolerance",
        ),
        position: Position {
            line: 256,
            column: 48,
            span: 6151..6160,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 256,
            column: 49,
            span: 6160..6161,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 257,
            column: 9,
            span: 6164..6170,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 257,
            column: 10,
            span: 6170..6171,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 257,
            column: 14,
            span: 6171..6175,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 257,
            column: 15,
            span: 6175..6176,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fname",
        ),
        position: Position {
            line: 257,
            column: 20,
            span: 6176..6181,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 257,
            column: 21,
            span: 6181..6182,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"w\"",
        ),
        position: Position {
            line: 257,
            column: 25,
            span: 6183..6186,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 257,
            column: 26,
            span: 6186..6187,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 257,
            column: 27,
            span: 6187..6188,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 257,
            column: 28,
            span: 6188..6189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 257,
            column: 33,
            span: 6189..6194,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 257,
            column: 34,
            span: 6194..6195,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        position: Position {
            line: 257,
            column: 38,
            span: 6195..6199,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 257,
            column: 39,
            span: 6199..6200,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 257,
            column: 40,
            span: 6200..6201,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 257,
            column: 45,
            span: 6201..6206,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 257,
            column: 46,
            span: 6206..6207,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 257,
            column: 47,
            span: 6207..6208,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 258,
            column: 0,
            span: 6209..6212,
        },
    },
]
