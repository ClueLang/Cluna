---
source: src/main.rs
assertion_line: 91
expression: scanned
input_file: test-data/lua5.2-tests/vararg.lua
---
[
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 1,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 1,
    },
    Token {
        kind: String,
        lexeme: "'testing vararg'",
        line: 1,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 1,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 3,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "arg",
        line: 3,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 3,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 3,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 5,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 5,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 5,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 5,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 5,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "arg",
        line: 6,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 6,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 6,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "select",
        line: 6,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 6,
    },
    Token {
        kind: String,
        lexeme: "'#'",
        line: 6,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 6,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 6,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 6,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 6,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 6,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 6,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 7,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 7,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 7,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "arg",
        line: 7,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 7,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 7,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 7,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 7,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 7,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "arg",
        line: 7,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 7,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 7,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 7,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 7,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: "arg",
        line: 8,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 8,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 9,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "c12",
        line: 11,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 11,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 11,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 12,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "arg",
        line: 12,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 12,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 12,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 12,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 13,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 13,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 13,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 13,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 13,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 13,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 13,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 13,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 13,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "res",
        line: 14,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 14,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 14,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 14,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 14,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 14,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 14,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 14,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 14,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 14,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 14,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 14,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 14,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 14,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 14,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 14,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 14,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 14,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 14,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "res",
        line: 15,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "res",
        line: 15,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 15,
    },
    Token {
        kind: Number,
        lexeme: "55",
        line: 15,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 15,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "res",
        line: 16,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 16,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 16,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 17,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "vararg",
        line: 19,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 19,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 19,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 19,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 19,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 19,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "select",
        line: 19,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 19,
    },
    Token {
        kind: String,
        lexeme: "'#'",
        line: 19,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 19,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 19,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 19,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 19,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 19,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 19,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 19,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "call",
        line: 21,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 21,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 21,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 21,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "args",
        line: 21,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 21,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 21,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 21,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 21,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "args",
        line: 21,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 21,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 21,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "args",
        line: 21,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 21,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 21,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 21,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 23,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 23,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 23,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 23,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 23,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 23,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 24,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 24,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 24,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 24,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 24,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 24,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 24,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 24,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 24,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 24,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 24,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 24,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 24,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 24,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 24,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 24,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 24,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 24,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 24,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 25,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 25,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 25,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 25,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 25,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 25,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 25,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 25,
    },
    Token {
        kind: Number,
        lexeme: "45",
        line: 25,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 25,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 25,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 25,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 25,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 25,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 25,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 25,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 25,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 25,
    },
    Token {
        kind: Number,
        lexeme: "45",
        line: 25,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 25,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 25,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 25,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 25,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 25,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 25,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 27,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "c12",
        line: 27,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 27,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 27,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 27,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 27,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 27,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 27,
    },
    Token {
        kind: Number,
        lexeme: "55",
        line: 27,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 28,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 28,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "call",
        line: 28,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "c12",
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 28,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 28,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 28,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 28,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 28,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 28,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 29,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 29,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 29,
    },
    Token {
        kind: Number,
        lexeme: "55",
        line: 29,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 29,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 29,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 29,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 30,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "call",
        line: 30,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "c12",
        line: 30,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 30,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 30,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 30,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 30,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 30,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 30,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 30,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 30,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 30,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 31,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 31,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 31,
    },
    Token {
        kind: Number,
        lexeme: "55",
        line: 31,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 31,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 31,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 31,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 32,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "call",
        line: 32,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "c12",
        line: 32,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 32,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 32,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 32,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 32,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 32,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 32,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 32,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 32,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 32,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 33,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 33,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 33,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 34,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: "c12",
        line: 34,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 34,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 34,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 34,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 34,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 34,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 34,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 34,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 34,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 34,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 34,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 35,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "vararg",
        line: 35,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "call",
        line: 35,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        line: 35,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 35,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 35,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 35,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 35,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 35,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 35,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 35,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 35,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 35,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 35,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 36,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 36,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        line: 36,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 36,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 37,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 37,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 37,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 37,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 37,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 37,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 37,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 37,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 37,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 37,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 37,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 37,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 37,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 37,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 37,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 38,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "vararg",
        line: 38,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "call",
        line: 38,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "call",
        line: 38,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 38,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "c12",
        line: 38,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 38,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 38,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 38,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 38,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 38,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 38,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 38,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 38,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 39,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 39,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 39,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 39,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 39,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 39,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 39,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 39,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 39,
    },
    Token {
        kind: Number,
        lexeme: "55",
        line: 39,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 39,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 39,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 39,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 39,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 39,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 40,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "call",
        line: 40,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 40,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 40,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 40,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 40,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 40,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 41,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 41,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 41,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 41,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 41,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 43,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 43,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 43,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 43,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 43,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 43,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 43,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 44,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 44,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 44,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 44,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 44,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "arg",
        line: 44,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 44,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 44,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 44,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 44,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 44,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "self",
        line: 44,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 44,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 44,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 44,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 44,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "arg",
        line: 44,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 45,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 45,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 45,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 45,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 45,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 45,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 45,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 45,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 45,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 45,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 45,
    },
    Token {
        kind: Number,
        lexeme: "11",
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 46,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 46,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 46,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 48,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 48,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 48,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 49,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 49,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 49,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 49,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 49,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 49,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 49,
    },
    Token {
        kind: While,
        lexeme: "while",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 50,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 50,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 50,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 50,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 50,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 50,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 50,
    },
    Token {
        kind: Number,
        lexeme: "0.3",
        line: 50,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 50,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 50,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 50,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 50,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 50,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 52,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 52,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 52,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 52,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 52,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 52,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 52,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 52,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "more",
        line: 53,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 53,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 53,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 53,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 54,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 54,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 54,
    },
    Token {
        kind: Number,
        lexeme: "1.3",
        line: 54,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: "more",
        line: 54,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 54,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 54,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 54,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 54,
    },
    Token {
        kind: Number,
        lexeme: "5.3",
        line: 54,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: "more",
        line: 55,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 55,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 55,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 55,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 55,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 55,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 55,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 55,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 55,
    },
    Token {
        kind: Number,
        lexeme: "0.3",
        line: 55,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 55,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 55,
    },
    Token {
        kind: Identifier,
        lexeme: "more",
        line: 55,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 55,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 55,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 55,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 55,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 55,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 55,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 56,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "g",
        line: 58,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 58,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 58,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 58,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 59,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 59,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 59,
    },
    Token {
        kind: Number,
        lexeme: "1.3",
        line: 59,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 59,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 59,
    },
    Token {
        kind: Number,
        lexeme: "2.3",
        line: 59,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 59,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 59,
    },
    Token {
        kind: Number,
        lexeme: "3.3",
        line: 59,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 59,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "call",
        line: 62,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 62,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 62,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "call",
        line: 63,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "g",
        line: 63,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 63,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 65,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 65,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 65,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 66,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 66,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 66,
    },
    Token {
        kind: While,
        lexeme: "while",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 67,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 67,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 67,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 67,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 67,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 67,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 67,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 67,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 67,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 67,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 68,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "call",
        line: 68,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "math",
        line: 68,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "max",
        line: 68,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 68,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 70,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 70,
    },
    Token {
        kind: String,
        lexeme: "\"+\"",
        line: 70,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 70,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "oneless",
        line: 75,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 75,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 75,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 75,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 75,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 75,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 75,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 75,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 77,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 77,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 77,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 77,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 77,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 77,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 79,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "arg",
        line: 79,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 79,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 79,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 79,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 80,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 80,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 80,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 80,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 81,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 81,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 81,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 81,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 81,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 82,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 82,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 82,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 82,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: "oneless",
        line: 82,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: "oneless",
        line: 82,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: "oneless",
        line: 82,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 82,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 82,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 82,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 82,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 82,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 84,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 84,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 84,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 84,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 84,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 84,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 84,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 84,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 85,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 85,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 85,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 85,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 85,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 86,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 86,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 86,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 86,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 86,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 86,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 87,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 90,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 90,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 90,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 90,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 90,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 90,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 90,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 90,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 90,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 90,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 90,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 91,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 91,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 91,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 91,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 91,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 91,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 91,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 91,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 91,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 91,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 91,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 91,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 91,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 91,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 91,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 91,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 93,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 93,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 93,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 93,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 93,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 93,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 93,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 93,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 94,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 94,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 94,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 94,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 94,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 94,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 94,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 94,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 94,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 94,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 94,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 94,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 94,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 94,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 94,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 94,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 98,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 98,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[ return {...} ]]",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 99,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 99,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 99,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 99,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 99,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 99,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 100,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 100,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 100,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 100,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 100,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 100,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 100,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 100,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 100,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 100,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 100,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 100,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 100,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 100,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 100,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 100,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 100,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 100,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 100,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 103,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 103,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\n  local x = {...}\n  for i=1,select('#', ...) do assert(x[i] == select(i, ...)) end\n  assert(x[select('#', ...)+1] == nil)\n  return true\n]]",
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 110,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 110,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 110,
    },
    Token {
        kind: String,
        lexeme: "\"a\"",
        line: 110,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 110,
    },
    Token {
        kind: String,
        lexeme: "\"b\"",
        line: 110,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 110,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 110,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 110,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 110,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 110,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 110,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 110,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 111,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 111,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 111,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 111,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 113,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 113,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: "select",
        line: 113,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 113,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 113,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 113,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 113,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 113,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 113,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 113,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 113,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 113,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 113,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 113,
    },
    Token {
        kind: Number,
        lexeme: "40",
        line: 113,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 113,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 113,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 114,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 114,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 114,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 114,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 114,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 114,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 114,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 114,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 114,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 114,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 114,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 114,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 114,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 114,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 114,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 114,
    },
    Token {
        kind: Number,
        lexeme: "40",
        line: 114,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 115,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 115,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "select",
        line: 115,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 115,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 115,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 115,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 116,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        line: 116,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 116,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 116,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 116,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 116,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 117,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 117,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "select",
        line: 117,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 117,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 117,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 117,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 117,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 117,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 117,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 117,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 117,
    },
    Token {
        kind: Number,
        lexeme: "7",
        line: 117,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 117,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 118,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 118,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 118,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 118,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 118,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 118,
    },
    Token {
        kind: Number,
        lexeme: "7",
        line: 118,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 118,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 118,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 118,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 118,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 118,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 118,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 119,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 119,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "select",
        line: 119,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 119,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 119,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 119,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 119,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 119,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 119,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 119,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 119,
    },
    Token {
        kind: Number,
        lexeme: "7",
        line: 119,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 119,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 120,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 120,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 120,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 120,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 120,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 120,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 120,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 120,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 120,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 120,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 120,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 120,
    },
    Token {
        kind: Number,
        lexeme: "7",
        line: 120,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 120,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 120,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 120,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 120,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 120,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 120,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 121,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: "select",
        line: 121,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 121,
    },
    Token {
        kind: Number,
        lexeme: "10000",
        line: 121,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 122,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: "select",
        line: 122,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 122,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 122,
    },
    Token {
        kind: Number,
        lexeme: "10000",
        line: 122,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 124,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 124,
    },
    Token {
        kind: String,
        lexeme: "'OK'",
        line: 124,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 124,
    },
]
