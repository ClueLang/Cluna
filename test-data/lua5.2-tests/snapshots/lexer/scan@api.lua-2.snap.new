---
source: src/main.rs
assertion_line: 91
expression: scanned
input_file: test-data/lua5.2-tests/api.lua
---
[
    Token {
        kind: If,
        lexeme: "if",
        line: 2,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 2,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 2,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 2,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 2,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "Message",
        line: 3,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 3,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 3,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 3,
    },
    Token {
        kind: String,
        lexeme: "'\\a\\n >>> testC not active: skipping API tests <<<\\n\\a'",
        line: 3,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 3,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 4,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 5,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 7,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "require",
        line: 7,
    },
    Token {
        kind: String,
        lexeme: "\"debug\"",
        line: 7,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 9,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 9,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 9,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "tcheck",
        line: 12,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "t1",
        line: 12,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "t2",
        line: 12,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 13,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "t1",
        line: 13,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 13,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 13,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "t2",
        line: 13,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 13,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 13,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "t2",
        line: 13,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 13,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 13,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 13,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 13,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 14,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 14,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 14,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "t1",
        line: 14,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 14,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 14,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "t1",
        line: 14,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 14,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 14,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "t2",
        line: 14,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 14,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 14,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 14,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 14,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 14,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 14,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 18,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 18,
    },
    Token {
        kind: String,
        lexeme: "'testing C API'",
        line: 18,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 20,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 20,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 20,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 20,
    },
    Token {
        kind: String,
        lexeme: "\"pushvalue R; return 1\"",
        line: 20,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 21,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 21,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 21,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "getregistry",
        line: 21,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 21,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 21,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 25,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 25,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 25,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 25,
    },
    Token {
        kind: String,
        lexeme: "\"settop 10; absindex -1; return 1\"",
        line: 25,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 25,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 25,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 25,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 26,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 26,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 26,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 26,
    },
    Token {
        kind: String,
        lexeme: "\"settop 5; absindex -5; return 1\"",
        line: 26,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 26,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 26,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 26,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 27,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 27,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 27,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 27,
    },
    Token {
        kind: String,
        lexeme: "\"settop 10; absindex 1; return 1\"",
        line: 27,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 27,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 27,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 27,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 28,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 28,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 28,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 28,
    },
    Token {
        kind: String,
        lexeme: "\"settop 10; absindex R; return 1\"",
        line: 28,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 28,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 28,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 28,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 28,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 31,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 31,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "d2s",
        line: 31,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 31,
    },
    Token {
        kind: Number,
        lexeme: "12458954321123",
        line: 31,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 32,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 32,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        line: 32,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 32,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 32,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 32,
    },
    Token {
        kind: Number,
        lexeme: "8",
        line: 32,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 33,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 33,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "s2d",
        line: 33,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 33,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 33,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 33,
    },
    Token {
        kind: Number,
        lexeme: "12458954321123",
        line: 33,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 35,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 35,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 35,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 35,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 35,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 35,
    },
    Token {
        kind: String,
        lexeme: "\"pushnum 1; pushnum 2; pushnum 3; return 2\"",
        line: 35,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 36,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 36,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 36,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 36,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 36,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 36,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 36,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 36,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 36,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 38,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 38,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "makeCfunc",
        line: 38,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 38,
    },
    Token {
        kind: String,
        lexeme: "\"pushnum 1; pushnum 2; pushnum 3; return 2\"",
        line: 38,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 39,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 39,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 39,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 40,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 40,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 40,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 40,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 40,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 40,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 40,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 40,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 40,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 43,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 43,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 43,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 43,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 43,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 43,
    },
    Token {
        kind: String,
        lexeme: "\"pushbool 1; pushbool 2; pushbool 0; return 3\"",
        line: 43,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 44,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 44,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 44,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 44,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 44,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 44,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 44,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 44,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 44,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 45,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 45,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 45,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 45,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 45,
    },
    Token {
        kind: String,
        lexeme: "\"pushbool 0; pushbool 10; pushnil;\\\n                      tobool -3; tobool -3; tobool -3; return 3\"",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 47,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 47,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 47,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 47,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 47,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 47,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 47,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 47,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 47,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 47,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 50,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 50,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 50,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 50,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 50,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 50,
    },
    Token {
        kind: String,
        lexeme: "\"gettop; return 2\"",
        line: 50,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 50,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 50,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 50,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 50,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 50,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 50,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 50,
    },
    Token {
        kind: Number,
        lexeme: "40",
        line: 50,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 51,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 51,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 51,
    },
    Token {
        kind: Number,
        lexeme: "40",
        line: 51,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 51,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 51,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 51,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 51,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 51,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 53,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 53,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 53,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 53,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 53,
    },
    Token {
        kind: String,
        lexeme: "\"settop 5; gettop; return .\"",
        line: 53,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 53,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 53,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 53,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 53,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 53,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "tcheck",
        line: 54,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 54,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 54,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 54,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 54,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 54,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 54,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 54,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 54,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 54,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 54,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 56,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 56,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 56,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 56,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 56,
    },
    Token {
        kind: String,
        lexeme: "\"settop 0; settop 15; return 10\"",
        line: 56,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 56,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 56,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 56,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 56,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 56,
    },
    Token {
        kind: Number,
        lexeme: "23",
        line: 56,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 56,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 57,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 57,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 57,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 57,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 57,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 57,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 57,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 57,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 57,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 57,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 57,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 57,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 57,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 57,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 57,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 57,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 57,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 59,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 59,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 59,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 59,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 59,
    },
    Token {
        kind: String,
        lexeme: "\"remove -2; gettop; return .\"",
        line: 59,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 59,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 59,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 59,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 59,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 59,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 59,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 59,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "tcheck",
        line: 60,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 60,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 60,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 60,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 60,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 60,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 60,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 60,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 62,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 62,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 62,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 62,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 62,
    },
    Token {
        kind: String,
        lexeme: "\"insert -1; gettop; return .\"",
        line: 62,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 62,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 62,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 62,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 62,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 62,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "tcheck",
        line: 63,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 63,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 63,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 63,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 63,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 63,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 63,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 63,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 63,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 63,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 63,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 65,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 65,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 65,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 65,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 65,
    },
    Token {
        kind: String,
        lexeme: "\"insert 3; gettop; return .\"",
        line: 65,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 65,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 65,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 65,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 65,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 65,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 65,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 65,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 65,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 65,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "tcheck",
        line: 66,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 66,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 66,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 66,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 66,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 66,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 66,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 66,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 66,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 66,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 68,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 68,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 68,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 68,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 68,
    },
    Token {
        kind: String,
        lexeme: "\"replace 2; gettop; return .\"",
        line: 68,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 68,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 68,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 68,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 68,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 68,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 68,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 68,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "tcheck",
        line: 69,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 69,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 69,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 69,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 69,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 69,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 69,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 69,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 69,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 69,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 69,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 69,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 69,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 71,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 71,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 71,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 71,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 71,
    },
    Token {
        kind: String,
        lexeme: "\"replace -2; gettop; return .\"",
        line: 71,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 71,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 71,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 71,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 71,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 71,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 71,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 71,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 71,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 71,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "tcheck",
        line: 72,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 72,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 72,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 72,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 72,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 72,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 72,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 72,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 72,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 72,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 72,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 72,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 72,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 74,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 74,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 74,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 74,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 74,
    },
    Token {
        kind: String,
        lexeme: "\"remove 3; gettop; return .\"",
        line: 74,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 74,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 74,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 74,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 74,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 74,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 74,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 74,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 74,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 74,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "tcheck",
        line: 75,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 75,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 75,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 75,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 75,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 75,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 75,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 75,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 75,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 75,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 75,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 75,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 75,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 77,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 77,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 77,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 77,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 77,
    },
    Token {
        kind: String,
        lexeme: "\"copy 3 4; gettop; return .\"",
        line: 77,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 77,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 77,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 77,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 77,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 77,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 77,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 77,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 77,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 77,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "tcheck",
        line: 78,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 78,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 78,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 78,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 78,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 78,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 78,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 78,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 78,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 78,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 78,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 78,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 78,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 78,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 78,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 80,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 80,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 80,
    },
    Token {
        kind: String,
        lexeme: "\"copy -3 -1; gettop; return .\"",
        line: 80,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 80,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 80,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 80,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 80,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 80,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 80,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 80,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "tcheck",
        line: 81,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 81,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 81,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 81,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 81,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 81,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 81,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 81,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 81,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 81,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 81,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 81,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 81,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 81,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 81,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 86,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 86,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 86,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 86,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 86,
    },
    Token {
        kind: String,
        lexeme: "\"insert 3; pushvalue 3; remove 3; pushvalue 2; remove 2; \\\n                  insert 2; pushvalue 1; remove 1; insert 1; \\\n      insert -2; pushvalue -2; remove -3; gettop; return .\"",
        line: 88,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 88,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 89,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 89,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 89,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 89,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 89,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 89,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 89,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 89,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 89,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 89,
    },
    Token {
        kind: Number,
        lexeme: "40",
        line: 89,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 89,
    },
    Token {
        kind: Number,
        lexeme: "90",
        line: 89,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 89,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: "tcheck",
        line: 90,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 90,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 90,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 90,
    },
    Token {
        kind: Number,
        lexeme: "7",
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 90,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 90,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 90,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 90,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 90,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 90,
    },
    Token {
        kind: Number,
        lexeme: "40",
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 90,
    },
    Token {
        kind: Number,
        lexeme: "90",
        line: 90,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 90,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 92,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 92,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 92,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 92,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 92,
    },
    Token {
        kind: String,
        lexeme: "\"concat 5; gettop; return .\"",
        line: 92,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 92,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 92,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 92,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 92,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 92,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 92,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 92,
    },
    Token {
        kind: String,
        lexeme: "\"joao\"",
        line: 92,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 92,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 92,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 92,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "tcheck",
        line: 93,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 93,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 93,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 93,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 93,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 93,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 93,
    },
    Token {
        kind: String,
        lexeme: "\"alo23joao12\"",
        line: 93,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 93,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 96,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 96,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 96,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 96,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 96,
    },
    Token {
        kind: String,
        lexeme: "\"call 2,-1; gettop; return .\"",
        line: 96,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 96,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 97,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 97,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 97,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 97,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 97,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 97,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 97,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 97,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 97,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 97,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 97,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 97,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 97,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 97,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 97,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 97,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 97,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 97,
    },
    Token {
        kind: String,
        lexeme: "\"joao\"",
        line: 97,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 97,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "tcheck",
        line: 98,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 98,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 98,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 98,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 98,
    },
    Token {
        kind: Number,
        lexeme: "6",
        line: 98,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 98,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 98,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 98,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 98,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 98,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 98,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 98,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 98,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 98,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 98,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 98,
    },
    Token {
        kind: String,
        lexeme: "\"joao\"",
        line: 98,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 98,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 98,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 100,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 101,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 101,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 101,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 101,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 102,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 102,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 102,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 102,
    },
    Token {
        kind: Number,
        lexeme: "1000",
        line: 102,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 102,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 102,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 102,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 102,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 102,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 102,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 102,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 102,
    },
    Token {
        kind: Number,
        lexeme: "999",
        line: 102,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 102,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 102,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 102,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 103,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 103,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 103,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 103,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[pcall 1 -1; pop 1; tostring -1; return 1]]",
        line: 103,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 104,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 104,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 104,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 105,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 105,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 105,
    },
    Token {
        kind: String,
        lexeme: "\"10\"",
        line: 105,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 105,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 110,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 110,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 110,
    },
    Token {
        kind: Number,
        lexeme: "14",
        line: 110,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 110,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 110,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 110,
    },
    Token {
        kind: String,
        lexeme: "\"a31\"",
        line: 110,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 111,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 111,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 111,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 111,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\n  getglobal a;\n  getglobal b;\n  getglobal b;\n  setglobal a;\n  gettop;\n  return .\n]]",
        line: 118,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 119,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 119,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 119,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 119,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 119,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 119,
    },
    Token {
        kind: Number,
        lexeme: "14",
        line: 119,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 119,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 119,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 119,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 119,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 119,
    },
    Token {
        kind: String,
        lexeme: "\"a31\"",
        line: 119,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 119,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 119,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 119,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 119,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 119,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 119,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 119,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 119,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 119,
    },
    Token {
        kind: String,
        lexeme: "\"a31\"",
        line: 119,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 123,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 123,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 123,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 123,
    },
    Token {
        kind: String,
        lexeme: "\"pushnum 10; pushnum 20; arith /; return 1\"",
        line: 123,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 123,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 123,
    },
    Token {
        kind: Number,
        lexeme: "0.5",
        line: 123,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 124,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 124,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 124,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 124,
    },
    Token {
        kind: String,
        lexeme: "\"pushnum 10; pushnum 20; arith -; return 1\"",
        line: 124,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 124,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 124,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 124,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 124,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 125,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 125,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 125,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 125,
    },
    Token {
        kind: String,
        lexeme: "\"pushnum 10; pushnum -20; arith *; return 1\"",
        line: 125,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 125,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 125,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 125,
    },
    Token {
        kind: Number,
        lexeme: "200",
        line: 125,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 126,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 126,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 126,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 126,
    },
    Token {
        kind: String,
        lexeme: "\"pushnum 10; pushnum 3; arith ^; return 1\"",
        line: 126,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 126,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 126,
    },
    Token {
        kind: Number,
        lexeme: "1000",
        line: 126,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 127,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 127,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 127,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 127,
    },
    Token {
        kind: String,
        lexeme: "\"pushnum 10; pushstring 20; arith /; return 1\"",
        line: 127,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 127,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 127,
    },
    Token {
        kind: Number,
        lexeme: "0.5",
        line: 127,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 128,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 128,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 128,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 128,
    },
    Token {
        kind: String,
        lexeme: "\"pushstring 10; pushnum 20; arith -; return 1\"",
        line: 128,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 128,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 128,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 128,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 128,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 129,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 129,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 129,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 129,
    },
    Token {
        kind: String,
        lexeme: "\"pushstring 10; pushstring -20; arith *; return 1\"",
        line: 129,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 129,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 129,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 129,
    },
    Token {
        kind: Number,
        lexeme: "200",
        line: 129,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 130,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 130,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 130,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 130,
    },
    Token {
        kind: String,
        lexeme: "\"pushstring 10; pushstring 3; arith ^; return 1\"",
        line: 130,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 130,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 130,
    },
    Token {
        kind: Number,
        lexeme: "1000",
        line: 130,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 131,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 131,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 131,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 131,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 131,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 131,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[pushnum 1;\n                  pushstring 10; arith _;\n                  pushstring 5; return 3]]",
        line: 133,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 134,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 134,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 134,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 134,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 134,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 134,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 134,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 134,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 134,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 134,
    },
    Token {
        kind: String,
        lexeme: "\"5\"",
        line: 134,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "mt",
        line: 135,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 135,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "__add",
        line: 135,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 135,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 135,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 135,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 135,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 135,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 135,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 135,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 135,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 135,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 135,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 135,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 135,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 135,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 135,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 135,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 135,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "mt",
        line: 135,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 135,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 135,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "__mod",
        line: 136,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 136,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 136,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 136,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 136,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 136,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 136,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 136,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 136,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 136,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 136,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 136,
    },
    Token {
        kind: Percent,
        lexeme: "%",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 136,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 136,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 136,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 136,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 136,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "mt",
        line: 136,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 136,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 136,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "__unm",
        line: 137,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 137,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 137,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 137,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 137,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 137,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 137,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 137,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 137,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 137,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 137,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 137,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 137,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 137,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "mt",
        line: 137,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 137,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 137,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 138,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 138,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 138,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 138,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 138,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 138,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 138,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 138,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "mt",
        line: 138,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 138,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 139,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 139,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 139,
    },
    Token {
        kind: Number,
        lexeme: "8",
        line: 139,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 139,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "mt",
        line: 139,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 139,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 140,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 140,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 140,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 140,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 140,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 140,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "mt",
        line: 140,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 141,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 141,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        line: 141,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 141,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 141,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 141,
    },
    Token {
        kind: String,
        lexeme: "\"arith +; return 2\"",
        line: 141,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 141,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 141,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 141,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 141,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 142,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 142,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 142,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 142,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 142,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 142,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 142,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 142,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 142,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 142,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        line: 142,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 142,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 142,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 143,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 143,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 143,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 143,
    },
    Token {
        kind: String,
        lexeme: "\"arith %; return 1\"",
        line: 143,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 143,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 143,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 143,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 143,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 143,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 143,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 143,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 143,
    },
    Token {
        kind: Percent,
        lexeme: "%",
        line: 143,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 143,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 143,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 144,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 144,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 144,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 144,
    },
    Token {
        kind: String,
        lexeme: "\"arith _; arith +; arith %; return 1\"",
        line: 144,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 144,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 144,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 144,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 144,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 144,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 144,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 144,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 144,
    },
    Token {
        kind: Number,
        lexeme: "8",
        line: 145,
    },
    Token {
        kind: Percent,
        lexeme: "%",
        line: 145,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 145,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 145,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 145,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 145,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 145,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 145,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 145,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 145,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 145,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 145,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 152,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 152,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 152,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 152,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 152,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 152,
    },
    Token {
        kind: String,
        lexeme: "\"compare 2 5 1, return 1\"",
        line: 152,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 152,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 152,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 152,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 152,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 152,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 152,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 152,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 152,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 152,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 152,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 152,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 152,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 152,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 152,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 153,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 153,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 153,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 153,
    },
    Token {
        kind: String,
        lexeme: "\"compare 2 5 2, return 1\"",
        line: 153,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 153,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 153,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 153,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 153,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 153,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 153,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 153,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 153,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 153,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 153,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 153,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 153,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 153,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 154,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 154,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 154,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 154,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 154,
    },
    Token {
        kind: String,
        lexeme: "\"compare 3 4 1, return 1\"",
        line: 154,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 154,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 154,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 154,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 154,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 154,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 154,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 154,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 154,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 154,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 154,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 154,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 154,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 154,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 155,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 155,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 155,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 155,
    },
    Token {
        kind: String,
        lexeme: "\"compare 3 4 2, return 1\"",
        line: 155,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 155,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 155,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 155,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 155,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 155,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 155,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 155,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 155,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 155,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 155,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 155,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 155,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 155,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 156,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 156,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 156,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 156,
    },
    Token {
        kind: String,
        lexeme: "\"compare 5 2 1, return 1\"",
        line: 156,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 156,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 156,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 156,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 156,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 156,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 156,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 156,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 156,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 156,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 156,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 156,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 156,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 156,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 157,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 157,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 157,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 157,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 157,
    },
    Token {
        kind: String,
        lexeme: "\"compare 2 -3 1, return 1\"",
        line: 157,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 157,
    },
    Token {
        kind: String,
        lexeme: "\"4\"",
        line: 157,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 157,
    },
    Token {
        kind: String,
        lexeme: "\"2\"",
        line: 157,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 157,
    },
    Token {
        kind: String,
        lexeme: "\"2\"",
        line: 157,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 157,
    },
    Token {
        kind: String,
        lexeme: "\"3\"",
        line: 157,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 157,
    },
    Token {
        kind: String,
        lexeme: "\"2\"",
        line: 157,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 157,
    },
    Token {
        kind: String,
        lexeme: "\"2\"",
        line: 157,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 157,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 158,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 158,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 158,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 158,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 158,
    },
    Token {
        kind: String,
        lexeme: "\"compare -3 2 1, return 1\"",
        line: 158,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 158,
    },
    Token {
        kind: String,
        lexeme: "\"3\"",
        line: 158,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 158,
    },
    Token {
        kind: String,
        lexeme: "\"2\"",
        line: 158,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 158,
    },
    Token {
        kind: String,
        lexeme: "\"2\"",
        line: 158,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 158,
    },
    Token {
        kind: String,
        lexeme: "\"4\"",
        line: 158,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 158,
    },
    Token {
        kind: String,
        lexeme: "\"2\"",
        line: 158,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 158,
    },
    Token {
        kind: String,
        lexeme: "\"2\"",
        line: 158,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 158,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 161,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 161,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 161,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 161,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 161,
    },
    Token {
        kind: String,
        lexeme: "\"compare 1 4 1, return 1\"",
        line: 161,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 161,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 162,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 162,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 162,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 162,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 162,
    },
    Token {
        kind: String,
        lexeme: "\"compare 9 1 2, return 1\"",
        line: 162,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 162,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 163,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 163,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 163,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 163,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 163,
    },
    Token {
        kind: String,
        lexeme: "\"compare 9 9 0, return 1\"",
        line: 163,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 163,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 163,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 165,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 165,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: "__lt",
        line: 165,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 165,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 165,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 165,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 165,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 165,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 165,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 165,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 165,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 165,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 165,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 165,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 165,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 165,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 165,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 165,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: "a1",
        line: 166,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: "a3",
        line: 166,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: "a4",
        line: 166,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 166,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 166,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 166,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 166,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 166,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 166,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 166,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 167,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 167,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 167,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 167,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 167,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 167,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 167,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 168,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 168,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 168,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 168,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 168,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 168,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 168,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 168,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 169,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 169,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 169,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 169,
    },
    Token {
        kind: String,
        lexeme: "\"compare 2 5 1, return 1\"",
        line: 169,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: "a3",
        line: 169,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 169,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 169,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 169,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 169,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: "a4",
        line: 169,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 169,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 169,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 169,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 169,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 169,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 170,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 170,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 170,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 170,
    },
    Token {
        kind: String,
        lexeme: "\"compare 2 5 2, return 1\"",
        line: 170,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: "a3",
        line: 170,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 170,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 170,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 170,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 170,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: "a4",
        line: 170,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 170,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 170,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 170,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 170,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 170,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 171,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 171,
    },
    Token {
        kind: String,
        lexeme: "\"compare 5 -6 1, return 1\"",
        line: 171,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: "a4",
        line: 171,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 171,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 171,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 171,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 171,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: "a3",
        line: 171,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 171,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 171,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 171,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 172,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 172,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 172,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 172,
    },
    Token {
        kind: String,
        lexeme: "\"compare 5 -6 1, return 2\"",
        line: 172,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "a1",
        line: 172,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 172,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 172,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 172,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 172,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "a3",
        line: 172,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 172,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 172,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 172,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 173,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 173,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 173,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 173,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 173,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 173,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 173,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 174,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 174,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 174,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 174,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 174,
    },
    Token {
        kind: String,
        lexeme: "\"compare 5 -6 2, return 2\"",
        line: 174,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: "a1",
        line: 174,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 174,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 174,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 174,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 174,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: "a3",
        line: 174,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 174,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 174,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 174,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 174,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 175,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 175,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 175,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 175,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 175,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 175,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 175,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 176,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 176,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 176,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 176,
    },
    Token {
        kind: String,
        lexeme: "\"compare 5 -6 2, return 2\"",
        line: 176,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "a1",
        line: 176,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 176,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 176,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 176,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 176,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "a1",
        line: 176,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 176,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 176,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 176,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 177,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 177,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 177,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 177,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 177,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 177,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 177,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 177,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 180,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 180,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 180,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 180,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 180,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 180,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 180,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "__len",
        line: 180,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 180,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 180,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 180,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 180,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 180,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 181,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 181,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 181,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 181,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 181,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 181,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\n   len 2;\n   Llen 2;\n   objsize 2;\n   return 3\n]]",
        line: 186,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 186,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 187,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 187,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 187,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 187,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 187,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 187,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 187,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 187,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 187,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 187,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 189,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 189,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 189,
    },
    Token {
        kind: String,
        lexeme: "\"234\"",
        line: 189,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 189,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 189,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 189,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 189,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 189,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 190,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 190,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 190,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 190,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 190,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 190,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\n   len 2;\n   Llen 2;\n   objsize 2;\n   return 3\n]]",
        line: 195,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 195,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 195,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 195,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 196,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 196,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 196,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 196,
    },
    Token {
        kind: String,
        lexeme: "\"234\"",
        line: 196,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 196,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 196,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 196,
    },
    Token {
        kind: Number,
        lexeme: "234",
        line: 196,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 196,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 196,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 196,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 196,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 196,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 198,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 198,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 198,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 198,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 198,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 198,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 198,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 198,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 199,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 199,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 199,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 199,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 199,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 199,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 199,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 199,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\n   len 2;\n   objsize 2;\n   return 2\n]]",
        line: 203,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 203,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 204,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 204,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 204,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 204,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 204,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 204,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 209,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 209,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 209,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 209,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 209,
    },
    Token {
        kind: String,
        lexeme: "\"u\"",
        line: 209,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 209,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 209,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "__concat",
        line: 209,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 209,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 209,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 209,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 209,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 209,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 209,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 209,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 209,
    },
    Token {
        kind: String,
        lexeme: "'.'",
        line: 209,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 209,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 209,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 209,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 209,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 210,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 210,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 210,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 210,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 210,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\n  pushnum 5\n  pushvalue 2;\n  pushvalue 2;\n  concat 2;\n  pushvalue -2;\n  return 2;\n]]",
        line: 217,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 217,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 217,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 218,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 218,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 218,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 218,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 218,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 218,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 218,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 218,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 218,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 218,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 218,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 218,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 221,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 221,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 221,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 221,
    },
    Token {
        kind: String,
        lexeme: "\"concat 0; return 1\"",
        line: 221,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 221,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 221,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 221,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 224,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 224,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 224,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 224,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 224,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 224,
    },
    Token {
        kind: String,
        lexeme: "\"concat 1; return 1\"",
        line: 224,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 224,
    },
    Token {
        kind: String,
        lexeme: "\"xuxu\"",
        line: 224,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 224,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 224,
    },
    Token {
        kind: String,
        lexeme: "\"xuxu\"",
        line: 224,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 224,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: "B",
        line: 230,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 230,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 230,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 230,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 230,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 230,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 230,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 230,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 230,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: "count",
        line: 232,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 232,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 232,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 233,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 233,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 233,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 233,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 234,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 234,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\n    isnumber %d;\n    isstring %d;\n    isfunction %d;\n    iscfunction %d;\n    istable %d;\n    isuserdata %d;\n    isnil %d;\n    isnull %d;\n    return 8\n  ]]",
        line: 244,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 245,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 245,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 245,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 245,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 245,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 245,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 245,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 245,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 245,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 245,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 245,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 245,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 245,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 246,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 246,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 246,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 246,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 246,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 246,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "g",
        line: 246,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "h",
        line: 246,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 246,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 246,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 246,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 246,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 246,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "B",
        line: 247,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 247,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 247,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "B",
        line: 247,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 247,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 247,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "B",
        line: 247,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 247,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 247,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "B",
        line: 247,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 247,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 247,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "B",
        line: 247,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 247,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 247,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "B",
        line: 247,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 247,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 247,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "B",
        line: 247,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "g",
        line: 247,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 247,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 247,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 247,
    },
    Token {
        kind: Number,
        lexeme: "100",
        line: 247,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "B",
        line: 247,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "h",
        line: 247,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 247,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 247,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 250,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: "count",
        line: 250,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 250,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 250,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 250,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 250,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 250,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 251,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: "count",
        line: 251,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 251,
    },
    Token {
        kind: String,
        lexeme: "'alo'",
        line: 251,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 251,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 251,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 251,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 252,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: "count",
        line: 252,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 252,
    },
    Token {
        kind: String,
        lexeme: "'32'",
        line: 252,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 252,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 252,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 252,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 253,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: "count",
        line: 253,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 253,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 253,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 253,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 253,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 253,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 253,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 254,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: "count",
        line: 254,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 254,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 254,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 254,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 254,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 255,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: "count",
        line: 255,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 255,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 255,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 255,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 255,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 255,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 255,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 255,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 255,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 256,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 256,
    },
    Token {
        kind: Identifier,
        lexeme: "count",
        line: 256,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 256,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 256,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 256,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 256,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 256,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 256,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 257,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 257,
    },
    Token {
        kind: Identifier,
        lexeme: "count",
        line: 257,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 257,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 257,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 257,
    },
    Token {
        kind: Identifier,
        lexeme: "stdin",
        line: 257,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 257,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 257,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 257,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 257,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 258,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: "count",
        line: 258,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 258,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 258,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 258,
    },
    Token {
        kind: Number,
        lexeme: "15",
        line: 258,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 258,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 258,
    },
    Token {
        kind: Number,
        lexeme: "100",
        line: 258,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 258,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 263,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 263,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 263,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 263,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 264,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 264,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 264,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 264,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 264,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 265,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 265,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 265,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 265,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 265,
    },
    Token {
        kind: String,
        lexeme: "\"%s %d; return 1\"",
        line: 265,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 265,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 265,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 265,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 265,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 265,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 266,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 268,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 268,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 268,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 268,
    },
    Token {
        kind: String,
        lexeme: "\"tostring\"",
        line: 268,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 268,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 268,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 268,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 268,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 268,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 268,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 268,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 269,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 269,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 269,
    },
    Token {
        kind: String,
        lexeme: "\"tostring\"",
        line: 269,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 269,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 269,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 269,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 269,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 269,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 270,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 270,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 270,
    },
    Token {
        kind: String,
        lexeme: "\"tostring\"",
        line: 270,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 270,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 270,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 270,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 270,
    },
    Token {
        kind: String,
        lexeme: "\"12\"",
        line: 270,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 271,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 271,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 271,
    },
    Token {
        kind: String,
        lexeme: "\"tostring\"",
        line: 271,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 271,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 271,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 271,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 271,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 271,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 271,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 271,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 272,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 272,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 272,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 272,
    },
    Token {
        kind: String,
        lexeme: "\"objsize\"",
        line: 272,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 272,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 272,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 272,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 272,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 272,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 272,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 272,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 273,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 273,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 273,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 273,
    },
    Token {
        kind: String,
        lexeme: "\"objsize\"",
        line: 273,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 273,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 273,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 273,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 273,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 273,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 273,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 273,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 273,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 273,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 273,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 273,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 273,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 274,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 274,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 274,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 274,
    },
    Token {
        kind: String,
        lexeme: "\"objsize\"",
        line: 274,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 274,
    },
    Token {
        kind: String,
        lexeme: "\"alo\\0\\0a\"",
        line: 274,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 274,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 274,
    },
    Token {
        kind: Number,
        lexeme: "6",
        line: 274,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 274,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 275,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 275,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 275,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 275,
    },
    Token {
        kind: String,
        lexeme: "\"objsize\"",
        line: 275,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 275,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 275,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 275,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 275,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 275,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 275,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 275,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 275,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 275,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 275,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 275,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 276,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 276,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 276,
    },
    Token {
        kind: String,
        lexeme: "\"objsize\"",
        line: 276,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 276,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 276,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 276,
    },
    Token {
        kind: Number,
        lexeme: "101",
        line: 276,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 276,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 276,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 276,
    },
    Token {
        kind: Number,
        lexeme: "101",
        line: 276,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 277,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 277,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 277,
    },
    Token {
        kind: String,
        lexeme: "\"objsize\"",
        line: 277,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 277,
    },
    Token {
        kind: Number,
        lexeme: "124",
        line: 277,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 277,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 277,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 277,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 278,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 278,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 278,
    },
    Token {
        kind: String,
        lexeme: "\"objsize\"",
        line: 278,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 278,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 278,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 278,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 278,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 278,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 279,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 279,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 279,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 279,
    },
    Token {
        kind: String,
        lexeme: "\"tonumber\"",
        line: 279,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 279,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 279,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 279,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 279,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 279,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 279,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 279,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 280,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 280,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 280,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 280,
    },
    Token {
        kind: String,
        lexeme: "\"tonumber\"",
        line: 280,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 280,
    },
    Token {
        kind: String,
        lexeme: "\"12\"",
        line: 280,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 280,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 280,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 280,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 280,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 281,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 281,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 281,
    },
    Token {
        kind: String,
        lexeme: "\"tonumber\"",
        line: 281,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 281,
    },
    Token {
        kind: String,
        lexeme: "\"s2\"",
        line: 281,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 281,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 281,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 281,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 282,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 282,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 282,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 282,
    },
    Token {
        kind: String,
        lexeme: "\"tonumber\"",
        line: 282,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 282,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 282,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 282,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 282,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 282,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 282,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 282,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 282,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 283,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 283,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 283,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 283,
    },
    Token {
        kind: String,
        lexeme: "\"topointer\"",
        line: 283,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 283,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 283,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 283,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 283,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 283,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 283,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 284,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 284,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 284,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 284,
    },
    Token {
        kind: String,
        lexeme: "\"topointer\"",
        line: 284,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 284,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 284,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 284,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 284,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 284,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 284,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 285,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 285,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 285,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 285,
    },
    Token {
        kind: String,
        lexeme: "\"topointer\"",
        line: 285,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 285,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 285,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 285,
    },
    Token {
        kind: Identifier,
        lexeme: "pushuserdata",
        line: 285,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 285,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 285,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 285,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 285,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 285,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 285,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 285,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 286,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 286,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 286,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 286,
    },
    Token {
        kind: String,
        lexeme: "\"topointer\"",
        line: 286,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 286,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 286,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 286,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 286,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 286,
    },
    Token {
        kind: NotEquals,
        lexeme: "~=",
        line: 286,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 286,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 286,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 287,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 287,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 287,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 287,
    },
    Token {
        kind: String,
        lexeme: "\"func2num\"",
        line: 287,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 287,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 287,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 287,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 287,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 287,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 287,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 288,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 288,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 288,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 288,
    },
    Token {
        kind: String,
        lexeme: "\"func2num\"",
        line: 288,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 288,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 288,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 288,
    },
    Token {
        kind: Identifier,
        lexeme: "pushuserdata",
        line: 288,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 288,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 288,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 288,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 288,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 288,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 288,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 288,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 289,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 289,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 289,
    },
    Token {
        kind: String,
        lexeme: "\"func2num\"",
        line: 289,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 289,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 289,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 289,
    },
    Token {
        kind: NotEquals,
        lexeme: "~=",
        line: 289,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 289,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 290,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 290,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 290,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 290,
    },
    Token {
        kind: String,
        lexeme: "\"tocfunction\"",
        line: 290,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 290,
    },
    Token {
        kind: Identifier,
        lexeme: "math",
        line: 290,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 290,
    },
    Token {
        kind: Identifier,
        lexeme: "deg",
        line: 290,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 290,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 291,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 291,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 291,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 291,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 291,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 291,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 291,
    },
    Token {
        kind: Identifier,
        lexeme: "math",
        line: 291,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 291,
    },
    Token {
        kind: Identifier,
        lexeme: "deg",
        line: 291,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 291,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 291,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 291,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 291,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 291,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 291,
    },
    Token {
        kind: Identifier,
        lexeme: "math",
        line: 291,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 291,
    },
    Token {
        kind: Identifier,
        lexeme: "deg",
        line: 291,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 291,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 296,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 297,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 297,
    },
    Token {
        kind: String,
        lexeme: "\"stop\"",
        line: 297,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 297,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 298,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 298,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 298,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 298,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 298,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 298,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 298,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 298,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 298,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 298,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 298,
    },
    Token {
        kind: String,
        lexeme: "\"checkstack 1000023 XXXX\"",
        line: 298,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 298,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 299,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 299,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 299,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 299,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 299,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 299,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 299,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 299,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 299,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 299,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 299,
    },
    Token {
        kind: String,
        lexeme: "\"XXXX\"",
        line: 299,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 299,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 299,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 300,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 300,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 300,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 300,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 300,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 300,
    },
    Token {
        kind: String,
        lexeme: "\"pushnil;checkstack 1 XX;\"",
        line: 300,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 300,
    },
    Token {
        kind: Number,
        lexeme: "1000000",
        line: 300,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 300,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 301,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 301,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 301,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 301,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 301,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 301,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 301,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 301,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 301,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 301,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 301,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 301,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 302,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 302,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 302,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 302,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 302,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 302,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 302,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 302,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 302,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 302,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 302,
    },
    Token {
        kind: String,
        lexeme: "\"XX\"",
        line: 302,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 302,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 302,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 303,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 303,
    },
    Token {
        kind: String,
        lexeme: "\"restart\"",
        line: 303,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 303,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 304,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 306,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 306,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 306,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 306,
    },
    Token {
        kind: String,
        lexeme: "\"checkstack 30000 msg\"",
        line: 306,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 306,
    },
    Token {
        kind: String,
        lexeme: "\"newtable\"",
        line: 306,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 306,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 307,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 307,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 307,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 307,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 307,
    },
    Token {
        kind: Number,
        lexeme: "12000",
        line: 307,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 307,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 308,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 308,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 308,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 308,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 308,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 308,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 308,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 308,
    },
    Token {
        kind: String,
        lexeme: "\"pushnum \"",
        line: 308,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 308,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 308,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 309,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 309,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 309,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 309,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 309,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 309,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 309,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 309,
    },
    Token {
        kind: String,
        lexeme: "\"pushnum \"",
        line: 309,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 309,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 309,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 309,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 309,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 310,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 312,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 312,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 312,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 312,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 312,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 312,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 312,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 312,
    },
    Token {
        kind: String,
        lexeme: "\"rawgeti R 2\"",
        line: 312,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 313,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 313,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 313,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 313,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 313,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 313,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 313,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 313,
    },
    Token {
        kind: String,
        lexeme: "\"insert \"",
        line: 313,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 313,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 313,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 313,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 313,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 313,
    },
    Token {
        kind: Number,
        lexeme: "12000",
        line: 313,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 313,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 313,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 313,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 315,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 315,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 315,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 315,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 315,
    },
    Token {
        kind: Number,
        lexeme: "12000",
        line: 315,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 315,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 316,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 316,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 316,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 316,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 316,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 316,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 316,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 316,
    },
    Token {
        kind: String,
        lexeme: "\"settable \"",
        line: 316,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 316,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 316,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 316,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 316,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 316,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 316,
    },
    Token {
        kind: Number,
        lexeme: "12000",
        line: 316,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 316,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 316,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 316,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 316,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 316,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 316,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 316,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 316,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 317,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 319,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 319,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 319,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 319,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 319,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 319,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 319,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 319,
    },
    Token {
        kind: String,
        lexeme: "\"return 2\"",
        line: 319,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 321,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 321,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 321,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 321,
    },
    Token {
        kind: Identifier,
        lexeme: "concat",
        line: 321,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 321,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 321,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 321,
    },
    Token {
        kind: String,
        lexeme: "\";\"",
        line: 321,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 321,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 322,
    },
    Token {
        kind: Identifier,
        lexeme: "g",
        line: 322,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 322,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 322,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 322,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 322,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 322,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 322,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 322,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 322,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 322,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 323,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 323,
    },
    Token {
        kind: Identifier,
        lexeme: "g",
        line: 323,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 323,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 323,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 323,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 324,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 324,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 324,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 324,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 324,
    },
    Token {
        kind: Number,
        lexeme: "12000",
        line: 324,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 324,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 324,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 324,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 324,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 324,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 324,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 324,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 324,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 324,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 324,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 324,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 324,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 324,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 324,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 324,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 324,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 324,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 324,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 324,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 324,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 325,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 325,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        line: 325,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 325,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 325,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 325,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 325,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 325,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 325,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 326,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 326,
    },
    Token {
        kind: Identifier,
        lexeme: "g",
        line: 326,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 326,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 326,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 326,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 326,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 330,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 330,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 330,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 330,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 330,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 330,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\n  loadstring 2; pcall 0,1;\n  pushvalue 3; insert -2; pcall 1, 1;\n  pcall 0, 0;\n  return 1\n]]",
        line: 335,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 335,
    },
    Token {
        kind: String,
        lexeme: "\"x=150\"",
        line: 335,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 335,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 335,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 335,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 335,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 335,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 335,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 335,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 335,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 335,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 335,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 335,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 335,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 335,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 335,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 335,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 335,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 337,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 337,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 337,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 337,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 337,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 337,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 337,
    },
    Token {
        kind: String,
        lexeme: "'string'",
        line: 337,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 337,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 337,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 337,
    },
    Token {
        kind: Number,
        lexeme: "150",
        line: 337,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 337,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 339,
    },
    Token {
        kind: Identifier,
        lexeme: "check3",
        line: 339,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 339,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 339,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 339,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 339,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 339,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: "arg",
        line: 340,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 340,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 340,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 340,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 341,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 341,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 341,
    },
    Token {
        kind: Identifier,
        lexeme: "arg",
        line: 341,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 341,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 341,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 341,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 342,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 342,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 342,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: "arg",
        line: 342,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 342,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 342,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 342,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 342,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 342,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 342,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 343,
    },
    Token {
        kind: Identifier,
        lexeme: "check3",
        line: 344,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 344,
    },
    Token {
        kind: String,
        lexeme: "\":1:\"",
        line: 344,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 344,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 344,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 344,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 344,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 344,
    },
    Token {
        kind: String,
        lexeme: "\"loadstring 2; gettop; return .\"",
        line: 344,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 344,
    },
    Token {
        kind: String,
        lexeme: "\"x=\"",
        line: 344,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 344,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 344,
    },
    Token {
        kind: Identifier,
        lexeme: "check3",
        line: 345,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 345,
    },
    Token {
        kind: String,
        lexeme: "\"cannot read\"",
        line: 345,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 345,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 345,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 345,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 345,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 345,
    },
    Token {
        kind: String,
        lexeme: "\"loadfile 2; gettop; return .\"",
        line: 345,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 345,
    },
    Token {
        kind: String,
        lexeme: "\".\"",
        line: 345,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 345,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 345,
    },
    Token {
        kind: Identifier,
        lexeme: "check3",
        line: 346,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 346,
    },
    Token {
        kind: String,
        lexeme: "\"cannot open xxxx\"",
        line: 346,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 346,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 346,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 346,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 346,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 346,
    },
    Token {
        kind: String,
        lexeme: "\"loadfile 2; gettop; return .\"",
        line: 346,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 346,
    },
    Token {
        kind: String,
        lexeme: "\"xxxx\"",
        line: 346,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 346,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 346,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 349,
    },
    Token {
        kind: Identifier,
        lexeme: "checkerrnopro",
        line: 349,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 349,
    },
    Token {
        kind: Identifier,
        lexeme: "code",
        line: 349,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 349,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 349,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 349,
    },
    Token {
        kind: Identifier,
        lexeme: "L",
        line: 350,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 350,
    },
    Token {
        kind: Identifier,
        lexeme: "coroutine",
        line: 350,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 350,
    },
    Token {
        kind: Identifier,
        lexeme: "create",
        line: 350,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 350,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 350,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 350,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 350,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 350,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 350,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 351,
    },
    Token {
        kind: Identifier,
        lexeme: "stt",
        line: 351,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 351,
    },
    Token {
        kind: Identifier,
        lexeme: "err",
        line: 351,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 351,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 351,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 351,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 351,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 351,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 351,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 351,
    },
    Token {
        kind: Identifier,
        lexeme: "code",
        line: 351,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 351,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 352,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 352,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 352,
    },
    Token {
        kind: Identifier,
        lexeme: "stt",
        line: 352,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 352,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 352,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 352,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 352,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 352,
    },
    Token {
        kind: Identifier,
        lexeme: "err",
        line: 352,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 352,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 352,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 352,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 352,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 353,
    },
    Token {
        kind: Identifier,
        lexeme: "checkerrnopro",
        line: 355,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 355,
    },
    Token {
        kind: String,
        lexeme: "\"pushnum 3; call 0 0\"",
        line: 355,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 355,
    },
    Token {
        kind: String,
        lexeme: "\"attempt to call\"",
        line: 355,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 355,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 356,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 356,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 356,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 356,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 356,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 356,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 356,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 356,
    },
    Token {
        kind: Identifier,
        lexeme: "checkerrnopro",
        line: 357,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 357,
    },
    Token {
        kind: String,
        lexeme: "\"getglobal 'f'; call 0 0;\"",
        line: 357,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 357,
    },
    Token {
        kind: String,
        lexeme: "\"stack overflow\"",
        line: 357,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 357,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 362,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 362,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 362,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 362,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 362,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 362,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 362,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 362,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 362,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 362,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 362,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 363,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 363,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 363,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 363,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 363,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 363,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 363,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 363,
    },
    Token {
        kind: String,
        lexeme: "\"gettable 2; pushvalue 4; gettable 2; return 2\"",
        line: 363,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 363,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 364,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 364,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 364,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 364,
    },
    Token {
        kind: String,
        lexeme: "\"y\"",
        line: 364,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 364,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 364,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 364,
    },
    Token {
        kind: String,
        lexeme: "\"x\"",
        line: 364,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 364,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 365,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 365,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 365,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 365,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 365,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 365,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 365,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 365,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 365,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 365,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 366,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 366,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 366,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 366,
    },
    Token {
        kind: String,
        lexeme: "\"settable -5\"",
        line: 366,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 366,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 366,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 366,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 366,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 366,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 366,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 366,
    },
    Token {
        kind: String,
        lexeme: "\"x\"",
        line: 366,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 366,
    },
    Token {
        kind: Number,
        lexeme: "15",
        line: 366,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 366,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 367,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 367,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 367,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 367,
    },
    Token {
        kind: Number,
        lexeme: "15",
        line: 367,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 368,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 368,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 368,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 369,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 369,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 369,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 369,
    },
    Token {
        kind: String,
        lexeme: "\"gettable 2; return 1\"",
        line: 369,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 369,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 370,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 370,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 370,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 370,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 370,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 370,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 371,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 371,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 371,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 371,
    },
    Token {
        kind: String,
        lexeme: "\"settable 2\"",
        line: 371,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 371,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 371,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 371,
    },
    Token {
        kind: String,
        lexeme: "\"x\"",
        line: 371,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 371,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 372,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 372,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 372,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 372,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 372,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 372,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 372,
    },
    Token {
        kind: String,
        lexeme: "\"x\"",
        line: 372,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 372,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 374,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 374,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 374,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 374,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 374,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 374,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 374,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 374,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 374,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 374,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 374,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 374,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 374,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 375,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 375,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 375,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 375,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 375,
    },
    Token {
        kind: Identifier,
        lexeme: "__index",
        line: 375,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 375,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 375,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 375,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 375,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 375,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 375,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 375,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 375,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 375,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 375,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 375,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 375,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 375,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 375,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 375,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 376,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 376,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 376,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 376,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 376,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 376,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 376,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 376,
    },
    Token {
        kind: String,
        lexeme: "\"gettable 3, return 2\"",
        line: 376,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 376,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 376,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 376,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 376,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 376,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 376,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 376,
    },
    Token {
        kind: Number,
        lexeme: "35",
        line: 376,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 376,
    },
    Token {
        kind: String,
        lexeme: "\"x\"",
        line: 376,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 376,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 377,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 377,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 377,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 377,
    },
    Token {
        kind: Number,
        lexeme: "15",
        line: 377,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 377,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 377,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 377,
    },
    Token {
        kind: Number,
        lexeme: "35",
        line: 377,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 377,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 378,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 378,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 378,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 378,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 378,
    },
    Token {
        kind: Identifier,
        lexeme: "__index",
        line: 378,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 378,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 378,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 378,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 378,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 378,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 378,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 378,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 378,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 378,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 378,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 378,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 378,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 378,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 379,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 379,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 379,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 379,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 379,
    },
    Token {
        kind: Identifier,
        lexeme: "__newindex",
        line: 379,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 379,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 379,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 379,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 379,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 379,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 379,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 379,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 379,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 379,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 379,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 379,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 379,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 379,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 379,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 379,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 379,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 380,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 380,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 380,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 380,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 380,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 380,
    },
    Token {
        kind: String,
        lexeme: "\"insert 2; gettable -5; return 1\"",
        line: 380,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 380,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 380,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 380,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 380,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 380,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 380,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 380,
    },
    Token {
        kind: String,
        lexeme: "\"y\"",
        line: 380,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 380,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 380,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 380,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 381,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 381,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 381,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 381,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 382,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 382,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 382,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 382,
    },
    Token {
        kind: String,
        lexeme: "\"settable -5, return 1\"",
        line: 382,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 382,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 382,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 382,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 382,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 382,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 382,
    },
    Token {
        kind: String,
        lexeme: "\"x\"",
        line: 382,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 382,
    },
    Token {
        kind: Number,
        lexeme: "16",
        line: 382,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 383,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 383,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 383,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 383,
    },
    Token {
        kind: Number,
        lexeme: "16",
        line: 383,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 383,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 383,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 383,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 384,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 384,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 384,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 384,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 384,
    },
    Token {
        kind: String,
        lexeme: "'xuxu'",
        line: 384,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 385,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 385,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 385,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 385,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 385,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 385,
    },
    Token {
        kind: String,
        lexeme: "\"gettable 2, return 1\"",
        line: 385,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 385,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 385,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 385,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 386,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 386,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 386,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 386,
    },
    Token {
        kind: String,
        lexeme: "'xuxu'",
        line: 386,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 386,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 387,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 387,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 387,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 387,
    },
    Token {
        kind: String,
        lexeme: "\"settable 2\"",
        line: 387,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 387,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 387,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 387,
    },
    Token {
        kind: Number,
        lexeme: "19",
        line: 387,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 387,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 388,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 388,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 388,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 388,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 388,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 388,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 388,
    },
    Token {
        kind: Number,
        lexeme: "19",
        line: 388,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 388,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 391,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 391,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 391,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 391,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 392,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 392,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 392,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 392,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 392,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 392,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 392,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 392,
    },
    Token {
        kind: String,
        lexeme: "\"next; gettop; return .\"",
        line: 392,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 392,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 392,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 392,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 392,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 392,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 392,
    },
    Token {
        kind: Identifier,
        lexeme: "tcheck",
        line: 393,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 393,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 393,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 393,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 393,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 393,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 393,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 393,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 394,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 394,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 394,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 394,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 394,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 394,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 394,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 395,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 395,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 395,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 395,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 395,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 395,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 395,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 395,
    },
    Token {
        kind: String,
        lexeme: "\"next; gettop; return .\"",
        line: 395,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 395,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 395,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 395,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 395,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 395,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 395,
    },
    Token {
        kind: Identifier,
        lexeme: "tcheck",
        line: 396,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 396,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 396,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 396,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 396,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 396,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 396,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 396,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 396,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 396,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 396,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 396,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 396,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 396,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 396,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 396,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 397,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 397,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 397,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 397,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 397,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 397,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 397,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 397,
    },
    Token {
        kind: String,
        lexeme: "\"next; pop 1; next; gettop; return .\"",
        line: 397,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 397,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 397,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 397,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 397,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 397,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 397,
    },
    Token {
        kind: Identifier,
        lexeme: "tcheck",
        line: 398,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 398,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 398,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 398,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 398,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 398,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 398,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 398,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 398,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 398,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 398,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 398,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 404,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 405,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 405,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 405,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 405,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 405,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 405,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[ pushnum 10; pushnum 20; pushcclosure 2; return 1]]",
        line: 405,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 406,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 406,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 406,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 406,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 406,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 406,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 406,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 406,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[pushvalue U0; pushvalue U1; pushvalue U2; return 3]]",
        line: 406,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 406,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 407,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 407,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 407,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 407,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 407,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 407,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 407,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 407,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 407,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 407,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 407,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 407,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 407,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 407,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 407,
    },
    Token {
        kind: String,
        lexeme: "'table'",
        line: 407,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 407,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 408,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 408,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 408,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 408,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 408,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 408,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[tostring U3; tonumber U4; return 2]]",
        line: 408,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 408,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 409,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 409,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 409,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 409,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 409,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 409,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 409,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 409,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 409,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 409,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 410,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 410,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[pushnum 100; pushnum 200; replace U2; replace U1]]",
        line: 410,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 410,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 411,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 411,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 411,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 411,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 411,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 411,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[pushvalue U1; pushvalue U2; return 2]]",
        line: 411,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 411,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 412,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 412,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 412,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 412,
    },
    Token {
        kind: Number,
        lexeme: "100",
        line: 412,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 412,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 412,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 412,
    },
    Token {
        kind: Number,
        lexeme: "200",
        line: 412,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 412,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 413,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 413,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[replace U2; replace U1]]",
        line: 413,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 413,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 413,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 413,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 413,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 413,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 413,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 413,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 413,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 413,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 413,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 413,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 413,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 413,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 414,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 414,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 414,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 414,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 414,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 414,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[pushvalue U1; pushvalue U2; return 2]]",
        line: 414,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 414,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 415,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 415,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 415,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 415,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 415,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 415,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 415,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 415,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 415,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 415,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 415,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 415,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 415,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 415,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 416,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 416,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmemory",
        line: 416,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 416,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 416,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 417,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 421,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 421,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 421,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 421,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 421,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[isnull U1; return 1]]",
        line: 421,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 421,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 421,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 421,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 422,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 422,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 422,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 422,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 422,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[isnull U100; return 1]]",
        line: 422,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 422,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 422,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 422,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 423,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 423,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 423,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 423,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 423,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[pushvalue U1; return 1]]",
        line: 423,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 423,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 423,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 423,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 425,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 425,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 425,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 425,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 425,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 425,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[ pushnum 10; pushnum 20; pushcclosure 2; return 1]]",
        line: 425,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 426,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 426,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 426,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 426,
    },
    Token {
        kind: Identifier,
        lexeme: "upvalue",
        line: 426,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 426,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 426,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 426,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 426,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 426,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 426,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 426,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 426,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 427,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 427,
    },
    Token {
        kind: Identifier,
        lexeme: "upvalue",
        line: 427,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 427,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 427,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 427,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 427,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 427,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 427,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 427,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 427,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 428,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 428,
    },
    Token {
        kind: Identifier,
        lexeme: "upvalue",
        line: 428,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 428,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 428,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 428,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 428,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 428,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 428,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 428,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 428,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 429,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 429,
    },
    Token {
        kind: Identifier,
        lexeme: "upvalue",
        line: 429,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 429,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 429,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 429,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 429,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 429,
    },
    Token {
        kind: String,
        lexeme: "\"xuxu\"",
        line: 429,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 429,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 430,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 430,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 430,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 430,
    },
    Token {
        kind: Identifier,
        lexeme: "upvalue",
        line: 430,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 430,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 430,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 430,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 430,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 430,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 430,
    },
    Token {
        kind: String,
        lexeme: "\"xuxu\"",
        line: 430,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 430,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 434,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 435,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 435,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 435,
    },
    Token {
        kind: String,
        lexeme: "\"checkstack 300 msg;\"",
        line: 435,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 435,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 436,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 436,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 436,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 436,
    },
    Token {
        kind: String,
        lexeme: "\"pushnum 10;\"",
        line: 436,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 436,
    },
    Token {
        kind: Number,
        lexeme: "255",
        line: 436,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 436,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 436,
    },
    Token {
        kind: String,
        lexeme: "\"pushcclosure 255; return 1\"",
        line: 437,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 438,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 438,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 438,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 438,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 438,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 438,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 438,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 438,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 439,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 439,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 439,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 439,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 439,
    },
    Token {
        kind: Number,
        lexeme: "255",
        line: 439,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 439,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 440,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 440,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 440,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 440,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 440,
    },
    Token {
        kind: String,
        lexeme: "\"pushvalue U%d; return 1\"",
        line: 440,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 440,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 440,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 440,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 440,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 440,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 440,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 440,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 440,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 440,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 440,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 441,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 442,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 442,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 442,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 442,
    },
    Token {
        kind: String,
        lexeme: "\"isnull U256; return 1\"",
        line: 442,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 442,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 442,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 443,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 443,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 443,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 443,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 443,
    },
    Token {
        kind: String,
        lexeme: "\"isnil U256; return 1\"",
        line: 443,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 443,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 443,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 444,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 449,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 449,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 449,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 449,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 449,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 449,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 449,
    },
    Token {
        kind: Identifier,
        lexeme: "setuservalue",
        line: 449,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 449,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 449,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 449,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 449,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 449,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 449,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 449,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 450,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 450,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 450,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 450,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 450,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 450,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 450,
    },
    Token {
        kind: Identifier,
        lexeme: "setuservalue",
        line: 450,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 450,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 450,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 450,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 450,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 450,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 450,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 450,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 451,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 451,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 451,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 451,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 451,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 451,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 451,
    },
    Token {
        kind: Identifier,
        lexeme: "setuservalue",
        line: 451,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 451,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 451,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 451,
    },
    Token {
        kind: Identifier,
        lexeme: "pushuserdata",
        line: 451,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 451,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 451,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 451,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 451,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 451,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 451,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 451,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 451,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 453,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 453,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 453,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 453,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 453,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 453,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 453,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 453,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 453,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 454,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 454,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 454,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 454,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 454,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 455,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 455,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 455,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 455,
    },
    Token {
        kind: Identifier,
        lexeme: "getuservalue",
        line: 455,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 455,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 455,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 455,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 455,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 455,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 455,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 456,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 456,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 456,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 456,
    },
    Token {
        kind: Identifier,
        lexeme: "setuservalue",
        line: 456,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 456,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 456,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 456,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 456,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 456,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 456,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 457,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 457,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 457,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 457,
    },
    Token {
        kind: Identifier,
        lexeme: "getuservalue",
        line: 457,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 457,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 457,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 457,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 457,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 457,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 457,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 458,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 458,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 458,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 458,
    },
    Token {
        kind: Identifier,
        lexeme: "setuservalue",
        line: 458,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 458,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 458,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 458,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 458,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 458,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 458,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 459,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 459,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 459,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 459,
    },
    Token {
        kind: Identifier,
        lexeme: "getuservalue",
        line: 459,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 459,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 459,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 459,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 459,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 459,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 459,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 461,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 461,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 461,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 461,
    },
    Token {
        kind: Identifier,
        lexeme: "getuservalue",
        line: 461,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 461,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 461,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 461,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 461,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 461,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 461,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 468,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 468,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 468,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 468,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 468,
    },
    Token {
        kind: Identifier,
        lexeme: "ref",
        line: 468,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 468,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 468,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 469,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 469,
    },
    Token {
        kind: Identifier,
        lexeme: "unref",
        line: 469,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 469,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 469,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 469,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 470,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 470,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 470,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 470,
    },
    Token {
        kind: Identifier,
        lexeme: "ref",
        line: 470,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 470,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 470,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 470,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 470,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 470,
    },
    Token {
        kind: Identifier,
        lexeme: "Arr",
        line: 472,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 472,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 472,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 472,
    },
    Token {
        kind: Identifier,
        lexeme: "Lim",
        line: 473,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 473,
    },
    Token {
        kind: Number,
        lexeme: "100",
        line: 473,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 474,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 474,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 474,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 474,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 474,
    },
    Token {
        kind: Identifier,
        lexeme: "Lim",
        line: 474,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 474,
    },
    Token {
        kind: Identifier,
        lexeme: "Arr",
        line: 475,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 475,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 475,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 475,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 475,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 475,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 475,
    },
    Token {
        kind: Identifier,
        lexeme: "ref",
        line: 475,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 475,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 475,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 475,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 475,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 476,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 478,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 478,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 478,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 478,
    },
    Token {
        kind: Identifier,
        lexeme: "ref",
        line: 478,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 478,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 478,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 478,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 478,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 478,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 478,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 478,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 478,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 478,
    },
    Token {
        kind: Identifier,
        lexeme: "getref",
        line: 478,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 478,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 478,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 478,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 478,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 478,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 478,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 478,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 479,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 479,
    },
    Token {
        kind: Identifier,
        lexeme: "unref",
        line: 479,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 479,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 479,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 479,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 479,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 479,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 479,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 479,
    },
    Token {
        kind: Identifier,
        lexeme: "unref",
        line: 479,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 479,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 479,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 479,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 479,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 481,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 481,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 481,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 481,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 481,
    },
    Token {
        kind: Identifier,
        lexeme: "Lim",
        line: 481,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 481,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 482,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 482,
    },
    Token {
        kind: Identifier,
        lexeme: "unref",
        line: 482,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 482,
    },
    Token {
        kind: Identifier,
        lexeme: "Arr",
        line: 482,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 482,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 482,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 482,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 482,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 483,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 485,
    },
    Token {
        kind: Identifier,
        lexeme: "printlocks",
        line: 485,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 485,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 485,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 486,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 486,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 486,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 486,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 486,
    },
    Token {
        kind: Identifier,
        lexeme: "makeCfunc",
        line: 486,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 486,
    },
    Token {
        kind: String,
        lexeme: "\"gettable R; return 1\"",
        line: 486,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 486,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 487,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 487,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 487,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 487,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 487,
    },
    Token {
        kind: String,
        lexeme: "\"n\"",
        line: 487,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 487,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 488,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 488,
    },
    Token {
        kind: String,
        lexeme: "\"n\"",
        line: 488,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 488,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 488,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 488,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 489,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 489,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 489,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 489,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 489,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 489,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 489,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 490,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 490,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 490,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 490,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 490,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 490,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 490,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 490,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 490,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 491,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 492,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 495,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 495,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 495,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 495,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 495,
    },
    Token {
        kind: Identifier,
        lexeme: "Lim",
        line: 495,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 495,
    },
    Token {
        kind: Identifier,
        lexeme: "Arr",
        line: 496,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 496,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 496,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 496,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 496,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 496,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 496,
    },
    Token {
        kind: Identifier,
        lexeme: "ref",
        line: 496,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 496,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 496,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 496,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 496,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 497,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 499,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 499,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 499,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 499,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 499,
    },
    Token {
        kind: Identifier,
        lexeme: "Lim",
        line: 499,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 499,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 499,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 499,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 500,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 500,
    },
    Token {
        kind: Identifier,
        lexeme: "unref",
        line: 500,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 500,
    },
    Token {
        kind: Identifier,
        lexeme: "Arr",
        line: 500,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 500,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 500,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 500,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 500,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 501,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 503,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 503,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 503,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 503,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 503,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 503,
    },
    Token {
        kind: Identifier,
        lexeme: "getref",
        line: 503,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 503,
    },
    Token {
        kind: Identifier,
        lexeme: "Arr",
        line: 503,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 503,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 503,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 503,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 503,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 503,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 503,
    },
    Token {
        kind: String,
        lexeme: "'table'",
        line: 503,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 503,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 506,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 506,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 506,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 506,
    },
    Token {
        kind: Identifier,
        lexeme: "getref",
        line: 506,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 506,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 506,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 506,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 506,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 506,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 506,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 506,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 509,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 509,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 509,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 509,
    },
    Token {
        kind: Identifier,
        lexeme: "ref",
        line: 509,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 509,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 509,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 509,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 509,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 511,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 511,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 511,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 513,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 513,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 513,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 513,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 513,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 513,
    },
    Token {
        kind: Identifier,
        lexeme: "getref",
        line: 513,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 513,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 513,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 513,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 513,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 513,
    },
    Token {
        kind: String,
        lexeme: "'table'",
        line: 513,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 513,
    },
    Token {
        kind: Identifier,
        lexeme: "tt",
        line: 517,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 517,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 517,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 517,
    },
    Token {
        kind: Identifier,
        lexeme: "cl",
        line: 518,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 518,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 518,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 518,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 518,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 518,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 518,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 519,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 519,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 519,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 519,
    },
    Token {
        kind: Identifier,
        lexeme: "B",
        line: 519,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 519,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 519,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 520,
    },
    Token {
        kind: Identifier,
        lexeme: "F",
        line: 520,
    },
    Token {
        kind: Identifier,
        lexeme: "F",
        line: 521,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 521,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 521,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 521,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 521,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 521,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 522,
    },
    Token {
        kind: Identifier,
        lexeme: "udval",
        line: 522,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 522,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 522,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 522,
    },
    Token {
        kind: Identifier,
        lexeme: "udataval",
        line: 522,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 522,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 522,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 522,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 523,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 523,
    },
    Token {
        kind: Identifier,
        lexeme: "insert",
        line: 523,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 523,
    },
    Token {
        kind: Identifier,
        lexeme: "cl",
        line: 523,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 523,
    },
    Token {
        kind: Identifier,
        lexeme: "udval",
        line: 523,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 523,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 524,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 524,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 524,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 524,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 524,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 524,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 524,
    },
    Token {
        kind: Number,
        lexeme: "100",
        line: 524,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 524,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 525,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 525,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 525,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 526,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 526,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 526,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 526,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 526,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 526,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 526,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 526,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 526,
    },
    Token {
        kind: Identifier,
        lexeme: "__gc",
        line: 526,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 526,
    },
    Token {
        kind: Identifier,
        lexeme: "F",
        line: 526,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 526,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 527,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 527,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 527,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 527,
    },
    Token {
        kind: String,
        lexeme: "\"table.insert({}, {})\"",
        line: 527,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 527,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 527,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 527,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 527,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 528,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 528,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 528,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 529,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 529,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 529,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 529,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 529,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 529,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 529,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 529,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 529,
    },
    Token {
        kind: Identifier,
        lexeme: "__gc",
        line: 529,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 529,
    },
    Token {
        kind: Identifier,
        lexeme: "F",
        line: 529,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 529,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 530,
    },
    Token {
        kind: Identifier,
        lexeme: "dummy",
        line: 530,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 530,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 530,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 530,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 531,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 531,
    },
    Token {
        kind: NotEquals,
        lexeme: "~=",
        line: 531,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 531,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 531,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 532,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 532,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 532,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 532,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 532,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 532,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 532,
    },
    Token {
        kind: String,
        lexeme: "\"userdata\"",
        line: 532,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 532,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 533,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 533,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 533,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 533,
    },
    Token {
        kind: Identifier,
        lexeme: "udataval",
        line: 533,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 533,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 533,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 533,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 533,
    },
    Token {
        kind: Identifier,
        lexeme: "B",
        line: 533,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 533,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 534,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 534,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 534,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 534,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 534,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 534,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 535,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 536,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 536,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 536,
    },
    Token {
        kind: Identifier,
        lexeme: "B",
        line: 537,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 537,
    },
    Token {
        kind: Identifier,
        lexeme: "udval",
        line: 537,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 538,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 538,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 538,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 538,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 538,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 538,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 539,
    },
    Token {
        kind: Identifier,
        lexeme: "tt",
        line: 540,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 540,
    },
    Token {
        kind: Identifier,
        lexeme: "__gc",
        line: 540,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 540,
    },
    Token {
        kind: Identifier,
        lexeme: "F",
        line: 540,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 543,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 544,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 544,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 544,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 544,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 545,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 545,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 545,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 545,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 546,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 546,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 546,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 546,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 546,
    },
    Token {
        kind: String,
        lexeme: "\"count\"",
        line: 546,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 546,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 546,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 547,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 547,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 547,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 547,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 547,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 547,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 547,
    },
    Token {
        kind: Number,
        lexeme: "5001",
        line: 547,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 547,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 548,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 548,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 548,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 548,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 548,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 548,
    },
    Token {
        kind: String,
        lexeme: "\"objsize 2; return 1\"",
        line: 548,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 548,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 548,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 548,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 548,
    },
    Token {
        kind: Number,
        lexeme: "5001",
        line: 548,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 548,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 549,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 549,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 549,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 549,
    },
    Token {
        kind: String,
        lexeme: "\"count\"",
        line: 549,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 549,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: ">=",
        line: 549,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 549,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 549,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 549,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 549,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 550,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 550,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 550,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 551,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 551,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 551,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 551,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 552,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 552,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 552,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 552,
    },
    Token {
        kind: String,
        lexeme: "\"count\"",
        line: 552,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 552,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        line: 552,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 552,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 552,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 552,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 552,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 554,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 554,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 554,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 554,
    },
    Token {
        kind: String,
        lexeme: "\"count\"",
        line: 554,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 554,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 555,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 555,
    },
    Token {
        kind: String,
        lexeme: "\"stop\"",
        line: 555,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 555,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 556,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 556,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 556,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 556,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 556,
    },
    Token {
        kind: Number,
        lexeme: "1000",
        line: 556,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 556,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 556,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 556,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 556,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 556,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 556,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 556,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 556,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 557,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 557,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 557,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 557,
    },
    Token {
        kind: String,
        lexeme: "\"count\"",
        line: 557,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 557,
    },
    Token {
        kind: GreaterThan,
        lexeme: ">",
        line: 557,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 557,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 557,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 557,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 557,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 558,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 558,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 558,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 559,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 559,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 559,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 559,
    },
    Token {
        kind: String,
        lexeme: "\"count\"",
        line: 559,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 559,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        line: 559,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 559,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 559,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 559,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 559,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 561,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 561,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 561,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 561,
    },
    Token {
        kind: String,
        lexeme: "\"count\"",
        line: 561,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 561,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 562,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 562,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 562,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 563,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 563,
    },
    Token {
        kind: String,
        lexeme: "\"stop\"",
        line: 563,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 563,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 564,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 564,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 564,
    },
    Token {
        kind: Identifier,
        lexeme: "__gc",
        line: 564,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 564,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 564,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 564,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 564,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 564,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 564,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 565,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 565,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 565,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 565,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 565,
    },
    Token {
        kind: Number,
        lexeme: "1000",
        line: 565,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 565,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 565,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 565,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 565,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 565,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 565,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 565,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 565,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 565,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 565,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 565,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 565,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 565,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 565,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 565,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 566,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 566,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 566,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 566,
    },
    Token {
        kind: String,
        lexeme: "\"count\"",
        line: 566,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 566,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: ">=",
        line: 566,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 566,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 566,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 566,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 566,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 567,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 567,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 567,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 568,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 568,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 568,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 568,
    },
    Token {
        kind: String,
        lexeme: "\"count\"",
        line: 568,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 568,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: ">=",
        line: 568,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 568,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 568,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 568,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 568,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 569,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 569,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 569,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 570,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 570,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 570,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 570,
    },
    Token {
        kind: String,
        lexeme: "\"count\"",
        line: 570,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 570,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        line: 570,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 570,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 570,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 570,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 570,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 571,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 571,
    },
    Token {
        kind: String,
        lexeme: "\"restart\"",
        line: 571,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 571,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 572,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 575,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 575,
    },
    Token {
        kind: String,
        lexeme: "\"stop\"",
        line: 575,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 575,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 578,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 578,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 578,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 578,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 578,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 578,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 578,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 578,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 578,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 578,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 578,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 578,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 578,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 578,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 578,
    },
    Token {
        kind: Identifier,
        lexeme: "tt",
        line: 578,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 578,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 578,
    },
    Token {
        kind: Identifier,
        lexeme: "na",
        line: 578,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 578,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 578,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 578,
    },
    Token {
        kind: Identifier,
        lexeme: "udataval",
        line: 578,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 578,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 578,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 578,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 579,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 579,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 579,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 579,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 579,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 579,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 579,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 579,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 579,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 579,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 579,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 579,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 579,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 579,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 579,
    },
    Token {
        kind: Identifier,
        lexeme: "tt",
        line: 579,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 579,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 579,
    },
    Token {
        kind: Identifier,
        lexeme: "nb",
        line: 579,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 579,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 579,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 579,
    },
    Token {
        kind: Identifier,
        lexeme: "udataval",
        line: 579,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 579,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 579,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 579,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 580,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 580,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 580,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 580,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 580,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 580,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 580,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 580,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 580,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 580,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 580,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 580,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 580,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 580,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 580,
    },
    Token {
        kind: Identifier,
        lexeme: "tt",
        line: 580,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 580,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 580,
    },
    Token {
        kind: Identifier,
        lexeme: "nc",
        line: 580,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 580,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 580,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 580,
    },
    Token {
        kind: Identifier,
        lexeme: "udataval",
        line: 580,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 580,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 580,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 580,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 583,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 583,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 583,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 583,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 583,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 583,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 583,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 583,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 584,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 584,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 584,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 584,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 584,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 584,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 584,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 584,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 586,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 586,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 586,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 586,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 586,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 586,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 586,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 586,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 586,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 586,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 586,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 586,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 587,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 587,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 587,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 587,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 587,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 587,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 587,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 587,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 587,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 587,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 587,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 587,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 589,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 589,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 589,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 589,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 589,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 589,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 589,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 589,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 589,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 589,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 589,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 589,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 589,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 589,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 589,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 589,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 589,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 589,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 589,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 589,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 591,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 591,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 591,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 591,
    },
    Token {
        kind: Identifier,
        lexeme: "ref",
        line: 591,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 591,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 591,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 591,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 591,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 592,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 592,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 592,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 592,
    },
    Token {
        kind: Identifier,
        lexeme: "ref",
        line: 592,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 592,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 592,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 592,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 592,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 593,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 593,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 593,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 593,
    },
    Token {
        kind: Identifier,
        lexeme: "ref",
        line: 593,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 593,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 593,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 593,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 593,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 594,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 594,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 594,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 594,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 594,
    },
    Token {
        kind: Identifier,
        lexeme: "getref",
        line: 594,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 594,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 594,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 594,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 594,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 594,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 594,
    },
    Token {
        kind: Identifier,
        lexeme: "getref",
        line: 594,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 594,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 594,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 594,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 594,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 594,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 594,
    },
    Token {
        kind: Identifier,
        lexeme: "getref",
        line: 594,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 594,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 594,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 594,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 594,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 595,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 595,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 595,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 595,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 595,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 595,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 595,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 595,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 595,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 595,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 595,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 595,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 595,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 595,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 595,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 595,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 595,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 595,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 595,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 595,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 595,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 595,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 595,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 597,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 597,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 597,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 597,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 597,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 597,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 597,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 597,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 597,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 597,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 597,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 597,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 598,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 598,
    },
    Token {
        kind: Identifier,
        lexeme: "unref",
        line: 598,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 598,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 598,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 598,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 598,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 598,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 598,
    },
    Token {
        kind: Identifier,
        lexeme: "unref",
        line: 598,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 598,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 598,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 598,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 600,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 600,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 600,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 603,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 603,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 603,
    },
    Token {
        kind: Identifier,
        lexeme: "cl",
        line: 603,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 603,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 603,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 603,
    },
    Token {
        kind: Identifier,
        lexeme: "cl",
        line: 603,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 603,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 603,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 603,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 603,
    },
    Token {
        kind: Identifier,
        lexeme: "nc",
        line: 603,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 603,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 605,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 605,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 605,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 605,
    },
    Token {
        kind: Identifier,
        lexeme: "getref",
        line: 605,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 605,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 605,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 605,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 606,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 606,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 606,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 606,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 606,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 606,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 606,
    },
    Token {
        kind: String,
        lexeme: "'userdata'",
        line: 606,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 606,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 606,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 606,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 606,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 606,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 606,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 606,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 606,
    },
    Token {
        kind: Identifier,
        lexeme: "tt",
        line: 606,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 606,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 607,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 607,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 607,
    },
    Token {
        kind: Identifier,
        lexeme: "tt",
        line: 608,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 608,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 608,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 608,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 608,
    },
    Token {
        kind: Identifier,
        lexeme: "tt",
        line: 609,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 609,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 609,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 610,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 610,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 610,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 611,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 611,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 611,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 612,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 612,
    },
    Token {
        kind: Identifier,
        lexeme: "unref",
        line: 612,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 612,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 612,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 612,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 612,
    },
    Token {
        kind: Identifier,
        lexeme: "n5",
        line: 613,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 613,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 613,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 613,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 613,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 613,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 613,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 613,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 614,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 614,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 614,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 614,
    },
    Token {
        kind: Identifier,
        lexeme: "n5",
        line: 614,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 614,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 614,
    },
    Token {
        kind: Identifier,
        lexeme: "__gc",
        line: 614,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 614,
    },
    Token {
        kind: Identifier,
        lexeme: "F",
        line: 614,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 614,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 614,
    },
    Token {
        kind: Identifier,
        lexeme: "n5",
        line: 615,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 615,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 615,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 615,
    },
    Token {
        kind: Identifier,
        lexeme: "udataval",
        line: 615,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 615,
    },
    Token {
        kind: Identifier,
        lexeme: "n5",
        line: 615,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 615,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 616,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 616,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 616,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 617,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 617,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 617,
    },
    Token {
        kind: Identifier,
        lexeme: "cl",
        line: 617,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 617,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 617,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 617,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 619,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 619,
    },
    Token {
        kind: Identifier,
        lexeme: "cl",
        line: 619,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 619,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 619,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 619,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 619,
    },
    Token {
        kind: Identifier,
        lexeme: "n5",
        line: 619,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 619,
    },
    Token {
        kind: Identifier,
        lexeme: "cl",
        line: 619,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 619,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 619,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 619,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 619,
    },
    Token {
        kind: Identifier,
        lexeme: "nb",
        line: 619,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 619,
    },
    Token {
        kind: Identifier,
        lexeme: "cl",
        line: 619,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 619,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 619,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 619,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 619,
    },
    Token {
        kind: Identifier,
        lexeme: "na",
        line: 619,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 619,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 621,
    },
    Token {
        kind: String,
        lexeme: "\"restart\"",
        line: 621,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 624,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 624,
    },
    Token {
        kind: Identifier,
        lexeme: "na",
        line: 624,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 624,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 624,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 624,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 624,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 624,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 624,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 625,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 625,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 625,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 625,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 625,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 625,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 625,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 625,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 625,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 625,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 626,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 626,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 626,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 626,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 626,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 626,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 626,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 626,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 626,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 626,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 626,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 627,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 627,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 627,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 627,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 627,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 627,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 627,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 627,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 627,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 627,
    },
    Token {
        kind: Identifier,
        lexeme: "__gc",
        line: 627,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 627,
    },
    Token {
        kind: Identifier,
        lexeme: "F",
        line: 627,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 627,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 627,
    },
    Token {
        kind: Identifier,
        lexeme: "na",
        line: 628,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 628,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 628,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 628,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 628,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 628,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 628,
    },
    Token {
        kind: Identifier,
        lexeme: "udataval",
        line: 628,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 628,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 628,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 628,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 628,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 628,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 628,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 629,
    },
    Token {
        kind: Identifier,
        lexeme: "cl",
        line: 630,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 630,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 630,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 630,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 631,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 631,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 631,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 631,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 631,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 631,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 631,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 632,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 632,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 632,
    },
    Token {
        kind: Identifier,
        lexeme: "cl",
        line: 632,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 632,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 632,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 632,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 633,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 633,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 633,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 633,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 633,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 633,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 633,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 633,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 633,
    },
    Token {
        kind: Identifier,
        lexeme: "cl",
        line: 633,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 633,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 633,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 633,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 633,
    },
    Token {
        kind: Identifier,
        lexeme: "na",
        line: 633,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 633,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 633,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 633,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 633,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 633,
    },
    Token {
        kind: Identifier,
        lexeme: "na",
        line: 634,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 634,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 634,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 637,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 637,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 637,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 637,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 637,
    },
    Token {
        kind: Identifier,
        lexeme: "Lim",
        line: 637,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 637,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 637,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 637,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 638,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 638,
    },
    Token {
        kind: Identifier,
        lexeme: "unref",
        line: 638,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 638,
    },
    Token {
        kind: Identifier,
        lexeme: "Arr",
        line: 638,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 638,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 638,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 638,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 638,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 639,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 641,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 641,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 641,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 641,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 641,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 641,
    },
    Token {
        kind: Number,
        lexeme: "41",
        line: 641,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 641,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 641,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 641,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 641,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 641,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 641,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 641,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 641,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 641,
    },
    Token {
        kind: Identifier,
        lexeme: "__gc",
        line: 641,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 641,
    },
    Token {
        kind: Identifier,
        lexeme: "F",
        line: 641,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 641,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 641,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 642,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 642,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 642,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 642,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 642,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 642,
    },
    Token {
        kind: String,
        lexeme: "\"objsize 2; return 1\"",
        line: 642,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 642,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 642,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 642,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 642,
    },
    Token {
        kind: Number,
        lexeme: "41",
        line: 642,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 642,
    },
    Token {
        kind: Identifier,
        lexeme: "cl",
        line: 643,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 643,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 643,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 643,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 644,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 644,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 644,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 644,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 644,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 644,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 644,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 644,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 644,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 645,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 645,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 645,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 645,
    },
    Token {
        kind: Identifier,
        lexeme: "udataval",
        line: 645,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 645,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 645,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 645,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 646,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 646,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 646,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 648,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 648,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 648,
    },
    Token {
        kind: Identifier,
        lexeme: "cl",
        line: 648,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 648,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 648,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 648,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 649,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 649,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 649,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        line: 649,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 649,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 649,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 649,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 649,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 649,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 649,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 649,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 649,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 649,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 649,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 649,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 650,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 650,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 650,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 651,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 651,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 651,
    },
    Token {
        kind: Identifier,
        lexeme: "cl",
        line: 651,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 651,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 651,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 651,
    },
    Token {
        kind: Identifier,
        lexeme: "cl",
        line: 651,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 651,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 651,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 651,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 651,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 651,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 651,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 654,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 654,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 654,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 654,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 654,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 654,
    },
    Token {
        kind: String,
        lexeme: "\"compare 2 4 0; return 1\"",
        line: 654,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 654,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 654,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 654,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 654,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 654,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 654,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 654,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 654,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 654,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 654,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 655,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 655,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 655,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 655,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 655,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 655,
    },
    Token {
        kind: String,
        lexeme: "\"compare 3 2 0; return 1\"",
        line: 655,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 655,
    },
    Token {
        kind: String,
        lexeme: "'alo'",
        line: 655,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 655,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 655,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 655,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 655,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 656,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 656,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 656,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 656,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 656,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 656,
    },
    Token {
        kind: String,
        lexeme: "\"compare 2 3 0; return 1\"",
        line: 656,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 656,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 656,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 656,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 656,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 656,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 656,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 657,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 657,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 657,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 657,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 657,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 657,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 657,
    },
    Token {
        kind: String,
        lexeme: "\"compare 2 3 0; return 1\"",
        line: 657,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 657,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 657,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 657,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 657,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 657,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 657,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 657,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 657,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 658,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 658,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 658,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 658,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 658,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 658,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 658,
    },
    Token {
        kind: String,
        lexeme: "\"compare 2 3 0; return 1\"",
        line: 658,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 658,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 658,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 659,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 659,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 659,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 659,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 659,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 659,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 659,
    },
    Token {
        kind: String,
        lexeme: "\"compare 2 3 0; return 1\"",
        line: 659,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 659,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 659,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 659,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 659,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 662,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 663,
    },
    Token {
        kind: Identifier,
        lexeme: "map",
        line: 663,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 663,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 663,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 663,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 664,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 664,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 664,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 664,
    },
    Token {
        kind: Identifier,
        lexeme: "__eq",
        line: 664,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 664,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 664,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 664,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 664,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 664,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 664,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 664,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 664,
    },
    Token {
        kind: Identifier,
        lexeme: "map",
        line: 664,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 664,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 664,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 664,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 664,
    },
    Token {
        kind: Identifier,
        lexeme: "map",
        line: 664,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 664,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 664,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 664,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 664,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 664,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 665,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 665,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 665,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 665,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 665,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 665,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 666,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        line: 666,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 666,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 666,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 666,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 666,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 666,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 666,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 666,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 667,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 667,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 667,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 667,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        line: 667,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 667,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 667,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 667,
    },
    Token {
        kind: Identifier,
        lexeme: "map",
        line: 668,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 668,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        line: 668,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 668,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 668,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 668,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 669,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        line: 669,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 670,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 671,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 671,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 671,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 671,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 671,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 671,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 671,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 671,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 671,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 671,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 671,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 671,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 672,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 672,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 672,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 672,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 672,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 672,
    },
    Token {
        kind: NotEquals,
        lexeme: "~=",
        line: 672,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 672,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 672,
    },
    Token {
        kind: Number,
        lexeme: "11",
        line: 672,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 672,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 672,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 673,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 673,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 673,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 673,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 673,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 673,
    },
    Token {
        kind: String,
        lexeme: "\"compare 2 3 0; return 1\"",
        line: 673,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 673,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 673,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 673,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 673,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 673,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 673,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 673,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 673,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 673,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 673,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 673,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 673,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 674,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 674,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 674,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 674,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 674,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 674,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 674,
    },
    Token {
        kind: String,
        lexeme: "\"compare 2 3 0; return 1\"",
        line: 674,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 674,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 674,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 674,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 674,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 674,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 674,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 674,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 674,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 674,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 674,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 674,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 674,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 675,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 675,
    },
    Token {
        kind: Identifier,
        lexeme: "__eq",
        line: 675,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 675,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 675,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 676,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 676,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 676,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 676,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 676,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 676,
    },
    Token {
        kind: NotEquals,
        lexeme: "~=",
        line: 676,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 676,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 676,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 676,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 676,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 676,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 677,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 679,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 679,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 684,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 684,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 684,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 684,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 684,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 684,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 685,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 685,
    },
    Token {
        kind: Identifier,
        lexeme: "sethook",
        line: 685,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 685,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\n  # set a line hook after 3 count hooks\n  sethook 4 0 '\n    getglobal t;\n    pushvalue -3; append -2\n    pushvalue -2; append -2\n  ']]",
        line: 691,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 691,
    },
    Token {
        kind: String,
        lexeme: "\"c\"",
        line: 691,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 691,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 691,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 691,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 692,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 692,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 692,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 692,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 693,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 693,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 693,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 694,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 694,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 694,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 695,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 695,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 695,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 696,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 696,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 696,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 697,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 697,
    },
    Token {
        kind: Identifier,
        lexeme: "sethook",
        line: 697,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 697,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 697,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 698,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 698,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 698,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 698,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 698,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 699,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 699,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 699,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 699,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 699,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 699,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 699,
    },
    Token {
        kind: String,
        lexeme: "\"line\"",
        line: 699,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 699,
    },
    Token {
        kind: Identifier,
        lexeme: "line",
        line: 700,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 700,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 700,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 700,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 700,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 700,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 701,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 701,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 701,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 701,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 701,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 701,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 701,
    },
    Token {
        kind: String,
        lexeme: "\"line\"",
        line: 701,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 701,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 701,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 701,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 701,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 701,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 701,
    },
    Token {
        kind: Identifier,
        lexeme: "line",
        line: 701,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 701,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 701,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 701,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 702,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 702,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 702,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 702,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 702,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 702,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 702,
    },
    Token {
        kind: String,
        lexeme: "\"line\"",
        line: 702,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 702,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 702,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 702,
    },
    Token {
        kind: Number,
        lexeme: "6",
        line: 702,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 702,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 702,
    },
    Token {
        kind: Identifier,
        lexeme: "line",
        line: 702,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 702,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 702,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 702,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 703,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 703,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 703,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 703,
    },
    Token {
        kind: Number,
        lexeme: "7",
        line: 703,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 703,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 703,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 703,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 703,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 707,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 708,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 708,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 708,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 708,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 708,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 709,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 709,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 709,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 709,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 709,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 709,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 709,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 710,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 710,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 710,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 710,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 710,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 710,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 710,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 710,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 710,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 710,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 710,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 711,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 712,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 712,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 712,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 712,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 712,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 712,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 712,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 712,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 712,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 713,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 713,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 713,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 713,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 713,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 713,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 713,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 713,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 713,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 713,
    },
    Token {
        kind: Identifier,
        lexeme: "__gc",
        line: 713,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 713,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 713,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 713,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 713,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 713,
    },
    Token {
        kind: Identifier,
        lexeme: "error",
        line: 713,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 713,
    },
    Token {
        kind: String,
        lexeme: "\"error inside gc\"",
        line: 713,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 713,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 713,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 713,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 713,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 714,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 715,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 715,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 715,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 715,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 715,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 715,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 715,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 715,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 715,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 716,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 716,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 716,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 716,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 716,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 716,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 716,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 716,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 716,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 716,
    },
    Token {
        kind: Identifier,
        lexeme: "__gc",
        line: 716,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 716,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 716,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 716,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 716,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 716,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 716,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 716,
    },
    Token {
        kind: String,
        lexeme: "\"A=A+1\"",
        line: 716,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 716,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 716,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 716,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 716,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 716,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 716,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 717,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 718,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 718,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 718,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 718,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 718,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 719,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 719,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 719,
    },
    Token {
        kind: While,
        lexeme: "while",
        line: 720,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 720,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 720,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 721,
    },
    Token {
        kind: Identifier,
        lexeme: "stat",
        line: 721,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 721,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 721,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 721,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 721,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 721,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 721,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 721,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 722,
    },
    Token {
        kind: Identifier,
        lexeme: "stat",
        line: 722,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 722,
    },
    Token {
        kind: Break,
        lexeme: "break",
        line: 723,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 724,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 725,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 725,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 725,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 725,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 725,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 726,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 726,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 726,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 726,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 726,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 726,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 726,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 726,
    },
    Token {
        kind: String,
        lexeme: "\"__gc\"",
        line: 726,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 726,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 726,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 727,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 728,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 729,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 729,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 729,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 729,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 729,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 729,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 731,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 731,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 731,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 731,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 731,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 731,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 732,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 735,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 736,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 736,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 736,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 736,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 736,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 736,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 736,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 736,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 736,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 736,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 737,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 737,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 737,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 737,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 737,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 737,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 737,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 737,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 737,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 737,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 737,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 737,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 737,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 737,
    },
    Token {
        kind: Identifier,
        lexeme: "pushuserdata",
        line: 737,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 737,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 737,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 737,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 737,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 738,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 738,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 738,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 738,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 738,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 738,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 738,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 738,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 738,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 738,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 738,
    },
    Token {
        kind: Identifier,
        lexeme: "udataval",
        line: 738,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 738,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 738,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 738,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 738,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 738,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 738,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 738,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 738,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 738,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 738,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 739,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 739,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 739,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 739,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 739,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 739,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 739,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 739,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 739,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 739,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 739,
    },
    Token {
        kind: Identifier,
        lexeme: "pushuserdata",
        line: 739,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 739,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 739,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 739,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 739,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 739,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 739,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 739,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 739,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 739,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 739,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 740,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 740,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 740,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 740,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 740,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 740,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 740,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 740,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 740,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 740,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 740,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 740,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 740,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 740,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 740,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 740,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 740,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 741,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 741,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 741,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 741,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 741,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 741,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 741,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 741,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 741,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 741,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 741,
    },
    Token {
        kind: Identifier,
        lexeme: "pushuserdata",
        line: 741,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 741,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 741,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 741,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 741,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 741,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 741,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 741,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 742,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 742,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 742,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 742,
    },
    Token {
        kind: Identifier,
        lexeme: "tostring",
        line: 742,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 742,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 742,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 742,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 742,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 742,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 742,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 742,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 742,
    },
    Token {
        kind: String,
        lexeme: "\"string\"",
        line: 742,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 742,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 743,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 748,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 748,
    },
    Token {
        kind: Identifier,
        lexeme: "closestate",
        line: 748,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 748,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 748,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 748,
    },
    Token {
        kind: Identifier,
        lexeme: "newstate",
        line: 748,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 748,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 748,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 748,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 748,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 749,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 749,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 749,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 749,
    },
    Token {
        kind: Identifier,
        lexeme: "newstate",
        line: 749,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 749,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 749,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 750,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 750,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 750,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 750,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 752,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 752,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 752,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 752,
    },
    Token {
        kind: Identifier,
        lexeme: "doremote",
        line: 752,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 752,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 752,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 752,
    },
    Token {
        kind: String,
        lexeme: "\"X='a'; return 'a'\"",
        line: 752,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 752,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 752,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 752,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 752,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 755,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 755,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 755,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 755,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 755,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 755,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 755,
    },
    Token {
        kind: Identifier,
        lexeme: "doremote",
        line: 755,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 755,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 755,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 755,
    },
    Token {
        kind: String,
        lexeme: "\"function f () return 'alo', 3 end; f()\"",
        line: 755,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 755,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 755,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 755,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 755,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 755,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 757,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 757,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 757,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 757,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 757,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 757,
    },
    Token {
        kind: Identifier,
        lexeme: "doremote",
        line: 757,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 757,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 757,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 757,
    },
    Token {
        kind: String,
        lexeme: "\"return f()\"",
        line: 757,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 757,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 758,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 758,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 758,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 758,
    },
    Token {
        kind: String,
        lexeme: "'alo'",
        line: 758,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 758,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 758,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 758,
    },
    Token {
        kind: String,
        lexeme: "'3'",
        line: 758,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 758,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 760,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 760,
    },
    Token {
        kind: Identifier,
        lexeme: "doremote",
        line: 760,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 760,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 760,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 760,
    },
    Token {
        kind: String,
        lexeme: "\"_ERRORMESSAGE = nil\"",
        line: 760,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 760,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 762,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 762,
    },
    Token {
        kind: Identifier,
        lexeme: "_",
        line: 762,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 762,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 762,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 762,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 762,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 762,
    },
    Token {
        kind: Identifier,
        lexeme: "doremote",
        line: 762,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 762,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 762,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 762,
    },
    Token {
        kind: String,
        lexeme: "\"return sin(1)\"",
        line: 762,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 762,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 763,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 763,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 763,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 763,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 763,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 763,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 763,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 763,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 763,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 763,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 766,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 766,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 766,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 766,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 766,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 766,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 766,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 766,
    },
    Token {
        kind: Identifier,
        lexeme: "doremote",
        line: 766,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 766,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 766,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 766,
    },
    Token {
        kind: String,
        lexeme: "\"return a+\"",
        line: 766,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 766,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 767,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 767,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 767,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 767,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 767,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 767,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 767,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 767,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 767,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 767,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 767,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 767,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 767,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 767,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 767,
    },
    Token {
        kind: String,
        lexeme: "\"string\"",
        line: 767,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 767,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 769,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 769,
    },
    Token {
        kind: Identifier,
        lexeme: "loadlib",
        line: 769,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 769,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 769,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 769,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 770,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 770,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 770,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 770,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 770,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 770,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 770,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 770,
    },
    Token {
        kind: Identifier,
        lexeme: "doremote",
        line: 770,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 770,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 770,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 770,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\n  string = require'string'\n  a = require'_G'; assert(a == _G and require(\"_G\") == a)\n  io = require'io'; assert(type(io.read) == \"function\")\n  assert(require(\"io\") == io)\n  a = require'table'; assert(type(a.insert) == \"function\")\n  a = require'debug'; assert(type(a.getlocal) == \"function\")\n  a = require'math'; assert(type(a.sin) == \"function\")\n  return string.sub('okinama', 1, 2)\n]]",
        line: 779,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 779,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 780,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 780,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 780,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 780,
    },
    Token {
        kind: String,
        lexeme: "\"ok\"",
        line: 780,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 780,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 782,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 782,
    },
    Token {
        kind: Identifier,
        lexeme: "closestate",
        line: 782,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 782,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 782,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 782,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 782,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 785,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 785,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 785,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 785,
    },
    Token {
        kind: Identifier,
        lexeme: "newstate",
        line: 785,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 785,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 785,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 786,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 786,
    },
    Token {
        kind: Identifier,
        lexeme: "loadlib",
        line: 786,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 786,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 786,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 786,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 787,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 787,
    },
    Token {
        kind: Identifier,
        lexeme: "doremote",
        line: 787,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 787,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 787,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 787,
    },
    Token {
        kind: String,
        lexeme: "\"a = {}\"",
        line: 787,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 787,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 788,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 788,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 788,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 788,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 788,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 788,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[getglobal \"a\"; pushstring \"x\"; pushnum 1;\n             settable -3]]",
        line: 789,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 789,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 790,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 790,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 790,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 790,
    },
    Token {
        kind: Identifier,
        lexeme: "doremote",
        line: 790,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 790,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 790,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 790,
    },
    Token {
        kind: String,
        lexeme: "\"return a.x\"",
        line: 790,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 790,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 790,
    },
    Token {
        kind: String,
        lexeme: "\"1\"",
        line: 790,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 790,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 792,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 792,
    },
    Token {
        kind: Identifier,
        lexeme: "closestate",
        line: 792,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 792,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 792,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 792,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 794,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 794,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 794,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 796,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 796,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 796,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 796,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 801,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 801,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 801,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 801,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 801,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 801,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 801,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 801,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 801,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 801,
    },
    Token {
        kind: Caret,
        lexeme: "^",
        line: 801,
    },
    Token {
        kind: Number,
        lexeme: "32",
        line: 801,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 801,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 801,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 801,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 801,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 802,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 802,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 802,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 803,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 803,
    },
    Token {
        kind: Identifier,
        lexeme: "totalmem",
        line: 803,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 803,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 803,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 803,
    },
    Token {
        kind: Identifier,
        lexeme: "totalmem",
        line: 803,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 803,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 803,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 803,
    },
    Token {
        kind: Number,
        lexeme: "5000",
        line: 803,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 803,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 804,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 804,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 804,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 804,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 804,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 804,
    },
    Token {
        kind: String,
        lexeme: "\"local a={}; for i=1,100000 do a[i]=i end\"",
        line: 804,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 804,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 804,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 805,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 805,
    },
    Token {
        kind: Identifier,
        lexeme: "totalmem",
        line: 805,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 805,
    },
    Token {
        kind: Number,
        lexeme: "1000000000",
        line: 805,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 805,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 810,
    },
    Token {
        kind: Identifier,
        lexeme: "testamem",
        line: 810,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 810,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 810,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 810,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 810,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 810,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 811,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 811,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 811,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 811,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 811,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 811,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 811,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 812,
    },
    Token {
        kind: Identifier,
        lexeme: "M",
        line: 812,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 812,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 812,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 812,
    },
    Token {
        kind: Identifier,
        lexeme: "totalmem",
        line: 812,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 812,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 812,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 813,
    },
    Token {
        kind: Identifier,
        lexeme: "oldM",
        line: 813,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 813,
    },
    Token {
        kind: Identifier,
        lexeme: "M",
        line: 813,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 814,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 814,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 814,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 814,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 814,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 814,
    },
    Token {
        kind: While,
        lexeme: "while",
        line: 815,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 815,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 815,
    },
    Token {
        kind: Identifier,
        lexeme: "M",
        line: 816,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 816,
    },
    Token {
        kind: Identifier,
        lexeme: "M",
        line: 816,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 816,
    },
    Token {
        kind: Number,
        lexeme: "7",
        line: 816,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 817,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 817,
    },
    Token {
        kind: Identifier,
        lexeme: "totalmem",
        line: 817,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 817,
    },
    Token {
        kind: Identifier,
        lexeme: "M",
        line: 817,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 817,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 818,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 818,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 818,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 818,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 818,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 818,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 818,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 818,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 819,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 819,
    },
    Token {
        kind: Identifier,
        lexeme: "totalmem",
        line: 819,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 819,
    },
    Token {
        kind: Number,
        lexeme: "1000000000",
        line: 819,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 819,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 820,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 820,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 820,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 820,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 820,
    },
    Token {
        kind: Break,
        lexeme: "break",
        line: 820,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 820,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 821,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 821,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 821,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 822,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 822,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 822,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 822,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 822,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 823,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 823,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 823,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 823,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 823,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 823,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 823,
    },
    Token {
        kind: String,
        lexeme: "\"memory\"",
        line: 823,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 823,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 823,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 823,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 823,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 823,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 823,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 823,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 823,
    },
    Token {
        kind: String,
        lexeme: "\"overflow\"",
        line: 823,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 823,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 823,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 823,
    },
    Token {
        kind: Identifier,
        lexeme: "error",
        line: 824,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 824,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 824,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 824,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 824,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 824,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 825,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 826,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 827,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 827,
    },
    Token {
        kind: String,
        lexeme: "\"\\nlimit for \"",
        line: 827,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 827,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 827,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 827,
    },
    Token {
        kind: String,
        lexeme: "\": \"",
        line: 827,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 827,
    },
    Token {
        kind: Identifier,
        lexeme: "M",
        line: 827,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 827,
    },
    Token {
        kind: Identifier,
        lexeme: "oldM",
        line: 827,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 827,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 828,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 828,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 829,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 834,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 834,
    },
    Token {
        kind: Identifier,
        lexeme: "testamem",
        line: 834,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 834,
    },
    Token {
        kind: String,
        lexeme: "\"state creation\"",
        line: 834,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 834,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 834,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 834,
    },
    Token {
        kind: Identifier,
        lexeme: "newstate",
        line: 834,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 834,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 835,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 835,
    },
    Token {
        kind: Identifier,
        lexeme: "closestate",
        line: 835,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 835,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 835,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 835,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 835,
    },
    Token {
        kind: Identifier,
        lexeme: "mt",
        line: 841,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 841,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 841,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 841,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 841,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 841,
    },
    Token {
        kind: String,
        lexeme: "\"rawgeti R 1; return 1\"",
        line: 841,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 841,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 842,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 842,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 842,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 842,
    },
    Token {
        kind: Identifier,
        lexeme: "mt",
        line: 842,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 842,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 842,
    },
    Token {
        kind: String,
        lexeme: "\"thread\"",
        line: 842,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 842,
    },
    Token {
        kind: Identifier,
        lexeme: "coroutine",
        line: 842,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 842,
    },
    Token {
        kind: Identifier,
        lexeme: "running",
        line: 842,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 842,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 842,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 842,
    },
    Token {
        kind: Identifier,
        lexeme: "mt",
        line: 842,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 842,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 846,
    },
    Token {
        kind: Identifier,
        lexeme: "expand",
        line: 846,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 846,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 846,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 846,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 846,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 846,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 847,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 847,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 847,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 847,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 847,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 847,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 847,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 847,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 848,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 848,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 848,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 848,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 848,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 848,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 848,
    },
    Token {
        kind: String,
        lexeme: "\"=\"",
        line: 848,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 848,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 848,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 848,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 849,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 849,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 849,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 849,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 849,
    },
    Token {
        kind: String,
        lexeme: "\"T.doonnewstack([%s[ %s;\\n collectgarbage(); %s]%s])\\n\"",
        line: 849,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 849,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 850,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 850,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 850,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 850,
    },
    Token {
        kind: Identifier,
        lexeme: "expand",
        line: 850,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 850,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 850,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 850,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 850,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 850,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 850,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 850,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 850,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 850,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 850,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 851,
    },
    Token {
        kind: Identifier,
        lexeme: "G",
        line: 853,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 853,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 853,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 853,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 853,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 853,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 853,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 853,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 853,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 853,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 853,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 853,
    },
    Token {
        kind: String,
        lexeme: "\"count\"",
        line: 853,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 853,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 854,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 854,
    },
    Token {
        kind: Identifier,
        lexeme: "expand",
        line: 854,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 854,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 854,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 854,
    },
    Token {
        kind: String,
        lexeme: "\"G=G+1\"",
        line: 854,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 854,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 854,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 854,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 854,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 855,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 855,
    },
    Token {
        kind: Identifier,
        lexeme: "G",
        line: 855,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 855,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 855,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 855,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 855,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 855,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 855,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 855,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 855,
    },
    Token {
        kind: Identifier,
        lexeme: "testamem",
        line: 857,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 857,
    },
    Token {
        kind: String,
        lexeme: "\"thread creation\"",
        line: 857,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 857,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 857,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 857,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 857,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 858,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 858,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 858,
    },
    Token {
        kind: Identifier,
        lexeme: "doonnewstack",
        line: 858,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 858,
    },
    Token {
        kind: String,
        lexeme: "\"x=1\"",
        line: 858,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 858,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 858,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 858,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 859,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 859,
    },
    Token {
        kind: Identifier,
        lexeme: "testamem",
        line: 864,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 864,
    },
    Token {
        kind: String,
        lexeme: "\"loadstring\"",
        line: 864,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 864,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 864,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 864,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 864,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 865,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 865,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 865,
    },
    Token {
        kind: String,
        lexeme: "\"x=1\"",
        line: 865,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 865,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 866,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 866,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 869,
    },
    Token {
        kind: Identifier,
        lexeme: "testprog",
        line: 869,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 869,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\nlocal function foo () return end\nlocal t = {\"x\"}\na = \"aaa\"\nfor i = 1, #t do a=a..t[i] end\nreturn true\n]]",
        line: 875,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 878,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 878,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 878,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 878,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 878,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 879,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 879,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 879,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 879,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 879,
    },
    Token {
        kind: Identifier,
        lexeme: "tmpname",
        line: 879,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 879,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 879,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 880,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 880,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 880,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 880,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 880,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 880,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 880,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 880,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 880,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 880,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 880,
    },
    Token {
        kind: String,
        lexeme: "\"w\"",
        line: 880,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 880,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 880,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 881,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 881,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 881,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 881,
    },
    Token {
        kind: Identifier,
        lexeme: "testprog",
        line: 881,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 881,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 882,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 882,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 882,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 882,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 882,
    },
    Token {
        kind: Identifier,
        lexeme: "testamem",
        line: 883,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 883,
    },
    Token {
        kind: String,
        lexeme: "\"dofile\"",
        line: 883,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 883,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 883,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 883,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 883,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 884,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 884,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 884,
    },
    Token {
        kind: Identifier,
        lexeme: "loadfile",
        line: 884,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 884,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 884,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 884,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 885,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 885,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 885,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 885,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 885,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 885,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 886,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 886,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 887,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 887,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 887,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 887,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 887,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 887,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 887,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 887,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 887,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 888,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 888,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 888,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 888,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 888,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 888,
    },
    Token {
        kind: String,
        lexeme: "\"aaax\"",
        line: 888,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 888,
    },
    Token {
        kind: Identifier,
        lexeme: "testamem",
        line: 893,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 893,
    },
    Token {
        kind: String,
        lexeme: "\"string creation\"",
        line: 893,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 893,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 893,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 893,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 893,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 894,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 894,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 894,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 894,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 894,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 894,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 894,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 894,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 894,
    },
    Token {
        kind: String,
        lexeme: "\"alo alo\"",
        line: 894,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 894,
    },
    Token {
        kind: String,
        lexeme: "\"(a)\"",
        line: 894,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 894,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 894,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 894,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 894,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 894,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 894,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 894,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 894,
    },
    Token {
        kind: String,
        lexeme: "'b'",
        line: 894,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 894,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 894,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 895,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 895,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 895,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 895,
    },
    Token {
        kind: String,
        lexeme: "'ablo ablo'",
        line: 895,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 895,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 896,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 896,
    },
    Token {
        kind: Identifier,
        lexeme: "testamem",
        line: 898,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 898,
    },
    Token {
        kind: String,
        lexeme: "\"dump/undump\"",
        line: 898,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 898,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 898,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 898,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 898,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 899,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 899,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 899,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 899,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 899,
    },
    Token {
        kind: Identifier,
        lexeme: "testprog",
        line: 899,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 899,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 900,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 900,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 900,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 900,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 900,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 900,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 900,
    },
    Token {
        kind: Identifier,
        lexeme: "dump",
        line: 900,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 900,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 900,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 900,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 901,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 901,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 901,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 901,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 901,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 901,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 901,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 901,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 902,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 902,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 902,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 902,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 902,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 902,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 903,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 903,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 905,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 905,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 905,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 905,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 905,
    },
    Token {
        kind: Identifier,
        lexeme: "tmpname",
        line: 905,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 905,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 905,
    },
    Token {
        kind: Identifier,
        lexeme: "testamem",
        line: 906,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 906,
    },
    Token {
        kind: String,
        lexeme: "\"file creation\"",
        line: 906,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 906,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 906,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 906,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 906,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 907,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 907,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 907,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 907,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 907,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 907,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 907,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 907,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 907,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 907,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 907,
    },
    Token {
        kind: String,
        lexeme: "'w'",
        line: 907,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 907,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 907,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 908,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 908,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 908,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 908,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 908,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 908,
    },
    Token {
        kind: String,
        lexeme: "\"nomenaoexistente\"",
        line: 908,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 908,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 909,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 909,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 909,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 909,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 909,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 909,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 909,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 910,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 910,
    },
    Token {
        kind: Identifier,
        lexeme: "loadfile",
        line: 910,
    },
    Token {
        kind: String,
        lexeme: "'nomenaoexistente'",
        line: 910,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 911,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 911,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 912,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 912,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 912,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 912,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 912,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 912,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 912,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 912,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 912,
    },
    Token {
        kind: Identifier,
        lexeme: "testamem",
        line: 914,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 914,
    },
    Token {
        kind: String,
        lexeme: "\"table creation\"",
        line: 914,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 914,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 914,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 914,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 914,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 915,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 915,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 915,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 915,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 915,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 915,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 915,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 915,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 915,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 916,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 916,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 916,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 916,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 916,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 916,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 916,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 916,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 916,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 916,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 916,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 916,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 916,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 916,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 916,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 916,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 916,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 916,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 916,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 916,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 916,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 916,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 916,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 916,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 917,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 917,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 917,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 917,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 917,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 917,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 917,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 917,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 917,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 917,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 917,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 917,
    },
    Token {
        kind: String,
        lexeme: "'table'",
        line: 917,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 917,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 917,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 917,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 917,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 917,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 917,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 917,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 917,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 918,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 918,
    },
    Token {
        kind: Identifier,
        lexeme: "testamem",
        line: 920,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 920,
    },
    Token {
        kind: String,
        lexeme: "\"constructors\"",
        line: 920,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 920,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 920,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 920,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 920,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 921,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 921,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 921,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 921,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 921,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 921,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 921,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 921,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 921,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 921,
    },
    Token {
        kind: Number,
        lexeme: "40",
        line: 921,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 921,
    },
    Token {
        kind: Number,
        lexeme: "50",
        line: 921,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 921,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 921,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 921,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 921,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 921,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 921,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 921,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 921,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 921,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 921,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 921,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 921,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 921,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 921,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 921,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 921,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 921,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 921,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 921,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 921,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 921,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 922,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 922,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 922,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 922,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 922,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 922,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 922,
    },
    Token {
        kind: String,
        lexeme: "'table'",
        line: 922,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 922,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 922,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 922,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 922,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 922,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 922,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 922,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 923,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 923,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 925,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 925,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 925,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 925,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 926,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 926,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 926,
    },
    Token {
        kind: Identifier,
        lexeme: "testamem",
        line: 927,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 927,
    },
    Token {
        kind: String,
        lexeme: "\"closure creation\"",
        line: 927,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 927,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 927,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 927,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 927,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 928,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 928,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 928,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 928,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 928,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 928,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 928,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 929,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 929,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 929,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 929,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 929,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 929,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 929,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 929,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 929,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 929,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 929,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 929,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 929,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 929,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 930,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 931,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 931,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 931,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 931,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 931,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 931,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 931,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 931,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 931,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 931,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 931,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 931,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 931,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 931,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 932,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 932,
    },
    Token {
        kind: Identifier,
        lexeme: "testamem",
        line: 934,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 934,
    },
    Token {
        kind: String,
        lexeme: "\"coroutines\"",
        line: 934,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 934,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 934,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 934,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 934,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 935,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 935,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 935,
    },
    Token {
        kind: Identifier,
        lexeme: "coroutine",
        line: 935,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 935,
    },
    Token {
        kind: Identifier,
        lexeme: "wrap",
        line: 935,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 935,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 935,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 935,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 935,
    },
    Token {
        kind: Identifier,
        lexeme: "coroutine",
        line: 936,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 936,
    },
    Token {
        kind: Identifier,
        lexeme: "yield",
        line: 936,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 936,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 936,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 936,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 936,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 936,
    },
    Token {
        kind: String,
        lexeme: "\"a\"",
        line: 936,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 936,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 936,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 936,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 936,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 937,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 937,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 937,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 938,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 938,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 939,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 939,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 939,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 939,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        line: 939,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 939,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 939,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 939,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 939,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 939,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 939,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 939,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 939,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 940,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 940,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 940,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 940,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 941,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 941,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 943,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 943,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 946,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 946,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 946,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 946,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 946,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 946,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 946,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 946,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 946,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 946,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 947,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 947,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 947,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 947,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 947,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 947,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 947,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 947,
    },
    Token {
        kind: String,
        lexeme: "\"gsub 2 3 4; gettop; return 2\"",
        line: 947,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 947,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 947,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 947,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 947,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 947,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 947,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 947,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 948,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 948,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 948,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 948,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 948,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 948,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 949,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 949,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 950,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 952,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 952,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 952,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 952,
    },
    Token {
        kind: String,
        lexeme: "\"alo.alo.uhuh.\"",
        line: 952,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 952,
    },
    Token {
        kind: String,
        lexeme: "\".\"",
        line: 952,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 952,
    },
    Token {
        kind: String,
        lexeme: "\"//\"",
        line: 952,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 952,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 952,
    },
    Token {
        kind: String,
        lexeme: "\"alo//alo//uhuh//\"",
        line: 952,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 952,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 953,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 953,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 953,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 953,
    },
    Token {
        kind: String,
        lexeme: "\"alo.alo.uhuh.\"",
        line: 953,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 953,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 953,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 953,
    },
    Token {
        kind: String,
        lexeme: "\"//\"",
        line: 953,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 953,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 953,
    },
    Token {
        kind: String,
        lexeme: "\"//.//.uhuh.\"",
        line: 953,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 953,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 954,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 954,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 954,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 954,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 954,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 954,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 954,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 954,
    },
    Token {
        kind: String,
        lexeme: "\"//\"",
        line: 954,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 954,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 954,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 954,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 954,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 955,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 955,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 955,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 955,
    },
    Token {
        kind: String,
        lexeme: "\"...\"",
        line: 955,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 955,
    },
    Token {
        kind: String,
        lexeme: "\".\"",
        line: 955,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 955,
    },
    Token {
        kind: String,
        lexeme: "\"/.\"",
        line: 955,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 955,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 955,
    },
    Token {
        kind: String,
        lexeme: "\"/././.\"",
        line: 955,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 955,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 956,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 956,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 956,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 956,
    },
    Token {
        kind: String,
        lexeme: "\"...\"",
        line: 956,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 956,
    },
    Token {
        kind: String,
        lexeme: "\"...\"",
        line: 956,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 956,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 956,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 956,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 956,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 956,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 956,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 960,
    },
    Token {
        kind: Identifier,
        lexeme: "mt_xuxu",
        line: 960,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 960,
    },
    Token {
        kind: Identifier,
        lexeme: "res",
        line: 960,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 960,
    },
    Token {
        kind: Identifier,
        lexeme: "top",
        line: 960,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 960,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 960,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 960,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 960,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 960,
    },
    Token {
        kind: String,
        lexeme: "\"newmetatable xuxu; gettop; return 3\"",
        line: 960,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 960,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 961,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 961,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 961,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 961,
    },
    Token {
        kind: Identifier,
        lexeme: "mt_xuxu",
        line: 961,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 961,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 961,
    },
    Token {
        kind: String,
        lexeme: "\"table\"",
        line: 961,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 961,
    },
    Token {
        kind: Identifier,
        lexeme: "res",
        line: 961,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 961,
    },
    Token {
        kind: Identifier,
        lexeme: "top",
        line: 961,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 961,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 961,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 961,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 962,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 962,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 962,
    },
    Token {
        kind: Identifier,
        lexeme: "res",
        line: 962,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 962,
    },
    Token {
        kind: Identifier,
        lexeme: "top",
        line: 962,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 962,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 962,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 962,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 962,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 962,
    },
    Token {
        kind: String,
        lexeme: "\"newmetatable xuxu; gettop; return 3\"",
        line: 962,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 962,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 963,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 963,
    },
    Token {
        kind: Identifier,
        lexeme: "mt_xuxu",
        line: 963,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 963,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 963,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 963,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 963,
    },
    Token {
        kind: Identifier,
        lexeme: "res",
        line: 963,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 963,
    },
    Token {
        kind: Identifier,
        lexeme: "top",
        line: 963,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 963,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 963,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 963,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 964,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 964,
    },
    Token {
        kind: Identifier,
        lexeme: "res",
        line: 964,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 964,
    },
    Token {
        kind: Identifier,
        lexeme: "top",
        line: 964,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 964,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 964,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 964,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 964,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 964,
    },
    Token {
        kind: String,
        lexeme: "\"newmetatable xuxu1; gettop; return 3\"",
        line: 964,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 964,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 965,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 965,
    },
    Token {
        kind: Identifier,
        lexeme: "mt_xuxu",
        line: 965,
    },
    Token {
        kind: NotEquals,
        lexeme: "~=",
        line: 965,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 965,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 965,
    },
    Token {
        kind: Identifier,
        lexeme: "res",
        line: 965,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 965,
    },
    Token {
        kind: Identifier,
        lexeme: "top",
        line: 965,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 965,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 965,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 965,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 967,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 967,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 967,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 967,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 967,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 967,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 967,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 967,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 967,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 968,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 968,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 968,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 968,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 968,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 968,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 968,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 968,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 968,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 969,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 969,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 969,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 969,
    },
    Token {
        kind: String,
        lexeme: "\"pushstring xuxu; gettable R; setmetatable 2\"",
        line: 969,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 969,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 969,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 969,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 970,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 970,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 970,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 970,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 970,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 970,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 970,
    },
    Token {
        kind: Identifier,
        lexeme: "mt_xuxu",
        line: 970,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 970,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 974,
    },
    Token {
        kind: Identifier,
        lexeme: "res1",
        line: 974,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 974,
    },
    Token {
        kind: Identifier,
        lexeme: "res2",
        line: 974,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 974,
    },
    Token {
        kind: Identifier,
        lexeme: "top",
        line: 974,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 974,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 974,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 974,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 974,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 974,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[testudata -1 xuxu\n   \t \t\t\t  testudata 2 xuxu\n\t\t\t\t  gettop\n\t\t\t\t  return 3]]",
        line: 977,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 977,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 977,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 977,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 978,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 978,
    },
    Token {
        kind: Identifier,
        lexeme: "res1",
        line: 978,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 978,
    },
    Token {
        kind: Identifier,
        lexeme: "res2",
        line: 978,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 978,
    },
    Token {
        kind: Identifier,
        lexeme: "top",
        line: 978,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 978,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 978,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 978,
    },
    Token {
        kind: Identifier,
        lexeme: "res1",
        line: 981,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 981,
    },
    Token {
        kind: Identifier,
        lexeme: "res2",
        line: 981,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 981,
    },
    Token {
        kind: Identifier,
        lexeme: "top",
        line: 981,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 981,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 981,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 981,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 981,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 981,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[testudata -1 xuxu1\n\t\t\t    testudata 2 xuxu1\n\t\t\t    gettop\n\t\t\t    return 3]]",
        line: 984,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 984,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 984,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 984,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 985,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 985,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 985,
    },
    Token {
        kind: Identifier,
        lexeme: "res1",
        line: 985,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 985,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 985,
    },
    Token {
        kind: Identifier,
        lexeme: "res2",
        line: 985,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 985,
    },
    Token {
        kind: Identifier,
        lexeme: "top",
        line: 985,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 985,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 985,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 985,
    },
    Token {
        kind: Identifier,
        lexeme: "res1",
        line: 988,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 988,
    },
    Token {
        kind: Identifier,
        lexeme: "res2",
        line: 988,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 988,
    },
    Token {
        kind: Identifier,
        lexeme: "top",
        line: 988,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 988,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 988,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 988,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 988,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 988,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[testudata -1 xuxu2\n\t\t\t    testudata 2 xuxu2\n\t\t\t    gettop\n\t\t\t    return 3]]",
        line: 991,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 991,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 991,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 991,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 992,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 992,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 992,
    },
    Token {
        kind: Identifier,
        lexeme: "res1",
        line: 992,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 992,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 992,
    },
    Token {
        kind: Identifier,
        lexeme: "res2",
        line: 992,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 992,
    },
    Token {
        kind: Identifier,
        lexeme: "top",
        line: 992,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 992,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 992,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 992,
    },
    Token {
        kind: Identifier,
        lexeme: "res1",
        line: 995,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 995,
    },
    Token {
        kind: Identifier,
        lexeme: "res2",
        line: 995,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 995,
    },
    Token {
        kind: Identifier,
        lexeme: "top",
        line: 995,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 995,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 995,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 995,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 995,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 995,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[testudata -1 xuxu\n\t\t\t    testudata 2 xuxu\n\t\t\t    gettop\n\t\t\t    return 3]]",
        line: 998,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 998,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 998,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 998,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 999,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 999,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 999,
    },
    Token {
        kind: Identifier,
        lexeme: "res1",
        line: 999,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 999,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 999,
    },
    Token {
        kind: Identifier,
        lexeme: "res2",
        line: 999,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 999,
    },
    Token {
        kind: Identifier,
        lexeme: "top",
        line: 999,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 999,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 999,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 999,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 1002,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 1003,
    },
    Token {
        kind: Identifier,
        lexeme: "r",
        line: 1003,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 1003,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 1003,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 1003,
    },
    Token {
        kind: Identifier,
        lexeme: "getregistry",
        line: 1003,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 1003,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 1003,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 1004,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 1004,
    },
    Token {
        kind: Identifier,
        lexeme: "r",
        line: 1004,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 1004,
    },
    Token {
        kind: Identifier,
        lexeme: "xuxu",
        line: 1004,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 1004,
    },
    Token {
        kind: Identifier,
        lexeme: "mt_xuxu",
        line: 1004,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 1004,
    },
    Token {
        kind: Identifier,
        lexeme: "r",
        line: 1004,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 1004,
    },
    Token {
        kind: Identifier,
        lexeme: "xuxu1",
        line: 1004,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 1004,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 1004,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 1004,
    },
    Token {
        kind: Identifier,
        lexeme: "r",
        line: 1005,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 1005,
    },
    Token {
        kind: Identifier,
        lexeme: "xuxu",
        line: 1005,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 1005,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 1005,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 1005,
    },
    Token {
        kind: Identifier,
        lexeme: "r",
        line: 1005,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 1005,
    },
    Token {
        kind: Identifier,
        lexeme: "xuxu1",
        line: 1005,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 1005,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 1005,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 1006,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 1008,
    },
    Token {
        kind: String,
        lexeme: "'OK'",
        line: 1008,
    },
]
