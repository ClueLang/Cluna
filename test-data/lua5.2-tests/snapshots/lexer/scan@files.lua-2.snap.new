---
source: src/main.rs
assertion_line: 91
expression: scanned
input_file: test-data/lua5.2-tests/files.lua
---
[
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 1,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 1,
    },
    Token {
        kind: Identifier,
        lexeme: "require",
        line: 1,
    },
    Token {
        kind: String,
        lexeme: "\"debug\"",
        line: 1,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 3,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 3,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 3,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "getenv",
        line: 3,
    },
    Token {
        kind: String,
        lexeme: "\"PATH\"",
        line: 3,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 3,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 3,
    },
    Token {
        kind: String,
        lexeme: "\"string\"",
        line: 3,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 5,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 5,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 5,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 5,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "stdin",
        line: 5,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 5,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 5,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "stdin",
        line: 5,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 6,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 6,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 6,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 6,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 6,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 6,
    },
    Token {
        kind: String,
        lexeme: "\"non-existent-file\"",
        line: 6,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 6,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 7,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 7,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 7,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 7,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "stdout",
        line: 7,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 7,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 7,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "stdout",
        line: 7,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 10,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 10,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 10,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 10,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 10,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "stdin",
        line: 10,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 10,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 10,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 11,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "stdout",
        line: 11,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 11,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 11,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 11,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 11,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 12,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "stderr",
        line: 12,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 12,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 12,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 12,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 15,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 15,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 15,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 15,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 15,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 15,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 15,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 15,
    },
    Token {
        kind: String,
        lexeme: "\"userdata\"",
        line: 15,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 15,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 15,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 15,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 15,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 15,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 15,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 15,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 15,
    },
    Token {
        kind: String,
        lexeme: "\"file\"",
        line: 15,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 16,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 16,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 16,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "stdin",
        line: 16,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 16,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 16,
    },
    Token {
        kind: String,
        lexeme: "\"userdata\"",
        line: 16,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 16,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 16,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 16,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "stderr",
        line: 16,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 16,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 16,
    },
    Token {
        kind: String,
        lexeme: "\"file\"",
        line: 16,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 17,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 17,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 17,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 17,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 17,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 17,
    },
    Token {
        kind: Number,
        lexeme: "8",
        line: 17,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 17,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 17,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 17,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 17,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 18,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 18,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 18,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 18,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 18,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 18,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 18,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 18,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 18,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 19,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 19,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 19,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 19,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 19,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 19,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 19,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 19,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 21,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 21,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 21,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 21,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 21,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 21,
    },
    Token {
        kind: String,
        lexeme: "'xuxu_nao_existe'",
        line: 21,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 22,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 22,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 22,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 22,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 22,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 22,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 22,
    },
    Token {
        kind: String,
        lexeme: "\"string\"",
        line: 22,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 22,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 22,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 22,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 22,
    },
    Token {
        kind: String,
        lexeme: "\"number\"",
        line: 22,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 24,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 24,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 24,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 24,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 24,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 24,
    },
    Token {
        kind: String,
        lexeme: "'/a/b/c/d'",
        line: 24,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 24,
    },
    Token {
        kind: String,
        lexeme: "'w'",
        line: 24,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 25,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 25,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 25,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 25,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 25,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 25,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 25,
    },
    Token {
        kind: String,
        lexeme: "\"string\"",
        line: 25,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 25,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 25,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 25,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 25,
    },
    Token {
        kind: String,
        lexeme: "\"number\"",
        line: 25,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 25,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 27,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 27,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "tmpname",
        line: 27,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 27,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 27,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 28,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 28,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 28,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 28,
    },
    Token {
        kind: String,
        lexeme: "\"w\"",
        line: 28,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 28,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 29,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 29,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 29,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "Message",
        line: 30,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 30,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 30,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 30,
    },
    Token {
        kind: String,
        lexeme: "\"'os.tmpname' file cannot be open; skipping file tests\"",
        line: 30,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 30,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 33,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 33,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 33,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 35,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 35,
    },
    Token {
        kind: String,
        lexeme: "'testing i/o'",
        line: 35,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 35,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "otherfile",
        line: 37,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 37,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "tmpname",
        line: 37,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 37,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 39,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 39,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 39,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 39,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 39,
    },
    Token {
        kind: String,
        lexeme: "\"rw\"",
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 40,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 40,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 40,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 40,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 40,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 40,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 40,
    },
    Token {
        kind: String,
        lexeme: "\"rb+\"",
        line: 40,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 40,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 41,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 41,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 41,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 41,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 41,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 41,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 41,
    },
    Token {
        kind: String,
        lexeme: "\"r+bk\"",
        line: 41,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 41,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 42,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 42,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 42,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 42,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 42,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 42,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 42,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 42,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 42,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 43,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 43,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 43,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 43,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 43,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 43,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 43,
    },
    Token {
        kind: String,
        lexeme: "\"+\"",
        line: 43,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 43,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 44,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 44,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 44,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 44,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 44,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 44,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 44,
    },
    Token {
        kind: String,
        lexeme: "\"b\"",
        line: 44,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 44,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 45,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 45,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 45,
    },
    Token {
        kind: String,
        lexeme: "\"r+b\"",
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 45,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 46,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 46,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 46,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 46,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 46,
    },
    Token {
        kind: String,
        lexeme: "\"r+\"",
        line: 46,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 46,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 46,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 46,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 46,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 47,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 47,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 47,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 47,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 47,
    },
    Token {
        kind: String,
        lexeme: "\"rb\"",
        line: 47,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 47,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 47,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 47,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 47,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 49,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 49,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: "setlocale",
        line: 49,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 49,
    },
    Token {
        kind: String,
        lexeme: "'C'",
        line: 49,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 49,
    },
    Token {
        kind: String,
        lexeme: "'all'",
        line: 49,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 49,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 51,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 51,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 51,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "stdin",
        line: 51,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 51,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 51,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 51,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 51,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "stdout",
        line: 51,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 51,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 53,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 53,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 53,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 54,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: "loadfile",
        line: 54,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 54,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 54,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 54,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 54,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 55,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 55,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 55,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 55,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 55,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 55,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 55,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 55,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 55,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 55,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 55,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 56,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 56,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 56,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 57,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 57,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 57,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 57,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 57,
    },
    Token {
        kind: NotEquals,
        lexeme: "~=",
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 57,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: "stdout",
        line: 57,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 59,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 59,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 59,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 59,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 59,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "seek",
        line: 59,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 59,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 59,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 59,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 59,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 60,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 60,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 60,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 60,
    },
    Token {
        kind: String,
        lexeme: "\"alo alo\"",
        line: 60,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 60,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "seek",
        line: 60,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 60,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 60,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 60,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        line: 60,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 60,
    },
    Token {
        kind: String,
        lexeme: "\"alo alo\"",
        line: 60,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 60,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 61,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 61,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 61,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 61,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 61,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "seek",
        line: 61,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 61,
    },
    Token {
        kind: String,
        lexeme: "\"cur\"",
        line: 61,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 61,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 61,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 61,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 61,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 61,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        line: 61,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 61,
    },
    Token {
        kind: String,
        lexeme: "\"alo alo\"",
        line: 61,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 61,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 61,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 61,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 62,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 62,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 62,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 62,
    },
    Token {
        kind: String,
        lexeme: "\"joao\"",
        line: 62,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 62,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 63,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 63,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 63,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 63,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 63,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "seek",
        line: 63,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 63,
    },
    Token {
        kind: String,
        lexeme: "\"end\"",
        line: 63,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 63,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 63,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        line: 63,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 63,
    },
    Token {
        kind: String,
        lexeme: "\"alo joao\"",
        line: 63,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 63,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 65,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 65,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 65,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 65,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 65,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "seek",
        line: 65,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 65,
    },
    Token {
        kind: String,
        lexeme: "\"set\"",
        line: 65,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 65,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 65,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 65,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 67,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 67,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 67,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 67,
    },
    Token {
        kind: String,
        lexeme: "'\"álo\"'",
        line: 67,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 67,
    },
    Token {
        kind: String,
        lexeme: "\"{a}\\n\"",
        line: 67,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 67,
    },
    Token {
        kind: String,
        lexeme: "\"second line\\n\"",
        line: 67,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 67,
    },
    Token {
        kind: String,
        lexeme: "\"third line \\n\"",
        line: 67,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 67,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 68,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 68,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 68,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 68,
    },
    Token {
        kind: String,
        lexeme: "'çfourth_line'",
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 69,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 69,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 69,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "stdout",
        line: 69,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 70,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 70,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 71,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 71,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 71,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 71,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 71,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 71,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "stdin",
        line: 71,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "rawequal",
        line: 71,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 71,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 71,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 71,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 71,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 71,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "stdout",
        line: 71,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 71,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 72,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 72,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 72,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 75,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 75,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 75,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 76,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 76,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 76,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 76,
    },
    Token {
        kind: Number,
        lexeme: "120",
        line: 76,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 76,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 77,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 77,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 77,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 77,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 77,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 78,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 78,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 78,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 79,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 79,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 79,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 79,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 79,
    },
    Token {
        kind: String,
        lexeme: "'r'",
        line: 79,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 79,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 80,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "lines",
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 80,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 82,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 82,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 82,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 85,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 85,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 85,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 85,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 85,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 85,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 86,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 86,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 86,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 88,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 88,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "rename",
        line: 88,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 88,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "otherfile",
        line: 88,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 88,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 89,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 89,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: "rename",
        line: 89,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 89,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: "otherfile",
        line: 89,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 89,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 89,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 89,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 91,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 91,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 91,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 91,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "otherfile",
        line: 91,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 91,
    },
    Token {
        kind: String,
        lexeme: "\"ab\"",
        line: 91,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 91,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 92,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 92,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 92,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 92,
    },
    Token {
        kind: String,
        lexeme: "\"\\n\\n\\t\\t  3450\\n\"",
        line: 92,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 92,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 92,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 93,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 93,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 93,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 96,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 96,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 96,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 96,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "lines",
        line: 96,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 96,
    },
    Token {
        kind: String,
        lexeme: "\"non-existent-file\"",
        line: 96,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 96,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 97,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 97,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "rename",
        line: 97,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "otherfile",
        line: 97,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 97,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 97,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 98,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 98,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "otherfile",
        line: 98,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 98,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 99,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 99,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: "lines",
        line: 99,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 99,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 99,
    },
    Token {
        kind: While,
        lexeme: "while",
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 100,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 100,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 100,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 100,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 100,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 101,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 101,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 101,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 101,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 101,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 102,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 102,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 102,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 102,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 102,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 102,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 104,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 104,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: "lines",
        line: 104,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 104,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 104,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 104,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 104,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 104,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 104,
    },
    Token {
        kind: String,
        lexeme: "\"\\n\"",
        line: 104,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 104,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 105,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 105,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 105,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 105,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 107,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 107,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 107,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 107,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: "otherfile",
        line: 107,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 107,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 108,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 108,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 108,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 108,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 108,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 108,
    },
    Token {
        kind: String,
        lexeme: "\"file\"",
        line: 108,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 109,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 109,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 109,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 110,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 110,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 110,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 110,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 110,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 110,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 110,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 110,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 110,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 110,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 110,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 111,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 111,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "lines",
        line: 111,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 111,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 111,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 111,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 111,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 111,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 111,
    },
    Token {
        kind: String,
        lexeme: "\"\\n\"",
        line: 111,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 111,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 112,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: "tostring",
        line: 112,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 112,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 112,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: "sub",
        line: 112,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 112,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 112,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 112,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 112,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 112,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 112,
    },
    Token {
        kind: String,
        lexeme: "\"file \"",
        line: 112,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 113,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 113,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 113,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 113,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 113,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 113,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 113,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 113,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 113,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 114,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 114,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 114,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 114,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 114,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 114,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 114,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 115,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "tostring",
        line: 115,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 115,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 115,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 115,
    },
    Token {
        kind: String,
        lexeme: "\"file (closed)\"",
        line: 115,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 116,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 116,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 116,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 116,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 116,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 116,
    },
    Token {
        kind: String,
        lexeme: "\"closed file\"",
        line: 116,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 117,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 117,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 117,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 118,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 118,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 118,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "otherfile",
        line: 118,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 118,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "lines",
        line: 118,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 118,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 118,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 119,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 119,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "lines",
        line: 119,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 119,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 119,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 119,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 119,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 119,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 119,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 119,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 119,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 120,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 120,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 120,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 120,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 120,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 121,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 121,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 121,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: "otherfile",
        line: 121,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 121,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 123,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 123,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 123,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 123,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 124,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 125,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 125,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 125,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 125,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 125,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 125,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 125,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 125,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 125,
    },
    Token {
        kind: String,
        lexeme: "\"xuxu\"",
        line: 125,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 126,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 126,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 126,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 126,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 126,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 126,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 126,
    },
    Token {
        kind: String,
        lexeme: "\"string\"",
        line: 126,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 126,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 126,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 126,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 126,
    },
    Token {
        kind: String,
        lexeme: "\"number\"",
        line: 126,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 126,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 128,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 128,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 128,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 128,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 128,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 128,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 128,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 128,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 129,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 129,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 129,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 129,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 129,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 129,
    },
    Token {
        kind: String,
        lexeme: "'*l'",
        line: 129,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 129,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 129,
    },
    Token {
        kind: String,
        lexeme: "'\"álo\"'",
        line: 129,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 130,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 130,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 130,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 130,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 130,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 130,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 130,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 130,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 131,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 131,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 131,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 131,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 131,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 131,
    },
    Token {
        kind: String,
        lexeme: "\"second line\"",
        line: 131,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 131,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 132,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 132,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 132,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 132,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 132,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: "seek",
        line: 132,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 132,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 133,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 133,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 133,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 133,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 133,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 133,
    },
    Token {
        kind: String,
        lexeme: "\"third line \"",
        line: 133,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 134,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 134,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 134,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 134,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 134,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "seek",
        line: 134,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 134,
    },
    Token {
        kind: String,
        lexeme: "\"set\"",
        line: 134,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 134,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 134,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 135,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 135,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 135,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 135,
    },
    Token {
        kind: String,
        lexeme: "'*L'",
        line: 135,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 135,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 135,
    },
    Token {
        kind: String,
        lexeme: "\"third line \\n\"",
        line: 135,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 136,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 136,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 136,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 136,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 136,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 136,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 136,
    },
    Token {
        kind: String,
        lexeme: "\"ç\"",
        line: 136,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 137,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 137,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 137,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 137,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        line: 137,
    },
    Token {
        kind: String,
        lexeme: "\"fourth_line\"",
        line: 137,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 137,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 137,
    },
    Token {
        kind: String,
        lexeme: "\"fourth_line\"",
        line: 137,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 138,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 138,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 138,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 138,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 138,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "seek",
        line: 138,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 138,
    },
    Token {
        kind: String,
        lexeme: "\"cur\"",
        line: 138,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 138,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 138,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        line: 138,
    },
    Token {
        kind: String,
        lexeme: "\"fourth_line\"",
        line: 138,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 138,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 139,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 139,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 139,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 139,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 139,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 139,
    },
    Token {
        kind: String,
        lexeme: "\"fourth_line\"",
        line: 139,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 140,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 140,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 140,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 140,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 140,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 140,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 140,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 141,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 141,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 141,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 141,
    },
    Token {
        kind: String,
        lexeme: "'*n'",
        line: 141,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 141,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 141,
    },
    Token {
        kind: Number,
        lexeme: "3450",
        line: 141,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 142,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 142,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 142,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 142,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 142,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 142,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 142,
    },
    Token {
        kind: String,
        lexeme: "'\\n'",
        line: 142,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 143,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 143,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 143,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 143,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 143,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 143,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 143,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 143,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 144,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 144,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 144,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 144,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 144,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 144,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 144,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 144,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 145,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 145,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 145,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 145,
    },
    Token {
        kind: Number,
        lexeme: "30000",
        line: 145,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 145,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 145,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 145,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 146,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 146,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 146,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 146,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 146,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 146,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 146,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 146,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 146,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 146,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 146,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 146,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 146,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 146,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 146,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 147,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 147,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 147,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 147,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 147,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 147,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 147,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 148,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 148,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 148,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 148,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 148,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 148,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 148,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 148,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 148,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 148,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 148,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 148,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 148,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 148,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 148,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 148,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 148,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 149,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 149,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 149,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 149,
    },
    Token {
        kind: String,
        lexeme: "'*n'",
        line: 149,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 149,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 149,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 149,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 150,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 150,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 150,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 150,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 150,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 150,
    },
    Token {
        kind: String,
        lexeme: "'*n'",
        line: 150,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 150,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 150,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 150,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 150,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 150,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 150,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 150,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 150,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 151,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 151,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 151,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 151,
    },
    Token {
        kind: String,
        lexeme: "'*a'",
        line: 151,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 151,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 151,
    },
    Token {
        kind: String,
        lexeme: "''",
        line: 151,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 152,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 152,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 152,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 152,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 152,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 152,
    },
    Token {
        kind: String,
        lexeme: "'*a'",
        line: 152,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 152,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 152,
    },
    Token {
        kind: String,
        lexeme: "''",
        line: 152,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 152,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 153,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 153,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 154,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 154,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 154,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 155,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 155,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 155,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 155,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 155,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 155,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 156,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 156,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 156,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 156,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 156,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 156,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 158,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 158,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 158,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 158,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 158,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 158,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 160,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 160,
    },
    Token {
        kind: String,
        lexeme: "'0123456789'",
        line: 160,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 161,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 161,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 161,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 161,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 161,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 161,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 161,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 161,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 161,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 162,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 162,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        line: 162,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 162,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 162,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 162,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 162,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 162,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 162,
    },
    Token {
        kind: Caret,
        lexeme: "^",
        line: 162,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 162,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 164,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 164,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 164,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 165,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 165,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 165,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 165,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 165,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 165,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 165,
    },
    Token {
        kind: String,
        lexeme: "\"\\n\"",
        line: 165,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 166,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 166,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 166,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 167,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 167,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 167,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 167,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 167,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 167,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 167,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 168,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 168,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 168,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 168,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 168,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 168,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 168,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 168,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 168,
    },
    Token {
        kind: String,
        lexeme: "\"a+b\"",
        line: 168,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 168,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 169,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 169,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 169,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 170,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 170,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 172,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 172,
    },
    Token {
        kind: String,
        lexeme: "' '",
        line: 172,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 172,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 172,
    },
    Token {
        kind: String,
        lexeme: "' '",
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 173,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 173,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 173,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 173,
    },
    Token {
        kind: String,
        lexeme: "';'",
        line: 173,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 173,
    },
    Token {
        kind: String,
        lexeme: "'end of file\\n'",
        line: 173,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 173,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 174,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: "flush",
        line: 174,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 174,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 174,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 174,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: "flush",
        line: 174,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 174,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 175,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 175,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 175,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 176,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 178,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 178,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 178,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 179,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 179,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 179,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 179,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 179,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 179,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 179,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 179,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 179,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 179,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 180,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 180,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 180,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 180,
    },
    Token {
        kind: String,
        lexeme: "' '",
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 181,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 181,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 181,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 181,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        line: 181,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 181,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 181,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 181,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 181,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 182,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 182,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 182,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 182,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 182,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 182,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 182,
    },
    Token {
        kind: String,
        lexeme: "' '",
        line: 182,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 183,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 183,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 183,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 183,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 183,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 183,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 183,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 183,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 183,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 184,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 184,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 184,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 184,
    },
    Token {
        kind: String,
        lexeme: "'*a'",
        line: 184,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 184,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 184,
    },
    Token {
        kind: String,
        lexeme: "';end of file\\n'",
        line: 184,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 185,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 185,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 185,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 185,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 185,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 185,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 185,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 185,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 186,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 186,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 186,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 186,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 186,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 186,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 186,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 186,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 186,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 190,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 191,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 191,
    },
    Token {
        kind: Identifier,
        lexeme: "ismsg",
        line: 191,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 191,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 191,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 191,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 193,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 193,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 193,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 193,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 193,
    },
    Token {
        kind: String,
        lexeme: "\"string\"",
        line: 193,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: "tonumber",
        line: 193,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 193,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 193,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 193,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 193,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 193,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 194,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 197,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 197,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 197,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 197,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 197,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 197,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 197,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 197,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 197,
    },
    Token {
        kind: String,
        lexeme: "\"w\"",
        line: 197,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 197,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: "r",
        line: 198,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 198,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 198,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 198,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 198,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 198,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 199,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 199,
    },
    Token {
        kind: Identifier,
        lexeme: "r",
        line: 199,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 199,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 199,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 199,
    },
    Token {
        kind: Identifier,
        lexeme: "ismsg",
        line: 199,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 199,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 199,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 199,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 199,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 199,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 199,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 199,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 199,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 199,
    },
    Token {
        kind: String,
        lexeme: "\"number\"",
        line: 199,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 199,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 200,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 200,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 200,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 200,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 200,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 202,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 202,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 202,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 202,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 202,
    },
    Token {
        kind: String,
        lexeme: "\"r\"",
        line: 202,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: "r",
        line: 203,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 203,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 203,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 203,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 203,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 203,
    },
    Token {
        kind: String,
        lexeme: "\"whatever\"",
        line: 203,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 204,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: "r",
        line: 204,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 204,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 204,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: "ismsg",
        line: 204,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 204,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 204,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 204,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 204,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 204,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 204,
    },
    Token {
        kind: String,
        lexeme: "\"number\"",
        line: 204,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 205,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 205,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 205,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 205,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 205,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 205,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 205,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 205,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 207,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 207,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 207,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 207,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 207,
    },
    Token {
        kind: String,
        lexeme: "\"w\"",
        line: 207,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: "r",
        line: 208,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 208,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 208,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 208,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: "lines",
        line: 208,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 208,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 208,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 209,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "r",
        line: 209,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 209,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 209,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "ismsg",
        line: 209,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 209,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 209,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 210,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 210,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 210,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 210,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 210,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 210,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 211,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 213,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 213,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 213,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 213,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 213,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 213,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 213,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 213,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 213,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 216,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 216,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 216,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 216,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 216,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 216,
    },
    Token {
        kind: String,
        lexeme: "\"\\n\\nline\\nother\"",
        line: 216,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 216,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 216,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 217,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 217,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 217,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 218,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 218,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 218,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 218,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 218,
    },
    Token {
        kind: String,
        lexeme: "\"*L\"",
        line: 218,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 218,
    },
    Token {
        kind: String,
        lexeme: "\"\\n\"",
        line: 218,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 218,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 219,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 219,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 219,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 219,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 219,
    },
    Token {
        kind: String,
        lexeme: "\"*L\"",
        line: 219,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 219,
    },
    Token {
        kind: String,
        lexeme: "\"\\n\"",
        line: 219,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 219,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 220,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 220,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 220,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 220,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 220,
    },
    Token {
        kind: String,
        lexeme: "\"*L\"",
        line: 220,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 220,
    },
    Token {
        kind: String,
        lexeme: "\"line\\n\"",
        line: 220,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 220,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 221,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 221,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 221,
    },
    Token {
        kind: String,
        lexeme: "\"*L\"",
        line: 221,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 221,
    },
    Token {
        kind: String,
        lexeme: "\"other\"",
        line: 221,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 222,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 222,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 222,
    },
    Token {
        kind: String,
        lexeme: "\"*L\"",
        line: 222,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 222,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 222,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 223,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 223,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 223,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 223,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 223,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 223,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 223,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 223,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 223,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 225,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 225,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 225,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 225,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 225,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 225,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 225,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 225,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 225,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 225,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 225,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 225,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 226,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 226,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 226,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 226,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 227,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 227,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: "lines",
        line: 227,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 227,
    },
    Token {
        kind: String,
        lexeme: "\"*L\"",
        line: 227,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 227,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 227,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 227,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 227,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 228,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 228,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 228,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 228,
    },
    Token {
        kind: String,
        lexeme: "\"\\n\\nline\\nother\"",
        line: 228,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 228,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 229,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 229,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 229,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 229,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 229,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 231,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 231,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 231,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 231,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 231,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 231,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 232,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 232,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 232,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 233,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 233,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: "lines",
        line: 233,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 233,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 233,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 233,
    },
    Token {
        kind: String,
        lexeme: "\"*L\"",
        line: 233,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 233,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 233,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 233,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 233,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 234,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 234,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 234,
    },
    Token {
        kind: String,
        lexeme: "\"\\n\\nline\\nother\"",
        line: 234,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 235,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 235,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 235,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 235,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 235,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 235,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 237,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 237,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 237,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 238,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 238,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: "lines",
        line: 238,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 238,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 238,
    },
    Token {
        kind: String,
        lexeme: "\"*L\"",
        line: 238,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 238,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 238,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 238,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 238,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 239,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 239,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 239,
    },
    Token {
        kind: String,
        lexeme: "\"\\n\\nline\\nother\"",
        line: 239,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 241,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 241,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 241,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 242,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 242,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 242,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 242,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 242,
    },
    Token {
        kind: Identifier,
        lexeme: "lines",
        line: 242,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 242,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 242,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 242,
    },
    Token {
        kind: String,
        lexeme: "\"*l\"",
        line: 242,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 242,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 242,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 242,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 242,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 242,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 242,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 242,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 242,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 243,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 243,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 243,
    },
    Token {
        kind: String,
        lexeme: "\"lineother\"",
        line: 243,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 245,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 245,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 245,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 245,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 245,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 245,
    },
    Token {
        kind: String,
        lexeme: "\"a = 10 + 34\\na = 2*a\\na = -a\\n\"",
        line: 245,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 245,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 245,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 245,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 246,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 246,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 246,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 247,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 247,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "lines",
        line: 247,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 247,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 247,
    },
    Token {
        kind: String,
        lexeme: "\"*L\"",
        line: 247,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 247,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 247,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 247,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 247,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 247,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 247,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 247,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 247,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 248,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 248,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 248,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 248,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 248,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 248,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 248,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 248,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 248,
    },
    Token {
        kind: Number,
        lexeme: "34",
        line: 248,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 248,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 248,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 248,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 248,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 252,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 252,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 252,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 252,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 252,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 252,
    },
    Token {
        kind: String,
        lexeme: "\"0123456789\\n\"",
        line: 252,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 252,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 252,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 252,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 253,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 253,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 253,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: "lines",
        line: 253,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 253,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 253,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 253,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 253,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 253,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 253,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 253,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 254,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 254,
    },
    Token {
        kind: String,
        lexeme: "\"\\n\"",
        line: 254,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 254,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 254,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 254,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 254,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 254,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 255,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: "tonumber",
        line: 255,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 255,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 255,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 255,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 255,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 255,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 255,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 256,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 257,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 259,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 259,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 259,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 259,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: "lines",
        line: 259,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 259,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 259,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 259,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 259,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 259,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 259,
    },
    Token {
        kind: String,
        lexeme: "\"*a\"",
        line: 259,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 259,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 260,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 260,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 260,
    },
    Token {
        kind: String,
        lexeme: "\"0\"",
        line: 260,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 260,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 260,
    },
    Token {
        kind: String,
        lexeme: "\"12\"",
        line: 260,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 260,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 260,
    },
    Token {
        kind: String,
        lexeme: "\"3456789\\n\"",
        line: 260,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 260,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 261,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 263,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 263,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 263,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 263,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: "lines",
        line: 263,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 263,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 263,
    },
    Token {
        kind: String,
        lexeme: "\"*a\"",
        line: 263,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 263,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 263,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 263,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 263,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 263,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 263,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 264,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 264,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 264,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 264,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 264,
    },
    Token {
        kind: Break,
        lexeme: "break",
        line: 264,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 264,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 265,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 265,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 265,
    },
    Token {
        kind: String,
        lexeme: "\"0123456789\\n\"",
        line: 265,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 265,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 265,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 265,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 265,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 265,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 265,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 265,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 266,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 267,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 267,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 269,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 269,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 269,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 269,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 269,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 269,
    },
    Token {
        kind: String,
        lexeme: "\"00\\n10\\n20\\n30\\n40\\n\"",
        line: 269,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 269,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 269,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 269,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 270,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 270,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 270,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: "lines",
        line: 270,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 270,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 270,
    },
    Token {
        kind: String,
        lexeme: "\"*n\"",
        line: 270,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 270,
    },
    Token {
        kind: String,
        lexeme: "\"*n\"",
        line: 270,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 270,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 270,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 271,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 271,
    },
    Token {
        kind: Number,
        lexeme: "40",
        line: 271,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 271,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 271,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 271,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 271,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 271,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 272,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 272,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 272,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 272,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 272,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 272,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 272,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 272,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 272,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 273,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 274,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 278,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 278,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 278,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 278,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 279,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 279,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 279,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\nlocal y\n= X\nX =\nX *\n2 +\nX;\nX =\nX\n-                                   y;\n]]",
        line: 289,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 289,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 289,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 290,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 290,
    },
    Token {
        kind: Identifier,
        lexeme: "X",
        line: 290,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 290,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 290,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 291,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 291,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 291,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 291,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 291,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 291,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 291,
    },
    Token {
        kind: Identifier,
        lexeme: "lines",
        line: 291,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 291,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 291,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 291,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 291,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 291,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 292,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 292,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 292,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 293,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 293,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 293,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 293,
    },
    Token {
        kind: Identifier,
        lexeme: "lines",
        line: 293,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 293,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 293,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 293,
    },
    Token {
        kind: String,
        lexeme: "\"*L\"",
        line: 293,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 293,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 293,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 293,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 293,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 294,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 294,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: "X",
        line: 294,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 294,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 294,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 295,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 295,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 295,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 295,
    },
    Token {
        kind: Identifier,
        lexeme: "lines",
        line: 295,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 295,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 295,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 295,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 295,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 295,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 295,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 295,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 295,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 296,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 296,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 296,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 296,
    },
    Token {
        kind: Identifier,
        lexeme: "X",
        line: 296,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 296,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 296,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 296,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 297,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 297,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: "lines",
        line: 297,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 297,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 297,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 297,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 297,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 297,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 297,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 298,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 298,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 298,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 298,
    },
    Token {
        kind: Identifier,
        lexeme: "X",
        line: 298,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 298,
    },
    Token {
        kind: Number,
        lexeme: "8",
        line: 298,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 298,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 300,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 300,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 300,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 300,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 302,
    },
    Token {
        kind: Identifier,
        lexeme: "x1",
        line: 302,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 302,
    },
    Token {
        kind: String,
        lexeme: "\"string\\n\\n\\\\com \\\"\\\"''coisas [[estranhas]] ]]'\"",
        line: 302,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 303,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 303,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 303,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 303,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 303,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 303,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 304,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 304,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 304,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 304,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 304,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 304,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 304,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 304,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 304,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 304,
    },
    Token {
        kind: String,
        lexeme: "\"x2 = %q\\n-- comment without ending EOS\"",
        line: 304,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 304,
    },
    Token {
        kind: Identifier,
        lexeme: "x1",
        line: 304,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 304,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 304,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 304,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 305,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 305,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 305,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 305,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 305,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 306,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 306,
    },
    Token {
        kind: Identifier,
        lexeme: "loadfile",
        line: 306,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 306,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 306,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 306,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 306,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 306,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 306,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 307,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 307,
    },
    Token {
        kind: Identifier,
        lexeme: "x1",
        line: 307,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 307,
    },
    Token {
        kind: Identifier,
        lexeme: "x2",
        line: 307,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 307,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 308,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 308,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 308,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 308,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 309,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 309,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 309,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 309,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 309,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 309,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 309,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 309,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 309,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 310,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 310,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 310,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 310,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 310,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 310,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 310,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 310,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 310,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 310,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 310,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 311,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 311,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 311,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 311,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 311,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 311,
    },
    Token {
        kind: Identifier,
        lexeme: "otherfile",
        line: 311,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 311,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 311,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 311,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 311,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 314,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 314,
    },
    Token {
        kind: Identifier,
        lexeme: "testloadfile",
        line: 314,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 314,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 314,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 314,
    },
    Token {
        kind: Identifier,
        lexeme: "expres",
        line: 314,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 314,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 315,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 315,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 315,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 315,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 315,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 315,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 316,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 316,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 316,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 316,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 316,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 316,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 316,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 316,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 316,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 316,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 317,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 317,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 317,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 317,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 317,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 318,
    },
    Token {
        kind: Identifier,
        lexeme: "res",
        line: 318,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 318,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 318,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 318,
    },
    Token {
        kind: Identifier,
        lexeme: "loadfile",
        line: 318,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 318,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 318,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 318,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 318,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 318,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 318,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 319,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 319,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 319,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 319,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 319,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 319,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 319,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 319,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 319,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 320,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 320,
    },
    Token {
        kind: Identifier,
        lexeme: "res",
        line: 320,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 320,
    },
    Token {
        kind: Identifier,
        lexeme: "expres",
        line: 320,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 320,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 321,
    },
    Token {
        kind: Identifier,
        lexeme: "testloadfile",
        line: 324,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 324,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 324,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 324,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 324,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 324,
    },
    Token {
        kind: Identifier,
        lexeme: "testloadfile",
        line: 327,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 327,
    },
    Token {
        kind: String,
        lexeme: "\"# a non-ending comment\"",
        line: 327,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 327,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 327,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 327,
    },
    Token {
        kind: Identifier,
        lexeme: "testloadfile",
        line: 331,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 331,
    },
    Token {
        kind: String,
        lexeme: "\"\\xEF\\xBB\\xBF# some comment\\nreturn 234\"",
        line: 331,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 331,
    },
    Token {
        kind: Number,
        lexeme: "234",
        line: 331,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: "testloadfile",
        line: 332,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 332,
    },
    Token {
        kind: String,
        lexeme: "\"\\xEF\\xBB\\xBFreturn 239\"",
        line: 332,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 332,
    },
    Token {
        kind: Number,
        lexeme: "239",
        line: 332,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 332,
    },
    Token {
        kind: Identifier,
        lexeme: "testloadfile",
        line: 333,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 333,
    },
    Token {
        kind: String,
        lexeme: "\"\\xEF\\xBB\\xBF\"",
        line: 333,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 333,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 333,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 333,
    },
    Token {
        kind: Identifier,
        lexeme: "testloadfile",
        line: 337,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 337,
    },
    Token {
        kind: String,
        lexeme: "\"# a comment\\nreturn debug.getinfo(1).currentline\"",
        line: 337,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 337,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 337,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 337,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 341,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 341,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 341,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 341,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 341,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 341,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 341,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 341,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 341,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 341,
    },
    Token {
        kind: String,
        lexeme: "\"wb\"",
        line: 341,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 341,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 341,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 342,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 342,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 342,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 342,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: "dump",
        line: 342,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 342,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 342,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 342,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 342,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 342,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 342,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 342,
    },
    Token {
        kind: String,
        lexeme: "'\\0alo\\255'",
        line: 342,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 342,
    },
    Token {
        kind: String,
        lexeme: "'hi'",
        line: 342,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 342,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 342,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 342,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 343,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 343,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 343,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 343,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 343,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 344,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 344,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 344,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 344,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 344,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 344,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 344,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 344,
    },
    Token {
        kind: Identifier,
        lexeme: "loadfile",
        line: 344,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 344,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 344,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 344,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 344,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 344,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 344,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 345,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 345,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 345,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 345,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 345,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 345,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 345,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 345,
    },
    Token {
        kind: String,
        lexeme: "\"\\0alo\\255\"",
        line: 345,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 345,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 345,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 345,
    },
    Token {
        kind: String,
        lexeme: "\"hi\"",
        line: 345,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 345,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 346,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 346,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 346,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 346,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 346,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 346,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 346,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 346,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 346,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 349,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 350,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 350,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 350,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 350,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 350,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 350,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 350,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 350,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 350,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 350,
    },
    Token {
        kind: String,
        lexeme: "\"wb\"",
        line: 350,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 350,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 350,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 352,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 352,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 352,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 352,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 352,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 352,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 352,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 352,
    },
    Token {
        kind: Identifier,
        lexeme: "dump",
        line: 352,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 352,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 352,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 352,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 352,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 352,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 352,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 352,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 352,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 352,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 352,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 353,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 353,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 353,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 353,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 353,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 354,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 354,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 354,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 354,
    },
    Token {
        kind: Identifier,
        lexeme: "loadfile",
        line: 354,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 354,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 354,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 354,
    },
    Token {
        kind: String,
        lexeme: "\"b\"",
        line: 354,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 354,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 354,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 354,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 354,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 354,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 355,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 355,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 355,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 355,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 355,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 355,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 355,
    },
    Token {
        kind: String,
        lexeme: "\"function\"",
        line: 355,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 355,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 355,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 355,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 355,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 355,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 355,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 355,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 356,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 356,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 356,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 356,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 356,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 356,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 356,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 356,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 356,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 357,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 360,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 360,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 360,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 360,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 360,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 360,
    },
    Token {
        kind: String,
        lexeme: "\"wb\"",
        line: 360,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 360,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 361,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 361,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 361,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 361,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 361,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 361,
    },
    Token {
        kind: String,
        lexeme: "\"#this is a comment for a binary file\\0\\n\"",
        line: 361,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 361,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 362,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 362,
    },
    Token {
        kind: Identifier,
        lexeme: "dump",
        line: 362,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 362,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 362,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 362,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 362,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 362,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 362,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 362,
    },
    Token {
        kind: String,
        lexeme: "'\\0\\0\\0'",
        line: 362,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 362,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 362,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 362,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 362,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 363,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 363,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 363,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 363,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 363,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 364,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 364,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 364,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 364,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 364,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 364,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 364,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 364,
    },
    Token {
        kind: Identifier,
        lexeme: "loadfile",
        line: 364,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 364,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 364,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 364,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 364,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 364,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 364,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 365,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 365,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 365,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 365,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 365,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 365,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 365,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 365,
    },
    Token {
        kind: String,
        lexeme: "\"\\0\\0\\0\"",
        line: 365,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 365,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 365,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 365,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 365,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 365,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 366,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 366,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 366,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 366,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 366,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 366,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 366,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 366,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 366,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 370,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 371,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 371,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 371,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 371,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 371,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 371,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 371,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 371,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 371,
    },
    Token {
        kind: String,
        lexeme: "'w'",
        line: 371,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 371,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 372,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 372,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 372,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\n    if (...) then a = 15; return b, c, d\n    else return _ENV\n    end\n  ]]",
        line: 376,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 377,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 377,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 377,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 377,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 377,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 378,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 378,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 378,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 378,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 378,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 378,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 378,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 378,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 378,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 378,
    },
    Token {
        kind: String,
        lexeme: "\"xuxu\"",
        line: 378,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 378,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 378,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 378,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 378,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 378,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 379,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 379,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 379,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 379,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 379,
    },
    Token {
        kind: Identifier,
        lexeme: "loadfile",
        line: 379,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 379,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 379,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 379,
    },
    Token {
        kind: String,
        lexeme: "'t'",
        line: 379,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 379,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 379,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 379,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 379,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 380,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 380,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 380,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 380,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 380,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 380,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 380,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 380,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 380,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 380,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 380,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 381,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 381,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 381,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 381,
    },
    Token {
        kind: Number,
        lexeme: "15",
        line: 381,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 381,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 381,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 381,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 381,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 381,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 381,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 381,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 381,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 382,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 382,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 382,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 382,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 382,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 383,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 383,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: "loadfile",
        line: 383,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 383,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 383,
    },
    Token {
        kind: String,
        lexeme: "'t'",
        line: 383,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 383,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 383,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 383,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 384,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 384,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 384,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 384,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 384,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 384,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 384,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 384,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 385,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 385,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 385,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 385,
    },
    Token {
        kind: Identifier,
        lexeme: "loadfile",
        line: 385,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 385,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 385,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 385,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 385,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 386,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 386,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 386,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 386,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 386,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 386,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 386,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 386,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 387,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 387,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 387,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 387,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 387,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 387,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 387,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 387,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 387,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 388,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 392,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 393,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 393,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 393,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 393,
    },
    Token {
        kind: String,
        lexeme: "'w'",
        line: 393,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 393,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 393,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 393,
    },
    Token {
        kind: String,
        lexeme: "\"return 10\"",
        line: 393,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 393,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 393,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 393,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 393,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 394,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 394,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 394,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 394,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 394,
    },
    Token {
        kind: Identifier,
        lexeme: "loadfile",
        line: 394,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 394,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 394,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 394,
    },
    Token {
        kind: String,
        lexeme: "'b'",
        line: 394,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 394,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 395,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 395,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 395,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 395,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 395,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 395,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 395,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 395,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 395,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 395,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 395,
    },
    Token {
        kind: String,
        lexeme: "\"a text chunk\"",
        line: 395,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 395,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 395,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 396,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 396,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 396,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 396,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 396,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 396,
    },
    Token {
        kind: String,
        lexeme: "'w'",
        line: 396,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 396,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 396,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 396,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 396,
    },
    Token {
        kind: String,
        lexeme: "\"\\27 return 10\"",
        line: 396,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 396,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 396,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 396,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 396,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 396,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 397,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 397,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 397,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 397,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 397,
    },
    Token {
        kind: Identifier,
        lexeme: "loadfile",
        line: 397,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 397,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 397,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 397,
    },
    Token {
        kind: String,
        lexeme: "'t'",
        line: 397,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 397,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 398,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 398,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 398,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 398,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 398,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 398,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 398,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 398,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 398,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 398,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 398,
    },
    Token {
        kind: String,
        lexeme: "\"a binary chunk\"",
        line: 398,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 398,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 398,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 399,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 399,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 399,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 399,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 399,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 399,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 399,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 399,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 399,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 400,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 403,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 403,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 403,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 403,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 403,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 403,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 404,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 404,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 404,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 404,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 404,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 404,
    },
    Token {
        kind: String,
        lexeme: "\"qualquer coisa\\n\"",
        line: 404,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 404,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 404,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 405,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 405,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 405,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 405,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 405,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 405,
    },
    Token {
        kind: String,
        lexeme: "\"mais qualquer coisa\"",
        line: 405,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 405,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 405,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 406,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 406,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 406,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 406,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 406,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 407,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 407,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 407,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 407,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 407,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 407,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 407,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 407,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 407,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 407,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 407,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 407,
    },
    Token {
        kind: Identifier,
        lexeme: "otherfile",
        line: 407,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 407,
    },
    Token {
        kind: String,
        lexeme: "'wb'",
        line: 407,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 407,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 407,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 407,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 408,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 408,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 408,
    },
    Token {
        kind: String,
        lexeme: "\"outra coisa\\0\\1\\3\\0\\0\\0\\0\\255\\0\"",
        line: 408,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 408,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 409,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 409,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 409,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 409,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 409,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 411,
    },
    Token {
        kind: Identifier,
        lexeme: "filehandle",
        line: 411,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 411,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 411,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 411,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 411,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 411,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 411,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 411,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 411,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 411,
    },
    Token {
        kind: String,
        lexeme: "'r+'",
        line: 411,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 411,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 411,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 412,
    },
    Token {
        kind: Identifier,
        lexeme: "otherfilehandle",
        line: 412,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 412,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 412,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 412,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 412,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 412,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 412,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 412,
    },
    Token {
        kind: Identifier,
        lexeme: "otherfile",
        line: 412,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 412,
    },
    Token {
        kind: String,
        lexeme: "'rb'",
        line: 412,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 412,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 412,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 413,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 413,
    },
    Token {
        kind: Identifier,
        lexeme: "filehandle",
        line: 413,
    },
    Token {
        kind: NotEquals,
        lexeme: "~=",
        line: 413,
    },
    Token {
        kind: Identifier,
        lexeme: "otherfilehandle",
        line: 413,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 413,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 414,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 414,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 414,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 414,
    },
    Token {
        kind: Identifier,
        lexeme: "filehandle",
        line: 414,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 414,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 414,
    },
    Token {
        kind: String,
        lexeme: "\"userdata\"",
        line: 414,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 414,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 415,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 415,
    },
    Token {
        kind: Identifier,
        lexeme: "filehandle",
        line: 415,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 415,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 415,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 415,
    },
    Token {
        kind: String,
        lexeme: "'*l'",
        line: 415,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 415,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 415,
    },
    Token {
        kind: String,
        lexeme: "\"qualquer coisa\"",
        line: 415,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 415,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 416,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 416,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 416,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 416,
    },
    Token {
        kind: Identifier,
        lexeme: "otherfilehandle",
        line: 416,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 416,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 417,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 417,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 417,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 417,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 417,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 417,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 417,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 417,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        line: 417,
    },
    Token {
        kind: String,
        lexeme: "\"outra coisa\"",
        line: 417,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 417,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 417,
    },
    Token {
        kind: String,
        lexeme: "\"outra coisa\"",
        line: 417,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 417,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 418,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 418,
    },
    Token {
        kind: Identifier,
        lexeme: "filehandle",
        line: 418,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 418,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 418,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 418,
    },
    Token {
        kind: String,
        lexeme: "'*l'",
        line: 418,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 418,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 418,
    },
    Token {
        kind: String,
        lexeme: "\"mais qualquer coisa\"",
        line: 418,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 418,
    },
    Token {
        kind: Identifier,
        lexeme: "filehandle",
        line: 419,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 419,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 419,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 419,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 419,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 419,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 420,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 420,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 420,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 420,
    },
    Token {
        kind: Identifier,
        lexeme: "filehandle",
        line: 420,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 420,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 420,
    },
    Token {
        kind: String,
        lexeme: "\"userdata\"",
        line: 420,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 420,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 421,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 421,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 421,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 421,
    },
    Token {
        kind: Identifier,
        lexeme: "otherfilehandle",
        line: 421,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 421,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 422,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 422,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 422,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 422,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 422,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 422,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 422,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 422,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 422,
    },
    Token {
        kind: String,
        lexeme: "\"\\0\\1\\3\\0\"",
        line: 422,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 422,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 423,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 423,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 423,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 423,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 423,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 423,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 423,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 423,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 423,
    },
    Token {
        kind: String,
        lexeme: "\"\\0\\0\\0\"",
        line: 423,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 423,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 424,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 424,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 424,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 424,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 424,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 424,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 424,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 424,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 424,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 424,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 424,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 425,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 425,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 425,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 425,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 425,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 425,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 425,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 425,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 425,
    },
    Token {
        kind: String,
        lexeme: "\"\\255\"",
        line: 425,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 425,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 426,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 426,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 426,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 426,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 426,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 426,
    },
    Token {
        kind: String,
        lexeme: "'*a'",
        line: 426,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 426,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 426,
    },
    Token {
        kind: String,
        lexeme: "\"\\0\"",
        line: 426,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 426,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 427,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 427,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 427,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 427,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 427,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 427,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 427,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 427,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 427,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 427,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 428,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 428,
    },
    Token {
        kind: Identifier,
        lexeme: "otherfilehandle",
        line: 428,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 428,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 428,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 428,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 428,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 428,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 428,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 428,
    },
    Token {
        kind: Identifier,
        lexeme: "otherfilehandle",
        line: 429,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 429,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 429,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 429,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 429,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 430,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 430,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 430,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 430,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 430,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 430,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 430,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 430,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 430,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 431,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 431,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 431,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 431,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 431,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 431,
    },
    Token {
        kind: Identifier,
        lexeme: "otherfile",
        line: 431,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 431,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 431,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 432,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 432,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 432,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 434,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 434,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 434,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 434,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 434,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 434,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 435,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 435,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\n 123.4\t-56e-2  not a number\nsecond line\nthird line\n\nand the rest of the file\n]]",
        line: 441,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 442,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 442,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 442,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 442,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 443,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 443,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 443,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 443,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 443,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 443,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 444,
    },
    Token {
        kind: Identifier,
        lexeme: "_",
        line: 444,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 444,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 444,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 444,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 444,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 444,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 444,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 444,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 444,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 444,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 444,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 444,
    },
    Token {
        kind: Identifier,
        lexeme: "h",
        line: 444,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 444,
    },
    Token {
        kind: Identifier,
        lexeme: "__",
        line: 444,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 444,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 444,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 444,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 444,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 444,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 444,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 444,
    },
    Token {
        kind: String,
        lexeme: "'*n'",
        line: 444,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 444,
    },
    Token {
        kind: String,
        lexeme: "'*n'",
        line: 444,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 444,
    },
    Token {
        kind: String,
        lexeme: "'*l'",
        line: 444,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 444,
    },
    Token {
        kind: String,
        lexeme: "'*l'",
        line: 444,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 444,
    },
    Token {
        kind: String,
        lexeme: "'*l'",
        line: 444,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 444,
    },
    Token {
        kind: String,
        lexeme: "'*a'",
        line: 444,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 444,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 444,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 444,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 445,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 445,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 445,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 445,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 445,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 445,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 445,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 445,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 445,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 445,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 445,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 445,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 445,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 446,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 446,
    },
    Token {
        kind: Identifier,
        lexeme: "_",
        line: 446,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 446,
    },
    Token {
        kind: String,
        lexeme: "' '",
        line: 446,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 446,
    },
    Token {
        kind: Identifier,
        lexeme: "__",
        line: 446,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 446,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 446,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 446,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 447,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 447,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 447,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 447,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 447,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 447,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 447,
    },
    Token {
        kind: String,
        lexeme: "'number'",
        line: 447,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 447,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 447,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 447,
    },
    Token {
        kind: Number,
        lexeme: "123.4",
        line: 447,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 447,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 447,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 447,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 447,
    },
    Token {
        kind: Number,
        lexeme: "56e-2",
        line: 447,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 447,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 448,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 448,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 448,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 448,
    },
    Token {
        kind: String,
        lexeme: "'second line'",
        line: 448,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 448,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 448,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 448,
    },
    Token {
        kind: String,
        lexeme: "'third line'",
        line: 448,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 448,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 449,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 449,
    },
    Token {
        kind: Identifier,
        lexeme: "h",
        line: 449,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 449,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\n\nand the rest of the file\n]]",
        line: 452,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 452,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 453,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 453,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 453,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 453,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 453,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 453,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 453,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 453,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 453,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 454,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 454,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 454,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 457,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 458,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 458,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 458,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 458,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 458,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 458,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 458,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 458,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 458,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 458,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 458,
    },
    Token {
        kind: String,
        lexeme: "\"w\"",
        line: 458,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 458,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 458,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 459,
    },
    Token {
        kind: Identifier,
        lexeme: "fr",
        line: 459,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 459,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 459,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 459,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 459,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 459,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 459,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 459,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 459,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 459,
    },
    Token {
        kind: String,
        lexeme: "\"r\"",
        line: 459,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 459,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 459,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 460,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 460,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 460,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 460,
    },
    Token {
        kind: Identifier,
        lexeme: "setvbuf",
        line: 460,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 460,
    },
    Token {
        kind: String,
        lexeme: "\"full\"",
        line: 460,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 460,
    },
    Token {
        kind: Number,
        lexeme: "2000",
        line: 460,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 460,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 460,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 461,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 461,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 461,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 461,
    },
    Token {
        kind: String,
        lexeme: "\"x\"",
        line: 461,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 461,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 462,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 462,
    },
    Token {
        kind: Identifier,
        lexeme: "fr",
        line: 462,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 462,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 462,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 462,
    },
    Token {
        kind: String,
        lexeme: "\"*all\"",
        line: 462,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 462,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 462,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 462,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 462,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 463,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 463,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 463,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 463,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 463,
    },
    Token {
        kind: Identifier,
        lexeme: "fr",
        line: 464,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 464,
    },
    Token {
        kind: Identifier,
        lexeme: "seek",
        line: 464,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 464,
    },
    Token {
        kind: String,
        lexeme: "\"set\"",
        line: 464,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 464,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 465,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 465,
    },
    Token {
        kind: Identifier,
        lexeme: "fr",
        line: 465,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 465,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 465,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 465,
    },
    Token {
        kind: String,
        lexeme: "\"*all\"",
        line: 465,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 465,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 465,
    },
    Token {
        kind: String,
        lexeme: "\"x\"",
        line: 465,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 465,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 466,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 466,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 466,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 466,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 466,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 466,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 466,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 466,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 466,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 466,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 466,
    },
    Token {
        kind: String,
        lexeme: "\"w\"",
        line: 466,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 466,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 467,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 467,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 467,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 467,
    },
    Token {
        kind: Identifier,
        lexeme: "setvbuf",
        line: 467,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 467,
    },
    Token {
        kind: String,
        lexeme: "\"no\"",
        line: 467,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 467,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 467,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 468,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 468,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 468,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 468,
    },
    Token {
        kind: String,
        lexeme: "\"x\"",
        line: 468,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 468,
    },
    Token {
        kind: Identifier,
        lexeme: "fr",
        line: 469,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 469,
    },
    Token {
        kind: Identifier,
        lexeme: "seek",
        line: 469,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 469,
    },
    Token {
        kind: String,
        lexeme: "\"set\"",
        line: 469,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 469,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 470,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 470,
    },
    Token {
        kind: Identifier,
        lexeme: "fr",
        line: 470,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 470,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 470,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 470,
    },
    Token {
        kind: String,
        lexeme: "\"*all\"",
        line: 470,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 470,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 470,
    },
    Token {
        kind: String,
        lexeme: "\"x\"",
        line: 470,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 470,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 471,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 471,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 471,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 471,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 471,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 472,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 472,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 472,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 472,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 472,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 472,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 472,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 472,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 472,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 472,
    },
    Token {
        kind: String,
        lexeme: "\"a\"",
        line: 472,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 472,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 472,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 473,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 473,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 473,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 473,
    },
    Token {
        kind: Identifier,
        lexeme: "setvbuf",
        line: 473,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 473,
    },
    Token {
        kind: String,
        lexeme: "\"line\"",
        line: 473,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 473,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 473,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 474,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 474,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 474,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 474,
    },
    Token {
        kind: String,
        lexeme: "\"x\"",
        line: 474,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 474,
    },
    Token {
        kind: Identifier,
        lexeme: "fr",
        line: 475,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 475,
    },
    Token {
        kind: Identifier,
        lexeme: "seek",
        line: 475,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 475,
    },
    Token {
        kind: String,
        lexeme: "\"set\"",
        line: 475,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 475,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 475,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 475,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 476,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 476,
    },
    Token {
        kind: Identifier,
        lexeme: "fr",
        line: 476,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 476,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 476,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 476,
    },
    Token {
        kind: String,
        lexeme: "\"*all\"",
        line: 476,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 476,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 476,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 476,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 476,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 477,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 477,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 477,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 477,
    },
    Token {
        kind: String,
        lexeme: "\"a\\n\"",
        line: 477,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 477,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 477,
    },
    Token {
        kind: Identifier,
        lexeme: "seek",
        line: 477,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 477,
    },
    Token {
        kind: String,
        lexeme: "\"set\"",
        line: 477,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 477,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 477,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 477,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 478,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 478,
    },
    Token {
        kind: Identifier,
        lexeme: "fr",
        line: 478,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 478,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 478,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 478,
    },
    Token {
        kind: String,
        lexeme: "\"*all\"",
        line: 478,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 478,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 478,
    },
    Token {
        kind: String,
        lexeme: "\"xa\\n\"",
        line: 478,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 478,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 479,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 479,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 479,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 479,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 479,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 479,
    },
    Token {
        kind: Identifier,
        lexeme: "fr",
        line: 479,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 479,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 479,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 479,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 479,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 480,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 480,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 480,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 480,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 480,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 480,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 480,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 480,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 480,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 481,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 484,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 484,
    },
    Token {
        kind: Identifier,
        lexeme: "_soft",
        line: 484,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 484,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 485,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 485,
    },
    Token {
        kind: String,
        lexeme: "\"testing large files (> BUFSIZ)\"",
        line: 485,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 485,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 486,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 486,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 486,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 486,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 486,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 486,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 487,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 487,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 487,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 487,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 487,
    },
    Token {
        kind: Number,
        lexeme: "5001",
        line: 487,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 487,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 487,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 487,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 487,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 487,
    },
    Token {
        kind: String,
        lexeme: "'0123456789123'",
        line: 487,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 487,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 487,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 488,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 488,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 488,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 488,
    },
    Token {
        kind: String,
        lexeme: "'\\n12346'",
        line: 488,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 488,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 488,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 488,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 488,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 488,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 489,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 489,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 489,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 489,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 489,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 489,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 490,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 490,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 490,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 490,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 490,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 490,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 490,
    },
    Token {
        kind: String,
        lexeme: "'*a'",
        line: 490,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 490,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 491,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 491,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 491,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 491,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 491,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 491,
    },
    Token {
        kind: Identifier,
        lexeme: "seek",
        line: 491,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 491,
    },
    Token {
        kind: String,
        lexeme: "'set'",
        line: 491,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 491,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 491,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 491,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 492,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 492,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 492,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 492,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 492,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 492,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 492,
    },
    Token {
        kind: Number,
        lexeme: "30001",
        line: 492,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 492,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 492,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 492,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 492,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 492,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 492,
    },
    Token {
        kind: Number,
        lexeme: "1005",
        line: 492,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 492,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 492,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 492,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 492,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 492,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 492,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 492,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 492,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 492,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 493,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 493,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 493,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 493,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 493,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 493,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 493,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 493,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 493,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 493,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 493,
    },
    Token {
        kind: Number,
        lexeme: "100003",
        line: 493,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 493,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 494,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 494,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 494,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 494,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 494,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 494,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 494,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 494,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        line: 494,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 494,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 494,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 494,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 494,
    },
    Token {
        kind: Number,
        lexeme: "5001",
        line: 494,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 494,
    },
    Token {
        kind: Number,
        lexeme: "13",
        line: 494,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 494,
    },
    Token {
        kind: Number,
        lexeme: "6",
        line: 494,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 494,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 495,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 495,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 495,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 495,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 495,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 495,
    },
    Token {
        kind: Identifier,
        lexeme: "seek",
        line: 495,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 495,
    },
    Token {
        kind: String,
        lexeme: "'set'",
        line: 495,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 495,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 495,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 495,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 496,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 496,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 496,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 496,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 496,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 496,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 496,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 497,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 497,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 497,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 497,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 497,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 497,
    },
    Token {
        kind: String,
        lexeme: "'\\n'",
        line: 497,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 497,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 497,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 497,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 497,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 497,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 497,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 497,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 498,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 498,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 498,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 498,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 498,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 498,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 498,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 498,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 498,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 498,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 499,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 499,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 499,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 499,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 499,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 499,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 499,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 499,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 499,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 499,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 500,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 500,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 500,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 500,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 500,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 500,
    },
    Token {
        kind: Identifier,
        lexeme: "file",
        line: 500,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 500,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 500,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 501,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 501,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 501,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 501,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 501,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 501,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 501,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 502,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 504,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 504,
    },
    Token {
        kind: Identifier,
        lexeme: "_noposix",
        line: 504,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 504,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 505,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 505,
    },
    Token {
        kind: String,
        lexeme: "\"testing popen/pclose and execute\"",
        line: 505,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 505,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 506,
    },
    Token {
        kind: Identifier,
        lexeme: "tests",
        line: 506,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 506,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 506,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 508,
    },
    Token {
        kind: String,
        lexeme: "\"ls > /dev/null\"",
        line: 508,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 508,
    },
    Token {
        kind: String,
        lexeme: "\"ok\"",
        line: 508,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 508,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 508,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 509,
    },
    Token {
        kind: String,
        lexeme: "\"not-to-be-found-command\"",
        line: 509,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 509,
    },
    Token {
        kind: String,
        lexeme: "\"exit\"",
        line: 509,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 509,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 509,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 510,
    },
    Token {
        kind: String,
        lexeme: "\"exit 3\"",
        line: 510,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 510,
    },
    Token {
        kind: String,
        lexeme: "\"exit\"",
        line: 510,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 510,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 510,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 510,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 510,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 511,
    },
    Token {
        kind: String,
        lexeme: "\"exit 129\"",
        line: 511,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 511,
    },
    Token {
        kind: String,
        lexeme: "\"exit\"",
        line: 511,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 511,
    },
    Token {
        kind: Number,
        lexeme: "129",
        line: 511,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 511,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 511,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 512,
    },
    Token {
        kind: String,
        lexeme: "\"kill -s HUP $$\"",
        line: 512,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 512,
    },
    Token {
        kind: String,
        lexeme: "\"signal\"",
        line: 512,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 512,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 512,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 512,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 512,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 513,
    },
    Token {
        kind: String,
        lexeme: "\"kill -s KILL $$\"",
        line: 513,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 513,
    },
    Token {
        kind: String,
        lexeme: "\"signal\"",
        line: 513,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 513,
    },
    Token {
        kind: Number,
        lexeme: "9",
        line: 513,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 513,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 513,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 514,
    },
    Token {
        kind: String,
        lexeme: "\"sh -c 'kill -s HUP $$'\"",
        line: 514,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 514,
    },
    Token {
        kind: String,
        lexeme: "\"exit\"",
        line: 514,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 514,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 514,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 515,
    },
    Token {
        kind: String,
        lexeme: "'lua -e \"os.exit(20, true)\"'",
        line: 515,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 515,
    },
    Token {
        kind: String,
        lexeme: "\"exit\"",
        line: 515,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 515,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 515,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 515,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 515,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 516,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 517,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 517,
    },
    Token {
        kind: String,
        lexeme: "\"\\n(some error messages are expected now)\"",
        line: 517,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 517,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 518,
    },
    Token {
        kind: Identifier,
        lexeme: "_",
        line: 518,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 518,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 518,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 518,
    },
    Token {
        kind: Identifier,
        lexeme: "ipairs",
        line: 518,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 518,
    },
    Token {
        kind: Identifier,
        lexeme: "tests",
        line: 518,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 518,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 518,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 519,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 519,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 519,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 519,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 519,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        line: 519,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 519,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 519,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 519,
    },
    Token {
        kind: Identifier,
        lexeme: "popen",
        line: 519,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 519,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 519,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 519,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 519,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 519,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 519,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 519,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 519,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 519,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 519,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 520,
    },
    Token {
        kind: Identifier,
        lexeme: "x1",
        line: 520,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 520,
    },
    Token {
        kind: Identifier,
        lexeme: "y1",
        line: 520,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 520,
    },
    Token {
        kind: Identifier,
        lexeme: "z1",
        line: 520,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 520,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 520,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 520,
    },
    Token {
        kind: Identifier,
        lexeme: "execute",
        line: 520,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 520,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 520,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 520,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 520,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 520,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 520,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 521,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 521,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 521,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 521,
    },
    Token {
        kind: Identifier,
        lexeme: "x1",
        line: 521,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 521,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 521,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 521,
    },
    Token {
        kind: Identifier,
        lexeme: "y1",
        line: 521,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 521,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        line: 521,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 521,
    },
    Token {
        kind: Identifier,
        lexeme: "z1",
        line: 521,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 521,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 522,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 522,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 522,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 522,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 522,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 522,
    },
    Token {
        kind: String,
        lexeme: "\"ok\"",
        line: 522,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 522,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 523,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 523,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 523,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 523,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 523,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 523,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 523,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 523,
    },
    Token {
        kind: String,
        lexeme: "'exit'",
        line: 523,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 523,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        line: 523,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 523,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 523,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 523,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 524,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 525,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 525,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 525,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 525,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 525,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 525,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 525,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 525,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 525,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 525,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 525,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 525,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 525,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 527,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 527,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 527,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 527,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 527,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 527,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 527,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 527,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 527,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 527,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        line: 527,
    },
    Token {
        kind: GreaterThan,
        lexeme: ">",
        line: 527,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 527,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 527,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 527,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 527,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 527,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 527,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 527,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 527,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        line: 527,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 527,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 528,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 529,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 530,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 534,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 534,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 534,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 534,
    },
    Token {
        kind: Identifier,
        lexeme: "tmpfile",
        line: 534,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 534,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 534,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 535,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 535,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 535,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 535,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 535,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 535,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 535,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 535,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 535,
    },
    Token {
        kind: String,
        lexeme: "\"file\"",
        line: 535,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 535,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 536,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 536,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 536,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 536,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 536,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 536,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 537,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 537,
    },
    Token {
        kind: Identifier,
        lexeme: "seek",
        line: 537,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 537,
    },
    Token {
        kind: String,
        lexeme: "\"set\"",
        line: 537,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 537,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 538,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 538,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 538,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 538,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 538,
    },
    Token {
        kind: String,
        lexeme: "\"*a\"",
        line: 538,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 538,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 538,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 538,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 540,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 542,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 542,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 545,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 545,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 545,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 545,
    },
    Token {
        kind: Identifier,
        lexeme: "date",
        line: 545,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 545,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 545,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 545,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 545,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 545,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 545,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 546,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 546,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 546,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 546,
    },
    Token {
        kind: Identifier,
        lexeme: "date",
        line: 546,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 546,
    },
    Token {
        kind: String,
        lexeme: "\"!\"",
        line: 546,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 546,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 546,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 546,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 546,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 547,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 547,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 547,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 547,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 547,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 547,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 547,
    },
    Token {
        kind: String,
        lexeme: "\"a\"",
        line: 547,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 547,
    },
    Token {
        kind: Number,
        lexeme: "10000",
        line: 547,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 547,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 548,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 548,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 548,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 548,
    },
    Token {
        kind: Identifier,
        lexeme: "date",
        line: 548,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 548,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 548,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 548,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 548,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 548,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 548,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 549,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 549,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 549,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 549,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 549,
    },
    Token {
        kind: Identifier,
        lexeme: "time",
        line: 549,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 549,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 549,
    },
    Token {
        kind: Identifier,
        lexeme: "D",
        line: 550,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 550,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 550,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 550,
    },
    Token {
        kind: Identifier,
        lexeme: "date",
        line: 550,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 550,
    },
    Token {
        kind: String,
        lexeme: "\"*t\"",
        line: 550,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 550,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 550,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 550,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 551,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 551,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 551,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 551,
    },
    Token {
        kind: Identifier,
        lexeme: "date",
        line: 551,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 551,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 551,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 551,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 551,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 551,
    },
    Token {
        kind: String,
        lexeme: "\"%d\"",
        line: 551,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 551,
    },
    Token {
        kind: Number,
        lexeme: "1000",
        line: 551,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 551,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 551,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 551,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 551,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 551,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 552,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 552,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 552,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 552,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 552,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 552,
    },
    Token {
        kind: Identifier,
        lexeme: "date",
        line: 552,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 552,
    },
    Token {
        kind: String,
        lexeme: "\"%d\"",
        line: 552,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 552,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 552,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 552,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 552,
    },
    Token {
        kind: Number,
        lexeme: "1000",
        line: 552,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 552,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 552,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 553,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 553,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 553,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 553,
    },
    Token {
        kind: Identifier,
        lexeme: "date",
        line: 553,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 553,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 553,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 553,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 553,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 553,
    },
    Token {
        kind: String,
        lexeme: "\"%\"",
        line: 553,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 553,
    },
    Token {
        kind: Number,
        lexeme: "200",
        line: 553,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 553,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 553,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 553,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 553,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 553,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 553,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 553,
    },
    Token {
        kind: String,
        lexeme: "\"%\"",
        line: 553,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 553,
    },
    Token {
        kind: Number,
        lexeme: "100",
        line: 553,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 553,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 553,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 555,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 555,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 555,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 555,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 555,
    },
    Token {
        kind: Identifier,
        lexeme: "time",
        line: 555,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 555,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 555,
    },
    Token {
        kind: Identifier,
        lexeme: "D",
        line: 556,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 556,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 556,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 556,
    },
    Token {
        kind: Identifier,
        lexeme: "date",
        line: 556,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 556,
    },
    Token {
        kind: String,
        lexeme: "\"*t\"",
        line: 556,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 556,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 556,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 556,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 557,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 557,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 557,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 557,
    },
    Token {
        kind: Identifier,
        lexeme: "date",
        line: 557,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 557,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[assert(D.year==%Y and D.month==%m and D.day==%d and\n  D.hour==%H and D.min==%M and D.sec==%S and\n  D.wday==%w+1 and D.yday==%j and type(D.isdst) == 'boolean')]]",
        line: 559,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 559,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 559,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 559,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 559,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 559,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 559,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 561,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 561,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 561,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 561,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 561,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 561,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 561,
    },
    Token {
        kind: Identifier,
        lexeme: "date",
        line: 561,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 561,
    },
    Token {
        kind: String,
        lexeme: "\"%9\"",
        line: 561,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 561,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 561,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 562,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 562,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 562,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 562,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 562,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 562,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 562,
    },
    Token {
        kind: Identifier,
        lexeme: "date",
        line: 562,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 562,
    },
    Token {
        kind: String,
        lexeme: "\"%\"",
        line: 562,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 562,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 562,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 563,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 563,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 563,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 563,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 563,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 563,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 563,
    },
    Token {
        kind: Identifier,
        lexeme: "date",
        line: 563,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 563,
    },
    Token {
        kind: String,
        lexeme: "\"%O\"",
        line: 563,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 563,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 563,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 564,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 564,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 564,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 564,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 564,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 564,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 564,
    },
    Token {
        kind: Identifier,
        lexeme: "date",
        line: 564,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 564,
    },
    Token {
        kind: String,
        lexeme: "\"%E\"",
        line: 564,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 564,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 564,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 565,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 565,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 565,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 565,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 565,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 565,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 565,
    },
    Token {
        kind: Identifier,
        lexeme: "date",
        line: 565,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 565,
    },
    Token {
        kind: String,
        lexeme: "\"%Ea\"",
        line: 565,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 565,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 565,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 567,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 567,
    },
    Token {
        kind: Identifier,
        lexeme: "_noposix",
        line: 567,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 567,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 568,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 568,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 568,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 568,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 568,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 568,
    },
    Token {
        kind: Identifier,
        lexeme: "date",
        line: 568,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 568,
    },
    Token {
        kind: String,
        lexeme: "\"%Ex\"",
        line: 568,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 568,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 568,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 568,
    },
    Token {
        kind: String,
        lexeme: "'string'",
        line: 568,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 568,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 569,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 569,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 569,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 569,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 569,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 569,
    },
    Token {
        kind: Identifier,
        lexeme: "date",
        line: 569,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 569,
    },
    Token {
        kind: String,
        lexeme: "\"%Oy\"",
        line: 569,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 569,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 569,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 569,
    },
    Token {
        kind: String,
        lexeme: "'string'",
        line: 569,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 569,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 570,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 572,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 572,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 572,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 572,
    },
    Token {
        kind: Identifier,
        lexeme: "time",
        line: 572,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 572,
    },
    Token {
        kind: Identifier,
        lexeme: "D",
        line: 572,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 572,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 572,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 572,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 572,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 573,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 573,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 573,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 573,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 573,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 573,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 573,
    },
    Token {
        kind: Identifier,
        lexeme: "time",
        line: 573,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 573,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 573,
    },
    Token {
        kind: Identifier,
        lexeme: "hour",
        line: 573,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 573,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 573,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 573,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 573,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 573,
    },
    Token {
        kind: Identifier,
        lexeme: "D",
        line: 575,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 575,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 575,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 575,
    },
    Token {
        kind: Identifier,
        lexeme: "date",
        line: 575,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 575,
    },
    Token {
        kind: String,
        lexeme: "\"!*t\"",
        line: 575,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 575,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 575,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 575,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 576,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 576,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 576,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 576,
    },
    Token {
        kind: Identifier,
        lexeme: "date",
        line: 576,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 576,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[!assert(D.year==%Y and D.month==%m and D.day==%d and\n  D.hour==%H and D.min==%M and D.sec==%S and\n  D.wday==%w+1 and D.yday==%j and type(D.isdst) == 'boolean')]]",
        line: 578,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 578,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 578,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 578,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 578,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 578,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 578,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 580,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 581,
    },
    Token {
        kind: Identifier,
        lexeme: "D",
        line: 581,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 581,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 581,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 581,
    },
    Token {
        kind: Identifier,
        lexeme: "date",
        line: 581,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 581,
    },
    Token {
        kind: String,
        lexeme: "\"*t\"",
        line: 581,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 581,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 582,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 582,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 582,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 582,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 582,
    },
    Token {
        kind: Identifier,
        lexeme: "time",
        line: 582,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 582,
    },
    Token {
        kind: Identifier,
        lexeme: "D",
        line: 582,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 582,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 583,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 583,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 583,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 583,
    },
    Token {
        kind: Identifier,
        lexeme: "D",
        line: 583,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 583,
    },
    Token {
        kind: Identifier,
        lexeme: "isdst",
        line: 583,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 583,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 583,
    },
    Token {
        kind: String,
        lexeme: "'boolean'",
        line: 583,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 583,
    },
    Token {
        kind: Identifier,
        lexeme: "D",
        line: 584,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 584,
    },
    Token {
        kind: Identifier,
        lexeme: "isdst",
        line: 584,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 584,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 584,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 585,
    },
    Token {
        kind: Identifier,
        lexeme: "t1",
        line: 585,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 585,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 585,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 585,
    },
    Token {
        kind: Identifier,
        lexeme: "time",
        line: 585,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 585,
    },
    Token {
        kind: Identifier,
        lexeme: "D",
        line: 585,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 585,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 586,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 586,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 586,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 586,
    },
    Token {
        kind: Identifier,
        lexeme: "t1",
        line: 586,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 586,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 587,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 589,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 589,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 589,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 589,
    },
    Token {
        kind: Identifier,
        lexeme: "time",
        line: 589,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 589,
    },
    Token {
        kind: Identifier,
        lexeme: "D",
        line: 589,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 589,
    },
    Token {
        kind: Identifier,
        lexeme: "D",
        line: 590,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 590,
    },
    Token {
        kind: Identifier,
        lexeme: "year",
        line: 590,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 590,
    },
    Token {
        kind: Identifier,
        lexeme: "D",
        line: 590,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 590,
    },
    Token {
        kind: Identifier,
        lexeme: "year",
        line: 590,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 590,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 590,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 590,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 591,
    },
    Token {
        kind: Identifier,
        lexeme: "t1",
        line: 591,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 591,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 591,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 591,
    },
    Token {
        kind: Identifier,
        lexeme: "time",
        line: 591,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 591,
    },
    Token {
        kind: Identifier,
        lexeme: "D",
        line: 591,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 591,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 593,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 593,
    },
    Token {
        kind: Identifier,
        lexeme: "math",
        line: 593,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 593,
    },
    Token {
        kind: Identifier,
        lexeme: "abs",
        line: 593,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 593,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 593,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 593,
    },
    Token {
        kind: Identifier,
        lexeme: "difftime",
        line: 593,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 593,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 593,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 593,
    },
    Token {
        kind: Identifier,
        lexeme: "t1",
        line: 593,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 593,
    },
    Token {
        kind: Slash,
        lexeme: "/",
        line: 593,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 593,
    },
    Token {
        kind: Number,
        lexeme: "24",
        line: 593,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 593,
    },
    Token {
        kind: Number,
        lexeme: "3600",
        line: 593,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 593,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 593,
    },
    Token {
        kind: Number,
        lexeme: "365",
        line: 593,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 593,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 593,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 593,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 593,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 595,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 595,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 595,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 595,
    },
    Token {
        kind: Identifier,
        lexeme: "time",
        line: 595,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 595,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 595,
    },
    Token {
        kind: Identifier,
        lexeme: "t1",
        line: 596,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 596,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 596,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 596,
    },
    Token {
        kind: Identifier,
        lexeme: "time",
        line: 596,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 596,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 596,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 596,
    },
    Token {
        kind: Identifier,
        lexeme: "date",
        line: 596,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 596,
    },
    Token {
        kind: String,
        lexeme: "\"*t\"",
        line: 596,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 596,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 596,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 597,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 597,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 597,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 597,
    },
    Token {
        kind: Identifier,
        lexeme: "difftime",
        line: 597,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 597,
    },
    Token {
        kind: Identifier,
        lexeme: "t1",
        line: 597,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 597,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 597,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 597,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        line: 597,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 597,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 597,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 599,
    },
    Token {
        kind: Identifier,
        lexeme: "t1",
        line: 599,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 599,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 599,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 599,
    },
    Token {
        kind: Identifier,
        lexeme: "time",
        line: 599,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 599,
    },
    Token {
        kind: Identifier,
        lexeme: "year",
        line: 599,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 599,
    },
    Token {
        kind: Number,
        lexeme: "2000",
        line: 599,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 599,
    },
    Token {
        kind: Identifier,
        lexeme: "month",
        line: 599,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 599,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 599,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 599,
    },
    Token {
        kind: Identifier,
        lexeme: "day",
        line: 599,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 599,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 599,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 599,
    },
    Token {
        kind: Identifier,
        lexeme: "hour",
        line: 599,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 599,
    },
    Token {
        kind: Number,
        lexeme: "23",
        line: 599,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 599,
    },
    Token {
        kind: Identifier,
        lexeme: "min",
        line: 599,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 599,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 599,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 599,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 600,
    },
    Token {
        kind: Identifier,
        lexeme: "t2",
        line: 600,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 600,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 600,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 600,
    },
    Token {
        kind: Identifier,
        lexeme: "time",
        line: 600,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 600,
    },
    Token {
        kind: Identifier,
        lexeme: "year",
        line: 600,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 600,
    },
    Token {
        kind: Number,
        lexeme: "2000",
        line: 600,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 600,
    },
    Token {
        kind: Identifier,
        lexeme: "month",
        line: 600,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 600,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 600,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 600,
    },
    Token {
        kind: Identifier,
        lexeme: "day",
        line: 600,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 600,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 600,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 600,
    },
    Token {
        kind: Identifier,
        lexeme: "hour",
        line: 600,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 600,
    },
    Token {
        kind: Number,
        lexeme: "23",
        line: 600,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 600,
    },
    Token {
        kind: Identifier,
        lexeme: "min",
        line: 600,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 600,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 600,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 600,
    },
    Token {
        kind: Identifier,
        lexeme: "sec",
        line: 600,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 600,
    },
    Token {
        kind: Number,
        lexeme: "19",
        line: 600,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 600,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 601,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 601,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 601,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 601,
    },
    Token {
        kind: Identifier,
        lexeme: "difftime",
        line: 601,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 601,
    },
    Token {
        kind: Identifier,
        lexeme: "t1",
        line: 601,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 601,
    },
    Token {
        kind: Identifier,
        lexeme: "t2",
        line: 601,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 601,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 601,
    },
    Token {
        kind: Number,
        lexeme: "60",
        line: 601,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 601,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 601,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 601,
    },
    Token {
        kind: Number,
        lexeme: "19",
        line: 601,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 601,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 603,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 603,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 603,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 603,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 603,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 603,
    },
    Token {
        kind: Identifier,
        lexeme: "stdout",
        line: 603,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 603,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 604,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 604,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 604,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 604,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 604,
    },
    Token {
        kind: Identifier,
        lexeme: "date",
        line: 604,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 604,
    },
    Token {
        kind: String,
        lexeme: "'%d'",
        line: 604,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 604,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 605,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 605,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 605,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 605,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 605,
    },
    Token {
        kind: Identifier,
        lexeme: "date",
        line: 605,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 605,
    },
    Token {
        kind: String,
        lexeme: "'%m'",
        line: 605,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 605,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 606,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 606,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 606,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 606,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 606,
    },
    Token {
        kind: Identifier,
        lexeme: "date",
        line: 606,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 606,
    },
    Token {
        kind: String,
        lexeme: "'%Y'",
        line: 606,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 606,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 607,
    },
    Token {
        kind: Identifier,
        lexeme: "ds",
        line: 607,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 607,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 607,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 607,
    },
    Token {
        kind: Identifier,
        lexeme: "date",
        line: 607,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 607,
    },
    Token {
        kind: String,
        lexeme: "'%w'",
        line: 607,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 607,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 607,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 607,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 608,
    },
    Token {
        kind: Identifier,
        lexeme: "h",
        line: 608,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 608,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 608,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 608,
    },
    Token {
        kind: Identifier,
        lexeme: "date",
        line: 608,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 608,
    },
    Token {
        kind: String,
        lexeme: "'%H'",
        line: 608,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 608,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 609,
    },
    Token {
        kind: Identifier,
        lexeme: "min",
        line: 609,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 609,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 609,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 609,
    },
    Token {
        kind: Identifier,
        lexeme: "date",
        line: 609,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 609,
    },
    Token {
        kind: String,
        lexeme: "'%M'",
        line: 609,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 609,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 610,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 610,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 610,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 610,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 610,
    },
    Token {
        kind: Identifier,
        lexeme: "date",
        line: 610,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 610,
    },
    Token {
        kind: String,
        lexeme: "'%S'",
        line: 610,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 610,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 611,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 611,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 611,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 611,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 611,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 611,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 611,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 611,
    },
    Token {
        kind: String,
        lexeme: "'test done on %2.2d/%2.2d/%d'",
        line: 611,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 611,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 611,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 611,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 611,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 611,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 611,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 611,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 611,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 612,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 612,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 612,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 612,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 612,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 612,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 612,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 612,
    },
    Token {
        kind: String,
        lexeme: "', at %2.2d:%2.2d:%2.2d\\n'",
        line: 612,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 612,
    },
    Token {
        kind: Identifier,
        lexeme: "h",
        line: 612,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 612,
    },
    Token {
        kind: Identifier,
        lexeme: "min",
        line: 612,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 612,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 612,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 612,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 612,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 613,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 613,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 613,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 613,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 613,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 613,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 613,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 613,
    },
    Token {
        kind: String,
        lexeme: "'%s\\n'",
        line: 613,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 613,
    },
    Token {
        kind: Identifier,
        lexeme: "_VERSION",
        line: 613,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 613,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 613,
    },
]
