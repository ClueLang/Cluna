---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.2-tests/checktable.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 2,
            column: 7,
            span: 1..7,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 2,
            column: 8,
            span: 7..8,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        position: Position {
            line: 2,
            column: 14,
            span: 8..14,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 2,
            column: 15,
            span: 14..15,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 2,
            column: 17,
            span: 15..17,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 2,
            column: 18,
            span: 17..18,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stat\"",
        ),
        position: Position {
            line: 2,
            column: 25,
            span: 19..25,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 2,
            column: 26,
            span: 25..26,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 2,
            column: 29,
            span: 27..29,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 2,
            column: 33,
            span: 30..33,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 2,
            column: 34,
            span: 33..34,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 4,
            column: 3,
            span: 65..67,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 4,
            column: 5,
            span: 68..69,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 4,
            column: 8,
            span: 70..72,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 4,
            column: 12,
            span: 73..76,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 4,
            column: 0,
            span: 77..81,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stat",
        ),
        position: Position {
            line: 5,
            column: 7,
            span: 84..88,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 5,
            column: 9,
            span: 89..90,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 5,
            column: 18,
            span: 91..99,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 5,
            column: 20,
            span: 100..101,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 5,
            column: 21,
            span: 101..102,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 5,
            column: 27,
            span: 103..108,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"`querytab' not active\"",
        ),
        position: Position {
            line: 5,
            column: 50,
            span: 108..131,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 5,
            column: 0,
            span: 132..135,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 6,
            column: 0,
            span: 138..144,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 7,
            column: 0,
            span: 145..148,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 10,
            column: 9,
            span: 151..159,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktable",
        ),
        position: Position {
            line: 10,
            column: 20,
            span: 160..170,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 10,
            column: 22,
            span: 171..172,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 10,
            column: 23,
            span: 172..173,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 10,
            column: 24,
            span: 173..174,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 11,
            column: 8,
            span: 177..182,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "asize",
        ),
        position: Position {
            line: 11,
            column: 14,
            span: 183..188,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 11,
            column: 15,
            span: 188..189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hsize",
        ),
        position: Position {
            line: 11,
            column: 21,
            span: 190..195,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 11,
            column: 22,
            span: 195..196,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ff",
        ),
        position: Position {
            line: 11,
            column: 25,
            span: 197..199,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 11,
            column: 27,
            span: 200..201,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 11,
            column: 29,
            span: 202..203,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 11,
            column: 30,
            span: 203..204,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "querytab",
        ),
        position: Position {
            line: 11,
            column: 38,
            span: 204..212,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 11,
            column: 39,
            span: 212..213,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 11,
            column: 40,
            span: 213..214,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 11,
            column: 41,
            span: 214..215,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 12,
            column: 8,
            span: 218..223,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 12,
            column: 10,
            span: 224..225,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 12,
            column: 12,
            span: 226..227,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 12,
            column: 14,
            span: 228..229,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 12,
            column: 15,
            span: 229..230,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 13,
            column: 6,
            span: 233..236,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 13,
            column: 8,
            span: 237..238,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 13,
            column: 9,
            span: 238..239,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 13,
            column: 10,
            span: 238..240,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 13,
            column: 11,
            span: 240..241,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hsize",
        ),
        position: Position {
            line: 13,
            column: 16,
            span: 241..246,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 13,
            column: 17,
            span: 246..247,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 13,
            column: 18,
            span: 246..248,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 13,
            column: 0,
            span: 249..251,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 14,
            column: 10,
            span: 256..261,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "key",
        ),
        position: Position {
            line: 14,
            column: 14,
            span: 262..265,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 14,
            column: 15,
            span: 265..266,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        position: Position {
            line: 14,
            column: 18,
            span: 266..269,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 14,
            column: 19,
            span: 269..270,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        position: Position {
            line: 14,
            column: 23,
            span: 270..274,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 14,
            column: 25,
            span: 275..276,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 14,
            column: 27,
            span: 277..278,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 14,
            column: 28,
            span: 278..279,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "querytab",
        ),
        position: Position {
            line: 14,
            column: 36,
            span: 279..287,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 14,
            column: 37,
            span: 287..288,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 14,
            column: 38,
            span: 288..289,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 14,
            column: 39,
            span: 289..290,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 14,
            column: 41,
            span: 291..292,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 14,
            column: 43,
            span: 293..294,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "asize",
        ),
        position: Position {
            line: 14,
            column: 49,
            span: 295..300,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 14,
            column: 50,
            span: 300..301,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 15,
            column: 7,
            span: 306..308,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "key",
        ),
        position: Position {
            line: 15,
            column: 11,
            span: 309..312,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 15,
            column: 14,
            span: 313..315,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 15,
            column: 18,
            span: 316..319,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 15,
            column: 0,
            span: 320..324,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 16,
            column: 13,
            span: 331..337,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 16,
            column: 14,
            span: 337..338,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 16,
            column: 15,
            span: 338..339,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 16,
            column: 16,
            span: 339..340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 16,
            column: 17,
            span: 340..341,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 16,
            column: 18,
            span: 341..342,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 16,
            column: 21,
            span: 343..345,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 16,
            column: 25,
            span: 346..349,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 16,
            column: 29,
            span: 350..353,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        position: Position {
            line: 16,
            column: 33,
            span: 354..357,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 16,
            column: 35,
            span: 357..359,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 16,
            column: 38,
            span: 359..362,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 16,
            column: 42,
            span: 363..366,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        position: Position {
            line: 16,
            column: 47,
            span: 367..371,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 16,
            column: 49,
            span: 371..373,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 16,
            column: 52,
            span: 373..376,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 16,
            column: 53,
            span: 376..377,
        },
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        position: Position {
            line: 17,
            column: 11,
            span: 382..388,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "key",
        ),
        position: Position {
            line: 17,
            column: 15,
            span: 389..392,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 17,
            column: 18,
            span: 393..395,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<undef>\"",
        ),
        position: Position {
            line: 17,
            column: 28,
            span: 396..405,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 17,
            column: 0,
            span: 406..410,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 18,
            column: 13,
            span: 417..423,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 18,
            column: 14,
            span: 423..424,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        position: Position {
            line: 18,
            column: 17,
            span: 424..427,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 18,
            column: 19,
            span: 427..429,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 18,
            column: 22,
            span: 429..432,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 18,
            column: 23,
            span: 432..433,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 19,
            column: 0,
            span: 438..442,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 20,
            column: 13,
            span: 449..455,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 20,
            column: 14,
            span: 455..456,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 20,
            column: 15,
            span: 456..457,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 20,
            column: 16,
            span: 457..458,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "key",
        ),
        position: Position {
            line: 20,
            column: 19,
            span: 458..461,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 20,
            column: 20,
            span: 461..462,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 20,
            column: 23,
            span: 463..465,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        position: Position {
            line: 20,
            column: 27,
            span: 466..469,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 20,
            column: 28,
            span: 469..470,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 21,
            column: 12,
            span: 477..482,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp",
        ),
        position: Position {
            line: 21,
            column: 15,
            span: 483..485,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 21,
            column: 17,
            span: 486..487,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 21,
            column: 19,
            span: 488..489,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 21,
            column: 20,
            span: 489..490,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hash",
        ),
        position: Position {
            line: 21,
            column: 24,
            span: 490..494,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 21,
            column: 25,
            span: 494..495,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "key",
        ),
        position: Position {
            line: 21,
            column: 28,
            span: 495..498,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 21,
            column: 29,
            span: 498..499,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 21,
            column: 31,
            span: 500..501,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 21,
            column: 32,
            span: 501..502,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 22,
            column: 9,
            span: 509..511,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 22,
            column: 11,
            span: 512..513,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 22,
            column: 12,
            span: 513..514,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 22,
            column: 13,
            span: 514..515,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 22,
            column: 14,
            span: 515..516,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 22,
            column: 0,
            span: 517..521,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 23,
            column: 15,
            span: 530..536,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 23,
            column: 16,
            span: 536..537,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 23,
            column: 17,
            span: 537..538,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 23,
            column: 18,
            span: 538..539,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 23,
            column: 19,
            span: 539..540,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 23,
            column: 20,
            span: 540..541,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 23,
            column: 23,
            span: 542..544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp",
        ),
        position: Position {
            line: 23,
            column: 26,
            span: 545..547,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 23,
            column: 27,
            span: 547..548,
        },
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        position: Position {
            line: 24,
            column: 13,
            span: 555..561,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp",
        ),
        position: Position {
            line: 24,
            column: 16,
            span: 562..564,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 24,
            column: 19,
            span: 565..567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 24,
            column: 21,
            span: 568..569,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 24,
            column: 0,
            span: 570..574,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 25,
            column: 10,
            span: 583..584,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 25,
            column: 11,
            span: 584..585,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 25,
            column: 12,
            span: 585..586,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 25,
            column: 13,
            span: 586..587,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 25,
            column: 15,
            span: 588..589,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp",
        ),
        position: Position {
            line: 25,
            column: 0,
            span: 590..592,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 26,
            column: 11,
            span: 599..603,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 27,
            column: 10,
            span: 626..627,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 27,
            column: 11,
            span: 627..628,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp",
        ),
        position: Position {
            line: 27,
            column: 13,
            span: 628..630,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 27,
            column: 14,
            span: 630..631,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 27,
            column: 16,
            span: 632..633,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 27,
            column: 18,
            span: 634..635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp",
        ),
        position: Position {
            line: 27,
            column: 20,
            span: 635..637,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 27,
            column: 21,
            span: 637..638,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 28,
            column: 14,
            span: 666..671,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        position: Position {
            line: 28,
            column: 19,
            span: 672..676,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 28,
            column: 0,
            span: 677..679,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 29,
            column: 17,
            span: 690..696,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 29,
            column: 18,
            span: 696..697,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ff",
        ),
        position: Position {
            line: 29,
            column: 20,
            span: 697..699,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 29,
            column: 23,
            span: 700..702,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        position: Position {
            line: 29,
            column: 28,
            span: 703..707,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 29,
            column: 32,
            span: 708..711,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        position: Position {
            line: 29,
            column: 37,
            span: 712..716,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 29,
            column: 39,
            span: 717..718,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hsize",
        ),
        position: Position {
            line: 29,
            column: 45,
            span: 719..724,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 29,
            column: 46,
            span: 724..725,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 30,
            column: 13,
            span: 736..738,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 30,
            column: 15,
            span: 739..740,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 30,
            column: 16,
            span: 740..741,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        position: Position {
            line: 30,
            column: 20,
            span: 741..745,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 30,
            column: 21,
            span: 745..746,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 30,
            column: 26,
            span: 747..751,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 30,
            column: 33,
            span: 752..758,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 30,
            column: 34,
            span: 758..759,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 30,
            column: 35,
            span: 759..760,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 30,
            column: 36,
            span: 760..761,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        position: Position {
            line: 30,
            column: 40,
            span: 761..765,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 30,
            column: 41,
            span: 765..766,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 30,
            column: 44,
            span: 767..769,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp",
        ),
        position: Position {
            line: 30,
            column: 47,
            span: 770..772,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 30,
            column: 48,
            span: 772..773,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 30,
            column: 53,
            span: 774..778,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 30,
            column: 55,
            span: 779..780,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 30,
            column: 56,
            span: 780..781,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        position: Position {
            line: 30,
            column: 60,
            span: 781..785,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 30,
            column: 61,
            span: 785..786,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 30,
            column: 63,
            span: 787..788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp",
        ),
        position: Position {
            line: 30,
            column: 66,
            span: 789..791,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 30,
            column: 0,
            span: 792..795,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 31,
            column: 16,
            span: 806..811,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 31,
            column: 17,
            span: 811..812,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 31,
            column: 23,
            span: 812..818,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 31,
            column: 24,
            span: 818..819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 31,
            column: 25,
            span: 819..820,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 31,
            column: 26,
            span: 820..821,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp",
        ),
        position: Position {
            line: 31,
            column: 28,
            span: 821..823,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 31,
            column: 29,
            span: 823..824,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 31,
            column: 30,
            span: 824..825,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        position: Position {
            line: 31,
            column: 35,
            span: 826..830,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 31,
            column: 36,
            span: 830..831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "key",
        ),
        position: Position {
            line: 32,
            column: 14,
            span: 842..845,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 32,
            column: 15,
            span: 845..846,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        position: Position {
            line: 32,
            column: 18,
            span: 846..849,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 32,
            column: 19,
            span: 849..850,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        position: Position {
            line: 32,
            column: 23,
            span: 850..854,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 32,
            column: 25,
            span: 855..856,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 32,
            column: 27,
            span: 857..858,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 32,
            column: 28,
            span: 858..859,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "querytab",
        ),
        position: Position {
            line: 32,
            column: 36,
            span: 859..867,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 32,
            column: 37,
            span: 867..868,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 32,
            column: 38,
            span: 868..869,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 32,
            column: 39,
            span: 869..870,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        position: Position {
            line: 32,
            column: 44,
            span: 871..875,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 32,
            column: 45,
            span: 875..876,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 33,
            column: 17,
            span: 887..893,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 33,
            column: 18,
            span: 893..894,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "key",
        ),
        position: Position {
            line: 33,
            column: 21,
            span: 894..897,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 33,
            column: 22,
            span: 897..898,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 34,
            column: 0,
            span: 907..910,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 35,
            column: 0,
            span: 917..920,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 36,
            column: 0,
            span: 925..928,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 37,
            column: 0,
            span: 931..934,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 38,
            column: 4,
            span: 937..938,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 38,
            column: 5,
            span: 938..939,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "asize",
        ),
        position: Position {
            line: 38,
            column: 10,
            span: 939..944,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 38,
            column: 12,
            span: 945..946,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "asize",
        ),
        position: Position {
            line: 38,
            column: 18,
            span: 947..952,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 38,
            column: 19,
            span: 952..953,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 38,
            column: 21,
            span: 954..955,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 38,
            column: 22,
            span: 955..956,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hsize",
        ),
        position: Position {
            line: 38,
            column: 27,
            span: 956..961,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 38,
            column: 29,
            span: 962..963,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hsize",
        ),
        position: Position {
            line: 38,
            column: 35,
            span: 964..969,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 38,
            column: 36,
            span: 969..970,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 38,
            column: 38,
            span: 971..972,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 38,
            column: 39,
            span: 972..973,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ff",
        ),
        position: Position {
            line: 38,
            column: 41,
            span: 973..975,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 38,
            column: 43,
            span: 976..977,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ff",
        ),
        position: Position {
            line: 38,
            column: 0,
            span: 978..980,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 39,
            column: 9,
            span: 983..989,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 39,
            column: 0,
            span: 990..991,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 40,
            column: 0,
            span: 992..995,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 42,
            column: 9,
            span: 997..1005,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mostra",
        ),
        position: Position {
            line: 42,
            column: 16,
            span: 1006..1012,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 42,
            column: 18,
            span: 1013..1014,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 42,
            column: 19,
            span: 1014..1015,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 42,
            column: 20,
            span: 1015..1016,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 43,
            column: 8,
            span: 1019..1024,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "asize",
        ),
        position: Position {
            line: 43,
            column: 14,
            span: 1025..1030,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 43,
            column: 15,
            span: 1030..1031,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hsize",
        ),
        position: Position {
            line: 43,
            column: 21,
            span: 1032..1037,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 43,
            column: 22,
            span: 1037..1038,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ff",
        ),
        position: Position {
            line: 43,
            column: 25,
            span: 1039..1041,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 43,
            column: 27,
            span: 1042..1043,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 43,
            column: 29,
            span: 1044..1045,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 43,
            column: 30,
            span: 1045..1046,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "querytab",
        ),
        position: Position {
            line: 43,
            column: 38,
            span: 1046..1054,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 43,
            column: 39,
            span: 1054..1055,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 43,
            column: 40,
            span: 1055..1056,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 43,
            column: 41,
            span: 1056..1057,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 44,
            column: 8,
            span: 1060..1065,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 44,
            column: 9,
            span: 1065..1066,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "asize",
        ),
        position: Position {
            line: 44,
            column: 14,
            span: 1066..1071,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 44,
            column: 15,
            span: 1071..1072,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hsize",
        ),
        position: Position {
            line: 44,
            column: 21,
            span: 1073..1078,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 44,
            column: 22,
            span: 1078..1079,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ff",
        ),
        position: Position {
            line: 44,
            column: 25,
            span: 1080..1082,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 44,
            column: 26,
            span: 1082..1083,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 45,
            column: 8,
            span: 1086..1091,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'------'",
        ),
        position: Position {
            line: 45,
            column: 16,
            span: 1091..1099,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 46,
            column: 6,
            span: 1102..1105,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 46,
            column: 8,
            span: 1106..1107,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 46,
            column: 9,
            span: 1107..1108,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 46,
            column: 10,
            span: 1107..1109,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 46,
            column: 11,
            span: 1109..1110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "asize",
        ),
        position: Position {
            line: 46,
            column: 16,
            span: 1110..1115,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 46,
            column: 17,
            span: 1115..1116,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 46,
            column: 18,
            span: 1115..1117,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 46,
            column: 0,
            span: 1118..1120,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 47,
            column: 10,
            span: 1125..1130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 47,
            column: 12,
            span: 1131..1132,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 47,
            column: 13,
            span: 1132..1133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 47,
            column: 15,
            span: 1134..1135,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 47,
            column: 17,
            span: 1136..1137,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 47,
            column: 19,
            span: 1138..1139,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 47,
            column: 20,
            span: 1139..1140,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "querytab",
        ),
        position: Position {
            line: 47,
            column: 28,
            span: 1140..1148,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 47,
            column: 29,
            span: 1148..1149,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 47,
            column: 30,
            span: 1149..1150,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 47,
            column: 31,
            span: 1150..1151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 47,
            column: 33,
            span: 1152..1153,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 47,
            column: 34,
            span: 1153..1154,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 48,
            column: 10,
            span: 1159..1164,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 48,
            column: 11,
            span: 1164..1165,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 48,
            column: 17,
            span: 1165..1171,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 48,
            column: 18,
            span: 1171..1172,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 48,
            column: 24,
            span: 1172..1178,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 48,
            column: 25,
            span: 1178..1179,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[%d] -\"",
        ),
        position: Position {
            line: 48,
            column: 33,
            span: 1179..1187,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 48,
            column: 34,
            span: 1187..1188,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 48,
            column: 36,
            span: 1189..1190,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 48,
            column: 37,
            span: 1190..1191,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 48,
            column: 38,
            span: 1191..1192,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 48,
            column: 40,
            span: 1193..1194,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 48,
            column: 41,
            span: 1194..1195,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 49,
            column: 0,
            span: 1198..1201,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 50,
            column: 8,
            span: 1204..1209,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'------'",
        ),
        position: Position {
            line: 50,
            column: 16,
            span: 1209..1217,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 51,
            column: 6,
            span: 1220..1223,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 51,
            column: 8,
            span: 1224..1225,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 51,
            column: 9,
            span: 1225..1226,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 51,
            column: 10,
            span: 1225..1227,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 51,
            column: 11,
            span: 1227..1228,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hsize",
        ),
        position: Position {
            line: 51,
            column: 16,
            span: 1228..1233,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 51,
            column: 17,
            span: 1233..1234,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 51,
            column: 18,
            span: 1233..1235,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 51,
            column: 0,
            span: 1236..1238,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 52,
            column: 10,
            span: 1243..1248,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 52,
            column: 11,
            span: 1248..1249,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 52,
            column: 12,
            span: 1249..1250,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 52,
            column: 13,
            span: 1250..1251,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 52,
            column: 15,
            span: 1252..1253,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 52,
            column: 16,
            span: 1253..1254,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "querytab",
        ),
        position: Position {
            line: 52,
            column: 24,
            span: 1254..1262,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 52,
            column: 25,
            span: 1262..1263,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 52,
            column: 26,
            span: 1263..1264,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 52,
            column: 27,
            span: 1264..1265,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 52,
            column: 29,
            span: 1266..1267,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 52,
            column: 30,
            span: 1267..1268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "asize",
        ),
        position: Position {
            line: 52,
            column: 35,
            span: 1268..1273,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 52,
            column: 36,
            span: 1273..1274,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 52,
            column: 37,
            span: 1274..1275,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 53,
            column: 0,
            span: 1278..1281,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 54,
            column: 8,
            span: 1284..1289,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-------------'",
        ),
        position: Position {
            line: 54,
            column: 23,
            span: 1289..1304,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 55,
            column: 0,
            span: 1305..1308,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 57,
            column: 9,
            span: 1310..1318,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stat",
        ),
        position: Position {
            line: 57,
            column: 14,
            span: 1319..1323,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 57,
            column: 16,
            span: 1324..1325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 57,
            column: 17,
            span: 1325..1326,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 57,
            column: 18,
            span: 1326..1327,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 58,
            column: 4,
            span: 1330..1331,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 58,
            column: 6,
            span: 1332..1333,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktable",
        ),
        position: Position {
            line: 58,
            column: 17,
            span: 1334..1344,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 58,
            column: 18,
            span: 1344..1345,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 58,
            column: 19,
            span: 1345..1346,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 58,
            column: 20,
            span: 1346..1347,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 59,
            column: 8,
            span: 1350..1355,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nelem",
        ),
        position: Position {
            line: 59,
            column: 14,
            span: 1356..1361,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 59,
            column: 15,
            span: 1361..1362,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nlist",
        ),
        position: Position {
            line: 59,
            column: 21,
            span: 1363..1368,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 59,
            column: 23,
            span: 1369..1370,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 59,
            column: 25,
            span: 1370..1372,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 59,
            column: 26,
            span: 1372..1373,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 59,
            column: 0,
            span: 1373..1375,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 60,
            column: 8,
            span: 1378..1383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxlist",
        ),
        position: Position {
            line: 60,
            column: 16,
            span: 1384..1391,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 60,
            column: 18,
            span: 1392..1393,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 60,
            column: 20,
            span: 1394..1395,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 60,
            column: 21,
            span: 1395..1396,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 61,
            column: 6,
            span: 1399..1402,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 61,
            column: 8,
            span: 1403..1404,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 61,
            column: 9,
            span: 1404..1405,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 61,
            column: 10,
            span: 1404..1406,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 61,
            column: 11,
            span: 1406..1407,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 61,
            column: 12,
            span: 1407..1408,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 61,
            column: 13,
            span: 1408..1409,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hsize",
        ),
        position: Position {
            line: 61,
            column: 18,
            span: 1409..1414,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 61,
            column: 19,
            span: 1414..1415,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 61,
            column: 20,
            span: 1414..1416,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 61,
            column: 0,
            span: 1417..1419,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 62,
            column: 7,
            span: 1424..1426,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 62,
            column: 12,
            span: 1427..1431,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 62,
            column: 13,
            span: 1431..1432,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 62,
            column: 14,
            span: 1432..1433,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 62,
            column: 15,
            span: 1433..1434,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 62,
            column: 16,
            span: 1434..1435,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 62,
            column: 17,
            span: 1435..1436,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 62,
            column: 18,
            span: 1436..1437,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 62,
            column: 21,
            span: 1438..1440,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        position: Position {
            line: 62,
            column: 29,
            span: 1441..1448,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 62,
            column: 0,
            span: 1449..1453,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 63,
            column: 12,
            span: 1460..1465,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 63,
            column: 14,
            span: 1466..1467,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 63,
            column: 16,
            span: 1468..1469,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 63,
            column: 22,
            span: 1470..1475,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 63,
            column: 23,
            span: 1475..1476,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        position: Position {
            line: 63,
            column: 27,
            span: 1476..1480,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 63,
            column: 28,
            span: 1480..1481,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 63,
            column: 29,
            span: 1481..1482,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 63,
            column: 30,
            span: 1482..1483,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 63,
            column: 31,
            span: 1483..1484,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 63,
            column: 32,
            span: 1484..1485,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 63,
            column: 33,
            span: 1485..1486,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nlist",
        ),
        position: Position {
            line: 64,
            column: 12,
            span: 1493..1498,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 64,
            column: 14,
            span: 1499..1500,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nlist",
        ),
        position: Position {
            line: 64,
            column: 20,
            span: 1501..1506,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 64,
            column: 21,
            span: 1506..1507,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 64,
            column: 0,
            span: 1506..1508,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nelem",
        ),
        position: Position {
            line: 65,
            column: 12,
            span: 1515..1520,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 65,
            column: 14,
            span: 1521..1522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nelem",
        ),
        position: Position {
            line: 65,
            column: 20,
            span: 1523..1528,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 65,
            column: 22,
            span: 1529..1530,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 65,
            column: 0,
            span: 1531..1532,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 66,
            column: 9,
            span: 1539..1541,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 66,
            column: 13,
            span: 1542..1545,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxlist",
        ),
        position: Position {
            line: 66,
            column: 21,
            span: 1546..1553,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 66,
            column: 22,
            span: 1553..1554,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 66,
            column: 23,
            span: 1554..1555,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 66,
            column: 24,
            span: 1555..1556,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 66,
            column: 29,
            span: 1557..1561,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxlist",
        ),
        position: Position {
            line: 66,
            column: 37,
            span: 1562..1569,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 66,
            column: 38,
            span: 1569..1570,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 66,
            column: 39,
            span: 1570..1571,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 66,
            column: 40,
            span: 1571..1572,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 66,
            column: 42,
            span: 1573..1574,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 66,
            column: 44,
            span: 1574..1576,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 66,
            column: 0,
            span: 1577..1580,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxlist",
        ),
        position: Position {
            line: 67,
            column: 14,
            span: 1587..1594,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 67,
            column: 15,
            span: 1594..1595,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 67,
            column: 16,
            span: 1595..1596,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 67,
            column: 17,
            span: 1596..1597,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 67,
            column: 19,
            span: 1598..1599,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxlist",
        ),
        position: Position {
            line: 67,
            column: 27,
            span: 1600..1607,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 67,
            column: 28,
            span: 1607..1608,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 67,
            column: 29,
            span: 1608..1609,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 67,
            column: 30,
            span: 1609..1610,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 67,
            column: 31,
            span: 1610..1611,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 67,
            column: 0,
            span: 1610..1612,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 68,
            column: 0,
            span: 1617..1620,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 69,
            column: 0,
            span: 1623..1626,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 70,
            column: 8,
            span: 1629..1634,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 70,
            column: 9,
            span: 1634..1635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 70,
            column: 15,
            span: 1635..1641,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 70,
            column: 16,
            span: 1641..1642,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 70,
            column: 22,
            span: 1642..1648,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 70,
            column: 23,
            span: 1648..1649,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hsize=%d  elements=%d  load=%.2f  med.len=%.2f (asize=%d)\"",
        ),
        position: Position {
            line: 70,
            column: 82,
            span: 1649..1708,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 70,
            column: 83,
            span: 1708..1709,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 71,
            column: 12,
            span: 1720..1721,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 71,
            column: 13,
            span: 1721..1722,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hsize",
        ),
        position: Position {
            line: 71,
            column: 18,
            span: 1722..1727,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 71,
            column: 19,
            span: 1727..1728,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nelem",
        ),
        position: Position {
            line: 71,
            column: 25,
            span: 1729..1734,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 71,
            column: 26,
            span: 1734..1735,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nelem",
        ),
        position: Position {
            line: 71,
            column: 32,
            span: 1736..1741,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 71,
            column: 33,
            span: 1741..1742,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 71,
            column: 34,
            span: 1742..1743,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 71,
            column: 35,
            span: 1743..1744,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hsize",
        ),
        position: Position {
            line: 71,
            column: 40,
            span: 1744..1749,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 71,
            column: 41,
            span: 1749..1750,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nelem",
        ),
        position: Position {
            line: 71,
            column: 47,
            span: 1751..1756,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 71,
            column: 48,
            span: 1756..1757,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nlist",
        ),
        position: Position {
            line: 71,
            column: 53,
            span: 1757..1762,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 71,
            column: 54,
            span: 1762..1763,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 71,
            column: 56,
            span: 1764..1765,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 71,
            column: 57,
            span: 1765..1766,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "asize",
        ),
        position: Position {
            line: 71,
            column: 62,
            span: 1766..1771,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 71,
            column: 63,
            span: 1771..1772,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 71,
            column: 64,
            span: 1772..1773,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 72,
            column: 6,
            span: 1776..1779,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 72,
            column: 8,
            span: 1780..1781,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 72,
            column: 9,
            span: 1781..1782,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 72,
            column: 10,
            span: 1781..1783,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 72,
            column: 11,
            span: 1783..1784,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 72,
            column: 16,
            span: 1784..1789,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 72,
            column: 17,
            span: 1789..1790,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        position: Position {
            line: 72,
            column: 21,
            span: 1790..1794,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 72,
            column: 22,
            span: 1794..1795,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxlist",
        ),
        position: Position {
            line: 72,
            column: 29,
            span: 1795..1802,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 72,
            column: 30,
            span: 1802..1803,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 72,
            column: 0,
            span: 1804..1806,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 73,
            column: 10,
            span: 1811..1816,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 73,
            column: 12,
            span: 1817..1818,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 73,
            column: 14,
            span: 1819..1820,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxlist",
        ),
        position: Position {
            line: 73,
            column: 22,
            span: 1821..1828,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 73,
            column: 23,
            span: 1828..1829,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 73,
            column: 24,
            span: 1829..1830,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 73,
            column: 25,
            span: 1830..1831,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 73,
            column: 28,
            span: 1832..1834,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 73,
            column: 0,
            span: 1834..1836,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 74,
            column: 10,
            span: 1841..1846,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 74,
            column: 11,
            span: 1846..1847,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 74,
            column: 17,
            span: 1847..1853,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 74,
            column: 18,
            span: 1853..1854,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 74,
            column: 24,
            span: 1854..1860,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 74,
            column: 25,
            span: 1860..1861,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%5d %10d %.2f%%\"",
        ),
        position: Position {
            line: 74,
            column: 42,
            span: 1861..1878,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 74,
            column: 43,
            span: 1878..1879,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 74,
            column: 45,
            span: 1880..1881,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 74,
            column: 46,
            span: 1881..1882,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 74,
            column: 48,
            span: 1883..1884,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 74,
            column: 49,
            span: 1884..1885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 74,
            column: 51,
            span: 1886..1887,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 74,
            column: 52,
            span: 1887..1888,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 74,
            column: 55,
            span: 1887..1891,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 74,
            column: 56,
            span: 1891..1892,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nlist",
        ),
        position: Position {
            line: 74,
            column: 61,
            span: 1892..1897,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 74,
            column: 62,
            span: 1897..1898,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 74,
            column: 63,
            span: 1898..1899,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 75,
            column: 0,
            span: 1902..1905,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 76,
            column: 0,
            span: 1906..1909,
        },
    },
]
