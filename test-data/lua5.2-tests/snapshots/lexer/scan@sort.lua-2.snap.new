---
source: src/main.rs
assertion_line: 91
expression: scanned
input_file: test-data/lua5.2-tests/sort.lua
---
[
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 1,
    },
    Token {
        kind: String,
        lexeme: "\"testing (parts of) table library\"",
        line: 1,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 3,
    },
    Token {
        kind: String,
        lexeme: "\"testing unpack\"",
        line: 3,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 5,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 5,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 5,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 7,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 7,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        line: 7,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 7,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 8,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 8,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 8,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 8,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 8,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 8,
    },
    Token {
        kind: Number,
        lexeme: "2000",
        line: 8,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 9,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 9,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 9,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 9,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 9,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 9,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 9,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 9,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 10,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "select",
        line: 10,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 10,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 10,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 10,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 10,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 10,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 10,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "select",
        line: 10,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 10,
    },
    Token {
        kind: String,
        lexeme: "'#'",
        line: 10,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 10,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 10,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 10,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 10,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 10,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 11,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 11,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 11,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 12,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 12,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 12,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 12,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 13,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 13,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 13,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 13,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 13,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 14,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 14,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 14,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 14,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 14,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 14,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 14,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 14,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 14,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 14,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 14,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 14,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 14,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 14,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 15,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 15,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 15,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 15,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 15,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 15,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 15,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 15,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 16,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 16,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 16,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 16,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 16,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 16,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 16,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 16,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 16,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 16,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 16,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 16,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 16,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 16,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 16,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 16,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 16,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 17,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 17,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 17,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 17,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 17,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 17,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 17,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 17,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 17,
    },
    Token {
        kind: Number,
        lexeme: "6",
        line: 17,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 17,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 17,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 18,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        line: 18,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 18,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 18,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 18,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 18,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 19,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 19,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 19,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 19,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 19,
    },
    Token {
        kind: Number,
        lexeme: "11",
        line: 19,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 19,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 19,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 19,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 20,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        line: 20,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 20,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 20,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 20,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 20,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 21,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 21,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 21,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 21,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 21,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 21,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 21,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 21,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 22,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 22,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 22,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 22,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 22,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 22,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 22,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 23,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 23,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        line: 23,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 23,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 23,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 23,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 23,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 23,
    },
    Token {
        kind: Number,
        lexeme: "11",
        line: 23,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 24,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 24,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 24,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 24,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 24,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 24,
    },
    Token {
        kind: Number,
        lexeme: "11",
        line: 24,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        line: 24,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 24,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 24,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 25,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 25,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 25,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 25,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 25,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 26,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 26,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 26,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 26,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 26,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 26,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 26,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 27,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 27,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 27,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 27,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 27,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 27,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 27,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 27,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 27,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 27,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 27,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 27,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 27,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 28,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 28,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 28,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 28,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 28,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 28,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 28,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 28,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 30,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "_no32",
        line: 30,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 31,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 31,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 31,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 31,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 31,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 31,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 31,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 31,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 31,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 31,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 31,
    },
    Token {
        kind: Caret,
        lexeme: "^",
        line: 31,
    },
    Token {
        kind: Number,
        lexeme: "31",
        line: 31,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 31,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 31,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 31,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 32,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 32,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 32,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 32,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 32,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 32,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 32,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 32,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 32,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 32,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 32,
    },
    Token {
        kind: Caret,
        lexeme: "^",
        line: 32,
    },
    Token {
        kind: Number,
        lexeme: "31",
        line: 32,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 32,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 32,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 32,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 33,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 33,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 33,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 33,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 33,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 33,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 33,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 33,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 33,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 33,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 33,
    },
    Token {
        kind: Caret,
        lexeme: "^",
        line: 33,
    },
    Token {
        kind: Number,
        lexeme: "31",
        line: 33,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 33,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 33,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 33,
    },
    Token {
        kind: Caret,
        lexeme: "^",
        line: 33,
    },
    Token {
        kind: Number,
        lexeme: "31",
        line: 33,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 33,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 33,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 33,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 34,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 34,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 34,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 34,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 34,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 34,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 34,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 34,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 34,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 34,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 34,
    },
    Token {
        kind: Caret,
        lexeme: "^",
        line: 34,
    },
    Token {
        kind: Number,
        lexeme: "31",
        line: 34,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 34,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 34,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 34,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 34,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 34,
    },
    Token {
        kind: Caret,
        lexeme: "^",
        line: 34,
    },
    Token {
        kind: Number,
        lexeme: "31",
        line: 34,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 34,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 34,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 34,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 35,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 35,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 35,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 35,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 35,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 35,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 35,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 35,
    },
    Token {
        kind: Caret,
        lexeme: "^",
        line: 35,
    },
    Token {
        kind: Number,
        lexeme: "31",
        line: 35,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 35,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 35,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 35,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 35,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 35,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 36,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 36,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 36,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 36,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 36,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 36,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 36,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 36,
    },
    Token {
        kind: Caret,
        lexeme: "^",
        line: 36,
    },
    Token {
        kind: Number,
        lexeme: "31",
        line: 36,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 36,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 36,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 36,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 36,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 36,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 37,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 37,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 37,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 37,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 37,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 37,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 37,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 37,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 37,
    },
    Token {
        kind: Caret,
        lexeme: "^",
        line: 37,
    },
    Token {
        kind: Number,
        lexeme: "31",
        line: 37,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 38,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 38,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 38,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 38,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 38,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 38,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 38,
    },
    Token {
        kind: Caret,
        lexeme: "^",
        line: 38,
    },
    Token {
        kind: Number,
        lexeme: "31",
        line: 38,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 38,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 38,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 38,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 38,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 38,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 38,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 38,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 38,
    },
    Token {
        kind: Caret,
        lexeme: "^",
        line: 38,
    },
    Token {
        kind: Number,
        lexeme: "31",
        line: 38,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 38,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 38,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 38,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 38,
    },
    Token {
        kind: Caret,
        lexeme: "^",
        line: 38,
    },
    Token {
        kind: Number,
        lexeme: "31",
        line: 38,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 38,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 38,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 39,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 39,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 39,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 39,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 39,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 40,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 40,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 40,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 40,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 40,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 40,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 40,
    },
    Token {
        kind: Caret,
        lexeme: "^",
        line: 40,
    },
    Token {
        kind: Number,
        lexeme: "31",
        line: 40,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 40,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 40,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 40,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 40,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 40,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 40,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 40,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 40,
    },
    Token {
        kind: Caret,
        lexeme: "^",
        line: 40,
    },
    Token {
        kind: Number,
        lexeme: "31",
        line: 40,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 40,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 40,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 40,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 40,
    },
    Token {
        kind: Caret,
        lexeme: "^",
        line: 40,
    },
    Token {
        kind: Number,
        lexeme: "31",
        line: 40,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 40,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 40,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 41,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 41,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 41,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 41,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 41,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 41,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 41,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 41,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 44,
    },
    Token {
        kind: String,
        lexeme: "\"testing pack\"",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 46,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 46,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 46,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 46,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 47,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 47,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 47,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 47,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 47,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 47,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 47,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 47,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 47,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 47,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 47,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 49,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 49,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 49,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 49,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 50,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 50,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 50,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 50,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 50,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 50,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 50,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 50,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 50,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 50,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 52,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 52,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 52,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 52,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 52,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 52,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 52,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 52,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 52,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 52,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 52,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 53,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 53,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 53,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 53,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 53,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 53,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 53,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 53,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 53,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 53,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 53,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 56,
    },
    Token {
        kind: String,
        lexeme: "\"testing sort\"",
        line: 56,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 60,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 60,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 60,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 60,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 61,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 61,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 61,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 61,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 61,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 61,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 61,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 61,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 61,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 61,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 61,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 61,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 62,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 62,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 62,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 62,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "sort",
        line: 62,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 62,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 62,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 63,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 63,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 63,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 63,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 63,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 63,
    },
    Token {
        kind: String,
        lexeme: "\"invalid order function\"",
        line: 63,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 63,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 63,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 66,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 66,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 66,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 66,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 66,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 66,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 67,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 67,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 67,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 67,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 67,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 67,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 67,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 67,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 67,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 67,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 67,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 68,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 68,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 68,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 68,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 68,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 68,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 68,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 68,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 68,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 68,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 68,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 68,
    },
    Token {
        kind: Number,
        lexeme: "6",
        line: 68,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 68,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 71,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 71,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 71,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 72,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 72,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 72,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 72,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 72,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 72,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 72,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 72,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 72,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 72,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 72,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 73,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 73,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 73,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 73,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 73,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 73,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 73,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 73,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 74,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 74,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 74,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 74,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 74,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 74,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 74,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 74,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 74,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 74,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 74,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 74,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 74,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 75,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 78,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 78,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 78,
    },
    Token {
        kind: String,
        lexeme: "\"Jan\"",
        line: 78,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 78,
    },
    Token {
        kind: String,
        lexeme: "\"Feb\"",
        line: 78,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 78,
    },
    Token {
        kind: String,
        lexeme: "\"Mar\"",
        line: 78,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 78,
    },
    Token {
        kind: String,
        lexeme: "\"Apr\"",
        line: 78,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 78,
    },
    Token {
        kind: String,
        lexeme: "\"May\"",
        line: 78,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 78,
    },
    Token {
        kind: String,
        lexeme: "\"Jun\"",
        line: 78,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 78,
    },
    Token {
        kind: String,
        lexeme: "\"Jul\"",
        line: 78,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 78,
    },
    Token {
        kind: String,
        lexeme: "\"Aug\"",
        line: 78,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 78,
    },
    Token {
        kind: String,
        lexeme: "\"Sep\"",
        line: 78,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 78,
    },
    Token {
        kind: String,
        lexeme: "\"Oct\"",
        line: 79,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 79,
    },
    Token {
        kind: String,
        lexeme: "\"Nov\"",
        line: 79,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 79,
    },
    Token {
        kind: String,
        lexeme: "\"Dec\"",
        line: 79,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 81,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "sort",
        line: 81,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 81,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 82,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 82,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 82,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: "perm",
        line: 84,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 84,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 84,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 85,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 85,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 85,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 85,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 86,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 86,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 86,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 86,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 87,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 87,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 87,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 87,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 87,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 88,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "sort",
        line: 88,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 88,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 89,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 89,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 89,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 90,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 91,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 91,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 91,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 91,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 92,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 92,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 92,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 92,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 92,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 92,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 92,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 92,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 92,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 92,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 92,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "perm",
        line: 93,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 93,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 93,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 93,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 93,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 94,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 94,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 94,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 94,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 94,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 94,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 94,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 94,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 94,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 94,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 94,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 94,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 95,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 96,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "perm",
        line: 99,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 99,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: "perm",
        line: 100,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 100,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 100,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: "perm",
        line: 101,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 101,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 101,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 101,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 101,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: "perm",
        line: 102,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 102,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 102,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 102,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 102,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 102,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 102,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: "perm",
        line: 103,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 103,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 103,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 103,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 103,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 103,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 103,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 103,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 103,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: "perm",
        line: 104,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 104,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 104,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 104,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 104,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 104,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 104,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 104,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 104,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: "perm",
        line: 105,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 105,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 105,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 105,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 105,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 105,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 105,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 105,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 105,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 105,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 105,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: "perm",
        line: 106,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 106,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 106,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 106,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 106,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 106,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 106,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 106,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 106,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 106,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 106,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "perm",
        line: 107,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 107,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 107,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 107,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 107,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 107,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 107,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 107,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 107,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 107,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 107,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 107,
    },
    Token {
        kind: Number,
        lexeme: "6",
        line: 107,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: "perm",
        line: 108,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 108,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 108,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 108,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 108,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 108,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 108,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 108,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 108,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 108,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 108,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 108,
    },
    Token {
        kind: Number,
        lexeme: "6",
        line: 108,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: "limit",
        line: 110,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 110,
    },
    Token {
        kind: Number,
        lexeme: "30000",
        line: 110,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "_soft",
        line: 111,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "limit",
        line: 111,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 111,
    },
    Token {
        kind: Number,
        lexeme: "5000",
        line: 111,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 113,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 113,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 113,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 113,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 114,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 114,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 114,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "limit",
        line: 114,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 115,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 115,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 115,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "math",
        line: 115,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "random",
        line: 115,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 115,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 115,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 116,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 118,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 118,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "clock",
        line: 118,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 118,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 119,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "sort",
        line: 119,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 119,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 120,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 120,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 120,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 120,
    },
    Token {
        kind: String,
        lexeme: "\"Sorting %d elements in %.2f sec.\"",
        line: 120,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "limit",
        line: 120,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 120,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "clock",
        line: 120,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 120,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 120,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 120,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 120,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 121,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 121,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 123,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 123,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: "clock",
        line: 123,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 123,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 124,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "sort",
        line: 124,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 124,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 125,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 125,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 125,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 125,
    },
    Token {
        kind: String,
        lexeme: "\"Re-sorting %d elements in %.2f sec.\"",
        line: 125,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "limit",
        line: 125,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 125,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "clock",
        line: 125,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 125,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 125,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 125,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 125,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 126,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 126,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 128,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 128,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 128,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 128,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 129,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 129,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 129,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "limit",
        line: 129,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 130,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 130,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 130,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: "math",
        line: 130,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: "random",
        line: 130,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 130,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 130,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 133,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 133,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "clock",
        line: 133,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 133,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 133,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 133,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 133,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 134,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "sort",
        line: 134,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 134,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 134,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 134,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 134,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 134,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 134,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 134,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 134,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 134,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 134,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 134,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 134,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 134,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 135,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 135,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 135,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 135,
    },
    Token {
        kind: String,
        lexeme: "\"Invert-sorting other %d elements in %.2f sec., with %i comparisons\"",
        line: 135,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "limit",
        line: 136,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 136,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "clock",
        line: 136,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 136,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 136,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 136,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 136,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 136,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 137,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 137,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 137,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 137,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 137,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 137,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 137,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 137,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 137,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 137,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 140,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "sort",
        line: 140,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 140,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 140,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 142,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 142,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 142,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "limit",
        line: 142,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 142,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 142,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 142,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 142,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 142,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 143,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 143,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "clock",
        line: 143,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 143,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 143,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 144,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "sort",
        line: 144,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 144,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 144,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 144,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 144,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 144,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 144,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 144,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 144,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 144,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 145,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 145,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 145,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 145,
    },
    Token {
        kind: String,
        lexeme: "\"Sorting %d equal elements in %.2f sec.\"",
        line: 145,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "limit",
        line: 145,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 145,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "clock",
        line: 145,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 145,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 145,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 145,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 145,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 146,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 146,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 146,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 146,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 146,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 146,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 146,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 146,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 146,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 146,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 146,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 147,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 147,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        line: 147,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 147,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 147,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 147,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 147,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 147,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 147,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 147,
    },
    Token {
        kind: String,
        lexeme: "'n'",
        line: 147,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 147,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "limit",
        line: 147,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 147,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 149,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 149,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 149,
    },
    Token {
        kind: String,
        lexeme: "\"álo\"",
        line: 149,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 149,
    },
    Token {
        kind: String,
        lexeme: "\"\\0first :-)\"",
        line: 149,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 149,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 149,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 149,
    },
    Token {
        kind: String,
        lexeme: "\"then this one\"",
        line: 149,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 149,
    },
    Token {
        kind: String,
        lexeme: "\"45\"",
        line: 149,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 149,
    },
    Token {
        kind: String,
        lexeme: "\"and a new\"",
        line: 149,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 150,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: "sort",
        line: 150,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 150,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 151,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 151,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 153,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: "sort",
        line: 153,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 153,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 153,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 153,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 153,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 153,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 154,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 154,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 154,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 154,
    },
    Token {
        kind: String,
        lexeme: "\"A[%q] = ''\"",
        line: 154,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 154,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 154,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 154,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 154,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 155,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 155,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 155,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 156,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 156,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 157,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: "tt",
        line: 160,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 160,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: "__lt",
        line: 160,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 160,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 160,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 160,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 160,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 160,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 160,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: "val",
        line: 160,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 160,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: "val",
        line: 160,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 160,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 161,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 161,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 161,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 161,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 162,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 162,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 162,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 162,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 162,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 162,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 162,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 162,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 162,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "val",
        line: 162,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "math",
        line: 162,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "random",
        line: 162,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 162,
    },
    Token {
        kind: Number,
        lexeme: "100",
        line: 162,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 162,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 162,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 162,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 162,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 162,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 162,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "tt",
        line: 162,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 162,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 162,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 163,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "sort",
        line: 163,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 163,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 164,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 164,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: "tt",
        line: 164,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: "__lt",
        line: 164,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 165,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 165,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 167,
    },
    Token {
        kind: String,
        lexeme: "\"OK\"",
        line: 167,
    },
]
