---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.1-tests/checktable.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 2,
        column: 7,
        span: 1..7,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 2,
        column: 8,
        span: 7..8,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        line: 2,
        column: 14,
        span: 8..14,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 2,
        column: 15,
        span: 14..15,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 2,
        column: 17,
        span: 15..17,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 2,
        column: 18,
        span: 17..18,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stat\"",
        ),
        line: 2,
        column: 25,
        span: 19..25,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 2,
        column: 26,
        span: 25..26,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 2,
        column: 29,
        span: 27..29,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 2,
        column: 33,
        span: 30..33,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 2,
        column: 34,
        span: 33..34,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 4,
        column: 3,
        span: 65..67,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 4,
        column: 5,
        span: 68..69,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 4,
        column: 8,
        span: 70..72,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 4,
        column: 12,
        span: 73..76,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 4,
        column: 0,
        span: 77..81,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stat",
        ),
        line: 5,
        column: 7,
        span: 84..88,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 5,
        column: 9,
        span: 89..90,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 5,
        column: 18,
        span: 91..99,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 5,
        column: 20,
        span: 100..101,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 5,
        column: 21,
        span: 101..102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 5,
        column: 27,
        span: 103..108,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"`querytab' nao ativo\"",
        ),
        line: 5,
        column: 49,
        span: 108..130,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 5,
        column: 0,
        span: 131..134,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 6,
        column: 0,
        span: 137..143,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 7,
        column: 0,
        span: 144..147,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 10,
        column: 9,
        span: 150..158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktable",
        ),
        line: 10,
        column: 20,
        span: 159..169,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 22,
        span: 170..171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 10,
        column: 23,
        span: 171..172,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 24,
        span: 172..173,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 11,
        column: 8,
        span: 176..181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "asize",
        ),
        line: 11,
        column: 14,
        span: 182..187,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 11,
        column: 15,
        span: 187..188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hsize",
        ),
        line: 11,
        column: 21,
        span: 189..194,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 11,
        column: 22,
        span: 194..195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ff",
        ),
        line: 11,
        column: 25,
        span: 196..198,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 11,
        column: 27,
        span: 199..200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 11,
        column: 29,
        span: 201..202,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 11,
        column: 30,
        span: 202..203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "querytab",
        ),
        line: 11,
        column: 38,
        span: 203..211,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 11,
        column: 39,
        span: 211..212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 11,
        column: 40,
        span: 212..213,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 11,
        column: 41,
        span: 213..214,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 12,
        column: 8,
        span: 217..222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 12,
        column: 10,
        span: 223..224,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 12,
        column: 12,
        span: 225..226,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 12,
        column: 14,
        span: 227..228,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 12,
        column: 15,
        span: 228..229,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 13,
        column: 6,
        span: 232..235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 13,
        column: 8,
        span: 236..237,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 13,
        column: 9,
        span: 237..238,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 13,
        column: 10,
        span: 237..239,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 13,
        column: 11,
        span: 239..240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hsize",
        ),
        line: 13,
        column: 16,
        span: 240..245,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 13,
        column: 17,
        span: 245..246,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 13,
        column: 18,
        span: 245..247,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 13,
        column: 0,
        span: 248..250,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 14,
        column: 10,
        span: 255..260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "key",
        ),
        line: 14,
        column: 14,
        span: 261..264,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 14,
        column: 15,
        span: 264..265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        line: 14,
        column: 18,
        span: 265..268,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 14,
        column: 19,
        span: 268..269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 14,
        column: 23,
        span: 269..273,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 14,
        column: 25,
        span: 274..275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 14,
        column: 27,
        span: 276..277,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 14,
        column: 28,
        span: 277..278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "querytab",
        ),
        line: 14,
        column: 36,
        span: 278..286,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 14,
        column: 37,
        span: 286..287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 14,
        column: 38,
        span: 287..288,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 14,
        column: 39,
        span: 288..289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 14,
        column: 41,
        span: 290..291,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 14,
        column: 43,
        span: 292..293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "asize",
        ),
        line: 14,
        column: 49,
        span: 294..299,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 14,
        column: 50,
        span: 299..300,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 15,
        column: 7,
        span: 305..307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "key",
        ),
        line: 15,
        column: 11,
        span: 308..311,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 15,
        column: 14,
        span: 312..314,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 15,
        column: 18,
        span: 315..318,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 15,
        column: 0,
        span: 319..323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 16,
        column: 13,
        span: 330..336,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 14,
        span: 336..337,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 16,
        column: 15,
        span: 337..338,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 16,
        column: 16,
        span: 338..339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 16,
        column: 17,
        span: 339..340,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 16,
        column: 18,
        span: 340..341,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 16,
        column: 21,
        span: 342..344,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 16,
        column: 25,
        span: 345..348,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 16,
        column: 29,
        span: 349..352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        line: 16,
        column: 33,
        span: 353..356,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 16,
        column: 35,
        span: 356..358,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 16,
        column: 38,
        span: 358..361,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 16,
        column: 42,
        span: 362..365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 16,
        column: 47,
        span: 366..370,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 16,
        column: 49,
        span: 370..372,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 16,
        column: 52,
        span: 372..375,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 53,
        span: 375..376,
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        line: 17,
        column: 11,
        span: 381..387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "key",
        ),
        line: 17,
        column: 15,
        span: 388..391,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 17,
        column: 18,
        span: 392..394,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<undef>\"",
        ),
        line: 17,
        column: 28,
        span: 395..404,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 17,
        column: 0,
        span: 405..409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 18,
        column: 13,
        span: 416..422,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
        column: 14,
        span: 422..423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        line: 18,
        column: 17,
        span: 423..426,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 18,
        column: 19,
        span: 426..428,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 18,
        column: 22,
        span: 428..431,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
        column: 23,
        span: 431..432,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 19,
        column: 0,
        span: 437..441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 20,
        column: 13,
        span: 448..454,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 14,
        span: 454..455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 20,
        column: 15,
        span: 455..456,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 20,
        column: 16,
        span: 456..457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "key",
        ),
        line: 20,
        column: 19,
        span: 457..460,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 20,
        column: 20,
        span: 460..461,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 20,
        column: 23,
        span: 462..464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        line: 20,
        column: 27,
        span: 465..468,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 28,
        span: 468..469,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 21,
        column: 12,
        span: 476..481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp",
        ),
        line: 21,
        column: 15,
        span: 482..484,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 21,
        column: 17,
        span: 485..486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 21,
        column: 19,
        span: 487..488,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 21,
        column: 20,
        span: 488..489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hash",
        ),
        line: 21,
        column: 24,
        span: 489..493,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
        column: 25,
        span: 493..494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "key",
        ),
        line: 21,
        column: 28,
        span: 494..497,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 21,
        column: 29,
        span: 497..498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 21,
        column: 31,
        span: 499..500,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
        column: 32,
        span: 500..501,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 22,
        column: 9,
        span: 508..510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 22,
        column: 11,
        span: 511..512,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 22,
        column: 12,
        span: 512..513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 22,
        column: 13,
        span: 513..514,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 22,
        column: 14,
        span: 514..515,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 22,
        column: 0,
        span: 516..520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 23,
        column: 15,
        span: 529..535,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 23,
        column: 16,
        span: 535..536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 23,
        column: 17,
        span: 536..537,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 23,
        column: 18,
        span: 537..538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 23,
        column: 19,
        span: 538..539,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 23,
        column: 20,
        span: 539..540,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 23,
        column: 23,
        span: 541..543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp",
        ),
        line: 23,
        column: 26,
        span: 544..546,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 23,
        column: 27,
        span: 546..547,
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        line: 24,
        column: 13,
        span: 554..560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp",
        ),
        line: 24,
        column: 16,
        span: 561..563,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 24,
        column: 19,
        span: 564..566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 24,
        column: 21,
        span: 567..568,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 24,
        column: 0,
        span: 569..573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 25,
        column: 10,
        span: 582..583,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 25,
        column: 11,
        span: 583..584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 25,
        column: 12,
        span: 584..585,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 25,
        column: 13,
        span: 585..586,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 25,
        column: 15,
        span: 587..588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp",
        ),
        line: 25,
        column: 0,
        span: 589..591,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 26,
        column: 11,
        span: 598..602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 27,
        column: 10,
        span: 625..626,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 27,
        column: 11,
        span: 626..627,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp",
        ),
        line: 27,
        column: 13,
        span: 627..629,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 27,
        column: 14,
        span: 629..630,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 27,
        column: 16,
        span: 631..632,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 27,
        column: 18,
        span: 633..634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp",
        ),
        line: 27,
        column: 20,
        span: 634..636,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 27,
        column: 21,
        span: 636..637,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 28,
        column: 14,
        span: 665..670,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 28,
        column: 19,
        span: 671..675,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 28,
        column: 0,
        span: 676..678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 29,
        column: 17,
        span: 689..695,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
        column: 18,
        span: 695..696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ff",
        ),
        line: 29,
        column: 20,
        span: 696..698,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 29,
        column: 23,
        span: 699..701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 29,
        column: 28,
        span: 702..706,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 29,
        column: 32,
        span: 707..710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 29,
        column: 37,
        span: 711..715,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 29,
        column: 39,
        span: 716..717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hsize",
        ),
        line: 29,
        column: 45,
        span: 718..723,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
        column: 46,
        span: 723..724,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 30,
        column: 13,
        span: 735..737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 30,
        column: 15,
        span: 738..739,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 30,
        column: 16,
        span: 739..740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 30,
        column: 20,
        span: 740..744,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 30,
        column: 21,
        span: 744..745,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 30,
        column: 26,
        span: 746..750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 30,
        column: 33,
        span: 751..757,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 34,
        span: 757..758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 30,
        column: 35,
        span: 758..759,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 30,
        column: 36,
        span: 759..760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 30,
        column: 40,
        span: 760..764,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 30,
        column: 41,
        span: 764..765,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 30,
        column: 44,
        span: 766..768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp",
        ),
        line: 30,
        column: 47,
        span: 769..771,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 48,
        span: 771..772,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 30,
        column: 53,
        span: 773..777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 30,
        column: 55,
        span: 778..779,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 30,
        column: 56,
        span: 779..780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 30,
        column: 60,
        span: 780..784,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 30,
        column: 61,
        span: 784..785,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 30,
        column: 63,
        span: 786..787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp",
        ),
        line: 30,
        column: 66,
        span: 788..790,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 30,
        column: 0,
        span: 791..794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 31,
        column: 16,
        span: 805..810,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 31,
        column: 17,
        span: 810..811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 31,
        column: 23,
        span: 811..817,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 24,
        span: 817..818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 31,
        column: 25,
        span: 818..819,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 31,
        column: 26,
        span: 819..820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp",
        ),
        line: 31,
        column: 28,
        span: 820..822,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 31,
        column: 29,
        span: 822..823,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 31,
        column: 30,
        span: 823..824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 31,
        column: 35,
        span: 825..829,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 36,
        span: 829..830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "key",
        ),
        line: 32,
        column: 14,
        span: 841..844,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 32,
        column: 15,
        span: 844..845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        line: 32,
        column: 18,
        span: 845..848,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 32,
        column: 19,
        span: 848..849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 32,
        column: 23,
        span: 849..853,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 32,
        column: 25,
        span: 854..855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 32,
        column: 27,
        span: 856..857,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 32,
        column: 28,
        span: 857..858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "querytab",
        ),
        line: 32,
        column: 36,
        span: 858..866,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 37,
        span: 866..867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 32,
        column: 38,
        span: 867..868,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 32,
        column: 39,
        span: 868..869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 32,
        column: 44,
        span: 870..874,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 45,
        span: 874..875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 33,
        column: 17,
        span: 886..892,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 18,
        span: 892..893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "key",
        ),
        line: 33,
        column: 21,
        span: 893..896,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 22,
        span: 896..897,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 34,
        column: 0,
        span: 906..909,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 35,
        column: 0,
        span: 916..919,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 36,
        column: 0,
        span: 924..927,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 37,
        column: 0,
        span: 930..933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 38,
        column: 4,
        span: 936..937,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 38,
        column: 5,
        span: 937..938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "asize",
        ),
        line: 38,
        column: 10,
        span: 938..943,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 38,
        column: 12,
        span: 944..945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "asize",
        ),
        line: 38,
        column: 18,
        span: 946..951,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 38,
        column: 19,
        span: 951..952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 38,
        column: 21,
        span: 953..954,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 38,
        column: 22,
        span: 954..955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hsize",
        ),
        line: 38,
        column: 27,
        span: 955..960,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 38,
        column: 29,
        span: 961..962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hsize",
        ),
        line: 38,
        column: 35,
        span: 963..968,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 38,
        column: 36,
        span: 968..969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 38,
        column: 38,
        span: 970..971,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 38,
        column: 39,
        span: 971..972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ff",
        ),
        line: 38,
        column: 41,
        span: 972..974,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 38,
        column: 43,
        span: 975..976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ff",
        ),
        line: 38,
        column: 0,
        span: 977..979,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 39,
        column: 9,
        span: 982..988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 39,
        column: 0,
        span: 989..990,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 40,
        column: 0,
        span: 991..994,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 42,
        column: 9,
        span: 996..1004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mostra",
        ),
        line: 42,
        column: 16,
        span: 1005..1011,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
        column: 18,
        span: 1012..1013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 42,
        column: 19,
        span: 1013..1014,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
        column: 20,
        span: 1014..1015,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 43,
        column: 8,
        span: 1018..1023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "asize",
        ),
        line: 43,
        column: 14,
        span: 1024..1029,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 43,
        column: 15,
        span: 1029..1030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hsize",
        ),
        line: 43,
        column: 21,
        span: 1031..1036,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 43,
        column: 22,
        span: 1036..1037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ff",
        ),
        line: 43,
        column: 25,
        span: 1038..1040,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 43,
        column: 27,
        span: 1041..1042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 43,
        column: 29,
        span: 1043..1044,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 43,
        column: 30,
        span: 1044..1045,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "querytab",
        ),
        line: 43,
        column: 38,
        span: 1045..1053,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 39,
        span: 1053..1054,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 43,
        column: 40,
        span: 1054..1055,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 41,
        span: 1055..1056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 44,
        column: 8,
        span: 1059..1064,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 9,
        span: 1064..1065,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "asize",
        ),
        line: 44,
        column: 14,
        span: 1065..1070,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 44,
        column: 15,
        span: 1070..1071,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hsize",
        ),
        line: 44,
        column: 21,
        span: 1072..1077,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 44,
        column: 22,
        span: 1077..1078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ff",
        ),
        line: 44,
        column: 25,
        span: 1079..1081,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 26,
        span: 1081..1082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 45,
        column: 8,
        span: 1085..1090,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'------'",
        ),
        line: 45,
        column: 16,
        span: 1090..1098,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 46,
        column: 6,
        span: 1101..1104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 46,
        column: 8,
        span: 1105..1106,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 46,
        column: 9,
        span: 1106..1107,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
        column: 10,
        span: 1106..1108,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 11,
        span: 1108..1109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "asize",
        ),
        line: 46,
        column: 16,
        span: 1109..1114,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 46,
        column: 17,
        span: 1114..1115,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
        column: 18,
        span: 1114..1116,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 46,
        column: 0,
        span: 1117..1119,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 47,
        column: 10,
        span: 1124..1129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 47,
        column: 12,
        span: 1130..1131,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 47,
        column: 13,
        span: 1131..1132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 47,
        column: 15,
        span: 1133..1134,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 47,
        column: 17,
        span: 1135..1136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 47,
        column: 19,
        span: 1137..1138,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 47,
        column: 20,
        span: 1138..1139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "querytab",
        ),
        line: 47,
        column: 28,
        span: 1139..1147,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 29,
        span: 1147..1148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 47,
        column: 30,
        span: 1148..1149,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 47,
        column: 31,
        span: 1149..1150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 47,
        column: 33,
        span: 1151..1152,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 34,
        span: 1152..1153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 48,
        column: 10,
        span: 1158..1163,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
        column: 11,
        span: 1163..1164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 48,
        column: 17,
        span: 1164..1170,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 48,
        column: 18,
        span: 1170..1171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 48,
        column: 24,
        span: 1171..1177,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
        column: 25,
        span: 1177..1178,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[%d] -\"",
        ),
        line: 48,
        column: 33,
        span: 1178..1186,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 48,
        column: 34,
        span: 1186..1187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 48,
        column: 36,
        span: 1188..1189,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
        column: 37,
        span: 1189..1190,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 48,
        column: 38,
        span: 1190..1191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 48,
        column: 40,
        span: 1192..1193,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
        column: 41,
        span: 1193..1194,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 49,
        column: 0,
        span: 1197..1200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 50,
        column: 8,
        span: 1203..1208,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'------'",
        ),
        line: 50,
        column: 16,
        span: 1208..1216,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 51,
        column: 6,
        span: 1219..1222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 51,
        column: 8,
        span: 1223..1224,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 51,
        column: 9,
        span: 1224..1225,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 51,
        column: 10,
        span: 1224..1226,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
        column: 11,
        span: 1226..1227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hsize",
        ),
        line: 51,
        column: 16,
        span: 1227..1232,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 51,
        column: 17,
        span: 1232..1233,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 51,
        column: 18,
        span: 1232..1234,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 51,
        column: 0,
        span: 1235..1237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 52,
        column: 10,
        span: 1242..1247,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
        column: 11,
        span: 1247..1248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 52,
        column: 12,
        span: 1248..1249,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 52,
        column: 13,
        span: 1249..1250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 52,
        column: 15,
        span: 1251..1252,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 52,
        column: 16,
        span: 1252..1253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "querytab",
        ),
        line: 52,
        column: 24,
        span: 1253..1261,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
        column: 25,
        span: 1261..1262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 52,
        column: 26,
        span: 1262..1263,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 52,
        column: 27,
        span: 1263..1264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 52,
        column: 29,
        span: 1265..1266,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 52,
        column: 30,
        span: 1266..1267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "asize",
        ),
        line: 52,
        column: 35,
        span: 1267..1272,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 36,
        span: 1272..1273,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 37,
        span: 1273..1274,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 53,
        column: 0,
        span: 1277..1280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 54,
        column: 8,
        span: 1283..1288,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-------------'",
        ),
        line: 54,
        column: 23,
        span: 1288..1303,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 55,
        column: 0,
        span: 1304..1307,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 57,
        column: 9,
        span: 1309..1317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stat",
        ),
        line: 57,
        column: 14,
        span: 1318..1322,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
        column: 16,
        span: 1323..1324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 57,
        column: 17,
        span: 1324..1325,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
        column: 18,
        span: 1325..1326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 58,
        column: 4,
        span: 1329..1330,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 58,
        column: 6,
        span: 1331..1332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktable",
        ),
        line: 58,
        column: 17,
        span: 1333..1343,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 18,
        span: 1343..1344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 58,
        column: 19,
        span: 1344..1345,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 20,
        span: 1345..1346,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 59,
        column: 8,
        span: 1349..1354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nelem",
        ),
        line: 59,
        column: 14,
        span: 1355..1360,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 59,
        column: 15,
        span: 1360..1361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nlist",
        ),
        line: 59,
        column: 21,
        span: 1362..1367,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 59,
        column: 23,
        span: 1368..1369,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 59,
        column: 25,
        span: 1369..1371,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 59,
        column: 26,
        span: 1371..1372,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 59,
        column: 0,
        span: 1372..1374,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 60,
        column: 8,
        span: 1377..1382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxlist",
        ),
        line: 60,
        column: 16,
        span: 1383..1390,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 60,
        column: 18,
        span: 1391..1392,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 60,
        column: 20,
        span: 1393..1394,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 60,
        column: 21,
        span: 1394..1395,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 61,
        column: 6,
        span: 1398..1401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 61,
        column: 8,
        span: 1402..1403,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 61,
        column: 9,
        span: 1403..1404,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 61,
        column: 10,
        span: 1403..1405,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 11,
        span: 1405..1406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 61,
        column: 12,
        span: 1406..1407,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 61,
        column: 13,
        span: 1407..1408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hsize",
        ),
        line: 61,
        column: 18,
        span: 1408..1413,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 61,
        column: 19,
        span: 1413..1414,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 61,
        column: 20,
        span: 1413..1415,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 61,
        column: 0,
        span: 1416..1418,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 62,
        column: 7,
        span: 1423..1425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 62,
        column: 12,
        span: 1426..1430,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 13,
        span: 1430..1431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 62,
        column: 14,
        span: 1431..1432,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 62,
        column: 15,
        span: 1432..1433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 62,
        column: 16,
        span: 1433..1434,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 62,
        column: 17,
        span: 1434..1435,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 18,
        span: 1435..1436,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 62,
        column: 21,
        span: 1437..1439,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        line: 62,
        column: 29,
        span: 1440..1447,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 62,
        column: 0,
        span: 1448..1452,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 63,
        column: 12,
        span: 1459..1464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 63,
        column: 14,
        span: 1465..1466,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 63,
        column: 16,
        span: 1467..1468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 63,
        column: 22,
        span: 1469..1474,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 63,
        column: 23,
        span: 1474..1475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        line: 63,
        column: 27,
        span: 1475..1479,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 28,
        span: 1479..1480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 63,
        column: 29,
        span: 1480..1481,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 63,
        column: 30,
        span: 1481..1482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 63,
        column: 31,
        span: 1482..1483,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 63,
        column: 32,
        span: 1483..1484,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 33,
        span: 1484..1485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nlist",
        ),
        line: 64,
        column: 12,
        span: 1492..1497,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 64,
        column: 14,
        span: 1498..1499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nlist",
        ),
        line: 64,
        column: 20,
        span: 1500..1505,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 64,
        column: 21,
        span: 1505..1506,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 64,
        column: 0,
        span: 1505..1507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nelem",
        ),
        line: 65,
        column: 12,
        span: 1514..1519,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 65,
        column: 14,
        span: 1520..1521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nelem",
        ),
        line: 65,
        column: 20,
        span: 1522..1527,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 65,
        column: 22,
        span: 1528..1529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 65,
        column: 0,
        span: 1530..1531,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 66,
        column: 9,
        span: 1538..1540,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 66,
        column: 13,
        span: 1541..1544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxlist",
        ),
        line: 66,
        column: 21,
        span: 1545..1552,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 66,
        column: 22,
        span: 1552..1553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 66,
        column: 23,
        span: 1553..1554,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 66,
        column: 24,
        span: 1554..1555,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 66,
        column: 29,
        span: 1556..1560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxlist",
        ),
        line: 66,
        column: 37,
        span: 1561..1568,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 66,
        column: 38,
        span: 1568..1569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 66,
        column: 39,
        span: 1569..1570,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 66,
        column: 40,
        span: 1570..1571,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 66,
        column: 42,
        span: 1572..1573,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 66,
        column: 44,
        span: 1573..1575,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 66,
        column: 0,
        span: 1576..1579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxlist",
        ),
        line: 67,
        column: 14,
        span: 1586..1593,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 67,
        column: 15,
        span: 1593..1594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 67,
        column: 16,
        span: 1594..1595,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 67,
        column: 17,
        span: 1595..1596,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 67,
        column: 19,
        span: 1597..1598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxlist",
        ),
        line: 67,
        column: 27,
        span: 1599..1606,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 67,
        column: 28,
        span: 1606..1607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 67,
        column: 29,
        span: 1607..1608,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 67,
        column: 30,
        span: 1608..1609,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 67,
        column: 31,
        span: 1609..1610,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 67,
        column: 0,
        span: 1609..1611,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 68,
        column: 0,
        span: 1616..1619,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 69,
        column: 0,
        span: 1622..1625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 70,
        column: 8,
        span: 1628..1633,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 9,
        span: 1633..1634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 70,
        column: 15,
        span: 1634..1640,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 70,
        column: 16,
        span: 1640..1641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 70,
        column: 22,
        span: 1641..1647,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 23,
        span: 1647..1648,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hsize=%d  elements=%d  load=%.2f  med.len=%.2f (asize=%d)\"",
        ),
        line: 70,
        column: 82,
        span: 1648..1707,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 70,
        column: 83,
        span: 1707..1708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 71,
        column: 12,
        span: 1719..1720,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 71,
        column: 13,
        span: 1720..1721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hsize",
        ),
        line: 71,
        column: 18,
        span: 1721..1726,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 19,
        span: 1726..1727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nelem",
        ),
        line: 71,
        column: 25,
        span: 1728..1733,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 26,
        span: 1733..1734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nelem",
        ),
        line: 71,
        column: 32,
        span: 1735..1740,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 71,
        column: 33,
        span: 1740..1741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 71,
        column: 34,
        span: 1741..1742,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 71,
        column: 35,
        span: 1742..1743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hsize",
        ),
        line: 71,
        column: 40,
        span: 1743..1748,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 41,
        span: 1748..1749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nelem",
        ),
        line: 71,
        column: 47,
        span: 1750..1755,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 71,
        column: 48,
        span: 1755..1756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nlist",
        ),
        line: 71,
        column: 53,
        span: 1756..1761,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 54,
        span: 1761..1762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 71,
        column: 56,
        span: 1763..1764,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 71,
        column: 57,
        span: 1764..1765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "asize",
        ),
        line: 71,
        column: 62,
        span: 1765..1770,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 63,
        span: 1770..1771,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 64,
        span: 1771..1772,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 72,
        column: 6,
        span: 1775..1778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 72,
        column: 8,
        span: 1779..1780,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 72,
        column: 9,
        span: 1780..1781,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 72,
        column: 10,
        span: 1780..1782,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 72,
        column: 11,
        span: 1782..1783,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 72,
        column: 16,
        span: 1783..1788,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 72,
        column: 17,
        span: 1788..1789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        line: 72,
        column: 21,
        span: 1789..1793,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 22,
        span: 1793..1794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxlist",
        ),
        line: 72,
        column: 29,
        span: 1794..1801,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 30,
        span: 1801..1802,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 72,
        column: 0,
        span: 1803..1805,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 73,
        column: 10,
        span: 1810..1815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 73,
        column: 12,
        span: 1816..1817,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 73,
        column: 14,
        span: 1818..1819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxlist",
        ),
        line: 73,
        column: 22,
        span: 1820..1827,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 73,
        column: 23,
        span: 1827..1828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 73,
        column: 24,
        span: 1828..1829,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 73,
        column: 25,
        span: 1829..1830,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 73,
        column: 28,
        span: 1831..1833,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 0,
        span: 1833..1835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 74,
        column: 10,
        span: 1840..1845,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
        column: 11,
        span: 1845..1846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 74,
        column: 17,
        span: 1846..1852,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 74,
        column: 18,
        span: 1852..1853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 74,
        column: 24,
        span: 1853..1859,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
        column: 25,
        span: 1859..1860,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%5d %10d %.2f%%\"",
        ),
        line: 74,
        column: 42,
        span: 1860..1877,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 74,
        column: 43,
        span: 1877..1878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 74,
        column: 45,
        span: 1879..1880,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 74,
        column: 46,
        span: 1880..1881,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 74,
        column: 48,
        span: 1882..1883,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 74,
        column: 49,
        span: 1883..1884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 74,
        column: 51,
        span: 1885..1886,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 74,
        column: 52,
        span: 1886..1887,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 74,
        column: 55,
        span: 1886..1890,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 74,
        column: 56,
        span: 1890..1891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nlist",
        ),
        line: 74,
        column: 61,
        span: 1891..1896,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
        column: 62,
        span: 1896..1897,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
        column: 63,
        span: 1897..1898,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 75,
        column: 0,
        span: 1901..1904,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 76,
        column: 0,
        span: 1905..1908,
    },
]
