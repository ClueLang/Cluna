---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.1-tests/main.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 3,
            column: 6,
            span: 41..46,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 3,
            column: 8,
            span: 47..48,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing lua.c options\"",
        ),
        position: Position {
            line: 3,
            column: 31,
            span: 48..71,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 3,
            column: 32,
            span: 71..72,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 5,
            column: 7,
            span: 74..80,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 5,
            column: 8,
            span: 80..81,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 5,
            column: 10,
            span: 81..83,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 5,
            column: 11,
            span: 83..84,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "execute",
        ),
        position: Position {
            line: 5,
            column: 18,
            span: 84..91,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 5,
            column: 19,
            span: 91..92,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 5,
            column: 20,
            span: 92..93,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 5,
            column: 23,
            span: 94..96,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 5,
            column: 25,
            span: 96..98,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 5,
            column: 26,
            span: 98..99,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 7,
            column: 5,
            span: 135..139,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 7,
            column: 7,
            span: 140..141,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 7,
            column: 10,
            span: 142..144,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 7,
            column: 11,
            span: 144..145,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpname",
        ),
        position: Position {
            line: 7,
            column: 18,
            span: 145..152,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 7,
            column: 19,
            span: 152..153,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 7,
            column: 20,
            span: 153..154,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        position: Position {
            line: 8,
            column: 10,
            span: 155..164,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 8,
            column: 12,
            span: 165..166,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 8,
            column: 15,
            span: 167..169,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 8,
            column: 16,
            span: 169..170,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpname",
        ),
        position: Position {
            line: 8,
            column: 23,
            span: 170..177,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 8,
            column: 24,
            span: 177..178,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 8,
            column: 25,
            span: 178..179,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 9,
            column: 4,
            span: 180..183,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 9,
            column: 6,
            span: 184..185,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 9,
            column: 9,
            span: 186..188,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 9,
            column: 10,
            span: 188..189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpname",
        ),
        position: Position {
            line: 9,
            column: 17,
            span: 189..196,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 9,
            column: 18,
            span: 196..197,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 9,
            column: 19,
            span: 197..198,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 11,
            column: 0,
            span: 200..202,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 12,
            column: 8,
            span: 205..210,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 12,
            column: 10,
            span: 211..212,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 12,
            column: 12,
            span: 213..214,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 12,
            column: 0,
            span: 214..216,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 13,
            column: 8,
            span: 219..224,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 13,
            column: 12,
            span: 225..228,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 13,
            column: 13,
            span: 228..229,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 13,
            column: 14,
            span: 229..230,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 13,
            column: 15,
            span: 230..231,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 13,
            column: 18,
            span: 232..234,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 13,
            column: 20,
            span: 235..236,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 13,
            column: 21,
            span: 236..237,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 13,
            column: 22,
            span: 237..238,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 13,
            column: 23,
            span: 238..239,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 13,
            column: 24,
            span: 238..240,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 13,
            column: 0,
            span: 241..244,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        position: Position {
            line: 14,
            column: 11,
            span: 247..255,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 14,
            column: 13,
            span: 256..257,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"'",
        ),
        position: Position {
            line: 14,
            column: 17,
            span: 258..261,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 14,
            column: 19,
            span: 261..263,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 14,
            column: 22,
            span: 263..266,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 14,
            column: 23,
            span: 266..267,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 14,
            column: 24,
            span: 267..268,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 14,
            column: 25,
            span: 268..269,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 14,
            column: 26,
            span: 268..270,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 14,
            column: 27,
            span: 270..271,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 14,
            column: 29,
            span: 271..273,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"'",
        ),
        position: Position {
            line: 14,
            column: 32,
            span: 273..276,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 15,
            column: 0,
            span: 277..280,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 16,
            column: 6,
            span: 281..286,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 16,
            column: 7,
            span: 286..287,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        position: Position {
            line: 16,
            column: 15,
            span: 287..295,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 16,
            column: 16,
            span: 295..296,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 18,
            column: 6,
            span: 298..303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 18,
            column: 15,
            span: 304..312,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 18,
            column: 17,
            span: 313..314,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 18,
            column: 26,
            span: 315..323,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 18,
            column: 28,
            span: 324..325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 18,
            column: 29,
            span: 325..326,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 18,
            column: 30,
            span: 326..327,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 18,
            column: 32,
            span: 328..329,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 18,
            column: 33,
            span: 329..330,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 19,
            column: 4,
            span: 333..334,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 19,
            column: 6,
            span: 335..336,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 19,
            column: 8,
            span: 337..338,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 19,
            column: 11,
            span: 339..341,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 19,
            column: 0,
            span: 342..346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 20,
            column: 5,
            span: 349..351,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 20,
            column: 6,
            span: 351..352,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 20,
            column: 12,
            span: 352..358,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 20,
            column: 13,
            span: 358..359,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 20,
            column: 14,
            span: 359..360,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 20,
            column: 15,
            span: 360..361,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 21,
            column: 5,
            span: 364..366,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 21,
            column: 6,
            span: 366..367,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 21,
            column: 11,
            span: 367..372,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 21,
            column: 12,
            span: 372..373,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 21,
            column: 13,
            span: 373..374,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 21,
            column: 14,
            span: 374..375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 22,
            column: 9,
            span: 378..384,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 22,
            column: 10,
            span: 384..385,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 22,
            column: 12,
            span: 385..387,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 22,
            column: 13,
            span: 387..388,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 22,
            column: 18,
            span: 388..393,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 22,
            column: 19,
            span: 393..394,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 22,
            column: 20,
            span: 394..395,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 22,
            column: 21,
            span: 395..396,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 23,
            column: 0,
            span: 397..400,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 25,
            column: 9,
            span: 402..410,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 25,
            column: 18,
            span: 411..419,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 25,
            column: 20,
            span: 420..421,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 25,
            column: 21,
            span: 421..422,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 25,
            column: 22,
            span: 422..423,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 26,
            column: 5,
            span: 426..428,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 26,
            column: 6,
            span: 428..429,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 26,
            column: 11,
            span: 429..434,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 26,
            column: 12,
            span: 434..435,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 26,
            column: 15,
            span: 435..438,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 26,
            column: 16,
            span: 438..439,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 27,
            column: 8,
            span: 442..447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 27,
            column: 10,
            span: 448..449,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 27,
            column: 12,
            span: 450..451,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 27,
            column: 15,
            span: 452..454,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 27,
            column: 16,
            span: 454..455,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 27,
            column: 20,
            span: 455..459,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 27,
            column: 21,
            span: 459..460,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*a\"",
        ),
        position: Position {
            line: 27,
            column: 25,
            span: 460..464,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 27,
            column: 26,
            span: 464..465,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 28,
            column: 5,
            span: 468..470,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 28,
            column: 6,
            span: 470..471,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 28,
            column: 11,
            span: 471..476,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 28,
            column: 12,
            span: 476..477,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 28,
            column: 13,
            span: 477..478,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 28,
            column: 14,
            span: 478..479,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 28,
            column: 19,
            span: 479..484,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 28,
            column: 20,
            span: 484..485,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 28,
            column: 21,
            span: 485..486,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 29,
            column: 9,
            span: 489..495,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 29,
            column: 10,
            span: 495..496,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 29,
            column: 12,
            span: 496..498,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 29,
            column: 13,
            span: 498..499,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 29,
            column: 19,
            span: 499..505,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 29,
            column: 20,
            span: 505..506,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 29,
            column: 23,
            span: 506..509,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 29,
            column: 24,
            span: 509..510,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 29,
            column: 25,
            span: 510..511,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 30,
            column: 5,
            span: 514..516,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 30,
            column: 7,
            span: 517..518,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 30,
            column: 10,
            span: 519..521,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 30,
            column: 12,
            span: 522..523,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 30,
            column: 17,
            span: 524..528,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 30,
            column: 23,
            span: 529..534,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 30,
            column: 24,
            span: 534..535,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 30,
            column: 30,
            span: 535..541,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 30,
            column: 31,
            span: 541..542,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 30,
            column: 37,
            span: 542..548,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 30,
            column: 38,
            span: 548..549,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'%s' - '%s'\\n\"",
        ),
        position: Position {
            line: 30,
            column: 53,
            span: 549..564,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 30,
            column: 54,
            span: 564..565,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 30,
            column: 56,
            span: 566..567,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 30,
            column: 57,
            span: 567..568,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 30,
            column: 59,
            span: 569..570,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 30,
            column: 60,
            span: 570..571,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 30,
            column: 61,
            span: 571..572,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 30,
            column: 0,
            span: 573..576,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 31,
            column: 9,
            span: 579..585,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 31,
            column: 10,
            span: 585..586,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 31,
            column: 11,
            span: 586..587,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 31,
            column: 14,
            span: 588..590,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 31,
            column: 16,
            span: 591..592,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 31,
            column: 17,
            span: 592..593,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 32,
            column: 9,
            span: 596..602,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 32,
            column: 0,
            span: 603..604,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 33,
            column: 0,
            span: 605..608,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 35,
            column: 9,
            span: 610..618,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "auxrun",
        ),
        position: Position {
            line: 35,
            column: 16,
            span: 619..625,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 35,
            column: 18,
            span: 626..627,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 35,
            column: 21,
            span: 627..630,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 35,
            column: 22,
            span: 630..631,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 36,
            column: 8,
            span: 634..639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 36,
            column: 10,
            span: 640..641,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 36,
            column: 12,
            span: 642..643,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 36,
            column: 19,
            span: 644..650,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 36,
            column: 20,
            span: 650..651,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 36,
            column: 26,
            span: 651..657,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 36,
            column: 27,
            span: 657..658,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 36,
            column: 30,
            span: 658..661,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 36,
            column: 31,
            span: 661..662,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 37,
            column: 4,
            span: 665..666,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 37,
            column: 6,
            span: 667..668,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 37,
            column: 13,
            span: 669..675,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 37,
            column: 14,
            span: 675..676,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 37,
            column: 18,
            span: 676..680,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 37,
            column: 19,
            span: 680..681,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 37,
            column: 20,
            span: 681..682,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 37,
            column: 21,
            span: 682..683,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua\"",
        ),
        position: Position {
            line: 37,
            column: 27,
            span: 684..689,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 37,
            column: 28,
            span: 689..690,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        position: Position {
            line: 37,
            column: 37,
            span: 691..699,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 37,
            column: 38,
            span: 699..700,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 37,
            column: 40,
            span: 700..702,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 37,
            column: 41,
            span: 702..703,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 38,
            column: 9,
            span: 706..712,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 38,
            column: 12,
            span: 713..715,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 38,
            column: 13,
            span: 715..716,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "execute",
        ),
        position: Position {
            line: 38,
            column: 20,
            span: 716..723,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 38,
            column: 21,
            span: 723..724,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 38,
            column: 22,
            span: 724..725,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 38,
            column: 23,
            span: 725..726,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 39,
            column: 0,
            span: 727..730,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 41,
            column: 9,
            span: 732..740,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 41,
            column: 13,
            span: 741..744,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 41,
            column: 15,
            span: 745..746,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 41,
            column: 18,
            span: 746..749,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 19,
            span: 749..750,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 42,
            column: 9,
            span: 753..759,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 42,
            column: 10,
            span: 759..760,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "auxrun",
        ),
        position: Position {
            line: 42,
            column: 16,
            span: 760..766,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 42,
            column: 17,
            span: 766..767,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 42,
            column: 20,
            span: 767..770,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 42,
            column: 21,
            span: 770..771,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 42,
            column: 24,
            span: 772..774,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 42,
            column: 26,
            span: 774..776,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 42,
            column: 27,
            span: 776..777,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 43,
            column: 0,
            span: 778..781,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 45,
            column: 9,
            span: 783..791,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        position: Position {
            line: 45,
            column: 15,
            span: 792..797,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 45,
            column: 17,
            span: 798..799,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 45,
            column: 20,
            span: 799..802,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 45,
            column: 21,
            span: 802..803,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 46,
            column: 8,
            span: 806..811,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 46,
            column: 9,
            span: 811..812,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n(the next error is expected by the test)\"",
        ),
        position: Position {
            line: 46,
            column: 53,
            span: 812..856,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 46,
            column: 54,
            span: 856..857,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 47,
            column: 9,
            span: 860..866,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 47,
            column: 10,
            span: 866..867,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "auxrun",
        ),
        position: Position {
            line: 47,
            column: 16,
            span: 867..873,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 47,
            column: 17,
            span: 873..874,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 47,
            column: 20,
            span: 874..877,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 47,
            column: 21,
            span: 877..878,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 47,
            column: 24,
            span: 879..881,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 47,
            column: 26,
            span: 881..883,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 47,
            column: 27,
            span: 883..884,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 48,
            column: 0,
            span: 885..888,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 51,
            column: 9,
            span: 906..914,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 51,
            column: 10,
            span: 914..915,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(1); a=2\"",
        ),
        position: Position {
            line: 51,
            column: 25,
            span: 915..930,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 51,
            column: 26,
            span: 930..931,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 52,
            column: 9,
            span: 932..940,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 52,
            column: 10,
            span: 940..941,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(a)\"",
        ),
        position: Position {
            line: 52,
            column: 20,
            span: 941..951,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 52,
            column: 21,
            span: 951..952,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        position: Position {
            line: 52,
            column: 31,
            span: 953..962,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 52,
            column: 32,
            span: 962..963,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 53,
            column: 4,
            span: 964..967,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 53,
            column: 5,
            span: 967..968,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -l %s -l%s -lstring -l io %s > %s\"",
        ),
        position: Position {
            line: 53,
            column: 44,
            span: 968..1007,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 53,
            column: 45,
            span: 1007..1008,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 53,
            column: 50,
            span: 1009..1013,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 53,
            column: 51,
            span: 1013..1014,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        position: Position {
            line: 53,
            column: 61,
            span: 1015..1024,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 53,
            column: 62,
            span: 1024..1025,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        position: Position {
            line: 53,
            column: 72,
            span: 1026..1035,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 53,
            column: 73,
            span: 1035..1036,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 53,
            column: 77,
            span: 1037..1040,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 53,
            column: 78,
            span: 1040..1041,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 54,
            column: 9,
            span: 1042..1050,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 54,
            column: 10,
            span: 1050..1051,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\\n2\\n2\\n\"",
        ),
        position: Position {
            line: 54,
            column: 21,
            span: 1051..1062,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 54,
            column: 22,
            span: 1062..1063,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 56,
            column: 6,
            span: 1065..1070,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 56,
            column: 8,
            span: 1071..1072,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 56,
            column: 10,
            span: 1073..1074,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  assert(table.getn(arg) == 3 and arg[1] == 'a' and\n         arg[2] == 'b' and arg[3] == 'c')\n  assert(arg[-1] == '--' and arg[-2] == \"-e \" and arg[-3] == %s)\n  assert(arg[4] == nil and arg[-4] == nil)\n  local a, b, c = ...\n  assert(... == 'a' and a == 'a' and b == 'b' and c == 'c')\n]]",
        ),
        position: Position {
            line: 63,
            column: 3,
            span: 1075..1364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 64,
            column: 2,
            span: 1365..1366,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 64,
            column: 4,
            span: 1367..1368,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 64,
            column: 11,
            span: 1369..1375,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 64,
            column: 12,
            span: 1375..1376,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 64,
            column: 18,
            span: 1376..1382,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 64,
            column: 19,
            span: 1382..1383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 64,
            column: 20,
            span: 1383..1384,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 64,
            column: 21,
            span: 1384..1385,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        position: Position {
            line: 64,
            column: 30,
            span: 1386..1394,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 64,
            column: 31,
            span: 1394..1395,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 65,
            column: 9,
            span: 1396..1404,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 65,
            column: 10,
            span: 1404..1405,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 65,
            column: 11,
            span: 1405..1406,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 65,
            column: 12,
            span: 1406..1407,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 66,
            column: 4,
            span: 1408..1411,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 66,
            column: 5,
            span: 1411..1412,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua \"-e \" -- %s a b c'",
        ),
        position: Position {
            line: 66,
            column: 28,
            span: 1412..1435,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 66,
            column: 29,
            span: 1435..1436,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 66,
            column: 34,
            span: 1437..1441,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 66,
            column: 35,
            span: 1441..1442,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 68,
            column: 9,
            span: 1444..1452,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"assert(arg==nil)\"",
        ),
        position: Position {
            line: 68,
            column: 27,
            span: 1452..1470,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 69,
            column: 9,
            span: 1471..1479,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 69,
            column: 10,
            span: 1479..1480,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"assert(arg)\"",
        ),
        position: Position {
            line: 69,
            column: 23,
            span: 1480..1493,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 69,
            column: 24,
            span: 1493..1494,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        position: Position {
            line: 69,
            column: 34,
            span: 1495..1504,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 69,
            column: 35,
            span: 1504..1505,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 70,
            column: 4,
            span: 1506..1509,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 70,
            column: 5,
            span: 1509..1510,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -l%s - < %s\"",
        ),
        position: Position {
            line: 70,
            column: 22,
            span: 1510..1527,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 70,
            column: 23,
            span: 1527..1528,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 70,
            column: 28,
            span: 1529..1533,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 70,
            column: 29,
            span: 1533..1534,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        position: Position {
            line: 70,
            column: 39,
            span: 1535..1544,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 70,
            column: 40,
            span: 1544..1545,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 72,
            column: 9,
            span: 1547..1555,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 72,
            column: 11,
            span: 1555..1557,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 73,
            column: 4,
            span: 1558..1561,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 73,
            column: 5,
            span: 1561..1562,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua - < %s > %s\"",
        ),
        position: Position {
            line: 73,
            column: 22,
            span: 1562..1579,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 73,
            column: 23,
            span: 1579..1580,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 73,
            column: 28,
            span: 1581..1585,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 73,
            column: 29,
            span: 1585..1586,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 73,
            column: 33,
            span: 1587..1590,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 73,
            column: 34,
            span: 1590..1591,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 74,
            column: 9,
            span: 1592..1600,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 74,
            column: 10,
            span: 1600..1601,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 74,
            column: 12,
            span: 1601..1603,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 74,
            column: 13,
            span: 1603..1604,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 77,
            column: 9,
            span: 1629..1637,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[print(({...})[30])]]",
        ),
        position: Position {
            line: 77,
            column: 31,
            span: 1637..1659,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 78,
            column: 4,
            span: 1660..1663,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 78,
            column: 5,
            span: 1663..1664,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua %s %s > %s\"",
        ),
        position: Position {
            line: 78,
            column: 21,
            span: 1664..1680,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 78,
            column: 22,
            span: 1680..1681,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 78,
            column: 27,
            span: 1682..1686,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 78,
            column: 28,
            span: 1686..1687,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 78,
            column: 35,
            span: 1688..1694,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 78,
            column: 36,
            span: 1694..1695,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 78,
            column: 39,
            span: 1695..1698,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 78,
            column: 40,
            span: 1698..1699,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" a\"",
        ),
        position: Position {
            line: 78,
            column: 44,
            span: 1699..1703,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 78,
            column: 45,
            span: 1703..1704,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 78,
            column: 48,
            span: 1704..1707,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 78,
            column: 49,
            span: 1707..1708,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 78,
            column: 50,
            span: 1708..1709,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 78,
            column: 54,
            span: 1710..1713,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 78,
            column: 55,
            span: 1713..1714,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 79,
            column: 9,
            span: 1715..1723,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 79,
            column: 10,
            span: 1723..1724,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\\n\"",
        ),
        position: Position {
            line: 79,
            column: 15,
            span: 1724..1729,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 79,
            column: 16,
            span: 1729..1730,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 81,
            column: 4,
            span: 1732..1735,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 81,
            column: 5,
            span: 1735..1736,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua \"-eprint(1)\" -ea=3 -e \"print(a)\" > %s]]",
        ),
        position: Position {
            line: 81,
            column: 50,
            span: 1736..1781,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 81,
            column: 51,
            span: 1781..1782,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 81,
            column: 55,
            span: 1783..1786,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 81,
            column: 56,
            span: 1786..1787,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 82,
            column: 9,
            span: 1788..1796,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 82,
            column: 10,
            span: 1796..1797,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\\n3\\n\"",
        ),
        position: Position {
            line: 82,
            column: 18,
            span: 1797..1805,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 82,
            column: 19,
            span: 1805..1806,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 84,
            column: 9,
            span: 1808..1816,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  print(\n1, a\n)\n]]",
        ),
        position: Position {
            line: 88,
            column: 3,
            span: 1816..1837,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 89,
            column: 4,
            span: 1838..1841,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 89,
            column: 5,
            span: 1841..1842,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua - < %s > %s\"",
        ),
        position: Position {
            line: 89,
            column: 22,
            span: 1842..1859,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 89,
            column: 23,
            span: 1859..1860,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 89,
            column: 28,
            span: 1861..1865,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 89,
            column: 29,
            span: 1865..1866,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 89,
            column: 33,
            span: 1867..1870,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 89,
            column: 34,
            span: 1870..1871,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 90,
            column: 9,
            span: 1872..1880,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 90,
            column: 10,
            span: 1880..1881,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\\tnil\\n\"",
        ),
        position: Position {
            line: 90,
            column: 20,
            span: 1881..1891,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 90,
            column: 21,
            span: 1891..1892,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 92,
            column: 9,
            span: 1894..1902,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n= (6*2-6) -- ===\na \n= 10\nprint(a)\n= a]]",
        ),
        position: Position {
            line: 97,
            column: 6,
            span: 1902..1944,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 98,
            column: 4,
            span: 1945..1948,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 98,
            column: 5,
            span: 1948..1949,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s]]",
        ),
        position: Position {
            line: 98,
            column: 52,
            span: 1949..1996,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 98,
            column: 53,
            span: 1996..1997,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 98,
            column: 58,
            span: 1998..2002,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 98,
            column: 59,
            span: 2002..2003,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 98,
            column: 63,
            span: 2004..2007,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 98,
            column: 64,
            span: 2007..2008,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 99,
            column: 9,
            span: 2009..2017,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 99,
            column: 10,
            span: 2017..2018,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"6\\n10\\n10\\n\\n\"",
        ),
        position: Position {
            line: 99,
            column: 25,
            span: 2018..2033,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 99,
            column: 26,
            span: 2033..2034,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 101,
            column: 9,
            span: 2036..2044,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 101,
            column: 10,
            span: 2044..2045,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = [[b\\nc\\nd\\ne]]\\n=a\"",
        ),
        position: Position {
            line: 101,
            column: 34,
            span: 2045..2069,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 101,
            column: 35,
            span: 2069..2070,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 102,
            column: 6,
            span: 2071..2076,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 102,
            column: 7,
            span: 2076..2077,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 102,
            column: 11,
            span: 2077..2081,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 102,
            column: 12,
            span: 2081..2082,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 103,
            column: 4,
            span: 2083..2086,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 103,
            column: 5,
            span: 2086..2087,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s]]",
        ),
        position: Position {
            line: 103,
            column: 52,
            span: 2087..2134,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 103,
            column: 53,
            span: 2134..2135,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 103,
            column: 58,
            span: 2136..2140,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 103,
            column: 59,
            span: 2140..2141,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 103,
            column: 63,
            span: 2142..2145,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 103,
            column: 64,
            span: 2145..2146,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 104,
            column: 9,
            span: 2147..2155,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 104,
            column: 10,
            span: 2155..2156,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\\nc\\nd\\ne\\n\\n\"",
        ),
        position: Position {
            line: 104,
            column: 26,
            span: 2156..2172,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 104,
            column: 27,
            span: 2172..2173,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        position: Position {
            line: 106,
            column: 7,
            span: 2175..2181,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 106,
            column: 9,
            span: 2182..2183,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 106,
            column: 15,
            span: 2184..2189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 107,
            column: 9,
            span: 2190..2198,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ --\na = 2\n]]",
        ),
        position: Position {
            line: 109,
            column: 3,
            span: 2198..2212,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 110,
            column: 4,
            span: 2213..2216,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 110,
            column: 5,
            span: 2216..2217,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua \"-e_PROMPT='%s'\" -i < %s > %s]]",
        ),
        position: Position {
            line: 110,
            column: 42,
            span: 2217..2254,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 110,
            column: 43,
            span: 2254..2255,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        position: Position {
            line: 110,
            column: 50,
            span: 2256..2262,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 110,
            column: 51,
            span: 2262..2263,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 110,
            column: 56,
            span: 2264..2268,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 110,
            column: 57,
            span: 2268..2269,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 110,
            column: 61,
            span: 2270..2273,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 110,
            column: 62,
            span: 2273..2274,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 111,
            column: 9,
            span: 2275..2283,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 111,
            column: 10,
            span: 2283..2284,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 111,
            column: 16,
            span: 2284..2290,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 111,
            column: 17,
            span: 2290..2291,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 111,
            column: 20,
            span: 2291..2294,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 111,
            column: 21,
            span: 2294..2295,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        position: Position {
            line: 111,
            column: 27,
            span: 2295..2301,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 111,
            column: 28,
            span: 2301..2302,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 111,
            column: 30,
            span: 2302..2304,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 111,
            column: 31,
            span: 2304..2305,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 111,
            column: 33,
            span: 2305..2307,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        position: Position {
            line: 111,
            column: 37,
            span: 2307..2311,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 111,
            column: 38,
            span: 2311..2312,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 113,
            column: 2,
            span: 2314..2315,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 113,
            column: 4,
            span: 2316..2317,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[=[ -- \nfunction f ( x ) \n  local a = [[\nxuxu\n]]\n  local b = \"\\\nxuxu\\n\"\n  if x == 11 then return 1 , 2 end  --[[ test multiple returns ]]\n  return x + 1 \n  --\\\\\nend\n=( f( 10 ) )\nassert( a == b )\n=f( 11 )  ]=]",
        ),
        position: Position {
            line: 126,
            column: 14,
            span: 2318..2526,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 127,
            column: 2,
            span: 2527..2528,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 127,
            column: 4,
            span: 2529..2530,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 127,
            column: 11,
            span: 2531..2537,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 127,
            column: 12,
            span: 2537..2538,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 127,
            column: 16,
            span: 2538..2542,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 127,
            column: 17,
            span: 2542..2543,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 127,
            column: 18,
            span: 2543..2544,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 127,
            column: 19,
            span: 2544..2545,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' '",
        ),
        position: Position {
            line: 127,
            column: 23,
            span: 2546..2549,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 127,
            column: 24,
            span: 2549..2550,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n\\n'",
        ),
        position: Position {
            line: 127,
            column: 31,
            span: 2551..2557,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 127,
            column: 32,
            span: 2557..2558,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 128,
            column: 9,
            span: 2559..2567,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 128,
            column: 10,
            span: 2567..2568,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 128,
            column: 11,
            span: 2568..2569,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 128,
            column: 12,
            span: 2569..2570,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 129,
            column: 4,
            span: 2571..2574,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 129,
            column: 5,
            span: 2574..2575,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s]]",
        ),
        position: Position {
            line: 129,
            column: 52,
            span: 2575..2622,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 129,
            column: 53,
            span: 2622..2623,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 129,
            column: 58,
            span: 2624..2628,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 129,
            column: 59,
            span: 2628..2629,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 129,
            column: 63,
            span: 2630..2633,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 129,
            column: 64,
            span: 2633..2634,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 130,
            column: 9,
            span: 2635..2643,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 130,
            column: 10,
            span: 2643..2644,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"11\\n1\\t2\\n\\n\"",
        ),
        position: Position {
            line: 130,
            column: 24,
            span: 2644..2658,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 130,
            column: 25,
            span: 2658..2659,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 132,
            column: 9,
            span: 2663..2671,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[#comment in 1st line without \\n at the end]]",
        ),
        position: Position {
            line: 132,
            column: 55,
            span: 2671..2717,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 133,
            column: 4,
            span: 2718..2721,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 133,
            column: 5,
            span: 2721..2722,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua %s\"",
        ),
        position: Position {
            line: 133,
            column: 13,
            span: 2722..2730,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 133,
            column: 14,
            span: 2730..2731,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 133,
            column: 19,
            span: 2732..2736,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 133,
            column: 20,
            span: 2736..2737,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 135,
            column: 9,
            span: 2739..2747,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 135,
            column: 10,
            span: 2747..2748,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"#comment with a binary file\\n\"",
        ),
        position: Position {
            line: 135,
            column: 41,
            span: 2748..2779,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 135,
            column: 43,
            span: 2779..2781,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 135,
            column: 49,
            span: 2781..2787,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 135,
            column: 50,
            span: 2787..2788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        position: Position {
            line: 135,
            column: 54,
            span: 2788..2792,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 135,
            column: 55,
            span: 2792..2793,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        position: Position {
            line: 135,
            column: 65,
            span: 2793..2803,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 135,
            column: 66,
            span: 2803..2804,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(1)\"",
        ),
        position: Position {
            line: 135,
            column: 76,
            span: 2804..2814,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 135,
            column: 77,
            span: 2814..2815,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 135,
            column: 78,
            span: 2815..2816,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 135,
            column: 79,
            span: 2816..2817,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 136,
            column: 4,
            span: 2818..2821,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 136,
            column: 5,
            span: 2821..2822,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua %s > %s\"",
        ),
        position: Position {
            line: 136,
            column: 18,
            span: 2822..2835,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 136,
            column: 19,
            span: 2835..2836,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 136,
            column: 24,
            span: 2837..2841,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 136,
            column: 25,
            span: 2841..2842,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 136,
            column: 29,
            span: 2843..2846,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 136,
            column: 30,
            span: 2846..2847,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 137,
            column: 9,
            span: 2848..2856,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 137,
            column: 10,
            span: 2856..2857,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\\n\"",
        ),
        position: Position {
            line: 137,
            column: 15,
            span: 2857..2862,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 137,
            column: 16,
            span: 2862..2863,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 139,
            column: 9,
            span: 2865..2873,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 139,
            column: 10,
            span: 2873..2874,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"#comment with a binary file\\r\\n\"",
        ),
        position: Position {
            line: 139,
            column: 43,
            span: 2874..2907,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 139,
            column: 45,
            span: 2907..2909,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 139,
            column: 51,
            span: 2909..2915,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 139,
            column: 52,
            span: 2915..2916,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        position: Position {
            line: 139,
            column: 56,
            span: 2916..2920,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 139,
            column: 57,
            span: 2920..2921,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        position: Position {
            line: 139,
            column: 67,
            span: 2921..2931,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 139,
            column: 68,
            span: 2931..2932,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(1)\"",
        ),
        position: Position {
            line: 139,
            column: 78,
            span: 2932..2942,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 139,
            column: 79,
            span: 2942..2943,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 139,
            column: 80,
            span: 2943..2944,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 139,
            column: 81,
            span: 2944..2945,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 140,
            column: 4,
            span: 2946..2949,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 140,
            column: 5,
            span: 2949..2950,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua %s > %s\"",
        ),
        position: Position {
            line: 140,
            column: 18,
            span: 2950..2963,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 19,
            span: 2963..2964,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 140,
            column: 24,
            span: 2965..2969,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 25,
            span: 2969..2970,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 140,
            column: 29,
            span: 2971..2974,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 140,
            column: 30,
            span: 2974..2975,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 141,
            column: 9,
            span: 2976..2984,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 141,
            column: 10,
            span: 2984..2985,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\\n\"",
        ),
        position: Position {
            line: 141,
            column: 15,
            span: 2985..2990,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 141,
            column: 16,
            span: 2990..2991,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 144,
            column: 9,
            span: 3024..3032,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 144,
            column: 10,
            span: 3032..3033,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 144,
            column: 16,
            span: 3033..3039,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 144,
            column: 17,
            span: 3039..3040,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 144,
            column: 23,
            span: 3040..3046,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 144,
            column: 24,
            span: 3046..3047,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[io.output(%q); io.write('alo')]]",
        ),
        position: Position {
            line: 144,
            column: 58,
            span: 3047..3081,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 144,
            column: 59,
            span: 3081..3082,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 144,
            column: 63,
            span: 3083..3086,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 144,
            column: 64,
            span: 3086..3087,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 144,
            column: 65,
            span: 3087..3088,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 145,
            column: 4,
            span: 3089..3092,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 145,
            column: 5,
            span: 3092..3093,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua %s\"",
        ),
        position: Position {
            line: 145,
            column: 13,
            span: 3093..3101,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 145,
            column: 14,
            span: 3101..3102,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 145,
            column: 19,
            span: 3103..3107,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 145,
            column: 20,
            span: 3107..3108,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 146,
            column: 9,
            span: 3109..3117,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 146,
            column: 10,
            span: 3117..3118,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        position: Position {
            line: 146,
            column: 15,
            span: 3118..3123,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 146,
            column: 16,
            span: 3123..3124,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 148,
            column: 7,
            span: 3126..3132,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 148,
            column: 8,
            span: 3132..3133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 148,
            column: 10,
            span: 3133..3135,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 148,
            column: 11,
            span: 3135..3136,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 148,
            column: 17,
            span: 3136..3142,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 148,
            column: 18,
            span: 3142..3143,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 148,
            column: 22,
            span: 3143..3147,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 148,
            column: 23,
            span: 3147..3148,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 148,
            column: 24,
            span: 3148..3149,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 149,
            column: 7,
            span: 3150..3156,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 149,
            column: 8,
            span: 3156..3157,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 149,
            column: 10,
            span: 3157..3159,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 149,
            column: 11,
            span: 3159..3160,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 149,
            column: 17,
            span: 3160..3166,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 149,
            column: 18,
            span: 3166..3167,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        position: Position {
            line: 149,
            column: 27,
            span: 3167..3176,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 149,
            column: 28,
            span: 3176..3177,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 149,
            column: 29,
            span: 3177..3178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 150,
            column: 7,
            span: 3179..3185,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 150,
            column: 8,
            span: 3185..3186,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 150,
            column: 11,
            span: 3186..3189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 150,
            column: 14,
            span: 3190..3192,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 150,
            column: 15,
            span: 3192..3193,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 150,
            column: 21,
            span: 3193..3199,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 150,
            column: 22,
            span: 3199..3200,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 150,
            column: 25,
            span: 3200..3203,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 150,
            column: 26,
            span: 3203..3204,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 150,
            column: 27,
            span: 3204..3205,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 152,
            column: 4,
            span: 3207..3210,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 152,
            column: 5,
            span: 3210..3211,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -v\"",
        ),
        position: Position {
            line: 152,
            column: 13,
            span: 3211..3219,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 152,
            column: 14,
            span: 3219..3220,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        position: Position {
            line: 154,
            column: 6,
            span: 3222..3227,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 154,
            column: 7,
            span: 3227..3228,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -h\"",
        ),
        position: Position {
            line: 154,
            column: 15,
            span: 3228..3236,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 154,
            column: 16,
            span: 3236..3237,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        position: Position {
            line: 155,
            column: 6,
            span: 3238..3243,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 155,
            column: 7,
            span: 3243..3244,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -e\"",
        ),
        position: Position {
            line: 155,
            column: 15,
            span: 3244..3252,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 155,
            column: 16,
            span: 3252..3253,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        position: Position {
            line: 156,
            column: 6,
            span: 3254..3259,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 156,
            column: 7,
            span: 3259..3260,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -e a\"",
        ),
        position: Position {
            line: 156,
            column: 17,
            span: 3260..3270,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 156,
            column: 18,
            span: 3270..3271,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        position: Position {
            line: 157,
            column: 6,
            span: 3272..3277,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 157,
            column: 7,
            span: 3277..3278,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -f\"",
        ),
        position: Position {
            line: 157,
            column: 15,
            span: 3278..3286,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 157,
            column: 16,
            span: 3286..3287,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 159,
            column: 6,
            span: 3289..3294,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 159,
            column: 7,
            span: 3294..3295,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"OK\"",
        ),
        position: Position {
            line: 159,
            column: 11,
            span: 3295..3299,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 159,
            column: 12,
            span: 3299..3300,
        },
    },
]
