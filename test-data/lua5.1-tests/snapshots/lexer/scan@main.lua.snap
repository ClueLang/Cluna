---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.1-tests/main.lua
---
[
    Token {
        kind: Hash,
        lexeme: "#",
        line: 1,
    },
    Token {
        kind: Identifier,
        lexeme: "testing",
        line: 1,
    },
    Token {
        kind: Identifier,
        lexeme: "special",
        line: 1,
    },
    Token {
        kind: Identifier,
        lexeme: "comment",
        line: 1,
    },
    Token {
        kind: Identifier,
        lexeme: "on",
        line: 1,
    },
    Token {
        kind: Identifier,
        lexeme: "first",
        line: 1,
    },
    Token {
        kind: Identifier,
        lexeme: "line",
        line: 1,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 3,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 3,
    },
    Token {
        kind: String,
        lexeme: "\"testing lua.c options\"",
        line: 3,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 5,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 5,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "execute",
        line: 5,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 5,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 5,
    },
    Token {
        kind: NotEquals,
        lexeme: "~=",
        line: 5,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 5,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 7,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 7,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "tmpname",
        line: 7,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 7,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "otherprog",
        line: 8,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 8,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: "tmpname",
        line: 8,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 8,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 9,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 9,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "tmpname",
        line: 9,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 9,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 9,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 11,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 12,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 12,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 12,
    },
    Token {
        kind: While,
        lexeme: "while",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "arg",
        line: 13,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 13,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 13,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 13,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 13,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 13,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 13,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "progname",
        line: 14,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 14,
    },
    Token {
        kind: String,
        lexeme: "'\"'",
        line: 14,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "arg",
        line: 14,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 14,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 14,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 14,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 14,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 14,
    },
    Token {
        kind: String,
        lexeme: "'\"'",
        line: 14,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 16,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "progname",
        line: 16,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 16,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 18,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 18,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 18,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 18,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 18,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 19,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 19,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 20,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 20,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 20,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 21,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 21,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 21,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 22,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 22,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 22,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 22,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 22,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 22,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 23,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "checkout",
        line: 25,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 25,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 26,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 26,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 26,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 26,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 27,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 27,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 27,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 27,
    },
    Token {
        kind: String,
        lexeme: "\"*a\"",
        line: 27,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 28,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 28,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 28,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 28,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 28,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 28,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 29,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 29,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 29,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 29,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 29,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 29,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 30,
    },
    Token {
        kind: NotEquals,
        lexeme: "~=",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 30,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 30,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 30,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 30,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 30,
    },
    Token {
        kind: String,
        lexeme: "\"'%s' - '%s'\\n\"",
        line: 30,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 30,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 30,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 30,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 30,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 31,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 31,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 31,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 31,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 32,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 33,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "auxrun",
        line: 35,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 35,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 35,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 35,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 36,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 36,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 36,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 36,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 36,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 37,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 37,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 37,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 37,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 37,
    },
    Token {
        kind: String,
        lexeme: "\"lua\"",
        line: 37,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "progname",
        line: 37,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 37,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 37,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 37,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 38,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "execute",
        line: 38,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 38,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 38,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 39,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 41,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 41,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 41,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 42,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "auxrun",
        line: 42,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 42,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 42,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 42,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 42,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 42,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 42,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 43,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "NoRun",
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 45,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 46,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 46,
    },
    Token {
        kind: String,
        lexeme: "\"\\n(the next error is expected by the test)\"",
        line: 46,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 47,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "auxrun",
        line: 47,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 47,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 47,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 47,
    },
    Token {
        kind: NotEquals,
        lexeme: "~=",
        line: 47,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 47,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 47,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 51,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 51,
    },
    Token {
        kind: String,
        lexeme: "\"print(1); a=2\"",
        line: 51,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 52,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 52,
    },
    Token {
        kind: String,
        lexeme: "\"print(a)\"",
        line: 52,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "otherprog",
        line: 52,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 53,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 53,
    },
    Token {
        kind: String,
        lexeme: "\"lua -l %s -l%s -lstring -l io %s > %s\"",
        line: 53,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 53,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "otherprog",
        line: 53,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "otherprog",
        line: 53,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 53,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "checkout",
        line: 54,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 54,
    },
    Token {
        kind: String,
        lexeme: "\"1\\n2\\n2\\n\"",
        line: 54,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 54,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 56,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 56,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\n  assert(table.getn(arg) == 3 and arg[1] == 'a' and\n         arg[2] == 'b' and arg[3] == 'c')\n  assert(arg[-1] == '--' and arg[-2] == \"-e \" and arg[-3] == %s)\n  assert(arg[4] == nil and arg[-4] == nil)\n  local a, b, c = ...\n  assert(... == 'a' and a == 'a' and b == 'b' and c == 'c')\n]]",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 64,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 64,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 64,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 64,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "progname",
        line: 64,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 65,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 65,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 66,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 66,
    },
    Token {
        kind: String,
        lexeme: "'lua \"-e \" -- %s a b c'",
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 66,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 68,
    },
    Token {
        kind: String,
        lexeme: "\"assert(arg==nil)\"",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 69,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 69,
    },
    Token {
        kind: String,
        lexeme: "\"assert(arg)\"",
        line: 69,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "otherprog",
        line: 69,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 70,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 70,
    },
    Token {
        kind: String,
        lexeme: "\"lua -l%s - < %s\"",
        line: 70,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 70,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: "otherprog",
        line: 70,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 72,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 73,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 73,
    },
    Token {
        kind: String,
        lexeme: "\"lua - < %s > %s\"",
        line: 73,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 73,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 73,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "checkout",
        line: 74,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 74,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 74,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 77,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[print(({...})[30])]]",
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 78,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 78,
    },
    Token {
        kind: String,
        lexeme: "\"lua %s %s > %s\"",
        line: 78,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 78,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 78,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 78,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 78,
    },
    Token {
        kind: String,
        lexeme: "\" a\"",
        line: 78,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 78,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 78,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 78,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 78,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "checkout",
        line: 79,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 79,
    },
    Token {
        kind: String,
        lexeme: "\"a\\n\"",
        line: 79,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 81,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 81,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[lua \"-eprint(1)\" -ea=3 -e \"print(a)\" > %s]]",
        line: 81,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 81,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "checkout",
        line: 82,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 82,
    },
    Token {
        kind: String,
        lexeme: "\"1\\n3\\n\"",
        line: 82,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 84,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\n  print(\n1, a\n)\n]]",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 89,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 89,
    },
    Token {
        kind: String,
        lexeme: "\"lua - < %s > %s\"",
        line: 89,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 89,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 89,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: "checkout",
        line: 90,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 90,
    },
    Token {
        kind: String,
        lexeme: "\"1\\tnil\\n\"",
        line: 90,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 92,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\n= (6*2-6) -- ===\na \n= 10\nprint(a)\n= a]]",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 98,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 98,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s]]",
        line: 98,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 98,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 98,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "checkout",
        line: 99,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 99,
    },
    Token {
        kind: String,
        lexeme: "\"6\\n10\\n10\\n\\n\"",
        line: 99,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 101,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 101,
    },
    Token {
        kind: String,
        lexeme: "\"a = [[b\\nc\\nd\\ne]]\\n=a\"",
        line: 101,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 102,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 102,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 103,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 103,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s]]",
        line: 103,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 103,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 103,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: "checkout",
        line: 104,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 104,
    },
    Token {
        kind: String,
        lexeme: "\"b\\nc\\nd\\ne\\n\\n\"",
        line: 104,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: "prompt",
        line: 106,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 106,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 107,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[ --\na = 2\n]]",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 110,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 110,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[lua \"-e_PROMPT='%s'\" -i < %s > %s]]",
        line: 110,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "prompt",
        line: 110,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 110,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 110,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "checkout",
        line: 111,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 111,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 111,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "prompt",
        line: 111,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 111,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 111,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 111,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 111,
    },
    Token {
        kind: String,
        lexeme: "\"\\n\"",
        line: 111,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 113,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 113,
    },
    Token {
        kind: MultilineString,
        lexeme: "[=[ -- \nfunction f ( x ) \n  local a = [[\nxuxu\n]]\n  local b = \"\\\nxuxu\\n\"\n  if x == 11 then return 1 , 2 end  --[[ test multiple returns ]]\n  return x + 1 \n  --\\\\\nend\n=( f( 10 ) )\nassert( a == b )\n=f( 11 )  ]=]",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 127,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 127,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 127,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 127,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 127,
    },
    Token {
        kind: String,
        lexeme: "' '",
        line: 127,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 127,
    },
    Token {
        kind: String,
        lexeme: "'\\n\\n'",
        line: 127,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 128,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 128,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 129,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 129,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s]]",
        line: 129,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 129,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 129,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "checkout",
        line: 130,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 130,
    },
    Token {
        kind: String,
        lexeme: "\"11\\n1\\t2\\n\\n\"",
        line: 130,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 132,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[#comment in 1st line without \\n at the end]]",
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 133,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 133,
    },
    Token {
        kind: String,
        lexeme: "\"lua %s\"",
        line: 133,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 133,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 135,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 135,
    },
    Token {
        kind: String,
        lexeme: "\"#comment with a binary file\\n\"",
        line: 135,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 135,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "dump",
        line: 135,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 135,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 135,
    },
    Token {
        kind: String,
        lexeme: "\"print(1)\"",
        line: 135,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 135,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 135,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 136,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 136,
    },
    Token {
        kind: String,
        lexeme: "\"lua %s > %s\"",
        line: 136,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 136,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 136,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "checkout",
        line: 137,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 137,
    },
    Token {
        kind: String,
        lexeme: "\"1\\n\"",
        line: 137,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 139,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 139,
    },
    Token {
        kind: String,
        lexeme: "\"#comment with a binary file\\r\\n\"",
        line: 139,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 139,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "dump",
        line: 139,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 139,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 139,
    },
    Token {
        kind: String,
        lexeme: "\"print(1)\"",
        line: 139,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 139,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 139,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 140,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 140,
    },
    Token {
        kind: String,
        lexeme: "\"lua %s > %s\"",
        line: 140,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 140,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 140,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "checkout",
        line: 141,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 141,
    },
    Token {
        kind: String,
        lexeme: "\"1\\n\"",
        line: 141,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 144,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 144,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 144,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 144,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[io.output(%q); io.write('alo')]]",
        line: 144,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 144,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 144,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 145,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 145,
    },
    Token {
        kind: String,
        lexeme: "\"lua %s\"",
        line: 145,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 145,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "checkout",
        line: 146,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 146,
    },
    Token {
        kind: String,
        lexeme: "'alo'",
        line: 146,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 148,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 148,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 148,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 148,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 148,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 148,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 148,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 148,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 148,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 149,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 149,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 149,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: "otherprog",
        line: 149,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 149,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 150,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 150,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 150,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 150,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 150,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 150,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 152,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 152,
    },
    Token {
        kind: String,
        lexeme: "\"lua -v\"",
        line: 152,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 152,
    },
    Token {
        kind: Identifier,
        lexeme: "NoRun",
        line: 154,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 154,
    },
    Token {
        kind: String,
        lexeme: "\"lua -h\"",
        line: 154,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: "NoRun",
        line: 155,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 155,
    },
    Token {
        kind: String,
        lexeme: "\"lua -e\"",
        line: 155,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: "NoRun",
        line: 156,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 156,
    },
    Token {
        kind: String,
        lexeme: "\"lua -e a\"",
        line: 156,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "NoRun",
        line: 157,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 157,
    },
    Token {
        kind: String,
        lexeme: "\"lua -f\"",
        line: 157,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 159,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 159,
    },
    Token {
        kind: String,
        lexeme: "\"OK\"",
        line: 159,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 159,
    },
]
