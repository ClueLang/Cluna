---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.1-tests/closure.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 1,
        column: 5,
        span: 0..5,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing closures and coroutines\"",
        ),
        line: 1,
        column: 39,
        span: 6..39,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 3,
        column: 6,
        span: 41..46,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 3,
        column: 8,
        span: 47..48,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 3,
        column: 9,
        span: 48..49,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 3,
        column: 10,
        span: 49..50,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 3,
        column: 12,
        span: 51..52,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 3,
        column: 14,
        span: 52..54,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 3,
        column: 15,
        span: 54..55,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 3,
        column: 16,
        span: 55..56,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 3,
        column: 17,
        span: 56..57,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 3,
        column: 18,
        span: 57..58,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 3,
        column: 20,
        span: 57..60,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 3,
        column: 21,
        span: 60..61,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 4,
        column: 9,
        span: 62..70,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 4,
        column: 11,
        span: 71..72,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 4,
        column: 12,
        span: 72..73,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 4,
        column: 13,
        span: 73..74,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 4,
        column: 14,
        span: 74..75,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 5,
        column: 8,
        span: 78..83,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 5,
        column: 10,
        span: 84..85,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 5,
        column: 12,
        span: 86..87,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 5,
        column: 14,
        span: 88..89,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 5,
        column: 15,
        span: 89..90,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 6,
        column: 6,
        span: 93..96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 6,
        column: 8,
        span: 97..98,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 6,
        column: 9,
        span: 98..99,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 6,
        column: 10,
        span: 98..100,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 6,
        column: 11,
        span: 100..101,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 6,
        column: 15,
        span: 100..105,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 6,
        column: 0,
        span: 106..108,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 7,
        column: 10,
        span: 113..118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 7,
        column: 12,
        span: 119..120,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 7,
        column: 14,
        span: 121..122,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 7,
        column: 0,
        span: 122..124,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 8,
        column: 0,
        span: 129..131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 9,
        column: 8,
        span: 138..139,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 9,
        column: 9,
        span: 139..140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 9,
        column: 10,
        span: 140..141,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 9,
        column: 11,
        span: 141..142,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 9,
        column: 13,
        span: 143..144,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 9,
        column: 22,
        span: 145..153,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 9,
        column: 24,
        span: 154..155,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 9,
        column: 25,
        span: 155..156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 9,
        column: 27,
        span: 157..158,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 9,
        column: 28,
        span: 158..159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 9,
        column: 29,
        span: 159..160,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 9,
        column: 31,
        span: 161..162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 9,
        column: 33,
        span: 163..164,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 9,
        column: 34,
        span: 164..165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 9,
        column: 35,
        span: 165..166,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 9,
        column: 36,
        span: 166..167,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 9,
        column: 37,
        span: 166..168,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 9,
        column: 38,
        span: 168..169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 9,
        column: 40,
        span: 170..171,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 9,
        column: 42,
        span: 172..173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 9,
        column: 44,
        span: 174..175,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 9,
        column: 45,
        span: 175..176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 9,
        column: 46,
        span: 176..177,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 9,
        column: 47,
        span: 177..178,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 9,
        column: 54,
        span: 179..185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 9,
        column: 56,
        span: 186..187,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 9,
        column: 57,
        span: 187..188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 9,
        column: 58,
        span: 188..189,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 9,
        column: 0,
        span: 190..193,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 10,
        column: 0,
        span: 198..201,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 11,
        column: 0,
        span: 204..207,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 12,
        column: 8,
        span: 210..215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        line: 12,
        column: 14,
        span: 216..221,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 12,
        column: 16,
        span: 222..223,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 12,
        column: 25,
        span: 224..232,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 27,
        span: 233..234,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 28,
        span: 234..235,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 12,
        column: 35,
        span: 236..242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 12,
        column: 37,
        span: 243..244,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 12,
        column: 38,
        span: 244..245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 12,
        column: 39,
        span: 245..246,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 12,
        column: 40,
        span: 246..247,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 12,
        column: 0,
        span: 248..251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 13,
        column: 17,
        span: 254..268,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 13,
        column: 18,
        span: 268..269,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 13,
        column: 19,
        span: 269..270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 14,
        column: 4,
        span: 273..274,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 14,
        column: 6,
        span: 275..276,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 14,
        column: 8,
        span: 276..278,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 14,
        column: 9,
        span: 278..279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 14,
        column: 16,
        span: 280..286,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 14,
        column: 17,
        span: 286..287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        line: 14,
        column: 22,
        span: 287..292,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 14,
        column: 23,
        span: 292..293,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 14,
        column: 24,
        span: 293..294,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 14,
        column: 27,
        span: 295..297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 14,
        column: 29,
        span: 298..299,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 14,
        column: 30,
        span: 299..300,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 14,
        column: 31,
        span: 299..301,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 14,
        column: 32,
        span: 301..302,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 14,
        column: 33,
        span: 302..303,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 14,
        column: 34,
        span: 303..304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 14,
        column: 36,
        span: 305..306,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 14,
        column: 38,
        span: 307..308,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 14,
        column: 40,
        span: 308..310,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 14,
        column: 41,
        span: 310..311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 15,
        column: 9,
        span: 314..320,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
        column: 10,
        span: 320..321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 15,
        column: 11,
        span: 321..322,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 15,
        column: 12,
        span: 322..323,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 15,
        column: 13,
        span: 322..324,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 15,
        column: 14,
        span: 324..325,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
        column: 15,
        span: 325..326,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
        column: 16,
        span: 326..327,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 15,
        column: 19,
        span: 328..330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 15,
        column: 21,
        span: 331..332,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
        column: 22,
        span: 332..333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 16,
        column: 9,
        span: 336..342,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 10,
        span: 342..343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 16,
        column: 11,
        span: 343..344,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 16,
        column: 12,
        span: 344..345,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 16,
        column: 13,
        span: 344..346,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 16,
        column: 14,
        span: 346..347,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 15,
        span: 347..348,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 16,
        span: 348..349,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 16,
        column: 19,
        span: 350..352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 16,
        column: 21,
        span: 353..354,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 22,
        span: 354..355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 17,
        column: 17,
        span: 358..372,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 17,
        column: 18,
        span: 372..373,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 17,
        column: 19,
        span: 373..374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 18,
        column: 9,
        span: 377..383,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
        column: 10,
        span: 383..384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 18,
        column: 11,
        span: 384..385,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 18,
        column: 12,
        span: 385..386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 18,
        column: 13,
        span: 386..387,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 18,
        column: 16,
        span: 388..390,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 18,
        column: 19,
        span: 390..393,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
        column: 20,
        span: 393..394,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 19,
        column: 9,
        span: 397..403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 19,
        column: 0,
        span: 404..405,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 20,
        column: 0,
        span: 406..409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 22,
        column: 2,
        span: 411..412,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 22,
        column: 4,
        span: 413..414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 22,
        column: 6,
        span: 415..416,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 7,
        span: 416..417,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 22,
        column: 9,
        span: 416..419,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 10,
        span: 419..420,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 24,
        column: 6,
        span: 449..454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 24,
        column: 8,
        span: 455..456,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 24,
        column: 10,
        span: 457..458,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 24,
        column: 12,
        span: 459..460,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 24,
        column: 13,
        span: 460..461,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 24,
        column: 14,
        span: 460..462,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 24,
        column: 15,
        span: 462..463,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 24,
        column: 17,
        span: 464..465,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 24,
        column: 19,
        span: 466..467,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 24,
        column: 20,
        span: 467..468,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 24,
        column: 21,
        span: 468..469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 25,
        column: 13,
        span: 490..502,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 14,
        span: 502..503,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 25,
        column: 15,
        span: 503..504,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 16,
        span: 504..505,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 25,
        column: 18,
        span: 506..507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        line: 25,
        column: 24,
        span: 507..513,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 25,
        column: 26,
        span: 514..515,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'kv'",
        ),
        line: 25,
        column: 31,
        span: 516..520,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 25,
        column: 32,
        span: 520..521,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 33,
        span: 521..522,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 26,
        column: 6,
        span: 523..528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 26,
        column: 8,
        span: 529..530,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 26,
        column: 9,
        span: 530..531,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 26,
        column: 10,
        span: 530..532,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 26,
        column: 11,
        span: 532..533,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 26,
        column: 14,
        span: 534..536,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 27,
        column: 8,
        span: 560..565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 27,
        column: 10,
        span: 566..567,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 27,
        column: 12,
        span: 568..569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 27,
        column: 14,
        span: 570..571,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 27,
        column: 16,
        span: 571..573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 27,
        column: 17,
        span: 573..574,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 27,
        column: 19,
        span: 574..576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 27,
        column: 20,
        span: 576..577,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 27,
        column: 22,
        span: 577..579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 27,
        column: 23,
        span: 579..580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 28,
        column: 4,
        span: 602..603,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 28,
        column: 6,
        span: 604..605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 28,
        column: 8,
        span: 606..607,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 28,
        column: 9,
        span: 607..608,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 28,
        column: 0,
        span: 607..609,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 29,
        column: 0,
        span: 610..613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 30,
        column: 7,
        span: 614..620,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 8,
        span: 620..621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 30,
        column: 9,
        span: 621..622,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 30,
        column: 10,
        span: 622..623,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 30,
        column: 11,
        span: 622..624,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 30,
        column: 12,
        span: 624..625,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 13,
        span: 625..626,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 14,
        span: 626..627,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 30,
        column: 17,
        span: 628..630,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 30,
        column: 20,
        span: 630..633,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 30,
        column: 21,
        span: 633..634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 30,
        column: 22,
        span: 634..635,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 23,
        span: 635..636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 31,
        column: 7,
        span: 637..643,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 8,
        span: 643..644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 31,
        column: 9,
        span: 644..645,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 31,
        column: 10,
        span: 645..646,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 31,
        column: 11,
        span: 645..647,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 31,
        column: 12,
        span: 647..648,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 13,
        span: 648..649,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 14,
        span: 649..650,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 31,
        column: 17,
        span: 651..653,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 31,
        column: 20,
        span: 653..656,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 31,
        column: 21,
        span: 656..657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 31,
        column: 22,
        span: 657..658,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 23,
        span: 658..659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 32,
        column: 7,
        span: 660..666,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 8,
        span: 666..667,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 32,
        column: 9,
        span: 667..668,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 32,
        column: 10,
        span: 668..669,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 32,
        column: 11,
        span: 668..670,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 32,
        column: 12,
        span: 670..671,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 13,
        span: 671..672,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 14,
        span: 672..673,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 32,
        column: 17,
        span: 674..676,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 32,
        column: 20,
        span: 676..679,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 32,
        column: 21,
        span: 679..680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 32,
        column: 22,
        span: 680..681,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 23,
        span: 681..682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 33,
        column: 15,
        span: 683..697,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 16,
        span: 697..698,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 17,
        span: 698..699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 34,
        column: 7,
        span: 700..706,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 8,
        span: 706..707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 34,
        column: 9,
        span: 707..708,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 34,
        column: 10,
        span: 708..709,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 34,
        column: 11,
        span: 708..710,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 34,
        column: 12,
        span: 710..711,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 13,
        span: 711..712,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 14,
        span: 712..713,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 34,
        column: 17,
        span: 714..716,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 34,
        column: 20,
        span: 716..719,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 34,
        column: 21,
        span: 719..720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 34,
        column: 22,
        span: 720..721,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 23,
        span: 721..722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 35,
        column: 7,
        span: 723..729,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 8,
        span: 729..730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 35,
        column: 9,
        span: 730..731,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 35,
        column: 10,
        span: 731..732,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 35,
        column: 11,
        span: 731..733,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 35,
        column: 12,
        span: 733..734,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 13,
        span: 734..735,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 14,
        span: 735..736,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 35,
        column: 17,
        span: 737..739,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 35,
        column: 20,
        span: 739..742,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 35,
        column: 21,
        span: 742..743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 35,
        column: 22,
        span: 743..744,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 23,
        span: 744..745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 36,
        column: 7,
        span: 746..752,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 8,
        span: 752..753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 36,
        column: 9,
        span: 753..754,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 36,
        column: 10,
        span: 754..755,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 36,
        column: 11,
        span: 754..756,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 36,
        column: 12,
        span: 756..757,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 13,
        span: 757..758,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 14,
        span: 758..759,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 36,
        column: 17,
        span: 760..762,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 36,
        column: 20,
        span: 762..765,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 36,
        column: 21,
        span: 765..766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 36,
        column: 22,
        span: 766..767,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 23,
        span: 767..768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 37,
        column: 7,
        span: 769..775,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 8,
        span: 775..776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 37,
        column: 9,
        span: 776..777,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 37,
        column: 10,
        span: 777..778,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 37,
        column: 11,
        span: 777..779,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 37,
        column: 12,
        span: 779..780,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 13,
        span: 780..781,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 14,
        span: 781..782,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 37,
        column: 17,
        span: 783..785,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 37,
        column: 20,
        span: 785..788,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 37,
        column: 21,
        span: 788..789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 37,
        column: 22,
        span: 789..790,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 23,
        span: 790..791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 38,
        column: 7,
        span: 792..798,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 8,
        span: 798..799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 38,
        column: 20,
        span: 799..811,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 21,
        span: 811..812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 38,
        column: 22,
        span: 812..813,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 23,
        span: 813..814,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 38,
        column: 24,
        span: 814..815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        line: 38,
        column: 30,
        span: 815..821,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 38,
        column: 33,
        span: 822..824,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'kv'",
        ),
        line: 38,
        column: 38,
        span: 825..829,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 39,
        span: 829..830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 39,
        column: 7,
        span: 831..837,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 8,
        span: 837..838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 39,
        column: 9,
        span: 838..839,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 39,
        column: 10,
        span: 839..840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 39,
        column: 11,
        span: 840..841,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 39,
        column: 14,
        span: 842..844,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "19",
                    after_decimal: "",
                },
            ),
        ),
        line: 39,
        column: 17,
        span: 844..847,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 18,
        span: 847..848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 42,
        column: 2,
        span: 898..899,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 42,
        column: 4,
        span: 900..901,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 42,
        column: 6,
        span: 902..903,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 42,
        column: 7,
        span: 903..904,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 43,
        column: 4,
        span: 905..908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 43,
        column: 6,
        span: 909..910,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 43,
        column: 7,
        span: 910..911,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 43,
        column: 8,
        span: 910..912,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 43,
        column: 9,
        span: 912..913,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 43,
        column: 11,
        span: 912..915,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 43,
        column: 0,
        span: 916..918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 44,
        column: 4,
        span: 921..922,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 44,
        column: 5,
        span: 922..923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 44,
        column: 6,
        span: 923..924,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 44,
        column: 7,
        span: 924..925,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 44,
        column: 9,
        span: 926..927,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 44,
        column: 11,
        span: 928..929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "set",
        ),
        line: 44,
        column: 14,
        span: 929..932,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 44,
        column: 16,
        span: 933..934,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 44,
        column: 25,
        span: 935..943,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 26,
        span: 943..944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 44,
        column: 27,
        span: 944..945,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 28,
        span: 945..946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 44,
        column: 30,
        span: 947..948,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 44,
        column: 31,
        span: 948..949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 44,
        column: 32,
        span: 949..950,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 44,
        column: 36,
        span: 951..954,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 44,
        column: 37,
        span: 954..955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "get",
        ),
        line: 44,
        column: 41,
        span: 956..959,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 44,
        column: 43,
        span: 960..961,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 44,
        column: 52,
        span: 962..970,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 54,
        span: 971..972,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 55,
        span: 972..973,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 44,
        column: 62,
        span: 974..980,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 44,
        column: 64,
        span: 981..982,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 44,
        column: 68,
        span: 983..986,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 44,
        column: 69,
        span: 986..987,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 45,
        column: 5,
        span: 990..992,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 45,
        column: 7,
        span: 993..994,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 45,
        column: 10,
        span: 995..997,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 45,
        column: 12,
        span: 997..999,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 45,
        column: 17,
        span: 1000..1004,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 45,
        column: 23,
        span: 1005..1010,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 45,
        column: 0,
        span: 1011..1014,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 46,
        column: 0,
        span: 1015..1018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 47,
        column: 7,
        span: 1019..1025,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 8,
        span: 1025..1026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 47,
        column: 9,
        span: 1026..1027,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 47,
        column: 10,
        span: 1027..1028,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 47,
        column: 11,
        span: 1027..1029,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 47,
        column: 12,
        span: 1029..1030,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 47,
        column: 15,
        span: 1031..1033,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 47,
        column: 19,
        span: 1034..1037,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 20,
        span: 1037..1038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 48,
        column: 2,
        span: 1039..1040,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 48,
        column: 3,
        span: 1040..1041,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 48,
        column: 4,
        span: 1040..1042,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 48,
        column: 5,
        span: 1042..1043,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 48,
        column: 6,
        span: 1043..1044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "set",
        ),
        line: 48,
        column: 9,
        span: 1044..1047,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
        column: 10,
        span: 1047..1048,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 48,
        column: 12,
        span: 1047..1050,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
        column: 13,
        span: 1050..1051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 49,
        column: 7,
        span: 1052..1058,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
        column: 8,
        span: 1058..1059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 49,
        column: 9,
        span: 1059..1060,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 49,
        column: 10,
        span: 1060..1061,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
        column: 11,
        span: 1060..1062,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 49,
        column: 12,
        span: 1062..1063,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 49,
        column: 13,
        span: 1063..1064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "get",
        ),
        line: 49,
        column: 16,
        span: 1064..1067,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
        column: 17,
        span: 1067..1068,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 49,
        column: 18,
        span: 1068..1069,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 49,
        column: 21,
        span: 1070..1072,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
        column: 23,
        span: 1072..1074,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 49,
        column: 24,
        span: 1074..1075,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 50,
        column: 2,
        span: 1076..1077,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 50,
        column: 3,
        span: 1077..1078,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
        column: 4,
        span: 1077..1079,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 50,
        column: 5,
        span: 1079..1080,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 50,
        column: 6,
        span: 1080..1081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "set",
        ),
        line: 50,
        column: 9,
        span: 1081..1084,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 50,
        column: 10,
        span: 1084..1085,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 50,
        column: 13,
        span: 1085..1088,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 50,
        column: 14,
        span: 1088..1089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 51,
        column: 7,
        span: 1090..1096,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 51,
        column: 8,
        span: 1096..1097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 51,
        column: 9,
        span: 1097..1098,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 51,
        column: 10,
        span: 1098..1099,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 51,
        column: 11,
        span: 1098..1100,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 51,
        column: 12,
        span: 1100..1101,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 51,
        column: 13,
        span: 1101..1102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "get",
        ),
        line: 51,
        column: 16,
        span: 1102..1105,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 51,
        column: 17,
        span: 1105..1106,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
        column: 18,
        span: 1106..1107,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 51,
        column: 21,
        span: 1108..1110,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 51,
        column: 23,
        span: 1110..1112,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
        column: 24,
        span: 1112..1113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 52,
        column: 7,
        span: 1114..1120,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
        column: 8,
        span: 1120..1121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 52,
        column: 9,
        span: 1121..1122,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 52,
        column: 10,
        span: 1122..1123,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 52,
        column: 11,
        span: 1122..1124,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 52,
        column: 12,
        span: 1124..1125,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 52,
        column: 13,
        span: 1125..1126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "get",
        ),
        line: 52,
        column: 16,
        span: 1126..1129,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
        column: 17,
        span: 1129..1130,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 18,
        span: 1130..1131,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 52,
        column: 21,
        span: 1132..1134,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 52,
        column: 25,
        span: 1135..1138,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 26,
        span: 1138..1139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 54,
        column: 2,
        span: 1141..1142,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 54,
        column: 4,
        span: 1143..1144,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 54,
        column: 6,
        span: 1145..1146,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 54,
        column: 7,
        span: 1146..1147,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 55,
        column: 4,
        span: 1148..1151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 55,
        column: 6,
        span: 1152..1153,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 55,
        column: 7,
        span: 1153..1154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 55,
        column: 9,
        span: 1155..1156,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 55,
        column: 12,
        span: 1157..1159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 55,
        column: 18,
        span: 1160..1165,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 55,
        column: 19,
        span: 1165..1166,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 55,
        column: 22,
        span: 1166..1169,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 55,
        column: 23,
        span: 1169..1170,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 55,
        column: 27,
        span: 1171..1174,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 55,
        column: 28,
        span: 1174..1175,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 55,
        column: 0,
        span: 1176..1178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 56,
        column: 4,
        span: 1181..1182,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 56,
        column: 5,
        span: 1182..1183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 56,
        column: 6,
        span: 1183..1184,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 56,
        column: 7,
        span: 1184..1185,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 56,
        column: 9,
        span: 1186..1187,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 56,
        column: 11,
        span: 1188..1189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "set",
        ),
        line: 56,
        column: 14,
        span: 1189..1192,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 56,
        column: 16,
        span: 1193..1194,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 56,
        column: 25,
        span: 1195..1203,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 26,
        span: 1203..1204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 56,
        column: 27,
        span: 1204..1205,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 28,
        span: 1205..1206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 56,
        column: 30,
        span: 1207..1208,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 31,
        span: 1208..1209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 56,
        column: 33,
        span: 1210..1211,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 56,
        column: 34,
        span: 1211..1212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 56,
        column: 35,
        span: 1212..1213,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 56,
        column: 36,
        span: 1213..1214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 56,
        column: 38,
        span: 1215..1216,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 56,
        column: 39,
        span: 1216..1217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 56,
        column: 40,
        span: 1217..1218,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 56,
        column: 44,
        span: 1219..1222,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 45,
        span: 1222..1223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "get",
        ),
        line: 57,
        column: 14,
        span: 1234..1237,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 57,
        column: 16,
        span: 1238..1239,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 57,
        column: 25,
        span: 1240..1248,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
        column: 27,
        span: 1249..1250,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
        column: 28,
        span: 1250..1251,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 57,
        column: 35,
        span: 1252..1258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 57,
        column: 37,
        span: 1259..1260,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 57,
        column: 38,
        span: 1260..1261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 57,
        column: 40,
        span: 1262..1263,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 57,
        column: 44,
        span: 1264..1267,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 57,
        column: 45,
        span: 1267..1268,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 58,
        column: 5,
        span: 1271..1273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 58,
        column: 7,
        span: 1274..1275,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 58,
        column: 10,
        span: 1276..1278,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 58,
        column: 12,
        span: 1278..1280,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 58,
        column: 17,
        span: 1281..1285,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 58,
        column: 23,
        span: 1286..1291,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 58,
        column: 0,
        span: 1292..1295,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 59,
        column: 0,
        span: 1296..1299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 60,
        column: 2,
        span: 1300..1301,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 60,
        column: 3,
        span: 1301..1302,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 60,
        column: 4,
        span: 1301..1303,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 60,
        column: 5,
        span: 1303..1304,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 60,
        column: 6,
        span: 1304..1305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "set",
        ),
        line: 60,
        column: 9,
        span: 1305..1308,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 10,
        span: 1308..1309,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 60,
        column: 12,
        span: 1308..1311,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 60,
        column: 13,
        span: 1311..1312,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 60,
        column: 16,
        span: 1312..1315,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 17,
        span: 1315..1316,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 61,
        column: 6,
        span: 1317..1322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 61,
        column: 8,
        span: 1323..1324,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 9,
        span: 1324..1325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 61,
        column: 10,
        span: 1325..1326,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 61,
        column: 12,
        span: 1327..1328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 61,
        column: 14,
        span: 1329..1330,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 61,
        column: 15,
        span: 1330..1331,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 61,
        column: 16,
        span: 1330..1332,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 61,
        column: 17,
        span: 1332..1333,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 61,
        column: 18,
        span: 1333..1334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "get",
        ),
        line: 61,
        column: 21,
        span: 1334..1337,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 22,
        span: 1337..1338,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 23,
        span: 1338..1339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 62,
        column: 7,
        span: 1340..1346,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 8,
        span: 1346..1347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 62,
        column: 9,
        span: 1347..1348,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 62,
        column: 12,
        span: 1349..1351,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 62,
        column: 14,
        span: 1351..1353,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 62,
        column: 18,
        span: 1354..1357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 62,
        column: 20,
        span: 1358..1359,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 62,
        column: 23,
        span: 1360..1362,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 62,
        column: 27,
        span: 1363..1366,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 28,
        span: 1366..1367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 63,
        column: 2,
        span: 1368..1369,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 63,
        column: 3,
        span: 1369..1370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 63,
        column: 4,
        span: 1370..1371,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 63,
        column: 6,
        span: 1372..1373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 63,
        column: 8,
        span: 1374..1375,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 63,
        column: 9,
        span: 1375..1376,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 63,
        column: 10,
        span: 1375..1377,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 63,
        column: 11,
        span: 1377..1378,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 63,
        column: 12,
        span: 1378..1379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "get",
        ),
        line: 63,
        column: 15,
        span: 1379..1382,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 16,
        span: 1382..1383,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 17,
        span: 1383..1384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 64,
        column: 7,
        span: 1385..1391,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 8,
        span: 1391..1392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 64,
        column: 9,
        span: 1392..1393,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 64,
        column: 12,
        span: 1394..1396,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 64,
        column: 15,
        span: 1396..1399,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 64,
        column: 19,
        span: 1400..1403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 64,
        column: 21,
        span: 1404..1405,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 64,
        column: 24,
        span: 1406..1408,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 64,
        column: 27,
        span: 1408..1411,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 28,
        span: 1411..1412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 65,
        column: 2,
        span: 1413..1414,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 65,
        column: 3,
        span: 1414..1415,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 65,
        column: 4,
        span: 1414..1416,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 65,
        column: 5,
        span: 1416..1417,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 65,
        column: 6,
        span: 1417..1418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "set",
        ),
        line: 65,
        column: 9,
        span: 1418..1421,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 10,
        span: 1421..1422,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 65,
        column: 13,
        span: 1422..1425,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 65,
        column: 14,
        span: 1425..1426,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 65,
        column: 18,
        span: 1427..1430,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 19,
        span: 1430..1431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 66,
        column: 2,
        span: 1432..1433,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 3,
        span: 1433..1434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 66,
        column: 4,
        span: 1434..1435,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 66,
        column: 6,
        span: 1436..1437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 66,
        column: 8,
        span: 1438..1439,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 66,
        column: 9,
        span: 1439..1440,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 66,
        column: 10,
        span: 1439..1441,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 66,
        column: 11,
        span: 1441..1442,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 66,
        column: 12,
        span: 1442..1443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "get",
        ),
        line: 66,
        column: 15,
        span: 1443..1446,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 16,
        span: 1446..1447,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 17,
        span: 1447..1448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 67,
        column: 7,
        span: 1449..1455,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 8,
        span: 1455..1456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 67,
        column: 9,
        span: 1456..1457,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 67,
        column: 12,
        span: 1458..1460,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 67,
        column: 16,
        span: 1461..1464,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 67,
        column: 20,
        span: 1465..1468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 67,
        column: 22,
        span: 1469..1470,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 67,
        column: 25,
        span: 1471..1473,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 67,
        column: 29,
        span: 1474..1477,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 30,
        span: 1477..1478,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 71,
        column: 4,
        span: 1537..1540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 71,
        column: 6,
        span: 1541..1542,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 71,
        column: 7,
        span: 1542..1543,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 8,
        span: 1542..1544,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 9,
        span: 1544..1545,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 10,
        span: 1544..1546,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 71,
        column: 0,
        span: 1547..1549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 72,
        column: 4,
        span: 1552..1553,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 72,
        column: 6,
        span: 1554..1555,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 72,
        column: 15,
        span: 1556..1564,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 17,
        span: 1565..1566,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 18,
        span: 1566..1567,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 72,
        column: 25,
        span: 1568..1574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 72,
        column: 27,
        span: 1575..1576,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 72,
        column: 0,
        span: 1577..1580,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 73,
        column: 0,
        span: 1583..1588,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 74,
        column: 0,
        span: 1589..1592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 75,
        column: 7,
        span: 1593..1599,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
        column: 8,
        span: 1599..1600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 75,
        column: 9,
        span: 1600..1601,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
        column: 10,
        span: 1601..1602,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
        column: 11,
        span: 1602..1603,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 75,
        column: 14,
        span: 1604..1606,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 75,
        column: 16,
        span: 1606..1608,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
        column: 17,
        span: 1608..1609,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 77,
        column: 4,
        span: 1611..1614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 77,
        column: 6,
        span: 1615..1616,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 77,
        column: 7,
        span: 1616..1617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 77,
        column: 9,
        span: 1618..1619,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 77,
        column: 12,
        span: 1620..1622,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 77,
        column: 18,
        span: 1623..1628,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 77,
        column: 19,
        span: 1628..1629,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 77,
        column: 22,
        span: 1629..1632,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 77,
        column: 23,
        span: 1632..1633,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 77,
        column: 27,
        span: 1634..1637,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 77,
        column: 28,
        span: 1637..1638,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 77,
        column: 0,
        span: 1639..1641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 78,
        column: 4,
        span: 1644..1645,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 78,
        column: 6,
        span: 1646..1647,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 78,
        column: 15,
        span: 1648..1656,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 17,
        span: 1657..1658,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
        column: 18,
        span: 1658..1659,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 78,
        column: 25,
        span: 1660..1666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 78,
        column: 27,
        span: 1667..1668,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 28,
        span: 1668..1669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 78,
        column: 30,
        span: 1670..1671,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 78,
        column: 0,
        span: 1672..1675,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 79,
        column: 0,
        span: 1678..1683,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 80,
        column: 0,
        span: 1684..1687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 81,
        column: 7,
        span: 1688..1694,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
        column: 8,
        span: 1694..1695,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
        column: 9,
        span: 1695..1696,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 81,
        column: 10,
        span: 1696..1697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 81,
        column: 11,
        span: 1697..1698,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
        column: 12,
        span: 1698..1699,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 13,
        span: 1699..1700,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 81,
        column: 14,
        span: 1700..1701,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 15,
        span: 1701..1702,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 81,
        column: 16,
        span: 1702..1703,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 81,
        column: 17,
        span: 1702..1704,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 81,
        column: 18,
        span: 1704..1705,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 81,
        column: 21,
        span: 1706..1708,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 81,
        column: 23,
        span: 1708..1710,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 24,
        span: 1710..1711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 82,
        column: 7,
        span: 1712..1718,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 8,
        span: 1718..1719,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 9,
        span: 1719..1720,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 82,
        column: 10,
        span: 1720..1721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 82,
        column: 11,
        span: 1721..1722,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 12,
        span: 1722..1723,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 13,
        span: 1723..1724,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 82,
        column: 14,
        span: 1724..1725,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 15,
        span: 1725..1726,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 82,
        column: 16,
        span: 1726..1727,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 82,
        column: 17,
        span: 1726..1728,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 82,
        column: 18,
        span: 1728..1729,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 82,
        column: 21,
        span: 1730..1732,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 82,
        column: 25,
        span: 1733..1736,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 26,
        span: 1736..1737,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 87,
        column: 6,
        span: 1786..1791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 87,
        column: 0,
        span: 1792..1793,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 88,
        column: 9,
        span: 1794..1802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 88,
        column: 11,
        span: 1803..1804,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 12,
        span: 1804..1805,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 88,
        column: 13,
        span: 1805..1806,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 14,
        span: 1806..1807,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 89,
        column: 8,
        span: 1810..1815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "first",
        ),
        line: 89,
        column: 14,
        span: 1816..1821,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 89,
        column: 16,
        span: 1822..1823,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 89,
        column: 0,
        span: 1823..1825,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 90,
        column: 8,
        span: 1828..1833,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 90,
        column: 10,
        span: 1833..1835,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 90,
        column: 0,
        span: 1836..1838,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 91,
        column: 7,
        span: 1843..1845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 91,
        column: 9,
        span: 1846..1847,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 91,
        column: 12,
        span: 1848..1850,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 91,
        column: 14,
        span: 1850..1852,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 91,
        column: 18,
        span: 1853..1856,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 91,
        column: 22,
        span: 1857..1860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "first",
        ),
        line: 91,
        column: 28,
        span: 1861..1866,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 91,
        column: 33,
        span: 1867..1871,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 91,
        column: 40,
        span: 1872..1878,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 91,
        column: 0,
        span: 1879..1882,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 92,
        column: 10,
        span: 1887..1892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 92,
        column: 12,
        span: 1893..1894,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 92,
        column: 14,
        span: 1895..1896,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu'",
        ),
        line: 92,
        column: 21,
        span: 1897..1903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 93,
        column: 6,
        span: 1908..1909,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 93,
        column: 8,
        span: 1910..1911,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 93,
        column: 17,
        span: 1912..1920,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
        column: 19,
        span: 1921..1922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        line: 93,
        column: 21,
        span: 1922..1924,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 93,
        column: 22,
        span: 1924..1925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 93,
        column: 24,
        span: 1926..1927,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
        column: 25,
        span: 1927..1928,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 94,
        column: 13,
        span: 1939..1941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        line: 94,
        column: 16,
        span: 1942..1944,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 94,
        column: 19,
        span: 1945..1947,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'set'",
        ),
        line: 94,
        column: 25,
        span: 1948..1953,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 94,
        column: 0,
        span: 1954..1958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 95,
        column: 14,
        span: 1971..1972,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 95,
        column: 16,
        span: 1973..1974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 95,
        column: 18,
        span: 1975..1976,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 95,
        column: 19,
        span: 1976..1977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 95,
        column: 0,
        span: 1977..1978,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 96,
        column: 0,
        span: 1989..1993,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 97,
        column: 19,
        span: 2006..2012,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 97,
        column: 0,
        span: 2013..2014,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 98,
        column: 0,
        span: 2025..2028,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 99,
        column: 0,
        span: 2037..2040,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 100,
        column: 7,
        span: 2045..2047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 100,
        column: 9,
        span: 2048..2049,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 100,
        column: 12,
        span: 2050..2052,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 100,
        column: 14,
        span: 2052..2054,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 100,
        column: 19,
        span: 2055..2059,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 100,
        column: 22,
        span: 2060..2062,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 100,
        column: 28,
        span: 2063..2068,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 100,
        column: 0,
        span: 2069..2072,
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        line: 101,
        column: 11,
        span: 2077..2083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 101,
        column: 13,
        span: 2084..2085,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 101,
        column: 16,
        span: 2086..2088,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
        column: 18,
        span: 2088..2090,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 101,
        column: 23,
        span: 2091..2095,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 101,
        column: 0,
        span: 2096..2102,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 102,
        column: 9,
        span: 2107..2111,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 102,
        column: 12,
        span: 2112..2114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 102,
        column: 14,
        span: 2115..2116,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 102,
        column: 17,
        span: 2117..2119,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 102,
        column: 19,
        span: 2119..2121,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 102,
        column: 24,
        span: 2122..2126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 102,
        column: 30,
        span: 2127..2132,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
        column: 31,
        span: 2132..2133,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
        column: 32,
        span: 2133..2134,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 102,
        column: 0,
        span: 2135..2138,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 103,
        column: 0,
        span: 2143..2146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "first",
        ),
        line: 104,
        column: 10,
        span: 2151..2156,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 104,
        column: 12,
        span: 2157..2158,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 104,
        column: 0,
        span: 2159..2162,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 105,
        column: 0,
        span: 2165..2168,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 106,
        column: 0,
        span: 2169..2172,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 108,
        column: 4,
        span: 2174..2177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 108,
        column: 6,
        span: 2178..2179,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 108,
        column: 7,
        span: 2179..2180,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 108,
        column: 8,
        span: 2179..2181,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 108,
        column: 9,
        span: 2181..2182,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 108,
        column: 10,
        span: 2181..2183,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 108,
        column: 0,
        span: 2184..2186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 109,
        column: 4,
        span: 2189..2190,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 5,
        span: 2190..2191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 109,
        column: 6,
        span: 2191..2192,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 7,
        span: 2192..2193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 110,
        column: 9,
        span: 2196..2202,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
        column: 10,
        span: 2202..2203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 110,
        column: 11,
        span: 2203..2204,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
        column: 12,
        span: 2204..2205,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'get'",
        ),
        line: 110,
        column: 17,
        span: 2205..2210,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
        column: 18,
        span: 2210..2211,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 110,
        column: 21,
        span: 2212..2214,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu'",
        ),
        line: 110,
        column: 28,
        span: 2215..2221,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
        column: 29,
        span: 2221..2222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 111,
        column: 4,
        span: 2225..2226,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 5,
        span: 2226..2227,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'set'",
        ),
        line: 111,
        column: 10,
        span: 2227..2232,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 11,
        span: 2232..2233,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 111,
        column: 14,
        span: 2233..2236,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 15,
        span: 2236..2237,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 111,
        column: 16,
        span: 2237..2238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 111,
        column: 23,
        span: 2239..2245,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 24,
        span: 2245..2246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 111,
        column: 25,
        span: 2246..2247,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 26,
        span: 2247..2248,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'get'",
        ),
        line: 111,
        column: 31,
        span: 2248..2253,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 32,
        span: 2253..2254,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 111,
        column: 35,
        span: 2255..2257,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 111,
        column: 38,
        span: 2257..2260,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 111,
        column: 39,
        span: 2260..2261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 111,
        column: 40,
        span: 2261..2262,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 41,
        span: 2262..2263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 112,
        column: 4,
        span: 2266..2267,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 112,
        column: 6,
        span: 2268..2269,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 112,
        column: 0,
        span: 2270..2273,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 113,
        column: 0,
        span: 2274..2277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 115,
        column: 6,
        span: 2279..2284,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
        column: 7,
        span: 2284..2285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 115,
        column: 8,
        span: 2285..2286,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 115,
        column: 9,
        span: 2286..2287,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 115,
        column: 11,
        span: 2287..2289,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
        column: 12,
        span: 2289..2290,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 115,
        column: 13,
        span: 2290..2291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 116,
        column: 7,
        span: 2292..2298,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
        column: 8,
        span: 2298..2299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 116,
        column: 9,
        span: 2299..2300,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
        column: 10,
        span: 2300..2301,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'get'",
        ),
        line: 116,
        column: 15,
        span: 2301..2306,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
        column: 16,
        span: 2306..2307,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 116,
        column: 19,
        span: 2308..2310,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu'",
        ),
        line: 116,
        column: 26,
        span: 2311..2317,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
        column: 27,
        span: 2317..2318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 117,
        column: 2,
        span: 2319..2320,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 3,
        span: 2320..2321,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'set'",
        ),
        line: 117,
        column: 8,
        span: 2321..2326,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 9,
        span: 2326..2327,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 117,
        column: 12,
        span: 2327..2330,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 13,
        span: 2330..2331,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 117,
        column: 14,
        span: 2331..2332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 117,
        column: 21,
        span: 2333..2339,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 22,
        span: 2339..2340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 117,
        column: 23,
        span: 2340..2341,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 24,
        span: 2341..2342,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'get'",
        ),
        line: 117,
        column: 29,
        span: 2342..2347,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 30,
        span: 2347..2348,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 117,
        column: 33,
        span: 2349..2351,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        line: 117,
        column: 36,
        span: 2351..2354,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 37,
        span: 2354..2355,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 120,
        column: 6,
        span: 2358..2363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 120,
        column: 0,
        span: 2364..2365,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 122,
        column: 9,
        span: 2397..2405,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 122,
        column: 11,
        span: 2406..2407,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 12,
        span: 2407..2408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 122,
        column: 13,
        span: 2408..2409,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 14,
        span: 2409..2410,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 123,
        column: 9,
        span: 2413..2419,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 123,
        column: 18,
        span: 2420..2428,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
        column: 20,
        span: 2429..2430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 123,
        column: 21,
        span: 2430..2431,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
        column: 22,
        span: 2431..2432,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 124,
        column: 11,
        span: 2437..2443,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 124,
        column: 20,
        span: 2444..2452,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
        column: 22,
        span: 2453..2454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 124,
        column: 23,
        span: 2454..2455,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
        column: 24,
        span: 2455..2456,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 124,
        column: 31,
        span: 2457..2463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 124,
        column: 33,
        span: 2464..2465,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 124,
        column: 34,
        span: 2465..2466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 124,
        column: 35,
        span: 2466..2467,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 124,
        column: 36,
        span: 2467..2468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 124,
        column: 37,
        span: 2468..2469,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 124,
        column: 38,
        span: 2469..2470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 124,
        column: 39,
        span: 2470..2471,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 124,
        column: 0,
        span: 2472..2475,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 125,
        column: 0,
        span: 2478..2481,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 126,
        column: 0,
        span: 2482..2485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 128,
        column: 2,
        span: 2487..2488,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 128,
        column: 4,
        span: 2489..2490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 128,
        column: 6,
        span: 2491..2492,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 128,
        column: 7,
        span: 2492..2493,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 128,
        column: 9,
        span: 2492..2495,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 128,
        column: 10,
        span: 2495..2496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 129,
        column: 2,
        span: 2497..2498,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 129,
        column: 4,
        span: 2499..2500,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".345",
                },
            ),
        ),
        line: 129,
        column: 0,
        span: 2500..2506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 130,
        column: 7,
        span: 2507..2513,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
        column: 8,
        span: 2513..2514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 130,
        column: 9,
        span: 2514..2515,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
        column: 10,
        span: 2515..2516,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
        column: 12,
        span: 2515..2518,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
        column: 13,
        span: 2518..2519,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
        column: 14,
        span: 2519..2520,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
        column: 16,
        span: 2519..2522,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
        column: 17,
        span: 2522..2523,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 130,
        column: 20,
        span: 2524..2526,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
        column: 23,
        span: 2526..2529,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 130,
        column: 24,
        span: 2529..2530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 130,
        column: 25,
        span: 2530..2531,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
        column: 26,
        span: 2531..2532,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 134,
        column: 6,
        span: 2570..2575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 134,
        column: 8,
        span: 2576..2577,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 134,
        column: 10,
        span: 2578..2579,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 134,
        column: 12,
        span: 2580..2581,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 134,
        column: 13,
        span: 2581..2582,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 135,
        column: 6,
        span: 2583..2588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 135,
        column: 8,
        span: 2589..2590,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 135,
        column: 10,
        span: 2591..2592,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 135,
        column: 0,
        span: 2592..2594,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 136,
        column: 0,
        span: 2595..2601,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 137,
        column: 8,
        span: 2604..2609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 137,
        column: 10,
        span: 2610..2611,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 137,
        column: 12,
        span: 2612..2613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 137,
        column: 0,
        span: 2614..2615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 138,
        column: 4,
        span: 2618..2619,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 138,
        column: 5,
        span: 2619..2620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 138,
        column: 6,
        span: 2620..2621,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 138,
        column: 7,
        span: 2621..2622,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 138,
        column: 9,
        span: 2623..2624,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 138,
        column: 18,
        span: 2625..2633,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 20,
        span: 2634..2635,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 21,
        span: 2635..2636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 138,
        column: 23,
        span: 2637..2638,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 138,
        column: 25,
        span: 2639..2640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 138,
        column: 27,
        span: 2641..2642,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 138,
        column: 28,
        span: 2642..2643,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
        column: 29,
        span: 2642..2644,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 138,
        column: 30,
        span: 2644..2645,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 138,
        column: 37,
        span: 2646..2652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 138,
        column: 39,
        span: 2653..2654,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 138,
        column: 0,
        span: 2655..2658,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 139,
        column: 6,
        span: 2659..2664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 139,
        column: 8,
        span: 2665..2666,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 139,
        column: 10,
        span: 2667..2668,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 139,
        column: 13,
        span: 2668..2671,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 139,
        column: 16,
        span: 2672..2674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 139,
        column: 18,
        span: 2675..2676,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 139,
        column: 19,
        span: 2676..2677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 139,
        column: 20,
        span: 2677..2678,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 139,
        column: 21,
        span: 2678..2679,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
        column: 22,
        span: 2679..2680,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 23,
        span: 2680..2681,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 139,
        column: 26,
        span: 2682..2684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 139,
        column: 0,
        span: 2685..2686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 140,
        column: 7,
        span: 2687..2693,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 8,
        span: 2693..2694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 140,
        column: 9,
        span: 2694..2695,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 140,
        column: 12,
        span: 2696..2698,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 140,
        column: 15,
        span: 2698..2701,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 140,
        column: 19,
        span: 2702..2705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 140,
        column: 21,
        span: 2706..2707,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 140,
        column: 22,
        span: 2707..2708,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 140,
        column: 23,
        span: 2707..2709,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 140,
        column: 24,
        span: 2709..2710,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 25,
        span: 2710..2711,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 26,
        span: 2711..2712,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 140,
        column: 29,
        span: 2713..2715,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 140,
        column: 31,
        span: 2715..2717,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 140,
        column: 35,
        span: 2718..2721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 140,
        column: 37,
        span: 2722..2723,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 140,
        column: 38,
        span: 2723..2724,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 140,
        column: 39,
        span: 2723..2725,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 140,
        column: 40,
        span: 2725..2726,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 41,
        span: 2726..2727,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 42,
        span: 2727..2728,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 140,
        column: 45,
        span: 2729..2731,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 140,
        column: 47,
        span: 2731..2733,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 140,
        column: 51,
        span: 2734..2737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 140,
        column: 53,
        span: 2738..2739,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 140,
        column: 56,
        span: 2740..2742,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 140,
        column: 58,
        span: 2742..2744,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 59,
        span: 2744..2745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 142,
        column: 6,
        span: 2747..2752,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 142,
        column: 9,
        span: 2752..2755,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 146,
        column: 6,
        span: 2831..2836,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 146,
        column: 15,
        span: 2837..2845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 146,
        column: 17,
        span: 2846..2847,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 19,
        span: 2848..2849,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 20,
        span: 2849..2850,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 147,
        column: 8,
        span: 2853..2858,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 147,
        column: 17,
        span: 2859..2867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 147,
        column: 19,
        span: 2868..2869,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
        column: 20,
        span: 2869..2870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 147,
        column: 21,
        span: 2870..2871,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 147,
        column: 22,
        span: 2871..2872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 147,
        column: 23,
        span: 2872..2873,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 24,
        span: 2873..2874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 147,
        column: 31,
        span: 2875..2881,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
        column: 32,
        span: 2881..2882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 147,
        column: 33,
        span: 2882..2883,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 147,
        column: 35,
        span: 2883..2885,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"test\"",
        ),
        line: 147,
        column: 41,
        span: 2885..2891,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 147,
        column: 45,
        span: 2892..2895,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 147,
        column: 47,
        span: 2896..2897,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 147,
        column: 49,
        span: 2897..2899,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"OK\"",
        ),
        line: 147,
        column: 53,
        span: 2899..2903,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 54,
        span: 2903..2904,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 147,
        column: 0,
        span: 2905..2908,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 148,
        column: 8,
        span: 2911..2916,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 148,
        column: 17,
        span: 2917..2925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 148,
        column: 19,
        span: 2926..2927,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 20,
        span: 2927..2928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 148,
        column: 21,
        span: 2928..2929,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 148,
        column: 22,
        span: 2929..2930,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 148,
        column: 26,
        span: 2931..2934,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
        column: 27,
        span: 2934..2935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 148,
        column: 29,
        span: 2936..2937,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 30,
        span: 2937..2938,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"test\"",
        ),
        line: 148,
        column: 36,
        span: 2938..2944,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 148,
        column: 37,
        span: 2944..2945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 148,
        column: 39,
        span: 2946..2947,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 40,
        span: 2947..2948,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
        column: 41,
        span: 2948..2949,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 148,
        column: 44,
        span: 2950..2952,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 148,
        column: 46,
        span: 2952..2954,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 148,
        column: 50,
        span: 2955..2958,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"FAILED\"",
        ),
        line: 148,
        column: 59,
        span: 2959..2967,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 148,
        column: 62,
        span: 2968..2970,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"OK\"",
        ),
        line: 148,
        column: 67,
        span: 2971..2975,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
        column: 68,
        span: 2975..2976,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 148,
        column: 0,
        span: 2977..2980,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 149,
        column: 8,
        span: 2983..2988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 149,
        column: 10,
        span: 2989..2990,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 149,
        column: 12,
        span: 2991..2992,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 149,
        column: 0,
        span: 2992..2994,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 150,
        column: 9,
        span: 2997..3003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 150,
        column: 11,
        span: 3004..3005,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
        column: 12,
        span: 3005..3006,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 150,
        column: 20,
        span: 3006..3014,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
        column: 21,
        span: 3014..3015,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
        column: 22,
        span: 3015..3016,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 150,
        column: 29,
        span: 3017..3023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 150,
        column: 31,
        span: 3024..3025,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 150,
        column: 35,
        span: 3026..3029,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
        column: 36,
        span: 3029..3030,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 151,
        column: 0,
        span: 3031..3034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 152,
        column: 2,
        span: 3035..3036,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 3,
        span: 3036..3037,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 4,
        span: 3037..3038,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 157,
        column: 6,
        span: 3061..3066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 157,
        column: 0,
        span: 3067..3068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 159,
        column: 7,
        span: 3070..3076,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
        column: 8,
        span: 3076..3077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 159,
        column: 17,
        span: 3077..3086,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 159,
        column: 18,
        span: 3086..3087,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "running",
        ),
        line: 159,
        column: 25,
        span: 3087..3094,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
        column: 26,
        span: 3094..3095,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 159,
        column: 27,
        span: 3095..3096,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 159,
        column: 30,
        span: 3097..3099,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 159,
        column: 34,
        span: 3100..3103,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 159,
        column: 35,
        span: 3103..3104,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 164,
        column: 6,
        span: 3140..3145,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 164,
        column: 15,
        span: 3146..3154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 164,
        column: 19,
        span: 3155..3158,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 164,
        column: 21,
        span: 3159..3160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 164,
        column: 22,
        span: 3160..3161,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 164,
        column: 23,
        span: 3161..3162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setfenv",
        ),
        line: 165,
        column: 10,
        span: 3165..3172,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 11,
        span: 3172..3173,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 165,
        column: 12,
        span: 3172..3174,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 165,
        column: 13,
        span: 3174..3175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 165,
        column: 15,
        span: 3176..3177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 16,
        span: 3177..3178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 166,
        column: 12,
        span: 3181..3190,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 166,
        column: 13,
        span: 3190..3191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 166,
        column: 18,
        span: 3191..3196,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 19,
        span: 3196..3197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getfenv",
        ),
        line: 166,
        column: 26,
        span: 3197..3204,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 27,
        span: 3204..3205,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 28,
        span: 3205..3206,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 29,
        span: 3206..3207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 167,
        column: 9,
        span: 3210..3216,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
        column: 10,
        span: 3216..3217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getfenv",
        ),
        line: 167,
        column: 17,
        span: 3217..3224,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
        column: 18,
        span: 3224..3225,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 167,
        column: 19,
        span: 3224..3226,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 20,
        span: 3226..3227,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 167,
        column: 23,
        span: 3228..3230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 167,
        column: 25,
        span: 3231..3232,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 26,
        span: 3232..3233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 168,
        column: 9,
        span: 3236..3242,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
        column: 10,
        span: 3242..3243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getfenv",
        ),
        line: 168,
        column: 17,
        span: 3243..3250,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
        column: 18,
        span: 3250..3251,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 168,
        column: 19,
        span: 3250..3252,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
        column: 20,
        span: 3252..3253,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 168,
        column: 23,
        span: 3254..3256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 168,
        column: 26,
        span: 3257..3259,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
        column: 27,
        span: 3259..3260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 169,
        column: 9,
        span: 3263..3269,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 10,
        span: 3269..3270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getfenv",
        ),
        line: 169,
        column: 17,
        span: 3270..3277,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 18,
        span: 3277..3278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        line: 169,
        column: 28,
        span: 3278..3288,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 169,
        column: 30,
        span: 3288..3290,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 31,
        span: 3290..3291,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 169,
        column: 34,
        span: 3292..3294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 169,
        column: 36,
        span: 3295..3296,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 37,
        span: 3296..3297,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 170,
        column: 9,
        span: 3300..3306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getfenv",
        ),
        line: 170,
        column: 17,
        span: 3307..3314,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
        column: 18,
        span: 3314..3315,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 19,
        span: 3315..3316,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 171,
        column: 0,
        span: 3317..3320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 173,
        column: 2,
        span: 3322..3323,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 173,
        column: 4,
        span: 3324..3325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 173,
        column: 14,
        span: 3326..3335,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 173,
        column: 15,
        span: 3335..3336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 173,
        column: 19,
        span: 3336..3340,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
        column: 20,
        span: 3340..3341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 173,
        column: 23,
        span: 3341..3344,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
        column: 24,
        span: 3344..3345,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 174,
        column: 6,
        span: 3346..3351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 174,
        column: 8,
        span: 3352..3353,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 174,
        column: 10,
        span: 3354..3355,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 174,
        column: 12,
        span: 3356..3357,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 174,
        column: 13,
        span: 3357..3358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 175,
        column: 7,
        span: 3359..3365,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
        column: 8,
        span: 3365..3366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 175,
        column: 9,
        span: 3366..3367,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
        column: 10,
        span: 3367..3368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 175,
        column: 11,
        span: 3368..3369,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
        column: 12,
        span: 3369..3370,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 175,
        column: 15,
        span: 3371..3373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 175,
        column: 18,
        span: 3374..3376,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
        column: 19,
        span: 3376..3377,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 176,
        column: 6,
        span: 3378..3383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 176,
        column: 8,
        span: 3384..3385,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
        column: 9,
        span: 3385..3386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 176,
        column: 10,
        span: 3386..3387,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 176,
        column: 12,
        span: 3388..3389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 176,
        column: 18,
        span: 3390..3395,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 19,
        span: 3395..3396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 176,
        column: 20,
        span: 3396..3397,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 21,
        span: 3397..3398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 177,
        column: 7,
        span: 3399..3405,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
        column: 8,
        span: 3405..3406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 177,
        column: 9,
        span: 3406..3407,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 177,
        column: 13,
        span: 3408..3411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 177,
        column: 15,
        span: 3412..3413,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 177,
        column: 18,
        span: 3414..3416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 177,
        column: 21,
        span: 3417..3419,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
        column: 22,
        span: 3419..3420,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 182,
        column: 6,
        span: 3469..3474,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 182,
        column: 15,
        span: 3475..3483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqtab",
        ),
        line: 182,
        column: 21,
        span: 3484..3489,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 182,
        column: 23,
        span: 3490..3491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 182,
        column: 25,
        span: 3491..3493,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 182,
        column: 26,
        span: 3493..3494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 182,
        column: 29,
        span: 3495..3497,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 182,
        column: 30,
        span: 3497..3498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 183,
        column: 9,
        span: 3501..3507,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 183,
        column: 10,
        span: 3507..3508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 183,
        column: 15,
        span: 3508..3513,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 183,
        column: 16,
        span: 3513..3514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        line: 183,
        column: 20,
        span: 3514..3518,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 183,
        column: 21,
        span: 3518..3519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 183,
        column: 23,
        span: 3519..3521,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 183,
        column: 24,
        span: 3521..3522,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 183,
        column: 27,
        span: 3523..3525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 183,
        column: 33,
        span: 3526..3531,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 183,
        column: 34,
        span: 3531..3532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        line: 183,
        column: 38,
        span: 3532..3536,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 183,
        column: 39,
        span: 3536..3537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 183,
        column: 41,
        span: 3537..3539,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 183,
        column: 42,
        span: 3539..3540,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 183,
        column: 43,
        span: 3540..3541,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 184,
        column: 6,
        span: 3544..3547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 184,
        column: 8,
        span: 3548..3549,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 9,
        span: 3549..3550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 184,
        column: 10,
        span: 3550..3551,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 184,
        column: 13,
        span: 3552..3554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ipairs",
        ),
        line: 184,
        column: 20,
        span: 3555..3561,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
        column: 21,
        span: 3561..3562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 184,
        column: 23,
        span: 3562..3564,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
        column: 24,
        span: 3564..3565,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 184,
        column: 0,
        span: 3566..3568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 185,
        column: 11,
        span: 3573..3579,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 12,
        span: 3579..3580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 185,
        column: 14,
        span: 3580..3582,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 185,
        column: 15,
        span: 3582..3583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 185,
        column: 16,
        span: 3583..3584,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 185,
        column: 17,
        span: 3584..3585,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 185,
        column: 20,
        span: 3586..3588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 185,
        column: 22,
        span: 3589..3590,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 23,
        span: 3590..3591,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 186,
        column: 0,
        span: 3594..3597,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 187,
        column: 0,
        span: 3598..3601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 189,
        column: 3,
        span: 3603..3605,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 189,
        column: 4,
        span: 3605..3606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 189,
        column: 5,
        span: 3606..3607,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 189,
        column: 7,
        span: 3608..3609,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 189,
        column: 11,
        span: 3610..3613,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 190,
        column: 9,
        span: 3629..3637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 190,
        column: 13,
        span: 3638..3641,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 15,
        span: 3642..3643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 190,
        column: 16,
        span: 3643..3644,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 190,
        column: 17,
        span: 3644..3645,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 190,
        column: 21,
        span: 3646..3649,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
        column: 22,
        span: 3649..3650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 191,
        column: 9,
        span: 3653..3659,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 10,
        span: 3659..3660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 191,
        column: 19,
        span: 3660..3669,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 191,
        column: 20,
        span: 3669..3670,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "running",
        ),
        line: 191,
        column: 27,
        span: 3670..3677,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 28,
        span: 3677..3678,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 29,
        span: 3678..3679,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 191,
        column: 32,
        span: 3680..3682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 191,
        column: 34,
        span: 3683..3684,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 35,
        span: 3684..3685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 192,
        column: 9,
        span: 3688..3694,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 10,
        span: 3694..3695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 192,
        column: 19,
        span: 3695..3704,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 192,
        column: 20,
        span: 3704..3705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "status",
        ),
        line: 192,
        column: 26,
        span: 3705..3711,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 27,
        span: 3711..3712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 192,
        column: 28,
        span: 3712..3713,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
        column: 29,
        span: 3713..3714,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 192,
        column: 32,
        span: 3715..3717,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"running\"",
        ),
        line: 192,
        column: 42,
        span: 3718..3727,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
        column: 43,
        span: 3727..3728,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 193,
        column: 8,
        span: 3731..3736,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 193,
        column: 12,
        span: 3737..3740,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 193,
        column: 14,
        span: 3741..3742,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 193,
        column: 16,
        span: 3743..3744,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 193,
        column: 19,
        span: 3744..3747,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 193,
        column: 20,
        span: 3747..3748,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 194,
        column: 6,
        span: 3751..3754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 194,
        column: 8,
        span: 3755..3756,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 194,
        column: 9,
        span: 3756..3757,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 194,
        column: 10,
        span: 3756..3758,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 194,
        column: 11,
        span: 3758..3759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 194,
        column: 16,
        span: 3759..3764,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 194,
        column: 17,
        span: 3764..3765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        line: 194,
        column: 21,
        span: 3765..3769,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 22,
        span: 3769..3770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 194,
        column: 25,
        span: 3770..3773,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
        column: 26,
        span: 3773..3774,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 194,
        column: 0,
        span: 3775..3777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 195,
        column: 7,
        span: 3782..3784,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 195,
        column: 8,
        span: 3784..3785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 195,
        column: 9,
        span: 3785..3786,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 195,
        column: 11,
        span: 3787..3788,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 195,
        column: 13,
        span: 3789..3790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 195,
        column: 22,
        span: 3790..3799,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 195,
        column: 23,
        span: 3799..3800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 195,
        column: 28,
        span: 3800..3805,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 29,
        span: 3805..3806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 195,
        column: 35,
        span: 3806..3812,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 36,
        span: 3812..3813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 195,
        column: 39,
        span: 3813..3816,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 195,
        column: 40,
        span: 3816..3817,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 195,
        column: 41,
        span: 3817..3818,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 195,
        column: 42,
        span: 3818..3819,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 43,
        span: 3819..3820,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 44,
        span: 3820..3821,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 195,
        column: 45,
        span: 3821..3822,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 196,
        column: 0,
        span: 3825..3828,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 197,
        column: 9,
        span: 3831..3837,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 197,
        column: 16,
        span: 3838..3844,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 197,
        column: 17,
        span: 3844..3845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 197,
        column: 18,
        span: 3845..3846,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 197,
        column: 19,
        span: 3846..3847,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 198,
        column: 0,
        span: 3848..3851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 200,
        column: 2,
        span: 3853..3854,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 200,
        column: 4,
        span: 3855..3856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 200,
        column: 14,
        span: 3857..3866,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 200,
        column: 15,
        span: 3866..3867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 200,
        column: 21,
        span: 3867..3873,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 22,
        span: 3873..3874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 200,
        column: 25,
        span: 3874..3877,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 26,
        span: 3877..3878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 201,
        column: 7,
        span: 3879..3885,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
        column: 8,
        span: 3885..3886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 201,
        column: 12,
        span: 3886..3890,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
        column: 13,
        span: 3890..3891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 201,
        column: 14,
        span: 3891..3892,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
        column: 15,
        span: 3892..3893,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 201,
        column: 18,
        span: 3894..3896,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"thread\"",
        ),
        line: 201,
        column: 27,
        span: 3897..3905,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 201,
        column: 31,
        span: 3906..3909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 201,
        column: 41,
        span: 3910..3919,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 201,
        column: 42,
        span: 3919..3920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "status",
        ),
        line: 201,
        column: 48,
        span: 3920..3926,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
        column: 49,
        span: 3926..3927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 201,
        column: 50,
        span: 3927..3928,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
        column: 51,
        span: 3928..3929,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 201,
        column: 54,
        span: 3930..3932,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"suspended\"",
        ),
        line: 201,
        column: 66,
        span: 3933..3944,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
        column: 67,
        span: 3944..3945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 202,
        column: 7,
        span: 3946..3952,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 8,
        span: 3952..3953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 202,
        column: 14,
        span: 3953..3959,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 202,
        column: 15,
        span: 3959..3960,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 202,
        column: 19,
        span: 3960..3964,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 20,
        span: 3964..3965,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 202,
        column: 28,
        span: 3965..3973,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 29,
        span: 3973..3974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 202,
        column: 30,
        span: 3974..3975,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 31,
        span: 3975..3976,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 202,
        column: 32,
        span: 3976..3977,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"thread\"",
        ),
        line: 202,
        column: 41,
        span: 3978..3986,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 42,
        span: 3986..3987,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 43,
        span: 3987..3988,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 203,
        column: 6,
        span: 3989..3994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 203,
        column: 8,
        span: 3995..3996,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 203,
        column: 9,
        span: 3996..3997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 203,
        column: 10,
        span: 3997..3998,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 203,
        column: 11,
        span: 3998..3999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 203,
        column: 12,
        span: 3999..4000,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 203,
        column: 13,
        span: 4000..4001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 203,
        column: 14,
        span: 4001..4002,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 203,
        column: 15,
        span: 4002..4003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 203,
        column: 0,
        span: 4003..4004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 204,
        column: 2,
        span: 4005..4006,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 3,
        span: 4006..4007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 204,
        column: 4,
        span: 4007..4008,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 5,
        span: 4008..4009,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 204,
        column: 6,
        span: 4009..4010,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 7,
        span: 4010..4011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 204,
        column: 8,
        span: 4011..4012,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 9,
        span: 4012..4013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 204,
        column: 10,
        span: 4013..4014,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 204,
        column: 12,
        span: 4015..4016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 204,
        column: 22,
        span: 4017..4026,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 204,
        column: 23,
        span: 4026..4027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 204,
        column: 29,
        span: 4027..4033,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 30,
        span: 4033..4034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 204,
        column: 31,
        span: 4034..4035,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 32,
        span: 4035..4036,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 204,
        column: 34,
        span: 4037..4038,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 35,
        span: 4037..4039,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 36,
        span: 4039..4040,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 37,
        span: 4039..4041,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 38,
        span: 4041..4042,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 39,
        span: 4041..4043,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 204,
        column: 40,
        span: 4043..4044,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 41,
        span: 4044..4045,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 204,
        column: 43,
        span: 4046..4047,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 204,
        column: 44,
        span: 4047..4048,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 45,
        span: 4048..4049,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 204,
        column: 47,
        span: 4050..4051,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 48,
        span: 4050..4052,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 204,
        column: 49,
        span: 4052..4053,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 50,
        span: 4053..4054,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 204,
        column: 52,
        span: 4055..4056,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 204,
        column: 55,
        span: 4056..4059,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 56,
        span: 4059..4060,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 204,
        column: 60,
        span: 4061..4064,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 61,
        span: 4064..4065,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'c'",
        ),
        line: 204,
        column: 65,
        span: 4066..4069,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 204,
        column: 66,
        span: 4069..4070,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 67,
        span: 4070..4071,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 205,
        column: 7,
        span: 4072..4078,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 8,
        span: 4078..4079,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 205,
        column: 9,
        span: 4079..4080,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 205,
        column: 13,
        span: 4081..4084,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 205,
        column: 15,
        span: 4085..4086,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 205,
        column: 18,
        span: 4087..4089,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 205,
        column: 22,
        span: 4090..4093,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 205,
        column: 26,
        span: 4094..4097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 205,
        column: 36,
        span: 4098..4107,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 205,
        column: 37,
        span: 4107..4108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "status",
        ),
        line: 205,
        column: 43,
        span: 4108..4114,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 44,
        span: 4114..4115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 205,
        column: 45,
        span: 4115..4116,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 46,
        span: 4116..4117,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 205,
        column: 49,
        span: 4118..4120,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"suspended\"",
        ),
        line: 205,
        column: 61,
        span: 4121..4132,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 62,
        span: 4132..4133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 206,
        column: 2,
        span: 4134..4135,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 206,
        column: 3,
        span: 4135..4136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 206,
        column: 4,
        span: 4136..4137,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 206,
        column: 5,
        span: 4137..4138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 206,
        column: 6,
        span: 4138..4139,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 206,
        column: 7,
        span: 4139..4140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 206,
        column: 8,
        span: 4140..4141,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 206,
        column: 9,
        span: 4141..4142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 206,
        column: 10,
        span: 4142..4143,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 206,
        column: 12,
        span: 4144..4145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 206,
        column: 22,
        span: 4146..4155,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 206,
        column: 23,
        span: 4155..4156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 206,
        column: 29,
        span: 4156..4162,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
        column: 30,
        span: 4162..4163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 206,
        column: 31,
        span: 4163..4164,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
        column: 32,
        span: 4164..4165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqtab",
        ),
        line: 207,
        column: 6,
        span: 4166..4171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 207,
        column: 7,
        span: 4171..4172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 207,
        column: 9,
        span: 4172..4174,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 207,
        column: 10,
        span: 4174..4175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 207,
        column: 11,
        span: 4175..4176,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 207,
        column: 12,
        span: 4176..4177,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 207,
        column: 14,
        span: 4178..4179,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 207,
        column: 15,
        span: 4179..4180,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
        column: 16,
        span: 4180..4181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 208,
        column: 7,
        span: 4182..4188,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 8,
        span: 4188..4189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 208,
        column: 9,
        span: 4189..4190,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 208,
        column: 13,
        span: 4191..4194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 208,
        column: 15,
        span: 4195..4196,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 208,
        column: 18,
        span: 4197..4199,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 208,
        column: 20,
        span: 4199..4201,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 208,
        column: 24,
        span: 4202..4205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 208,
        column: 26,
        span: 4206..4207,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 208,
        column: 29,
        span: 4208..4210,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 208,
        column: 33,
        span: 4211..4214,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 34,
        span: 4214..4215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 209,
        column: 2,
        span: 4216..4217,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 209,
        column: 3,
        span: 4217..4218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 209,
        column: 4,
        span: 4218..4219,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 209,
        column: 5,
        span: 4219..4220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 209,
        column: 6,
        span: 4220..4221,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 209,
        column: 7,
        span: 4221..4222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 209,
        column: 8,
        span: 4222..4223,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 209,
        column: 9,
        span: 4223..4224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 209,
        column: 10,
        span: 4224..4225,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 209,
        column: 12,
        span: 4226..4227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 209,
        column: 22,
        span: 4228..4237,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 209,
        column: 23,
        span: 4237..4238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 209,
        column: 29,
        span: 4238..4244,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
        column: 30,
        span: 4244..4245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 209,
        column: 31,
        span: 4245..4246,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 209,
        column: 32,
        span: 4246..4247,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 209,
        column: 34,
        span: 4247..4249,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 209,
        column: 35,
        span: 4249..4250,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 209,
        column: 37,
        span: 4250..4252,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 209,
        column: 38,
        span: 4252..4253,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 209,
        column: 40,
        span: 4253..4255,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
        column: 41,
        span: 4255..4256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqtab",
        ),
        line: 210,
        column: 6,
        span: 4257..4262,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 7,
        span: 4262..4263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 210,
        column: 9,
        span: 4263..4265,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 210,
        column: 10,
        span: 4265..4266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 210,
        column: 11,
        span: 4266..4267,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 210,
        column: 12,
        span: 4267..4268,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 210,
        column: 14,
        span: 4269..4270,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 210,
        column: 15,
        span: 4269..4271,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 210,
        column: 16,
        span: 4271..4272,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 210,
        column: 18,
        span: 4272..4274,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 210,
        column: 19,
        span: 4274..4275,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 210,
        column: 21,
        span: 4275..4277,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 210,
        column: 22,
        span: 4277..4278,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
        column: 23,
        span: 4278..4279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 211,
        column: 7,
        span: 4280..4286,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 211,
        column: 8,
        span: 4286..4287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 211,
        column: 9,
        span: 4287..4288,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 211,
        column: 13,
        span: 4289..4292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 211,
        column: 15,
        span: 4293..4294,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 211,
        column: 18,
        span: 4295..4297,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 211,
        column: 22,
        span: 4298..4301,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 211,
        column: 26,
        span: 4302..4305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 211,
        column: 28,
        span: 4306..4307,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 211,
        column: 31,
        span: 4308..4310,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 211,
        column: 35,
        span: 4311..4314,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 211,
        column: 39,
        span: 4315..4318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 211,
        column: 41,
        span: 4319..4320,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 211,
        column: 44,
        span: 4321..4323,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'c'",
        ),
        line: 211,
        column: 48,
        span: 4324..4327,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 211,
        column: 52,
        span: 4328..4331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 211,
        column: 54,
        span: 4332..4333,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 211,
        column: 57,
        span: 4334..4336,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 211,
        column: 61,
        span: 4337..4340,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 211,
        column: 62,
        span: 4340..4341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 212,
        column: 2,
        span: 4342..4343,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 212,
        column: 3,
        span: 4343..4344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 212,
        column: 4,
        span: 4344..4345,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 212,
        column: 5,
        span: 4345..4346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 212,
        column: 6,
        span: 4346..4347,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 212,
        column: 7,
        span: 4347..4348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 212,
        column: 8,
        span: 4348..4349,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 212,
        column: 9,
        span: 4349..4350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 212,
        column: 10,
        span: 4350..4351,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 212,
        column: 12,
        span: 4352..4353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 212,
        column: 22,
        span: 4354..4363,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 212,
        column: 23,
        span: 4363..4364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 212,
        column: 29,
        span: 4364..4370,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 30,
        span: 4370..4371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 212,
        column: 31,
        span: 4371..4372,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 212,
        column: 32,
        span: 4372..4373,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 212,
        column: 39,
        span: 4374..4380,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 40,
        span: 4380..4381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqtab",
        ),
        line: 213,
        column: 6,
        span: 4382..4387,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 7,
        span: 4387..4388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 213,
        column: 9,
        span: 4388..4390,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 213,
        column: 10,
        span: 4390..4391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 213,
        column: 11,
        span: 4391..4392,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 213,
        column: 12,
        span: 4392..4393,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 213,
        column: 14,
        span: 4394..4395,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 213,
        column: 20,
        span: 4395..4401,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 213,
        column: 21,
        span: 4401..4402,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 22,
        span: 4402..4403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 214,
        column: 7,
        span: 4404..4410,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
        column: 8,
        span: 4410..4411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 214,
        column: 9,
        span: 4411..4412,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 214,
        column: 13,
        span: 4413..4416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 214,
        column: 15,
        span: 4417..4418,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 214,
        column: 18,
        span: 4419..4421,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
        column: 20,
        span: 4421..4423,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 214,
        column: 24,
        span: 4424..4427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 214,
        column: 26,
        span: 4428..4429,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 214,
        column: 29,
        span: 4430..4432,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
        column: 31,
        span: 4432..4434,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 214,
        column: 35,
        span: 4435..4438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 214,
        column: 37,
        span: 4439..4440,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 214,
        column: 40,
        span: 4441..4443,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
        column: 42,
        span: 4443..4445,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 214,
        column: 46,
        span: 4446..4449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 214,
        column: 48,
        span: 4450..4451,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 214,
        column: 51,
        span: 4452..4454,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 214,
        column: 55,
        span: 4455..4458,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 56,
        span: 4458..4459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 215,
        column: 7,
        span: 4460..4466,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
        column: 8,
        span: 4466..4467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 215,
        column: 17,
        span: 4467..4476,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 215,
        column: 18,
        span: 4476..4477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "status",
        ),
        line: 215,
        column: 24,
        span: 4477..4483,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
        column: 25,
        span: 4483..4484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 215,
        column: 26,
        span: 4484..4485,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
        column: 27,
        span: 4485..4486,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 215,
        column: 30,
        span: 4487..4489,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"dead\"",
        ),
        line: 215,
        column: 37,
        span: 4490..4496,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
        column: 38,
        span: 4496..4497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 216,
        column: 2,
        span: 4498..4499,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 216,
        column: 3,
        span: 4499..4500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 216,
        column: 5,
        span: 4501..4502,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 216,
        column: 7,
        span: 4503..4504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 216,
        column: 17,
        span: 4505..4514,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 216,
        column: 18,
        span: 4514..4515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 216,
        column: 24,
        span: 4515..4521,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 25,
        span: 4521..4522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 216,
        column: 26,
        span: 4522..4523,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 216,
        column: 27,
        span: 4523..4524,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 216,
        column: 34,
        span: 4525..4531,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 35,
        span: 4531..4532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 217,
        column: 7,
        span: 4533..4539,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 8,
        span: 4539..4540,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 217,
        column: 11,
        span: 4540..4543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 217,
        column: 13,
        span: 4544..4545,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 217,
        column: 17,
        span: 4546..4549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 217,
        column: 24,
        span: 4550..4556,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 217,
        column: 25,
        span: 4556..4557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 217,
        column: 29,
        span: 4557..4561,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 30,
        span: 4561..4562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 217,
        column: 31,
        span: 4562..4563,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 217,
        column: 32,
        span: 4563..4564,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"dead\"",
        ),
        line: 217,
        column: 39,
        span: 4565..4571,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 40,
        span: 4571..4572,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 217,
        column: 44,
        span: 4573..4576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 217,
        column: 54,
        span: 4577..4586,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 217,
        column: 55,
        span: 4586..4587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "status",
        ),
        line: 217,
        column: 61,
        span: 4587..4593,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 62,
        span: 4593..4594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 217,
        column: 63,
        span: 4594..4595,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 64,
        span: 4595..4596,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 217,
        column: 67,
        span: 4597..4599,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"dead\"",
        ),
        line: 217,
        column: 74,
        span: 4600..4606,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 75,
        span: 4606..4607,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 221,
        column: 6,
        span: 4634..4639,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 221,
        column: 15,
        span: 4640..4648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 221,
        column: 19,
        span: 4649..4652,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 21,
        span: 4653..4654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 221,
        column: 22,
        span: 4654..4655,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 23,
        span: 4655..4656,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 221,
        column: 30,
        span: 4657..4663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 221,
        column: 40,
        span: 4664..4673,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 221,
        column: 41,
        span: 4673..4674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 221,
        column: 46,
        span: 4674..4679,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 47,
        span: 4679..4680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 221,
        column: 48,
        span: 4680..4681,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 49,
        span: 4681..4682,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 221,
        column: 0,
        span: 4683..4686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 222,
        column: 2,
        span: 4687..4688,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 222,
        column: 4,
        span: 4689..4690,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 222,
        column: 14,
        span: 4691..4700,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 222,
        column: 15,
        span: 4700..4701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 222,
        column: 19,
        span: 4701..4705,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
        column: 20,
        span: 4705..4706,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 222,
        column: 28,
        span: 4706..4714,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
        column: 30,
        span: 4715..4716,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
        column: 31,
        span: 4716..4717,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 223,
        column: 6,
        span: 4720..4723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 223,
        column: 8,
        span: 4724..4725,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 223,
        column: 9,
        span: 4725..4726,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 223,
        column: 10,
        span: 4725..4727,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 223,
        column: 11,
        span: 4727..4728,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 223,
        column: 13,
        span: 4727..4730,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 223,
        column: 0,
        span: 4731..4733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 224,
        column: 11,
        span: 4738..4744,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
        column: 12,
        span: 4744..4745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 224,
        column: 15,
        span: 4745..4748,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
        column: 16,
        span: 4748..4749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 224,
        column: 17,
        span: 4749..4750,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 18,
        span: 4750..4751,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 224,
        column: 21,
        span: 4752..4754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 224,
        column: 24,
        span: 4755..4757,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 224,
        column: 25,
        span: 4757..4758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 224,
        column: 26,
        span: 4758..4759,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 27,
        span: 4759..4760,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 225,
        column: 0,
        span: 4763..4766,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 226,
        column: 9,
        span: 4769..4775,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 226,
        column: 13,
        span: 4776..4779,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 227,
        column: 4,
        span: 4780..4783,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 5,
        span: 4783..4784,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 228,
        column: 4,
        span: 4785..4788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 228,
        column: 6,
        span: 4789..4790,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 228,
        column: 7,
        span: 4790..4791,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 228,
        column: 8,
        span: 4790..4792,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 228,
        column: 9,
        span: 4792..4793,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 228,
        column: 11,
        span: 4792..4795,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 228,
        column: 14,
        span: 4796..4798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 228,
        column: 17,
        span: 4799..4801,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 228,
        column: 18,
        span: 4801..4802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 228,
        column: 19,
        span: 4802..4803,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 228,
        column: 21,
        span: 4804..4805,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 228,
        column: 23,
        span: 4806..4807,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 228,
        column: 24,
        span: 4807..4808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 228,
        column: 31,
        span: 4809..4815,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
        column: 32,
        span: 4815..4816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 228,
        column: 33,
        span: 4816..4817,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
        column: 34,
        span: 4817..4818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 228,
        column: 35,
        span: 4818..4819,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 228,
        column: 36,
        span: 4819..4820,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 228,
        column: 39,
        span: 4821..4823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 228,
        column: 41,
        span: 4824..4825,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 228,
        column: 42,
        span: 4825..4826,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 228,
        column: 0,
        span: 4827..4830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 229,
        column: 3,
        span: 4831..4833,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 229,
        column: 4,
        span: 4833..4834,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 229,
        column: 5,
        span: 4834..4835,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 229,
        column: 7,
        span: 4836..4837,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu'",
        ),
        line: 229,
        column: 14,
        span: 4838..4844,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 229,
        column: 15,
        span: 4844..4845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 229,
        column: 22,
        span: 4846..4852,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 229,
        column: 23,
        span: 4852..4853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 229,
        column: 24,
        span: 4853..4854,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 229,
        column: 25,
        span: 4854..4855,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu'",
        ),
        line: 229,
        column: 31,
        span: 4855..4861,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 229,
        column: 32,
        span: 4861..4862,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 229,
        column: 35,
        span: 4863..4865,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 229,
        column: 39,
        span: 4866..4869,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 229,
        column: 40,
        span: 4869..4870,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 232,
        column: 9,
        span: 4885..4893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pf",
        ),
        line: 232,
        column: 12,
        span: 4894..4896,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 232,
        column: 14,
        span: 4897..4898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 232,
        column: 15,
        span: 4898..4899,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 232,
        column: 16,
        span: 4899..4900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 232,
        column: 18,
        span: 4901..4902,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 232,
        column: 19,
        span: 4902..4903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 233,
        column: 12,
        span: 4906..4915,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 233,
        column: 13,
        span: 4915..4916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 233,
        column: 18,
        span: 4916..4921,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 233,
        column: 19,
        span: 4921..4922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 233,
        column: 20,
        span: 4922..4923,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 233,
        column: 21,
        span: 4923..4924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pf",
        ),
        line: 234,
        column: 5,
        span: 4927..4929,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 234,
        column: 6,
        span: 4929..4930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 234,
        column: 7,
        span: 4930..4931,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 234,
        column: 8,
        span: 4931..4932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 234,
        column: 9,
        span: 4932..4933,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 234,
        column: 10,
        span: 4933..4934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 234,
        column: 12,
        span: 4935..4936,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 234,
        column: 13,
        span: 4936..4937,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 234,
        column: 14,
        span: 4936..4938,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 234,
        column: 15,
        span: 4938..4939,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 235,
        column: 0,
        span: 4940..4943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 237,
        column: 2,
        span: 4945..4946,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 237,
        column: 4,
        span: 4947..4948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 237,
        column: 14,
        span: 4949..4958,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 237,
        column: 15,
        span: 4958..4959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 237,
        column: 19,
        span: 4959..4963,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
        column: 20,
        span: 4963..4964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pf",
        ),
        line: 237,
        column: 22,
        span: 4964..4966,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 23,
        span: 4966..4967,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 238,
        column: 6,
        span: 4968..4973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 238,
        column: 8,
        span: 4974..4975,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 238,
        column: 9,
        span: 4975..4976,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 238,
        column: 0,
        span: 4975..4977,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 239,
        column: 4,
        span: 4978..4981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 239,
        column: 6,
        span: 4982..4983,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 239,
        column: 7,
        span: 4983..4984,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 239,
        column: 8,
        span: 4983..4985,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 239,
        column: 9,
        span: 4985..4986,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 239,
        column: 11,
        span: 4985..4988,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 239,
        column: 0,
        span: 4989..4991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 240,
        column: 9,
        span: 4994..5000,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 10,
        span: 5000..5001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 240,
        column: 11,
        span: 5001..5002,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 12,
        span: 5002..5003,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 240,
        column: 13,
        span: 5002..5004,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 240,
        column: 14,
        span: 5004..5005,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 240,
        column: 16,
        span: 5005..5007,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 17,
        span: 5007..5008,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 240,
        column: 20,
        span: 5009..5011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 240,
        column: 22,
        span: 5012..5013,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 23,
        span: 5013..5014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 241,
        column: 4,
        span: 5017..5018,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 241,
        column: 6,
        span: 5019..5020,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 241,
        column: 8,
        span: 5021..5022,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 241,
        column: 9,
        span: 5022..5023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 241,
        column: 0,
        span: 5023..5024,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 242,
        column: 0,
        span: 5025..5028,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 245,
        column: 9,
        span: 5039..5047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gen",
        ),
        line: 245,
        column: 13,
        span: 5048..5051,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 245,
        column: 15,
        span: 5052..5053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 245,
        column: 16,
        span: 5053..5054,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 245,
        column: 17,
        span: 5054..5055,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 246,
        column: 9,
        span: 5058..5064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 246,
        column: 19,
        span: 5065..5074,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 246,
        column: 20,
        span: 5074..5075,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 246,
        column: 24,
        span: 5075..5079,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 246,
        column: 25,
        span: 5079..5080,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 246,
        column: 33,
        span: 5080..5088,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 246,
        column: 35,
        span: 5089..5090,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 246,
        column: 36,
        span: 5090..5091,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 247,
        column: 8,
        span: 5096..5099,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 247,
        column: 10,
        span: 5100..5101,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 247,
        column: 11,
        span: 5101..5102,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 247,
        column: 12,
        span: 5101..5103,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 247,
        column: 13,
        span: 5103..5104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 247,
        column: 14,
        span: 5104..5105,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 247,
        column: 17,
        span: 5106..5108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 247,
        column: 27,
        span: 5109..5118,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 247,
        column: 28,
        span: 5118..5119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 247,
        column: 33,
        span: 5119..5124,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 34,
        span: 5124..5125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 247,
        column: 35,
        span: 5125..5126,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 36,
        span: 5126..5127,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 247,
        column: 0,
        span: 5128..5131,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 248,
        column: 6,
        span: 5134..5137,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 248,
        column: 7,
        span: 5137..5138,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 249,
        column: 0,
        span: 5139..5142,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 252,
        column: 9,
        span: 5145..5153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "filter",
        ),
        line: 252,
        column: 16,
        span: 5154..5160,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 18,
        span: 5161..5162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 252,
        column: 19,
        span: 5162..5163,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 252,
        column: 20,
        span: 5163..5164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 252,
        column: 22,
        span: 5165..5166,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 23,
        span: 5166..5167,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 253,
        column: 9,
        span: 5170..5176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 253,
        column: 19,
        span: 5177..5186,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 253,
        column: 20,
        span: 5186..5187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 253,
        column: 24,
        span: 5187..5191,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 25,
        span: 5191..5192,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 253,
        column: 33,
        span: 5192..5200,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 35,
        span: 5201..5202,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 36,
        span: 5202..5203,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 254,
        column: 10,
        span: 5208..5213,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 254,
        column: 12,
        span: 5213..5215,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 254,
        column: 0,
        span: 5216..5218,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 255,
        column: 12,
        span: 5225..5230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 255,
        column: 14,
        span: 5231..5232,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 255,
        column: 16,
        span: 5233..5234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 255,
        column: 18,
        span: 5235..5236,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 255,
        column: 19,
        span: 5236..5237,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 255,
        column: 20,
        span: 5237..5238,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 256,
        column: 9,
        span: 5245..5247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 256,
        column: 11,
        span: 5248..5249,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 256,
        column: 14,
        span: 5250..5252,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 256,
        column: 18,
        span: 5253..5256,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 256,
        column: 23,
        span: 5257..5261,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 256,
        column: 30,
        span: 5262..5268,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 256,
        column: 0,
        span: 5269..5272,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 257,
        column: 9,
        span: 5279..5281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 257,
        column: 14,
        span: 5282..5286,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 257,
        column: 15,
        span: 5286..5287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mod",
        ),
        line: 257,
        column: 18,
        span: 5287..5290,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
        column: 19,
        span: 5290..5291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 257,
        column: 20,
        span: 5291..5292,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
        column: 21,
        span: 5292..5293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 257,
        column: 23,
        span: 5294..5295,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
        column: 24,
        span: 5295..5296,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 257,
        column: 27,
        span: 5297..5299,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 257,
        column: 29,
        span: 5299..5301,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 257,
        column: 34,
        span: 5302..5306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 257,
        column: 44,
        span: 5307..5316,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 257,
        column: 45,
        span: 5316..5317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 257,
        column: 50,
        span: 5317..5322,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
        column: 51,
        span: 5322..5323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 257,
        column: 52,
        span: 5323..5324,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
        column: 53,
        span: 5324..5325,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 257,
        column: 0,
        span: 5326..5329,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 258,
        column: 0,
        span: 5334..5337,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 259,
        column: 6,
        span: 5340..5343,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
        column: 7,
        span: 5343..5344,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 260,
        column: 0,
        span: 5345..5348,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 262,
        column: 6,
        span: 5350..5355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 262,
        column: 8,
        span: 5356..5357,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 262,
        column: 10,
        span: 5358..5359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gen",
        ),
        line: 262,
        column: 14,
        span: 5360..5363,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
        column: 15,
        span: 5363..5364,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 262,
        column: 18,
        span: 5363..5367,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
        column: 19,
        span: 5367..5368,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 263,
        column: 6,
        span: 5369..5374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 263,
        column: 8,
        span: 5375..5376,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 263,
        column: 10,
        span: 5377..5378,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 263,
        column: 12,
        span: 5379..5380,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 263,
        column: 13,
        span: 5380..5381,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 264,
        column: 6,
        span: 5382..5387,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 264,
        column: 8,
        span: 5387..5389,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 264,
        column: 0,
        span: 5390..5392,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 265,
        column: 8,
        span: 5395..5400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 265,
        column: 10,
        span: 5401..5402,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 265,
        column: 12,
        span: 5403..5404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 265,
        column: 14,
        span: 5405..5406,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
        column: 15,
        span: 5406..5407,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
        column: 16,
        span: 5407..5408,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 266,
        column: 5,
        span: 5411..5413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 266,
        column: 7,
        span: 5414..5415,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 266,
        column: 10,
        span: 5416..5418,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 266,
        column: 14,
        span: 5419..5422,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 266,
        column: 19,
        span: 5423..5427,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 266,
        column: 25,
        span: 5428..5433,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 266,
        column: 0,
        span: 5434..5437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 267,
        column: 8,
        span: 5440..5445,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 267,
        column: 9,
        span: 5445..5446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 267,
        column: 15,
        span: 5446..5452,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 16,
        span: 5452..5453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 267,
        column: 17,
        span: 5453..5454,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 267,
        column: 18,
        span: 5454..5455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 267,
        column: 20,
        span: 5456..5457,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
        column: 21,
        span: 5457..5458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 268,
        column: 4,
        span: 5461..5462,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 268,
        column: 6,
        span: 5463..5464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "filter",
        ),
        line: 268,
        column: 13,
        span: 5465..5471,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
        column: 14,
        span: 5471..5472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 268,
        column: 15,
        span: 5472..5473,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 268,
        column: 16,
        span: 5473..5474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 268,
        column: 18,
        span: 5475..5476,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
        column: 19,
        span: 5476..5477,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 269,
        column: 0,
        span: 5478..5481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 271,
        column: 7,
        span: 5483..5489,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 271,
        column: 8,
        span: 5489..5490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 271,
        column: 13,
        span: 5490..5495,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 271,
        column: 14,
        span: 5495..5496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        line: 271,
        column: 18,
        span: 5496..5500,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 271,
        column: 19,
        span: 5500..5501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 271,
        column: 20,
        span: 5501..5502,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 271,
        column: 21,
        span: 5502..5503,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 271,
        column: 24,
        span: 5504..5506,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "25",
                    after_decimal: "",
                },
            ),
        ),
        line: 271,
        column: 27,
        span: 5506..5509,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 271,
        column: 31,
        span: 5510..5513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 271,
        column: 33,
        span: 5514..5515,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 271,
        column: 34,
        span: 5515..5516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 271,
        column: 39,
        span: 5516..5521,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 271,
        column: 40,
        span: 5521..5522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        line: 271,
        column: 44,
        span: 5522..5526,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 271,
        column: 45,
        span: 5526..5527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 271,
        column: 46,
        span: 5527..5528,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 271,
        column: 47,
        span: 5528..5529,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 271,
        column: 48,
        span: 5529..5530,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 271,
        column: 51,
        span: 5531..5533,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "97",
                    after_decimal: "",
                },
            ),
        ),
        line: 271,
        column: 54,
        span: 5533..5536,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 271,
        column: 55,
        span: 5536..5537,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 275,
        column: 9,
        span: 5564..5572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 275,
        column: 13,
        span: 5573..5576,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
        column: 15,
        span: 5577..5578,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
        column: 16,
        span: 5578..5579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 276,
        column: 9,
        span: 5582..5588,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 276,
        column: 10,
        span: 5588..5589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 276,
        column: 15,
        span: 5589..5594,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 276,
        column: 16,
        span: 5594..5595,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 276,
        column: 23,
        span: 5595..5602,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 276,
        column: 24,
        span: 5602..5603,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 276,
        column: 25,
        span: 5602..5604,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 276,
        column: 26,
        span: 5604..5605,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 276,
        column: 27,
        span: 5605..5606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 276,
        column: 38,
        span: 5606..5617,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 276,
        column: 41,
        span: 5618..5620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 276,
        column: 47,
        span: 5621..5626,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 276,
        column: 48,
        span: 5626..5627,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 276,
        column: 55,
        span: 5627..5634,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 276,
        column: 56,
        span: 5634..5635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 276,
        column: 59,
        span: 5635..5638,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 276,
        column: 60,
        span: 5638..5639,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 276,
        column: 61,
        span: 5639..5640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "linedefined",
        ),
        line: 276,
        column: 72,
        span: 5640..5651,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 276,
        column: 74,
        span: 5652..5653,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 276,
        column: 76,
        span: 5653..5655,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 276,
        column: 77,
        span: 5655..5656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 277,
        column: 9,
        span: 5659..5665,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 10,
        span: 5665..5666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 277,
        column: 15,
        span: 5666..5671,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 277,
        column: 16,
        span: 5671..5672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 277,
        column: 23,
        span: 5672..5679,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 24,
        span: 5679..5680,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 277,
        column: 25,
        span: 5679..5681,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 26,
        span: 5681..5682,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 277,
        column: 27,
        span: 5682..5683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 277,
        column: 38,
        span: 5683..5694,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 277,
        column: 41,
        span: 5695..5697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 277,
        column: 47,
        span: 5698..5703,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 277,
        column: 48,
        span: 5703..5704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 277,
        column: 55,
        span: 5704..5711,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 56,
        span: 5711..5712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "goo",
        ),
        line: 277,
        column: 59,
        span: 5712..5715,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 60,
        span: 5715..5716,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 277,
        column: 61,
        span: 5716..5717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "linedefined",
        ),
        line: 277,
        column: 72,
        span: 5717..5728,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 73,
        span: 5728..5729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 278,
        column: 12,
        span: 5732..5741,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 278,
        column: 13,
        span: 5741..5742,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 278,
        column: 18,
        span: 5742..5747,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 278,
        column: 19,
        span: 5747..5748,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 278,
        column: 20,
        span: 5747..5749,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
        column: 21,
        span: 5749..5750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 279,
        column: 8,
        span: 5753..5758,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 279,
        column: 9,
        span: 5758..5759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 279,
        column: 12,
        span: 5759..5762,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 279,
        column: 13,
        span: 5762..5763,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 280,
        column: 0,
        span: 5764..5767,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 282,
        column: 9,
        span: 5769..5777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "goo",
        ),
        line: 282,
        column: 13,
        span: 5778..5781,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 282,
        column: 14,
        span: 5781..5782,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 282,
        column: 15,
        span: 5782..5783,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 282,
        column: 19,
        span: 5784..5787,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 282,
        column: 20,
        span: 5787..5788,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 282,
        column: 21,
        span: 5788..5789,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 282,
        column: 0,
        span: 5790..5793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 283,
        column: 2,
        span: 5794..5795,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 283,
        column: 4,
        span: 5796..5797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 283,
        column: 14,
        span: 5798..5807,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 283,
        column: 15,
        span: 5807..5808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 283,
        column: 19,
        span: 5808..5812,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 283,
        column: 20,
        span: 5812..5813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "goo",
        ),
        line: 283,
        column: 23,
        span: 5813..5816,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 283,
        column: 24,
        span: 5816..5817,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 284,
        column: 7,
        span: 5818..5824,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 284,
        column: 8,
        span: 5824..5825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 284,
        column: 9,
        span: 5825..5826,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 284,
        column: 10,
        span: 5826..5827,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 284,
        column: 11,
        span: 5827..5828,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 284,
        column: 14,
        span: 5829..5831,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 284,
        column: 16,
        span: 5831..5833,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 284,
        column: 17,
        span: 5833..5834,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 285,
        column: 6,
        span: 5835..5840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 285,
        column: 8,
        span: 5841..5842,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 285,
        column: 9,
        span: 5842..5843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 285,
        column: 10,
        span: 5843..5844,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 285,
        column: 12,
        span: 5845..5846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 285,
        column: 18,
        span: 5847..5852,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 285,
        column: 19,
        span: 5852..5853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 285,
        column: 20,
        span: 5853..5854,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 285,
        column: 21,
        span: 5854..5855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 286,
        column: 7,
        span: 5856..5862,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 286,
        column: 8,
        span: 5862..5863,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 286,
        column: 11,
        span: 5863..5866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 286,
        column: 13,
        span: 5867..5868,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 286,
        column: 17,
        span: 5869..5872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 286,
        column: 19,
        span: 5873..5874,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 286,
        column: 22,
        span: 5875..5877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 286,
        column: 26,
        span: 5878..5881,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 286,
        column: 27,
        span: 5881..5882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 288,
        column: 2,
        span: 5884..5885,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 288,
        column: 4,
        span: 5886..5887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 288,
        column: 14,
        span: 5888..5897,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 288,
        column: 15,
        span: 5897..5898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 288,
        column: 21,
        span: 5898..5904,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 288,
        column: 22,
        span: 5904..5905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "goo",
        ),
        line: 288,
        column: 25,
        span: 5905..5908,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 288,
        column: 26,
        span: 5908..5909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 289,
        column: 2,
        span: 5910..5911,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 289,
        column: 3,
        span: 5911..5912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 289,
        column: 4,
        span: 5912..5913,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 289,
        column: 6,
        span: 5914..5915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 289,
        column: 16,
        span: 5916..5925,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 289,
        column: 17,
        span: 5925..5926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 289,
        column: 23,
        span: 5926..5932,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 289,
        column: 24,
        span: 5932..5933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 289,
        column: 25,
        span: 5933..5934,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 289,
        column: 26,
        span: 5934..5935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 290,
        column: 7,
        span: 5936..5942,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 290,
        column: 8,
        span: 5942..5943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 290,
        column: 9,
        span: 5943..5944,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 290,
        column: 13,
        span: 5945..5948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 290,
        column: 15,
        span: 5949..5950,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 290,
        column: 18,
        span: 5951..5953,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 290,
        column: 20,
        span: 5953..5955,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 290,
        column: 21,
        span: 5955..5956,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 291,
        column: 2,
        span: 5957..5958,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 291,
        column: 3,
        span: 5958..5959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 291,
        column: 4,
        span: 5959..5960,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 291,
        column: 6,
        span: 5961..5962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 291,
        column: 16,
        span: 5963..5972,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 291,
        column: 17,
        span: 5972..5973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 291,
        column: 23,
        span: 5973..5979,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 291,
        column: 24,
        span: 5979..5980,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 291,
        column: 25,
        span: 5980..5981,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 291,
        column: 26,
        span: 5981..5982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 292,
        column: 7,
        span: 5983..5989,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 292,
        column: 8,
        span: 5989..5990,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 292,
        column: 11,
        span: 5990..5993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 292,
        column: 13,
        span: 5994..5995,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 292,
        column: 17,
        span: 5996..5999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 292,
        column: 19,
        span: 6000..6001,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 292,
        column: 22,
        span: 6002..6004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 292,
        column: 26,
        span: 6005..6008,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 292,
        column: 30,
        span: 6009..6012,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 292,
        column: 40,
        span: 6013..6022,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 292,
        column: 41,
        span: 6022..6023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "status",
        ),
        line: 292,
        column: 47,
        span: 6023..6029,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 292,
        column: 48,
        span: 6029..6030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 292,
        column: 49,
        span: 6030..6031,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 292,
        column: 50,
        span: 6031..6032,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 292,
        column: 53,
        span: 6033..6035,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"dead\"",
        ),
        line: 292,
        column: 60,
        span: 6036..6042,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 292,
        column: 61,
        span: 6042..6043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 293,
        column: 2,
        span: 6044..6045,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 293,
        column: 3,
        span: 6045..6046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 293,
        column: 4,
        span: 6046..6047,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 293,
        column: 6,
        span: 6048..6049,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 293,
        column: 16,
        span: 6050..6059,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 293,
        column: 17,
        span: 6059..6060,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 293,
        column: 23,
        span: 6060..6066,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 293,
        column: 24,
        span: 6066..6067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 293,
        column: 25,
        span: 6067..6068,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 293,
        column: 26,
        span: 6068..6069,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 294,
        column: 7,
        span: 6070..6076,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 294,
        column: 8,
        span: 6076..6077,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 294,
        column: 11,
        span: 6077..6080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 294,
        column: 13,
        span: 6081..6082,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 294,
        column: 17,
        span: 6083..6086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 294,
        column: 24,
        span: 6087..6093,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 294,
        column: 25,
        span: 6093..6094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 294,
        column: 29,
        span: 6094..6098,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 294,
        column: 30,
        span: 6098..6099,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 294,
        column: 31,
        span: 6099..6100,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 294,
        column: 32,
        span: 6100..6101,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"dead\"",
        ),
        line: 294,
        column: 39,
        span: 6102..6108,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 294,
        column: 40,
        span: 6108..6109,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 294,
        column: 44,
        span: 6110..6113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 294,
        column: 54,
        span: 6114..6123,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 294,
        column: 55,
        span: 6123..6124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "status",
        ),
        line: 294,
        column: 61,
        span: 6124..6130,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 294,
        column: 62,
        span: 6130..6131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 294,
        column: 63,
        span: 6131..6132,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 294,
        column: 64,
        span: 6132..6133,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 294,
        column: 67,
        span: 6134..6136,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"dead\"",
        ),
        line: 294,
        column: 74,
        span: 6137..6143,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 294,
        column: 75,
        span: 6143..6144,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 298,
        column: 9,
        span: 6173..6181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "all",
        ),
        line: 298,
        column: 13,
        span: 6182..6185,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 15,
        span: 6186..6187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 298,
        column: 16,
        span: 6187..6188,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 298,
        column: 17,
        span: 6188..6189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 298,
        column: 19,
        span: 6190..6191,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 298,
        column: 20,
        span: 6191..6192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 298,
        column: 22,
        span: 6193..6194,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 23,
        span: 6194..6195,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 299,
        column: 5,
        span: 6198..6200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 299,
        column: 7,
        span: 6201..6202,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 299,
        column: 10,
        span: 6203..6205,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 299,
        column: 12,
        span: 6205..6207,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 299,
        column: 17,
        span: 6208..6212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 299,
        column: 27,
        span: 6213..6222,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 299,
        column: 28,
        span: 6222..6223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 299,
        column: 33,
        span: 6223..6228,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
        column: 34,
        span: 6228..6229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 299,
        column: 35,
        span: 6229..6230,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
        column: 36,
        span: 6230..6231,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 300,
        column: 0,
        span: 6234..6238,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 301,
        column: 8,
        span: 6243..6246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 301,
        column: 10,
        span: 6247..6248,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 301,
        column: 11,
        span: 6248..6249,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 301,
        column: 12,
        span: 6248..6250,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 301,
        column: 13,
        span: 6250..6251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 301,
        column: 14,
        span: 6251..6252,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 301,
        column: 0,
        span: 6253..6255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 302,
        column: 8,
        span: 6262..6263,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 302,
        column: 9,
        span: 6263..6264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 302,
        column: 10,
        span: 6264..6265,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 302,
        column: 11,
        span: 6265..6266,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 302,
        column: 13,
        span: 6267..6268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 302,
        column: 0,
        span: 6269..6270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "all",
        ),
        line: 303,
        column: 10,
        span: 6277..6280,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 303,
        column: 11,
        span: 6280..6281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 303,
        column: 12,
        span: 6281..6282,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 303,
        column: 13,
        span: 6282..6283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 303,
        column: 15,
        span: 6284..6285,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 303,
        column: 16,
        span: 6285..6286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 303,
        column: 18,
        span: 6287..6288,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 303,
        column: 19,
        span: 6288..6289,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 303,
        column: 20,
        span: 6288..6290,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 303,
        column: 21,
        span: 6290..6291,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 304,
        column: 0,
        span: 6296..6299,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 305,
        column: 0,
        span: 6302..6305,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 306,
        column: 0,
        span: 6306..6309,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 308,
        column: 6,
        span: 6311..6316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 308,
        column: 8,
        span: 6317..6318,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 308,
        column: 10,
        span: 6319..6320,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 308,
        column: 0,
        span: 6320..6322,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 309,
        column: 4,
        span: 6323..6326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 309,
        column: 6,
        span: 6327..6328,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 309,
        column: 9,
        span: 6329..6331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 309,
        column: 19,
        span: 6332..6341,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 309,
        column: 20,
        span: 6341..6342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 309,
        column: 24,
        span: 6342..6346,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 309,
        column: 25,
        span: 6346..6347,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 309,
        column: 33,
        span: 6347..6355,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 309,
        column: 35,
        span: 6356..6357,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 309,
        column: 36,
        span: 6357..6358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "all",
        ),
        line: 309,
        column: 40,
        span: 6359..6362,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 309,
        column: 41,
        span: 6362..6363,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 309,
        column: 42,
        span: 6363..6364,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 309,
        column: 43,
        span: 6364..6365,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 309,
        column: 44,
        span: 6365..6366,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 309,
        column: 46,
        span: 6366..6368,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 309,
        column: 47,
        span: 6368..6369,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 309,
        column: 49,
        span: 6369..6371,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 309,
        column: 50,
        span: 6371..6372,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 309,
        column: 54,
        span: 6373..6376,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 309,
        column: 55,
        span: 6376..6377,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 309,
        column: 0,
        span: 6378..6380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 310,
        column: 4,
        span: 6383..6384,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 310,
        column: 6,
        span: 6385..6386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 310,
        column: 8,
        span: 6387..6388,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 310,
        column: 9,
        span: 6388..6389,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 310,
        column: 0,
        span: 6388..6390,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 311,
        column: 0,
        span: 6391..6394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 312,
        column: 7,
        span: 6395..6401,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 312,
        column: 8,
        span: 6401..6402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 312,
        column: 9,
        span: 6402..6403,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 312,
        column: 12,
        span: 6404..6406,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 312,
        column: 14,
        span: 6406..6408,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 312,
        column: 15,
        span: 6408..6409,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 312,
        column: 16,
        span: 6408..6410,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 312,
        column: 17,
        span: 6410..6411,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 316,
        column: 6,
        span: 6459..6464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 316,
        column: 8,
        span: 6465..6466,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 316,
        column: 10,
        span: 6467..6468,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 316,
        column: 12,
        span: 6469..6470,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 316,
        column: 13,
        span: 6470..6471,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 316,
        column: 14,
        span: 6471..6472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 316,
        column: 27,
        span: 6473..6485,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 316,
        column: 28,
        span: 6485..6486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 316,
        column: 29,
        span: 6486..6487,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 316,
        column: 30,
        span: 6487..6488,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 316,
        column: 32,
        span: 6489..6490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        line: 316,
        column: 38,
        span: 6490..6496,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 316,
        column: 40,
        span: 6497..6498,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"kv\"",
        ),
        line: 316,
        column: 45,
        span: 6499..6503,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 316,
        column: 46,
        span: 6503..6504,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 316,
        column: 47,
        span: 6504..6505,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 317,
        column: 6,
        span: 6506..6511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 317,
        column: 8,
        span: 6512..6513,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 317,
        column: 10,
        span: 6514..6515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 317,
        column: 20,
        span: 6516..6525,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 317,
        column: 21,
        span: 6525..6526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 317,
        column: 25,
        span: 6526..6530,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
        column: 27,
        span: 6531..6532,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 317,
        column: 35,
        span: 6532..6540,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
        column: 37,
        span: 6541..6542,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 317,
        column: 38,
        span: 6542..6543,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 318,
        column: 18,
        span: 6556..6561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 318,
        column: 20,
        span: 6562..6563,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 318,
        column: 22,
        span: 6564..6565,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 318,
        column: 0,
        span: 6565..6568,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 319,
        column: 18,
        span: 6581..6586,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 319,
        column: 27,
        span: 6587..6595,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 319,
        column: 29,
        span: 6596..6597,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 319,
        column: 31,
        span: 6598..6599,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 319,
        column: 32,
        span: 6599..6600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 319,
        column: 34,
        span: 6601..6602,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 319,
        column: 36,
        span: 6603..6604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 319,
        column: 38,
        span: 6605..6606,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 319,
        column: 39,
        span: 6606..6607,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 319,
        column: 41,
        span: 6606..6609,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 319,
        column: 42,
        span: 6609..6610,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 319,
        column: 49,
        span: 6611..6617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 319,
        column: 51,
        span: 6618..6619,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 319,
        column: 0,
        span: 6620..6623,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 320,
        column: 18,
        span: 6636..6641,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 320,
        column: 23,
        span: 6642..6646,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 320,
        column: 0,
        span: 6647..6649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 321,
        column: 16,
        span: 6664..6665,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 321,
        column: 18,
        span: 6666..6667,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 321,
        column: 20,
        span: 6668..6669,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 321,
        column: 21,
        span: 6669..6670,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 321,
        column: 0,
        span: 6669..6671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 322,
        column: 24,
        span: 6686..6695,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 322,
        column: 25,
        span: 6695..6696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 322,
        column: 30,
        span: 6696..6701,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 322,
        column: 31,
        span: 6701..6702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 322,
        column: 32,
        span: 6702..6703,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 322,
        column: 33,
        span: 6703..6704,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 323,
        column: 0,
        span: 6717..6720,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 324,
        column: 14,
        span: 6731..6734,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 324,
        column: 15,
        span: 6734..6735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 326,
        column: 2,
        span: 6737..6738,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 326,
        column: 3,
        span: 6738..6739,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 326,
        column: 4,
        span: 6738..6740,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 326,
        column: 5,
        span: 6740..6741,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 326,
        column: 7,
        span: 6742..6743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 326,
        column: 9,
        span: 6744..6745,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 326,
        column: 10,
        span: 6745..6746,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 328,
        column: 6,
        span: 6748..6753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 328,
        column: 8,
        span: 6754..6755,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 328,
        column: 10,
        span: 6756..6757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 328,
        column: 12,
        span: 6758..6759,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 328,
        column: 13,
        span: 6759..6760,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 328,
        column: 14,
        span: 6760..6761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 329,
        column: 7,
        span: 6762..6768,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 329,
        column: 8,
        span: 6768..6769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 329,
        column: 9,
        span: 6769..6770,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 329,
        column: 10,
        span: 6770..6771,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 329,
        column: 11,
        span: 6771..6772,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 329,
        column: 14,
        span: 6773..6775,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "21",
                    after_decimal: "",
                },
            ),
        ),
        line: 329,
        column: 17,
        span: 6775..6778,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 329,
        column: 21,
        span: 6779..6782,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 329,
        column: 23,
        span: 6783..6784,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 329,
        column: 24,
        span: 6784..6785,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 329,
        column: 25,
        span: 6785..6786,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 329,
        column: 26,
        span: 6786..6787,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 329,
        column: 27,
        span: 6787..6788,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 329,
        column: 30,
        span: 6789..6791,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 329,
        column: 33,
        span: 6791..6794,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 329,
        column: 37,
        span: 6795..6798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 329,
        column: 39,
        span: 6799..6800,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 329,
        column: 40,
        span: 6800..6801,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 329,
        column: 41,
        span: 6801..6802,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 329,
        column: 44,
        span: 6803..6805,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 329,
        column: 46,
        span: 6806..6807,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 329,
        column: 47,
        span: 6807..6808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 330,
        column: 2,
        span: 6809..6810,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 330,
        column: 4,
        span: 6811..6812,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 330,
        column: 0,
        span: 6813..6816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 331,
        column: 15,
        span: 6817..6831,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 331,
        column: 16,
        span: 6831..6832,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 331,
        column: 17,
        span: 6832..6833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 332,
        column: 7,
        span: 6834..6840,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 332,
        column: 8,
        span: 6840..6841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 332,
        column: 9,
        span: 6841..6842,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 332,
        column: 10,
        span: 6842..6843,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 332,
        column: 11,
        span: 6842..6844,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 332,
        column: 12,
        span: 6844..6845,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 332,
        column: 15,
        span: 6846..6848,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 332,
        column: 19,
        span: 6849..6852,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 332,
        column: 20,
        span: 6852..6853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 333,
        column: 7,
        span: 6854..6860,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 333,
        column: 8,
        span: 6860..6861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 333,
        column: 9,
        span: 6861..6862,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 333,
        column: 10,
        span: 6862..6863,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 333,
        column: 11,
        span: 6863..6864,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 333,
        column: 14,
        span: 6865..6867,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "43",
                    after_decimal: "",
                },
            ),
        ),
        line: 333,
        column: 17,
        span: 6867..6870,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 333,
        column: 21,
        span: 6871..6874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 333,
        column: 23,
        span: 6875..6876,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 333,
        column: 24,
        span: 6876..6877,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 333,
        column: 25,
        span: 6877..6878,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 333,
        column: 28,
        span: 6879..6881,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "53",
                    after_decimal: "",
                },
            ),
        ),
        line: 333,
        column: 31,
        span: 6881..6884,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 333,
        column: 32,
        span: 6884..6885,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 338,
        column: 9,
        span: 6926..6934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co_func",
        ),
        line: 338,
        column: 17,
        span: 6935..6942,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 338,
        column: 19,
        span: 6943..6944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "current_co",
        ),
        line: 338,
        column: 29,
        span: 6944..6954,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 338,
        column: 30,
        span: 6954..6955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 339,
        column: 9,
        span: 6958..6964,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 339,
        column: 10,
        span: 6964..6965,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 339,
        column: 19,
        span: 6965..6974,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 339,
        column: 20,
        span: 6974..6975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "running",
        ),
        line: 339,
        column: 27,
        span: 6975..6982,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 339,
        column: 28,
        span: 6982..6983,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 339,
        column: 29,
        span: 6983..6984,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 339,
        column: 32,
        span: 6985..6987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "current_co",
        ),
        line: 339,
        column: 43,
        span: 6988..6998,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 339,
        column: 44,
        span: 6998..6999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 340,
        column: 9,
        span: 7002..7008,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 340,
        column: 10,
        span: 7008..7009,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 340,
        column: 19,
        span: 7009..7018,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 340,
        column: 20,
        span: 7018..7019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 340,
        column: 26,
        span: 7019..7025,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 340,
        column: 27,
        span: 7025..7026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "current_co",
        ),
        line: 340,
        column: 37,
        span: 7026..7036,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 340,
        column: 38,
        span: 7036..7037,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 340,
        column: 41,
        span: 7038..7040,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 340,
        column: 47,
        span: 7041..7046,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 340,
        column: 48,
        span: 7046..7047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 341,
        column: 9,
        span: 7050..7056,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 341,
        column: 10,
        span: 7056..7057,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 341,
        column: 19,
        span: 7057..7066,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 341,
        column: 20,
        span: 7066..7067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 341,
        column: 26,
        span: 7067..7073,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 341,
        column: 27,
        span: 7073..7074,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "current_co",
        ),
        line: 341,
        column: 37,
        span: 7074..7084,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 341,
        column: 38,
        span: 7084..7085,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 341,
        column: 41,
        span: 7086..7088,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 341,
        column: 47,
        span: 7089..7094,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 341,
        column: 48,
        span: 7094..7095,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 342,
        column: 9,
        span: 7098..7104,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 342,
        column: 0,
        span: 7104..7107,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 343,
        column: 0,
        span: 7108..7111,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 345,
        column: 6,
        span: 7113..7118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 345,
        column: 9,
        span: 7119..7121,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 345,
        column: 11,
        span: 7122..7123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 345,
        column: 21,
        span: 7124..7133,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 345,
        column: 22,
        span: 7133..7134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 345,
        column: 28,
        span: 7134..7140,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 345,
        column: 29,
        span: 7140..7141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co_func",
        ),
        line: 345,
        column: 36,
        span: 7141..7148,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 345,
        column: 37,
        span: 7148..7149,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 346,
        column: 6,
        span: 7150..7155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 346,
        column: 8,
        span: 7156..7157,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 346,
        column: 9,
        span: 7157..7158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 346,
        column: 10,
        span: 7158..7159,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 346,
        column: 12,
        span: 7160..7161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 346,
        column: 22,
        span: 7162..7171,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 346,
        column: 23,
        span: 7171..7172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 346,
        column: 29,
        span: 7172..7178,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 346,
        column: 30,
        span: 7178..7179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 346,
        column: 32,
        span: 7179..7181,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 346,
        column: 33,
        span: 7181..7182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 346,
        column: 36,
        span: 7183..7185,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 346,
        column: 37,
        span: 7185..7186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 347,
        column: 7,
        span: 7187..7193,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 347,
        column: 8,
        span: 7193..7194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 347,
        column: 9,
        span: 7194..7195,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 347,
        column: 12,
        span: 7196..7198,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 347,
        column: 17,
        span: 7199..7203,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 347,
        column: 21,
        span: 7204..7207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 347,
        column: 23,
        span: 7208..7209,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 347,
        column: 26,
        span: 7210..7212,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 347,
        column: 29,
        span: 7212..7215,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 347,
        column: 30,
        span: 7215..7216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 348,
        column: 7,
        span: 7217..7223,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 348,
        column: 8,
        span: 7223..7224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 348,
        column: 17,
        span: 7224..7233,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 348,
        column: 18,
        span: 7233..7234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 348,
        column: 24,
        span: 7234..7240,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 348,
        column: 25,
        span: 7240..7241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 348,
        column: 27,
        span: 7241..7243,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 348,
        column: 28,
        span: 7243..7244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 348,
        column: 31,
        span: 7245..7247,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 348,
        column: 32,
        span: 7247..7248,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 348,
        column: 35,
        span: 7249..7251,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 348,
        column: 41,
        span: 7252..7257,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 348,
        column: 42,
        span: 7257..7258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 349,
        column: 7,
        span: 7259..7265,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 349,
        column: 8,
        span: 7265..7266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 349,
        column: 17,
        span: 7266..7275,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 349,
        column: 18,
        span: 7275..7276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 349,
        column: 24,
        span: 7276..7282,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 349,
        column: 25,
        span: 7282..7283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 349,
        column: 27,
        span: 7283..7285,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 349,
        column: 28,
        span: 7285..7286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 349,
        column: 31,
        span: 7287..7289,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 349,
        column: 32,
        span: 7289..7290,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 349,
        column: 35,
        span: 7291..7293,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 349,
        column: 41,
        span: 7294..7299,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 349,
        column: 42,
        span: 7299..7300,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 352,
        column: 6,
        span: 7346..7351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 352,
        column: 8,
        span: 7352..7353,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 352,
        column: 10,
        span: 7354..7355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 352,
        column: 20,
        span: 7356..7365,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 352,
        column: 21,
        span: 7365..7366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 352,
        column: 27,
        span: 7366..7372,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 352,
        column: 29,
        span: 7373..7374,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 352,
        column: 37,
        span: 7374..7382,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 352,
        column: 39,
        span: 7383..7384,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 352,
        column: 40,
        span: 7384..7385,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 353,
        column: 18,
        span: 7398..7403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 353,
        column: 20,
        span: 7404..7405,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 353,
        column: 22,
        span: 7406..7407,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 353,
        column: 0,
        span: 7407..7410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 354,
        column: 15,
        span: 7423..7425,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 354,
        column: 16,
        span: 7425..7426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 354,
        column: 17,
        span: 7426..7427,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 354,
        column: 19,
        span: 7428..7429,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 354,
        column: 28,
        span: 7430..7438,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 354,
        column: 30,
        span: 7439..7440,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 354,
        column: 31,
        span: 7440..7441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 354,
        column: 33,
        span: 7442..7443,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 354,
        column: 34,
        span: 7443..7444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 354,
        column: 35,
        span: 7444..7445,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 354,
        column: 36,
        span: 7445..7446,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 354,
        column: 37,
        span: 7445..7447,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 354,
        column: 38,
        span: 7447..7448,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 354,
        column: 45,
        span: 7449..7455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 354,
        column: 47,
        span: 7456..7457,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 354,
        column: 0,
        span: 7458..7461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 355,
        column: 18,
        span: 7474..7479,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 355,
        column: 19,
        span: 7479..7480,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 355,
        column: 22,
        span: 7480..7483,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 355,
        column: 23,
        span: 7483..7484,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 356,
        column: 14,
        span: 7495..7498,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
        column: 15,
        span: 7498..7499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 358,
        column: 7,
        span: 7501..7507,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 358,
        column: 8,
        span: 7507..7508,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 358,
        column: 11,
        span: 7508..7511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 358,
        column: 21,
        span: 7512..7521,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 358,
        column: 22,
        span: 7521..7522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 358,
        column: 28,
        span: 7522..7528,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 358,
        column: 29,
        span: 7528..7529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 358,
        column: 30,
        span: 7529..7530,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 358,
        column: 31,
        span: 7530..7531,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 358,
        column: 32,
        span: 7531..7532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 360,
        column: 7,
        span: 7577..7583,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
        column: 8,
        span: 7583..7584,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 360,
        column: 11,
        span: 7584..7587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 360,
        column: 21,
        span: 7588..7597,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 360,
        column: 22,
        span: 7597..7598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 360,
        column: 28,
        span: 7598..7604,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
        column: 29,
        span: 7604..7605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 360,
        column: 30,
        span: 7605..7606,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 360,
        column: 31,
        span: 7606..7607,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 360,
        column: 33,
        span: 7607..7609,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 360,
        column: 34,
        span: 7609..7610,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 360,
        column: 36,
        span: 7610..7612,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 360,
        column: 37,
        span: 7612..7613,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 360,
        column: 39,
        span: 7613..7615,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 360,
        column: 40,
        span: 7615..7616,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 360,
        column: 42,
        span: 7616..7618,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 360,
        column: 43,
        span: 7618..7619,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 360,
        column: 45,
        span: 7619..7621,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 360,
        column: 46,
        span: 7621..7622,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 360,
        column: 48,
        span: 7622..7624,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 360,
        column: 49,
        span: 7624..7625,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 360,
        column: 51,
        span: 7625..7627,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
        column: 52,
        span: 7627..7628,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
        column: 53,
        span: 7628..7629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 361,
        column: 7,
        span: 7630..7636,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 361,
        column: 8,
        span: 7636..7637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 361,
        column: 10,
        span: 7637..7639,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 361,
        column: 11,
        span: 7639..7640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 361,
        column: 12,
        span: 7640..7641,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 361,
        column: 13,
        span: 7641..7642,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 361,
        column: 14,
        span: 7642..7643,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 361,
        column: 17,
        span: 7644..7646,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 361,
        column: 20,
        span: 7646..7649,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 361,
        column: 21,
        span: 7649..7650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 362,
        column: 7,
        span: 7651..7657,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 362,
        column: 8,
        span: 7657..7658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 362,
        column: 10,
        span: 7658..7660,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 362,
        column: 11,
        span: 7660..7661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 362,
        column: 12,
        span: 7661..7662,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 362,
        column: 13,
        span: 7662..7663,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 362,
        column: 14,
        span: 7663..7664,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 362,
        column: 17,
        span: 7665..7667,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 362,
        column: 20,
        span: 7667..7670,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 362,
        column: 21,
        span: 7670..7671,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 365,
        column: 3,
        span: 7674..7676,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 365,
        column: 7,
        span: 7677..7680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 365,
        column: 9,
        span: 7681..7682,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 365,
        column: 0,
        span: 7683..7687,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 366,
        column: 4,
        span: 7690..7691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        line: 366,
        column: 11,
        span: 7691..7698,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 366,
        column: 14,
        span: 7699..7701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 366,
        column: 20,
        span: 7702..7707,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 366,
        column: 21,
        span: 7707..7708,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 366,
        column: 22,
        span: 7708..7709,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\a\\n >>> testC not active: skipping yield/hook tests <<<\\n\\a'",
        ),
        line: 366,
        column: 84,
        span: 7709..7771,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 366,
        column: 85,
        span: 7771..7772,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 367,
        column: 0,
        span: 7773..7777,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 369,
        column: 8,
        span: 7781..7786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "turn",
        ),
        line: 369,
        column: 0,
        span: 7787..7791,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 371,
        column: 11,
        span: 7797..7805,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fact",
        ),
        line: 371,
        column: 16,
        span: 7806..7810,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 371,
        column: 18,
        span: 7811..7812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 371,
        column: 19,
        span: 7812..7813,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 371,
        column: 20,
        span: 7813..7814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 371,
        column: 22,
        span: 7815..7816,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 371,
        column: 23,
        span: 7816..7817,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 372,
        column: 11,
        span: 7822..7828,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 372,
        column: 12,
        span: 7828..7829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "turn",
        ),
        line: 372,
        column: 16,
        span: 7829..7833,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 372,
        column: 19,
        span: 7834..7836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 372,
        column: 21,
        span: 7837..7838,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 372,
        column: 22,
        span: 7838..7839,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 373,
        column: 7,
        span: 7844..7846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 373,
        column: 9,
        span: 7847..7848,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 373,
        column: 12,
        span: 7849..7851,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 373,
        column: 14,
        span: 7851..7853,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 373,
        column: 19,
        span: 7854..7858,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 373,
        column: 26,
        span: 7859..7865,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 373,
        column: 0,
        span: 7865..7867,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 374,
        column: 9,
        span: 7872..7876,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 374,
        column: 16,
        span: 7877..7883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 374,
        column: 18,
        span: 7884..7885,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 374,
        column: 19,
        span: 7885..7886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fact",
        ),
        line: 374,
        column: 23,
        span: 7886..7890,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 374,
        column: 24,
        span: 7890..7891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 374,
        column: 25,
        span: 7891..7892,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 374,
        column: 26,
        span: 7892..7893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 374,
        column: 28,
        span: 7894..7895,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 374,
        column: 29,
        span: 7895..7896,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 374,
        column: 30,
        span: 7895..7897,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 374,
        column: 31,
        span: 7897..7898,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 375,
        column: 0,
        span: 7903..7906,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 376,
        column: 0,
        span: 7909..7912,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 378,
        column: 8,
        span: 7916..7921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 378,
        column: 10,
        span: 7922..7923,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 378,
        column: 11,
        span: 7923..7924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 378,
        column: 12,
        span: 7924..7925,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 378,
        column: 13,
        span: 7925..7926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 378,
        column: 14,
        span: 7926..7927,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 378,
        column: 15,
        span: 7927..7928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 378,
        column: 16,
        span: 7928..7929,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 378,
        column: 18,
        span: 7930..7931,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 378,
        column: 20,
        span: 7931..7933,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 378,
        column: 21,
        span: 7933..7934,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 378,
        column: 22,
        span: 7933..7935,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 378,
        column: 23,
        span: 7935..7936,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 378,
        column: 24,
        span: 7935..7937,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 378,
        column: 25,
        span: 7937..7938,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 378,
        column: 0,
        span: 7937..7939,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 380,
        column: 8,
        span: 7943..7948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 380,
        column: 10,
        span: 7949..7950,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 380,
        column: 12,
        span: 7951..7952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 380,
        column: 22,
        span: 7953..7962,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 380,
        column: 23,
        span: 7962..7963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 380,
        column: 29,
        span: 7963..7969,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 380,
        column: 30,
        span: 7969..7970,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 380,
        column: 38,
        span: 7970..7978,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 380,
        column: 40,
        span: 7979..7980,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 380,
        column: 41,
        span: 7980..7981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 381,
        column: 6,
        span: 7986..7987,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 381,
        column: 7,
        span: 7987..7988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setyhook",
        ),
        line: 381,
        column: 15,
        span: 7988..7996,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 381,
        column: 16,
        span: 7996..7997,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 381,
        column: 18,
        span: 7997..7999,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 381,
        column: 19,
        span: 7999..8000,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 381,
        column: 21,
        span: 8000..8002,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 381,
        column: 22,
        span: 8002..8003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 382,
        column: 6,
        span: 8008..8009,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 382,
        column: 8,
        span: 8010..8011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fact",
        ),
        line: 382,
        column: 13,
        span: 8012..8016,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 382,
        column: 14,
        span: 8016..8017,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A\"",
        ),
        line: 382,
        column: 17,
        span: 8017..8020,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 382,
        column: 18,
        span: 8020..8021,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 382,
        column: 21,
        span: 8021..8024,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 382,
        column: 22,
        span: 8024..8025,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 383,
        column: 6,
        span: 8028..8031,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 383,
        column: 7,
        span: 8031..8032,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 385,
        column: 8,
        span: 8036..8041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 385,
        column: 10,
        span: 8042..8043,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 385,
        column: 12,
        span: 8044..8045,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 385,
        column: 22,
        span: 8046..8055,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 385,
        column: 23,
        span: 8055..8056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 385,
        column: 29,
        span: 8056..8062,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 385,
        column: 30,
        span: 8062..8063,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 385,
        column: 38,
        span: 8063..8071,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 385,
        column: 40,
        span: 8072..8073,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 385,
        column: 41,
        span: 8073..8074,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 386,
        column: 6,
        span: 8079..8080,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 386,
        column: 7,
        span: 8080..8081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setyhook",
        ),
        line: 386,
        column: 15,
        span: 8081..8089,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 386,
        column: 16,
        span: 8089..8090,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 386,
        column: 18,
        span: 8090..8092,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 386,
        column: 19,
        span: 8092..8093,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 386,
        column: 21,
        span: 8093..8095,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 386,
        column: 22,
        span: 8095..8096,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 387,
        column: 6,
        span: 8101..8102,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 387,
        column: 8,
        span: 8103..8104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fact",
        ),
        line: 387,
        column: 13,
        span: 8105..8109,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 387,
        column: 14,
        span: 8109..8110,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"B\"",
        ),
        line: 387,
        column: 17,
        span: 8110..8113,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 387,
        column: 18,
        span: 8113..8114,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 387,
        column: 21,
        span: 8114..8117,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 387,
        column: 22,
        span: 8117..8118,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 388,
        column: 6,
        span: 8121..8124,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 388,
        column: 7,
        span: 8124..8125,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 390,
        column: 8,
        span: 8129..8134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 390,
        column: 10,
        span: 8135..8136,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 390,
        column: 12,
        span: 8136..8138,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 390,
        column: 13,
        span: 8137..8139,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 390,
        column: 16,
        span: 8140..8142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 390,
        column: 18,
        span: 8143..8144,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 390,
        column: 20,
        span: 8144..8146,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 390,
        column: 21,
        span: 8145..8147,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 390,
        column: 0,
        span: 8148..8150,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 391,
        column: 7,
        span: 8155..8157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 391,
        column: 9,
        span: 8158..8159,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 391,
        column: 11,
        span: 8159..8161,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 391,
        column: 12,
        span: 8160..8162,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 391,
        column: 17,
        span: 8163..8167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "turn",
        ),
        line: 391,
        column: 22,
        span: 8168..8172,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 391,
        column: 24,
        span: 8173..8174,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A\"",
        ),
        line: 391,
        column: 28,
        span: 8175..8178,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 391,
        column: 29,
        span: 8178..8179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 391,
        column: 31,
        span: 8180..8181,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 391,
        column: 32,
        span: 8181..8182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 391,
        column: 38,
        span: 8182..8188,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 391,
        column: 39,
        span: 8188..8189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 391,
        column: 40,
        span: 8189..8190,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 391,
        column: 41,
        span: 8190..8191,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 391,
        column: 0,
        span: 8192..8195,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 392,
        column: 7,
        span: 8200..8202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 392,
        column: 9,
        span: 8203..8204,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 392,
        column: 11,
        span: 8204..8206,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 392,
        column: 12,
        span: 8205..8207,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 392,
        column: 17,
        span: 8208..8212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "turn",
        ),
        line: 392,
        column: 22,
        span: 8213..8217,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 392,
        column: 24,
        span: 8218..8219,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"B\"",
        ),
        line: 392,
        column: 28,
        span: 8220..8223,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 392,
        column: 29,
        span: 8223..8224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 392,
        column: 31,
        span: 8225..8226,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 392,
        column: 32,
        span: 8226..8227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 392,
        column: 38,
        span: 8227..8233,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 392,
        column: 39,
        span: 8233..8234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 392,
        column: 40,
        span: 8234..8235,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 392,
        column: 41,
        span: 8235..8236,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 392,
        column: 0,
        span: 8237..8240,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 393,
        column: 0,
        span: 8243..8246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 395,
        column: 9,
        span: 8250..8256,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 395,
        column: 10,
        span: 8256..8257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 395,
        column: 11,
        span: 8257..8258,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 395,
        column: 12,
        span: 8258..8259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 395,
        column: 13,
        span: 8259..8260,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 395,
        column: 16,
        span: 8261..8263,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 395,
        column: 19,
        span: 8263..8266,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 395,
        column: 20,
        span: 8266..8267,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 396,
        column: 0,
        span: 8268..8271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_X",
        ),
        line: 400,
        column: 3,
        span: 8310..8312,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 400,
        column: 5,
        span: 8313..8314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 400,
        column: 15,
        span: 8315..8324,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 400,
        column: 16,
        span: 8324..8325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 400,
        column: 20,
        span: 8325..8329,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 400,
        column: 21,
        span: 8329..8330,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 400,
        column: 29,
        span: 8330..8338,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 400,
        column: 31,
        span: 8339..8340,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 400,
        column: 32,
        span: 8340..8341,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 401,
        column: 12,
        span: 8348..8353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 401,
        column: 14,
        span: 8354..8355,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 401,
        column: 16,
        span: 8356..8357,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 401,
        column: 0,
        span: 8357..8360,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 402,
        column: 12,
        span: 8367..8372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 402,
        column: 14,
        span: 8373..8374,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 402,
        column: 16,
        span: 8375..8376,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 402,
        column: 25,
        span: 8377..8385,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 402,
        column: 27,
        span: 8386..8387,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 402,
        column: 28,
        span: 8387..8388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 402,
        column: 30,
        span: 8389..8390,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 402,
        column: 32,
        span: 8391..8392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 402,
        column: 34,
        span: 8393..8394,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 402,
        column: 35,
        span: 8394..8395,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 402,
        column: 36,
        span: 8394..8396,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 402,
        column: 0,
        span: 8397..8400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 403,
        column: 16,
        span: 8407..8416,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 403,
        column: 17,
        span: 8416..8417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 403,
        column: 22,
        span: 8417..8422,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 403,
        column: 23,
        span: 8422..8423,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 403,
        column: 24,
        span: 8423..8424,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 404,
        column: 8,
        span: 8429..8432,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 404,
        column: 9,
        span: 8432..8433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_X",
        ),
        line: 406,
        column: 3,
        span: 8435..8437,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 406,
        column: 4,
        span: 8437..8438,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 406,
        column: 5,
        span: 8438..8439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 410,
        column: 3,
        span: 8468..8470,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 410,
        column: 5,
        span: 8471..8472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 410,
        column: 15,
        span: 8473..8482,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 410,
        column: 16,
        span: 8482..8483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 410,
        column: 22,
        span: 8483..8489,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
        column: 23,
        span: 8489..8490,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 410,
        column: 31,
        span: 8490..8498,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
        column: 33,
        span: 8499..8500,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
        column: 34,
        span: 8500..8501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 411,
        column: 17,
        span: 8509..8518,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 411,
        column: 18,
        span: 8518..8519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 411,
        column: 23,
        span: 8519..8524,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
        column: 24,
        span: 8524..8525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getfenv",
        ),
        line: 411,
        column: 31,
        span: 8525..8532,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
        column: 32,
        span: 8532..8533,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 411,
        column: 33,
        span: 8532..8534,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
        column: 34,
        span: 8534..8535,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
        column: 35,
        span: 8535..8536,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 412,
        column: 14,
        span: 8544..8550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        line: 412,
        column: 25,
        span: 8551..8561,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 412,
        column: 26,
        span: 8561..8562,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return a\"",
        ),
        line: 412,
        column: 36,
        span: 8562..8572,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 412,
        column: 37,
        span: 8572..8573,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 412,
        column: 38,
        span: 8573..8574,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 412,
        column: 39,
        span: 8574..8575,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 413,
        column: 9,
        span: 8581..8584,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 413,
        column: 10,
        span: 8584..8585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 415,
        column: 2,
        span: 8587..8588,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 415,
        column: 4,
        span: 8589..8590,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 415,
        column: 6,
        span: 8591..8592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 415,
        column: 7,
        span: 8592..8593,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 415,
        column: 9,
        span: 8594..8595,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 415,
        column: 12,
        span: 8595..8598,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 415,
        column: 13,
        span: 8598..8599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 416,
        column: 6,
        span: 8600..8605,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 416,
        column: 7,
        span: 8605..8606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setfenv",
        ),
        line: 416,
        column: 14,
        span: 8606..8613,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 416,
        column: 15,
        span: 8613..8614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 416,
        column: 17,
        span: 8614..8616,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 416,
        column: 18,
        span: 8616..8617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 416,
        column: 20,
        span: 8618..8619,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 416,
        column: 21,
        span: 8619..8620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 417,
        column: 7,
        span: 8621..8627,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 417,
        column: 8,
        span: 8627..8628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 417,
        column: 13,
        span: 8628..8633,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 417,
        column: 14,
        span: 8633..8634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getfenv",
        ),
        line: 417,
        column: 21,
        span: 8634..8641,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 417,
        column: 22,
        span: 8641..8642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 417,
        column: 24,
        span: 8642..8644,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 417,
        column: 25,
        span: 8644..8645,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 417,
        column: 28,
        span: 8646..8648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 417,
        column: 30,
        span: 8649..8650,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 417,
        column: 31,
        span: 8650..8651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 418,
        column: 7,
        span: 8652..8658,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
        column: 8,
        span: 8658..8659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 418,
        column: 14,
        span: 8659..8665,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
        column: 15,
        span: 8665..8666,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 418,
        column: 16,
        span: 8665..8667,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 418,
        column: 17,
        span: 8667..8668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 418,
        column: 27,
        span: 8669..8678,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 418,
        column: 28,
        span: 8678..8679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 418,
        column: 34,
        span: 8679..8685,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
        column: 35,
        span: 8685..8686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 418,
        column: 37,
        span: 8686..8688,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
        column: 38,
        span: 8688..8689,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
        column: 39,
        span: 8689..8690,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 418,
        column: 42,
        span: 8691..8693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 418,
        column: 44,
        span: 8694..8695,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
        column: 45,
        span: 8695..8696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 419,
        column: 7,
        span: 8697..8703,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 419,
        column: 8,
        span: 8703..8704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 419,
        column: 14,
        span: 8704..8710,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 419,
        column: 15,
        span: 8710..8711,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 419,
        column: 16,
        span: 8710..8712,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 419,
        column: 17,
        span: 8712..8713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 419,
        column: 27,
        span: 8714..8723,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 419,
        column: 28,
        span: 8723..8724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 419,
        column: 34,
        span: 8724..8730,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 419,
        column: 35,
        span: 8730..8731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 419,
        column: 37,
        span: 8731..8733,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 419,
        column: 38,
        span: 8733..8734,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 419,
        column: 39,
        span: 8734..8735,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 419,
        column: 42,
        span: 8736..8738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 419,
        column: 44,
        span: 8739..8740,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 419,
        column: 45,
        span: 8740..8741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 419,
        column: 46,
        span: 8741..8742,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 419,
        column: 47,
        span: 8742..8743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 422,
        column: 6,
        span: 8746..8751,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 422,
        column: 10,
        span: 8751..8755,
    },
]
