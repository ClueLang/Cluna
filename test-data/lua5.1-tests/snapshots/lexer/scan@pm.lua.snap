---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.1-tests/pm.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 1,
        column: 5,
        span: 0..5,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1,
        column: 6,
        span: 5..6,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing pattern matching'",
        ),
        line: 1,
        column: 32,
        span: 6..32,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1,
        column: 33,
        span: 32..33,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 3,
        column: 9,
        span: 35..43,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 3,
        column: 11,
        span: 44..45,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 3,
        column: 12,
        span: 45..46,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 3,
        column: 13,
        span: 46..47,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 3,
        column: 14,
        span: 47..48,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 3,
        column: 16,
        span: 49..50,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 3,
        column: 17,
        span: 50..51,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 4,
        column: 8,
        span: 54..59,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 4,
        column: 10,
        span: 60..61,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 4,
        column: 11,
        span: 61..62,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 4,
        column: 13,
        span: 63..64,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 4,
        column: 15,
        span: 65..66,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 4,
        column: 22,
        span: 67..73,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 4,
        column: 23,
        span: 73..74,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 4,
        column: 27,
        span: 74..78,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 4,
        column: 28,
        span: 78..79,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 4,
        column: 29,
        span: 79..80,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 4,
        column: 30,
        span: 80..81,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 4,
        column: 32,
        span: 82..83,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 4,
        column: 33,
        span: 83..84,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 5,
        column: 5,
        span: 87..89,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 5,
        column: 7,
        span: 90..91,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 5,
        column: 12,
        span: 92..96,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 5,
        column: 19,
        span: 97..103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 5,
        column: 26,
        span: 104..110,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 5,
        column: 27,
        span: 110..111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 5,
        column: 30,
        span: 111..114,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 5,
        column: 31,
        span: 114..115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 5,
        column: 32,
        span: 115..116,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 5,
        column: 33,
        span: 116..117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 5,
        column: 35,
        span: 118..119,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 5,
        column: 36,
        span: 119..120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 5,
        column: 38,
        span: 121..122,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 5,
        column: 39,
        span: 122..123,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 5,
        column: 0,
        span: 124..127,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 6,
        column: 0,
        span: 128..131,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 8,
        column: 9,
        span: 133..141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        line: 8,
        column: 12,
        span: 142..144,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 13,
        span: 144..145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 8,
        column: 14,
        span: 145..146,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 8,
        column: 15,
        span: 146..147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 8,
        column: 17,
        span: 148..149,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 18,
        span: 149..150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 9,
        column: 4,
        span: 153..154,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 9,
        column: 6,
        span: 155..156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 9,
        column: 13,
        span: 157..163,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 9,
        column: 14,
        span: 163..164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 9,
        column: 18,
        span: 164..168,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 9,
        column: 19,
        span: 168..169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 9,
        column: 20,
        span: 169..170,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 9,
        column: 21,
        span: 170..171,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%%([0-9])\"",
        ),
        line: 9,
        column: 33,
        span: 172..183,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 9,
        column: 34,
        span: 183..184,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 9,
        column: 43,
        span: 185..193,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 9,
        column: 44,
        span: 193..194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 9,
        column: 45,
        span: 194..195,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 9,
        column: 46,
        span: 195..196,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 9,
        column: 53,
        span: 197..203,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\"",
        ),
        line: 9,
        column: 57,
        span: 204..207,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 9,
        column: 60,
        span: 208..210,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 9,
        column: 62,
        span: 211..212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 9,
        column: 63,
        span: 212..213,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 9,
        column: 65,
        span: 214..215,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 9,
        column: 67,
        span: 215..217,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 9,
        column: 68,
        span: 217..218,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 9,
        column: 72,
        span: 219..222,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 9,
        column: 73,
        span: 222..223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 10,
        column: 4,
        span: 226..227,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 10,
        column: 6,
        span: 228..229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 10,
        column: 13,
        span: 230..236,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 10,
        column: 14,
        span: 236..237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 10,
        column: 18,
        span: 237..241,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 19,
        span: 241..242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 10,
        column: 20,
        span: 242..243,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 10,
        column: 21,
        span: 243..244,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^(^?)\"",
        ),
        line: 10,
        column: 29,
        span: 245..252,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 10,
        column: 30,
        span: 252..253,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%1()\"",
        ),
        line: 10,
        column: 37,
        span: 254..260,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 10,
        column: 38,
        span: 260..261,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 10,
        column: 40,
        span: 261..263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 41,
        span: 263..264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 11,
        column: 4,
        span: 267..268,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 11,
        column: 6,
        span: 269..270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 11,
        column: 13,
        span: 271..277,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 11,
        column: 14,
        span: 277..278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 11,
        column: 18,
        span: 278..282,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 11,
        column: 19,
        span: 282..283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 11,
        column: 20,
        span: 283..284,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 11,
        column: 21,
        span: 284..285,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"($?)$\"",
        ),
        line: 11,
        column: 29,
        span: 286..293,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 11,
        column: 30,
        span: 293..294,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"()%1\"",
        ),
        line: 11,
        column: 37,
        span: 295..301,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 11,
        column: 38,
        span: 301..302,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 11,
        column: 40,
        span: 302..304,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 11,
        column: 41,
        span: 304..305,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 12,
        column: 8,
        span: 308..313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 12,
        column: 10,
        span: 314..315,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 12,
        column: 12,
        span: 316..317,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 12,
        column: 14,
        span: 318..319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 12,
        column: 21,
        span: 320..326,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 12,
        column: 22,
        span: 326..327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 12,
        column: 27,
        span: 327..332,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 28,
        span: 332..333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 12,
        column: 29,
        span: 333..334,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 12,
        column: 30,
        span: 334..335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 12,
        column: 32,
        span: 336..337,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 33,
        span: 337..338,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 12,
        column: 35,
        span: 339..340,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 13,
        column: 9,
        span: 343..349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 13,
        column: 16,
        span: 350..356,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 13,
        column: 17,
        span: 356..357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 13,
        column: 20,
        span: 357..360,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 13,
        column: 21,
        span: 360..361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 13,
        column: 22,
        span: 361..362,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 13,
        column: 23,
        span: 362..363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 13,
        column: 25,
        span: 364..365,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 13,
        column: 26,
        span: 365..366,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 13,
        column: 27,
        span: 365..367,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 13,
        column: 28,
        span: 367..368,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 13,
        column: 29,
        span: 368..369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 13,
        column: 31,
        span: 370..371,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 13,
        column: 32,
        span: 371..372,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 13,
        column: 33,
        span: 372..373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 13,
        column: 34,
        span: 373..374,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 13,
        column: 35,
        span: 374..375,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 13,
        column: 37,
        span: 376..377,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 13,
        column: 39,
        span: 377..379,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 13,
        column: 40,
        span: 379..380,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 14,
        column: 0,
        span: 381..384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 16,
        column: 2,
        span: 386..387,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 16,
        column: 3,
        span: 387..388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 16,
        column: 5,
        span: 389..390,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 16,
        column: 7,
        span: 391..392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 16,
        column: 14,
        span: 393..399,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 16,
        column: 15,
        span: 399..400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 16,
        column: 19,
        span: 400..404,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 20,
        span: 404..405,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 16,
        column: 22,
        span: 405..407,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 16,
        column: 23,
        span: 407..408,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 16,
        column: 26,
        span: 409..411,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 27,
        span: 411..412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 17,
        column: 7,
        span: 442..448,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 17,
        column: 8,
        span: 448..449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 17,
        column: 9,
        span: 449..450,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 17,
        column: 12,
        span: 451..453,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 17,
        column: 14,
        span: 453..455,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 17,
        column: 18,
        span: 456..459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 17,
        column: 20,
        span: 460..461,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 17,
        column: 23,
        span: 462..464,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 17,
        column: 25,
        span: 464..466,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 17,
        column: 26,
        span: 466..467,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 17,
        column: 27,
        span: 467..468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 18,
        column: 2,
        span: 469..470,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 18,
        column: 3,
        span: 470..471,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 18,
        column: 5,
        span: 472..473,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 18,
        column: 7,
        span: 474..475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 18,
        column: 14,
        span: 476..482,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 18,
        column: 15,
        span: 482..483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 18,
        column: 19,
        span: 483..487,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
        column: 20,
        span: 487..488,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        line: 18,
        column: 25,
        span: 488..493,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 18,
        column: 26,
        span: 493..494,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 18,
        column: 29,
        span: 495..497,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
        column: 30,
        span: 497..498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 19,
        column: 7,
        span: 499..505,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 8,
        span: 505..506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 19,
        column: 9,
        span: 506..507,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 19,
        column: 12,
        span: 508..510,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 19,
        column: 14,
        span: 510..512,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 19,
        column: 18,
        span: 513..516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 19,
        column: 20,
        span: 517..518,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 19,
        column: 23,
        span: 519..521,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 19,
        column: 25,
        span: 521..523,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 26,
        span: 523..524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 20,
        column: 2,
        span: 525..526,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
        column: 3,
        span: 526..527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 20,
        column: 5,
        span: 528..529,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 20,
        column: 7,
        span: 530..531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 20,
        column: 14,
        span: 532..538,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 20,
        column: 15,
        span: 538..539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 20,
        column: 19,
        span: 539..543,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 20,
        span: 543..544,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0o a\\0o a\\0o'",
        ),
        line: 20,
        column: 36,
        span: 544..560,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
        column: 37,
        span: 560..561,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 20,
        column: 41,
        span: 562..565,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
        column: 42,
        span: 565..566,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 20,
        column: 44,
        span: 566..568,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 45,
        span: 568..569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 21,
        column: 7,
        span: 588..594,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
        column: 8,
        span: 594..595,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 21,
        column: 9,
        span: 595..596,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 21,
        column: 12,
        span: 597..599,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 21,
        column: 14,
        span: 599..601,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 21,
        column: 18,
        span: 602..605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 21,
        column: 20,
        span: 606..607,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 21,
        column: 23,
        span: 608..610,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 21,
        column: 25,
        span: 610..612,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
        column: 26,
        span: 612..613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 22,
        column: 2,
        span: 614..615,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 22,
        column: 3,
        span: 615..616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 22,
        column: 5,
        span: 617..618,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 22,
        column: 7,
        span: 619..620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 22,
        column: 14,
        span: 621..627,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 22,
        column: 15,
        span: 627..628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 22,
        column: 19,
        span: 628..632,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 20,
        span: 632..633,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0o a\\0o a\\0o'",
        ),
        line: 22,
        column: 36,
        span: 633..649,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 22,
        column: 37,
        span: 649..650,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0o'",
        ),
        line: 22,
        column: 44,
        span: 651..657,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 22,
        column: 45,
        span: 657..658,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 22,
        column: 47,
        span: 658..660,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 48,
        span: 660..661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 23,
        column: 7,
        span: 685..691,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 23,
        column: 8,
        span: 691..692,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 23,
        column: 9,
        span: 692..693,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 23,
        column: 12,
        span: 694..696,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 23,
        column: 14,
        span: 696..698,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 23,
        column: 18,
        span: 699..702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 23,
        column: 20,
        span: 703..704,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 23,
        column: 23,
        span: 705..707,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 23,
        column: 25,
        span: 707..709,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 23,
        column: 26,
        span: 709..710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 24,
        column: 2,
        span: 711..712,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 24,
        column: 3,
        span: 712..713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 24,
        column: 5,
        span: 714..715,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 24,
        column: 7,
        span: 716..717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 24,
        column: 14,
        span: 718..724,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 24,
        column: 15,
        span: 724..725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 24,
        column: 19,
        span: 725..729,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 24,
        column: 20,
        span: 729..730,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0o a\\0o a\\0o'",
        ),
        line: 24,
        column: 36,
        span: 730..746,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 24,
        column: 37,
        span: 746..747,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0o'",
        ),
        line: 24,
        column: 44,
        span: 748..754,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 24,
        column: 45,
        span: 754..755,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 24,
        column: 47,
        span: 755..757,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 24,
        column: 48,
        span: 757..758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 25,
        column: 7,
        span: 782..788,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 8,
        span: 788..789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 25,
        column: 9,
        span: 789..790,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 25,
        column: 12,
        span: 791..793,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 14,
        span: 793..795,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 25,
        column: 18,
        span: 796..799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 25,
        column: 20,
        span: 800..801,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 25,
        column: 23,
        span: 802..804,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 26,
        span: 804..807,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 27,
        span: 807..808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 26,
        column: 2,
        span: 809..810,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 3,
        span: 810..811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 26,
        column: 5,
        span: 812..813,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 26,
        column: 7,
        span: 814..815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 26,
        column: 14,
        span: 816..822,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 26,
        column: 15,
        span: 822..823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 26,
        column: 19,
        span: 823..827,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
        column: 20,
        span: 827..828,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0a\\0a\\0a\\0\\0ab'",
        ),
        line: 26,
        column: 38,
        span: 828..846,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 39,
        span: 846..847,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0ab'",
        ),
        line: 26,
        column: 46,
        span: 848..854,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 47,
        span: 854..855,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 26,
        column: 49,
        span: 855..857,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
        column: 50,
        span: 857..858,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 26,
        column: 51,
        span: 858..859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 27,
        column: 7,
        span: 880..886,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
        column: 8,
        span: 886..887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 27,
        column: 9,
        span: 887..888,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 27,
        column: 12,
        span: 889..891,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 27,
        column: 14,
        span: 891..893,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 27,
        column: 18,
        span: 894..897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 27,
        column: 20,
        span: 898..899,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 27,
        column: 23,
        span: 900..902,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 27,
        column: 26,
        span: 902..905,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
        column: 27,
        span: 905..906,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 27,
        column: 28,
        span: 906..907,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 28,
        column: 2,
        span: 908..909,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 28,
        column: 3,
        span: 909..910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 28,
        column: 5,
        span: 911..912,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 28,
        column: 7,
        span: 913..914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 28,
        column: 14,
        span: 915..921,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 28,
        column: 15,
        span: 921..922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 28,
        column: 19,
        span: 922..926,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 20,
        span: 926..927,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0a\\0a\\0a\\0\\0ab'",
        ),
        line: 28,
        column: 38,
        span: 927..945,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 28,
        column: 39,
        span: 945..946,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 28,
        column: 43,
        span: 947..950,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 44,
        span: 950..951,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 29,
        column: 7,
        span: 969..975,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
        column: 8,
        span: 975..976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 29,
        column: 9,
        span: 976..977,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 29,
        column: 12,
        span: 978..980,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 29,
        column: 15,
        span: 980..983,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 29,
        column: 19,
        span: 984..987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 29,
        column: 21,
        span: 988..989,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 29,
        column: 24,
        span: 990..992,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 29,
        column: 27,
        span: 992..995,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
        column: 28,
        span: 995..996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 30,
        column: 7,
        span: 997..1003,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 8,
        span: 1003..1004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 30,
        column: 14,
        span: 1004..1010,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 30,
        column: 15,
        span: 1010..1011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 30,
        column: 19,
        span: 1011..1015,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 20,
        span: 1015..1016,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0a\\0a\\0a\\0\\0ab'",
        ),
        line: 30,
        column: 38,
        span: 1016..1034,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 30,
        column: 39,
        span: 1034..1035,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b\\0'",
        ),
        line: 30,
        column: 45,
        span: 1036..1041,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 46,
        span: 1041..1042,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 30,
        column: 49,
        span: 1043..1045,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 30,
        column: 53,
        span: 1046..1049,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 54,
        span: 1049..1050,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 31,
        column: 7,
        span: 1067..1073,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 8,
        span: 1073..1074,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 31,
        column: 14,
        span: 1074..1080,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 31,
        column: 15,
        span: 1080..1081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 31,
        column: 19,
        span: 1081..1085,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 20,
        span: 1085..1086,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 31,
        column: 22,
        span: 1086..1088,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 31,
        column: 23,
        span: 1088..1089,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0'",
        ),
        line: 31,
        column: 28,
        span: 1090..1094,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 29,
        span: 1094..1095,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 31,
        column: 32,
        span: 1096..1098,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 31,
        column: 36,
        span: 1099..1102,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 37,
        span: 1102..1103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 32,
        column: 7,
        span: 1104..1110,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 8,
        span: 1110..1111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 32,
        column: 14,
        span: 1111..1117,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 32,
        column: 15,
        span: 1117..1118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 32,
        column: 19,
        span: 1118..1122,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 20,
        span: 1122..1123,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo123alo'",
        ),
        line: 32,
        column: 31,
        span: 1123..1134,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 32,
        column: 32,
        span: 1134..1135,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'12'",
        ),
        line: 32,
        column: 37,
        span: 1136..1140,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 38,
        span: 1140..1141,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 32,
        column: 41,
        span: 1142..1144,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 32,
        column: 43,
        span: 1144..1146,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 44,
        span: 1146..1147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 33,
        column: 7,
        span: 1148..1154,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 8,
        span: 1154..1155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 33,
        column: 14,
        span: 1155..1161,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 33,
        column: 15,
        span: 1161..1162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 33,
        column: 19,
        span: 1162..1166,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 20,
        span: 1166..1167,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo123alo'",
        ),
        line: 33,
        column: 31,
        span: 1167..1178,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 33,
        column: 32,
        span: 1178..1179,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^12'",
        ),
        line: 33,
        column: 38,
        span: 1180..1185,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 39,
        span: 1185..1186,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 33,
        column: 42,
        span: 1187..1189,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 33,
        column: 46,
        span: 1190..1193,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 47,
        span: 1193..1194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 35,
        column: 7,
        span: 1196..1202,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 8,
        span: 1202..1203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 35,
        column: 9,
        span: 1203..1204,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 10,
        span: 1204..1205,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aloALO'",
        ),
        line: 35,
        column: 18,
        span: 1205..1213,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 35,
        column: 19,
        span: 1213..1214,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%l*'",
        ),
        line: 35,
        column: 25,
        span: 1215..1220,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 26,
        span: 1220..1221,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 35,
        column: 29,
        span: 1222..1224,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        line: 35,
        column: 35,
        span: 1225..1230,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 36,
        span: 1230..1231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 36,
        column: 7,
        span: 1232..1238,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 8,
        span: 1238..1239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 36,
        column: 9,
        span: 1239..1240,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 10,
        span: 1240..1241,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aLo_ALO'",
        ),
        line: 36,
        column: 19,
        span: 1241..1250,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 36,
        column: 20,
        span: 1250..1251,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%a*'",
        ),
        line: 36,
        column: 26,
        span: 1252..1257,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 27,
        span: 1257..1258,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 36,
        column: 30,
        span: 1259..1261,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aLo'",
        ),
        line: 36,
        column: 36,
        span: 1262..1267,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 37,
        span: 1267..1268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 38,
        column: 7,
        span: 1270..1276,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 8,
        span: 1276..1277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 38,
        column: 9,
        span: 1277..1278,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 10,
        span: 1278..1279,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaab'",
        ),
        line: 38,
        column: 16,
        span: 1279..1285,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 17,
        span: 1285..1286,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a*'",
        ),
        line: 38,
        column: 22,
        span: 1287..1291,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 23,
        span: 1291..1292,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 38,
        column: 26,
        span: 1293..1295,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        line: 38,
        column: 32,
        span: 1296..1301,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 33,
        span: 1301..1302,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 38,
        column: 34,
        span: 1302..1303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 39,
        column: 7,
        span: 1304..1310,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 8,
        span: 1310..1311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 39,
        column: 9,
        span: 1311..1312,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 10,
        span: 1312..1313,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        line: 39,
        column: 15,
        span: 1313..1318,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 16,
        span: 1318..1319,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^.*$'",
        ),
        line: 39,
        column: 23,
        span: 1320..1326,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 24,
        span: 1326..1327,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 39,
        column: 27,
        span: 1328..1330,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        line: 39,
        column: 33,
        span: 1331..1336,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 34,
        span: 1336..1337,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 39,
        column: 35,
        span: 1337..1338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 40,
        column: 7,
        span: 1339..1345,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 8,
        span: 1345..1346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 40,
        column: 9,
        span: 1346..1347,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 10,
        span: 1347..1348,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        line: 40,
        column: 15,
        span: 1348..1353,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 40,
        column: 16,
        span: 1353..1354,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b*'",
        ),
        line: 40,
        column: 21,
        span: 1355..1359,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 22,
        span: 1359..1360,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 40,
        column: 25,
        span: 1361..1363,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 40,
        column: 28,
        span: 1364..1366,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 29,
        span: 1366..1367,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 40,
        column: 30,
        span: 1367..1368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 41,
        column: 7,
        span: 1369..1375,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 8,
        span: 1375..1376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 41,
        column: 9,
        span: 1376..1377,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 10,
        span: 1377..1378,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        line: 41,
        column: 15,
        span: 1378..1383,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 41,
        column: 16,
        span: 1383..1384,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ab*a'",
        ),
        line: 41,
        column: 23,
        span: 1385..1391,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 24,
        span: 1391..1392,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 41,
        column: 27,
        span: 1393..1395,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aa'",
        ),
        line: 41,
        column: 32,
        span: 1396..1400,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 33,
        span: 1400..1401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 42,
        column: 7,
        span: 1402..1408,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
        column: 8,
        span: 1408..1409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 42,
        column: 9,
        span: 1409..1410,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
        column: 10,
        span: 1410..1411,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aba'",
        ),
        line: 42,
        column: 15,
        span: 1411..1416,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 42,
        column: 16,
        span: 1416..1417,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ab*a'",
        ),
        line: 42,
        column: 23,
        span: 1418..1424,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
        column: 24,
        span: 1424..1425,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 42,
        column: 27,
        span: 1426..1428,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aba'",
        ),
        line: 42,
        column: 33,
        span: 1429..1434,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
        column: 34,
        span: 1434..1435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 43,
        column: 7,
        span: 1436..1442,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 8,
        span: 1442..1443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 43,
        column: 9,
        span: 1443..1444,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 10,
        span: 1444..1445,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaab'",
        ),
        line: 43,
        column: 16,
        span: 1445..1451,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 43,
        column: 17,
        span: 1451..1452,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a+'",
        ),
        line: 43,
        column: 22,
        span: 1453..1457,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 23,
        span: 1457..1458,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 43,
        column: 26,
        span: 1459..1461,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        line: 43,
        column: 32,
        span: 1462..1467,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 33,
        span: 1467..1468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 44,
        column: 7,
        span: 1469..1475,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 8,
        span: 1475..1476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 44,
        column: 9,
        span: 1476..1477,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 10,
        span: 1477..1478,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        line: 44,
        column: 15,
        span: 1478..1483,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 44,
        column: 16,
        span: 1483..1484,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^.+$'",
        ),
        line: 44,
        column: 23,
        span: 1485..1491,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 24,
        span: 1491..1492,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 44,
        column: 27,
        span: 1493..1495,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        line: 44,
        column: 33,
        span: 1496..1501,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 34,
        span: 1501..1502,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 45,
        column: 7,
        span: 1503..1509,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 8,
        span: 1509..1510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 45,
        column: 9,
        span: 1510..1511,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 10,
        span: 1511..1512,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        line: 45,
        column: 15,
        span: 1512..1517,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 45,
        column: 16,
        span: 1517..1518,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b+'",
        ),
        line: 45,
        column: 21,
        span: 1519..1523,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 22,
        span: 1523..1524,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 45,
        column: 25,
        span: 1525..1527,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 45,
        column: 29,
        span: 1528..1531,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 30,
        span: 1531..1532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 46,
        column: 7,
        span: 1533..1539,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 8,
        span: 1539..1540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 46,
        column: 9,
        span: 1540..1541,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 10,
        span: 1541..1542,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        line: 46,
        column: 15,
        span: 1542..1547,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 16,
        span: 1547..1548,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ab+a'",
        ),
        line: 46,
        column: 23,
        span: 1549..1555,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 24,
        span: 1555..1556,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 46,
        column: 27,
        span: 1557..1559,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 46,
        column: 31,
        span: 1560..1563,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 32,
        span: 1563..1564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 47,
        column: 7,
        span: 1565..1571,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 8,
        span: 1571..1572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 47,
        column: 9,
        span: 1572..1573,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 10,
        span: 1573..1574,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aba'",
        ),
        line: 47,
        column: 15,
        span: 1574..1579,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 47,
        column: 16,
        span: 1579..1580,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ab+a'",
        ),
        line: 47,
        column: 23,
        span: 1581..1587,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 24,
        span: 1587..1588,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 47,
        column: 27,
        span: 1589..1591,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aba'",
        ),
        line: 47,
        column: 33,
        span: 1592..1597,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 34,
        span: 1597..1598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 48,
        column: 7,
        span: 1599..1605,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
        column: 8,
        span: 1605..1606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 48,
        column: 9,
        span: 1606..1607,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
        column: 10,
        span: 1607..1608,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$a'",
        ),
        line: 48,
        column: 15,
        span: 1608..1613,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 48,
        column: 16,
        span: 1613..1614,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.$'",
        ),
        line: 48,
        column: 21,
        span: 1615..1619,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
        column: 22,
        span: 1619..1620,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 48,
        column: 25,
        span: 1621..1623,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 48,
        column: 29,
        span: 1624..1627,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
        column: 30,
        span: 1627..1628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 49,
        column: 7,
        span: 1629..1635,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
        column: 8,
        span: 1635..1636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 49,
        column: 9,
        span: 1636..1637,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
        column: 10,
        span: 1637..1638,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$a'",
        ),
        line: 49,
        column: 15,
        span: 1638..1643,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 49,
        column: 16,
        span: 1643..1644,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.%$'",
        ),
        line: 49,
        column: 22,
        span: 1645..1650,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 49,
        column: 23,
        span: 1650..1651,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 49,
        column: 26,
        span: 1652..1654,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$'",
        ),
        line: 49,
        column: 31,
        span: 1655..1659,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 49,
        column: 32,
        span: 1659..1660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 50,
        column: 7,
        span: 1661..1667,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 50,
        column: 8,
        span: 1667..1668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 50,
        column: 9,
        span: 1668..1669,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 50,
        column: 10,
        span: 1669..1670,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$a'",
        ),
        line: 50,
        column: 15,
        span: 1670..1675,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 50,
        column: 16,
        span: 1675..1676,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.$.'",
        ),
        line: 50,
        column: 22,
        span: 1677..1682,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 50,
        column: 23,
        span: 1682..1683,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 50,
        column: 26,
        span: 1684..1686,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$a'",
        ),
        line: 50,
        column: 32,
        span: 1687..1692,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 50,
        column: 33,
        span: 1692..1693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 51,
        column: 7,
        span: 1694..1700,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 51,
        column: 8,
        span: 1700..1701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 51,
        column: 9,
        span: 1701..1702,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 51,
        column: 10,
        span: 1702..1703,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$a'",
        ),
        line: 51,
        column: 15,
        span: 1703..1708,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
        column: 16,
        span: 1708..1709,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'$$'",
        ),
        line: 51,
        column: 21,
        span: 1710..1714,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
        column: 22,
        span: 1714..1715,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 51,
        column: 25,
        span: 1716..1718,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 51,
        column: 29,
        span: 1719..1722,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
        column: 30,
        span: 1722..1723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 52,
        column: 7,
        span: 1724..1730,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
        column: 8,
        span: 1730..1731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 52,
        column: 9,
        span: 1731..1732,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
        column: 10,
        span: 1732..1733,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$b'",
        ),
        line: 52,
        column: 15,
        span: 1733..1738,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 52,
        column: 16,
        span: 1738..1739,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$'",
        ),
        line: 52,
        column: 21,
        span: 1740..1744,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 22,
        span: 1744..1745,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 52,
        column: 25,
        span: 1746..1748,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 52,
        column: 29,
        span: 1749..1752,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 30,
        span: 1752..1753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 53,
        column: 7,
        span: 1754..1760,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 8,
        span: 1760..1761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 53,
        column: 9,
        span: 1761..1762,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 10,
        span: 1762..1763,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$a'",
        ),
        line: 53,
        column: 15,
        span: 1763..1768,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 16,
        span: 1768..1769,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'$'",
        ),
        line: 53,
        column: 20,
        span: 1770..1773,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 21,
        span: 1773..1774,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 53,
        column: 24,
        span: 1775..1777,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 53,
        column: 27,
        span: 1778..1780,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 28,
        span: 1780..1781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 54,
        column: 7,
        span: 1782..1788,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 8,
        span: 1788..1789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 54,
        column: 9,
        span: 1789..1790,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 10,
        span: 1790..1791,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 54,
        column: 12,
        span: 1791..1793,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 54,
        column: 13,
        span: 1793..1794,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b*'",
        ),
        line: 54,
        column: 18,
        span: 1795..1799,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 19,
        span: 1799..1800,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 54,
        column: 22,
        span: 1801..1803,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 54,
        column: 25,
        span: 1804..1806,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 26,
        span: 1806..1807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 55,
        column: 7,
        span: 1808..1814,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 8,
        span: 1814..1815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 55,
        column: 9,
        span: 1815..1816,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 10,
        span: 1816..1817,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        line: 55,
        column: 15,
        span: 1817..1822,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 55,
        column: 16,
        span: 1822..1823,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'bb*'",
        ),
        line: 55,
        column: 22,
        span: 1824..1829,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
        column: 23,
        span: 1829..1830,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 55,
        column: 26,
        span: 1831..1833,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 55,
        column: 30,
        span: 1834..1837,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
        column: 31,
        span: 1837..1838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 56,
        column: 7,
        span: 1839..1845,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 8,
        span: 1845..1846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 56,
        column: 9,
        span: 1846..1847,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 10,
        span: 1847..1848,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaab'",
        ),
        line: 56,
        column: 16,
        span: 1848..1854,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 17,
        span: 1854..1855,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a-'",
        ),
        line: 56,
        column: 22,
        span: 1856..1860,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 23,
        span: 1860..1861,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 56,
        column: 26,
        span: 1862..1864,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 56,
        column: 29,
        span: 1865..1867,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 30,
        span: 1867..1868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 57,
        column: 7,
        span: 1869..1875,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
        column: 8,
        span: 1875..1876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 57,
        column: 9,
        span: 1876..1877,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
        column: 10,
        span: 1877..1878,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        line: 57,
        column: 15,
        span: 1878..1883,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 57,
        column: 16,
        span: 1883..1884,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^.-$'",
        ),
        line: 57,
        column: 23,
        span: 1885..1891,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
        column: 24,
        span: 1891..1892,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 57,
        column: 27,
        span: 1893..1895,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        line: 57,
        column: 33,
        span: 1896..1901,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
        column: 34,
        span: 1901..1902,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 58,
        column: 7,
        span: 1903..1909,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 8,
        span: 1909..1910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 58,
        column: 9,
        span: 1910..1911,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 10,
        span: 1911..1912,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aabaaabaaabaaaba'",
        ),
        line: 58,
        column: 28,
        span: 1912..1930,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 58,
        column: 29,
        span: 1930..1931,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b.*b'",
        ),
        line: 58,
        column: 36,
        span: 1932..1938,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 37,
        span: 1938..1939,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 58,
        column: 40,
        span: 1940..1942,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'baaabaaabaaab'",
        ),
        line: 58,
        column: 56,
        span: 1943..1958,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 57,
        span: 1958..1959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 59,
        column: 7,
        span: 1960..1966,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 8,
        span: 1966..1967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 59,
        column: 9,
        span: 1967..1968,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 10,
        span: 1968..1969,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aabaaabaaabaaaba'",
        ),
        line: 59,
        column: 28,
        span: 1969..1987,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 59,
        column: 29,
        span: 1987..1988,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b.-b'",
        ),
        line: 59,
        column: 36,
        span: 1989..1995,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 37,
        span: 1995..1996,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 59,
        column: 40,
        span: 1997..1999,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'baaab'",
        ),
        line: 59,
        column: 48,
        span: 2000..2007,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 49,
        span: 2007..2008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 60,
        column: 7,
        span: 2009..2015,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 8,
        span: 2015..2016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 60,
        column: 9,
        span: 2016..2017,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 10,
        span: 2017..2018,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo xo'",
        ),
        line: 60,
        column: 18,
        span: 2018..2026,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 60,
        column: 19,
        span: 2026..2027,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.o$'",
        ),
        line: 60,
        column: 25,
        span: 2028..2033,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 26,
        span: 2033..2034,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 60,
        column: 29,
        span: 2035..2037,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xo'",
        ),
        line: 60,
        column: 34,
        span: 2038..2042,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 35,
        span: 2042..2043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 61,
        column: 7,
        span: 2044..2050,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 8,
        span: 2050..2051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 61,
        column: 9,
        span: 2051..2052,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 10,
        span: 2052..2053,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' \\n isto � assim'",
        ),
        line: 61,
        column: 28,
        span: 2053..2071,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 29,
        span: 2071..2072,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%S%S*'",
        ),
        line: 61,
        column: 37,
        span: 2073..2080,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 38,
        span: 2080..2081,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 61,
        column: 41,
        span: 2082..2084,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'isto'",
        ),
        line: 61,
        column: 48,
        span: 2085..2091,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 49,
        span: 2091..2092,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 62,
        column: 7,
        span: 2093..2099,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 8,
        span: 2099..2100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 62,
        column: 9,
        span: 2100..2101,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 10,
        span: 2101..2102,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' \\n isto � assim'",
        ),
        line: 62,
        column: 28,
        span: 2102..2120,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 62,
        column: 29,
        span: 2120..2121,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%S*$'",
        ),
        line: 62,
        column: 36,
        span: 2122..2128,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 37,
        span: 2128..2129,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 62,
        column: 40,
        span: 2130..2132,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'assim'",
        ),
        line: 62,
        column: 48,
        span: 2133..2140,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 49,
        span: 2140..2141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 63,
        column: 7,
        span: 2142..2148,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 8,
        span: 2148..2149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 63,
        column: 9,
        span: 2149..2150,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 10,
        span: 2150..2151,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' \\n isto � assim'",
        ),
        line: 63,
        column: 28,
        span: 2151..2169,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 63,
        column: 29,
        span: 2169..2170,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[a-z]*$'",
        ),
        line: 63,
        column: 39,
        span: 2171..2180,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 40,
        span: 2180..2181,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 63,
        column: 43,
        span: 2182..2184,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'assim'",
        ),
        line: 63,
        column: 51,
        span: 2185..2192,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 52,
        span: 2192..2193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 64,
        column: 7,
        span: 2194..2200,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 8,
        span: 2200..2201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 64,
        column: 9,
        span: 2201..2202,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 10,
        span: 2202..2203,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'um caracter ? extra'",
        ),
        line: 64,
        column: 31,
        span: 2203..2224,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 64,
        column: 32,
        span: 2224..2225,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[^%sa-z]'",
        ),
        line: 64,
        column: 43,
        span: 2226..2236,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 44,
        span: 2236..2237,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 64,
        column: 47,
        span: 2238..2240,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'?'",
        ),
        line: 64,
        column: 51,
        span: 2241..2244,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 52,
        span: 2244..2245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 65,
        column: 7,
        span: 2246..2252,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 8,
        span: 2252..2253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 65,
        column: 9,
        span: 2253..2254,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 10,
        span: 2254..2255,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 65,
        column: 12,
        span: 2255..2257,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 65,
        column: 13,
        span: 2257..2258,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a?'",
        ),
        line: 65,
        column: 18,
        span: 2259..2263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 19,
        span: 2263..2264,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 65,
        column: 22,
        span: 2265..2267,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 65,
        column: 25,
        span: 2268..2270,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 26,
        span: 2270..2271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 66,
        column: 7,
        span: 2272..2278,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 8,
        span: 2278..2279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 66,
        column: 9,
        span: 2279..2280,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 10,
        span: 2280..2281,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'�'",
        ),
        line: 66,
        column: 13,
        span: 2281..2284,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 14,
        span: 2284..2285,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'�?'",
        ),
        line: 66,
        column: 19,
        span: 2286..2290,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 20,
        span: 2290..2291,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 66,
        column: 23,
        span: 2292..2294,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'�'",
        ),
        line: 66,
        column: 27,
        span: 2295..2298,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 28,
        span: 2298..2299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 67,
        column: 7,
        span: 2300..2306,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 8,
        span: 2306..2307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 67,
        column: 9,
        span: 2307..2308,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 10,
        span: 2308..2309,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'�bl'",
        ),
        line: 67,
        column: 15,
        span: 2309..2314,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
        column: 16,
        span: 2314..2315,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'�?b?l?'",
        ),
        line: 67,
        column: 25,
        span: 2316..2324,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 26,
        span: 2324..2325,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 67,
        column: 29,
        span: 2326..2328,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'�bl'",
        ),
        line: 67,
        column: 35,
        span: 2329..2334,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 36,
        span: 2334..2335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 68,
        column: 7,
        span: 2336..2342,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 8,
        span: 2342..2343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 68,
        column: 9,
        span: 2343..2344,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 10,
        span: 2344..2345,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  �bl'",
        ),
        line: 68,
        column: 17,
        span: 2345..2352,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 68,
        column: 18,
        span: 2352..2353,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'�?b?l?'",
        ),
        line: 68,
        column: 27,
        span: 2354..2362,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 28,
        span: 2362..2363,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 68,
        column: 31,
        span: 2364..2366,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 68,
        column: 34,
        span: 2367..2369,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 35,
        span: 2369..2370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 69,
        column: 7,
        span: 2371..2377,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 8,
        span: 2377..2378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 69,
        column: 9,
        span: 2378..2379,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 10,
        span: 2379..2380,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aa'",
        ),
        line: 69,
        column: 14,
        span: 2380..2384,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 69,
        column: 15,
        span: 2384..2385,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^aa?a?a'",
        ),
        line: 69,
        column: 25,
        span: 2386..2395,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 26,
        span: 2395..2396,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 69,
        column: 29,
        span: 2397..2399,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aa'",
        ),
        line: 69,
        column: 34,
        span: 2400..2404,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 35,
        span: 2404..2405,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 70,
        column: 7,
        span: 2406..2412,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 8,
        span: 2412..2413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 70,
        column: 9,
        span: 2413..2414,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 10,
        span: 2414..2415,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "']]]�b'",
        ),
        line: 70,
        column: 17,
        span: 2415..2422,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 70,
        column: 18,
        span: 2422..2423,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[^]]'",
        ),
        line: 70,
        column: 25,
        span: 2424..2430,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 26,
        span: 2430..2431,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 70,
        column: 29,
        span: 2432..2434,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'�'",
        ),
        line: 70,
        column: 33,
        span: 2435..2438,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 34,
        span: 2438..2439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 71,
        column: 7,
        span: 2440..2446,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 8,
        span: 2446..2447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 71,
        column: 9,
        span: 2447..2448,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 10,
        span: 2448..2449,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0alo alo\"",
        ),
        line: 71,
        column: 20,
        span: 2449..2459,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 21,
        span: 2459..2460,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%x*\"",
        ),
        line: 71,
        column: 27,
        span: 2461..2466,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 28,
        span: 2466..2467,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 71,
        column: 31,
        span: 2468..2470,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0a\"",
        ),
        line: 71,
        column: 36,
        span: 2471..2475,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 37,
        span: 2475..2476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 72,
        column: 7,
        span: 2477..2483,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 8,
        span: 2483..2484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 72,
        column: 9,
        span: 2484..2485,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 10,
        span: 2485..2486,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        line: 72,
        column: 19,
        span: 2486..2495,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 72,
        column: 20,
        span: 2495..2496,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%C+\"",
        ),
        line: 72,
        column: 26,
        span: 2497..2502,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 27,
        span: 2502..2503,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 72,
        column: 30,
        span: 2504..2506,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        line: 72,
        column: 40,
        span: 2507..2516,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 41,
        span: 2516..2517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 73,
        column: 6,
        span: 2518..2523,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 7,
        span: 2523..2524,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 73,
        column: 10,
        span: 2524..2527,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 11,
        span: 2527..2528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 75,
        column: 7,
        span: 2530..2536,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
        column: 8,
        span: 2536..2537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        line: 75,
        column: 10,
        span: 2537..2539,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
        column: 11,
        span: 2539..2540,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo alx 123 b\\0o b\\0o'",
        ),
        line: 75,
        column: 34,
        span: 2540..2563,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 75,
        column: 35,
        span: 2563..2564,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'(..*) %1'",
        ),
        line: 75,
        column: 46,
        span: 2565..2575,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
        column: 47,
        span: 2575..2576,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 75,
        column: 50,
        span: 2577..2579,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\\0o b\\0o\"",
        ),
        line: 75,
        column: 62,
        span: 2580..2591,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
        column: 63,
        span: 2591..2592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 76,
        column: 7,
        span: 2593..2599,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 8,
        span: 2599..2600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        line: 76,
        column: 10,
        span: 2600..2602,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 11,
        span: 2602..2603,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'axz123= 4= 4 34'",
        ),
        line: 76,
        column: 28,
        span: 2603..2620,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 76,
        column: 29,
        span: 2620..2621,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'(.+)=(.*)=%2 %1'",
        ),
        line: 76,
        column: 47,
        span: 2622..2639,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 48,
        span: 2639..2640,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 76,
        column: 51,
        span: 2641..2643,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'3= 4= 4 3'",
        ),
        line: 76,
        column: 63,
        span: 2644..2655,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 64,
        span: 2655..2656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 77,
        column: 7,
        span: 2657..2663,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
        column: 8,
        span: 2663..2664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        line: 77,
        column: 10,
        span: 2664..2666,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
        column: 11,
        span: 2666..2667,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'======='",
        ),
        line: 77,
        column: 20,
        span: 2667..2676,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 77,
        column: 21,
        span: 2676..2677,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^(=*)=%1$'",
        ),
        line: 77,
        column: 33,
        span: 2678..2689,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
        column: 34,
        span: 2689..2690,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 77,
        column: 37,
        span: 2691..2693,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'======='",
        ),
        line: 77,
        column: 47,
        span: 2694..2703,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
        column: 48,
        span: 2703..2704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 78,
        column: 7,
        span: 2705..2711,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 8,
        span: 2711..2712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 78,
        column: 14,
        span: 2712..2718,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 78,
        column: 15,
        span: 2718..2719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 78,
        column: 20,
        span: 2719..2724,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 21,
        span: 2724..2725,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'=========='",
        ),
        line: 78,
        column: 33,
        span: 2725..2737,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 34,
        span: 2737..2738,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^([=]*)=%1$'",
        ),
        line: 78,
        column: 48,
        span: 2739..2752,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
        column: 49,
        span: 2752..2753,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 78,
        column: 52,
        span: 2754..2756,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 78,
        column: 56,
        span: 2757..2760,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
        column: 57,
        span: 2760..2761,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 80,
        column: 6,
        span: 2763..2768,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 80,
        column: 15,
        span: 2769..2777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "range",
        ),
        line: 80,
        column: 21,
        span: 2778..2783,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
        column: 22,
        span: 2783..2784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 80,
        column: 23,
        span: 2784..2785,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 80,
        column: 24,
        span: 2785..2786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 80,
        column: 26,
        span: 2787..2788,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
        column: 27,
        span: 2788..2789,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 81,
        column: 5,
        span: 2792..2794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 81,
        column: 7,
        span: 2795..2796,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 81,
        column: 10,
        span: 2797..2799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 81,
        column: 12,
        span: 2800..2801,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 81,
        column: 0,
        span: 2802..2806,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 82,
        column: 11,
        span: 2811..2817,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 82,
        column: 13,
        span: 2818..2819,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 82,
        column: 14,
        span: 2819..2820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "range",
        ),
        line: 82,
        column: 20,
        span: 2821..2826,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 21,
        span: 2826..2827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 82,
        column: 22,
        span: 2827..2828,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 82,
        column: 24,
        span: 2829..2830,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 82,
        column: 26,
        span: 2830..2832,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 82,
        column: 27,
        span: 2832..2833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 82,
        column: 29,
        span: 2834..2835,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 30,
        span: 2835..2836,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 83,
        column: 0,
        span: 2839..2842,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 84,
        column: 0,
        span: 2843..2846,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 86,
        column: 6,
        span: 2848..2853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abc",
        ),
        line: 86,
        column: 10,
        span: 2854..2857,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 86,
        column: 12,
        span: 2858..2859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 86,
        column: 19,
        span: 2860..2866,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 86,
        column: 20,
        span: 2866..2867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 86,
        column: 24,
        span: 2867..2871,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 25,
        span: 2871..2872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "range",
        ),
        line: 86,
        column: 30,
        span: 2872..2877,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 31,
        span: 2877..2878,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
        column: 32,
        span: 2877..2879,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 86,
        column: 33,
        span: 2879..2880,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
        column: 37,
        span: 2880..2884,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 38,
        span: 2884..2885,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 39,
        span: 2885..2886,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 86,
        column: 40,
        span: 2886..2887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 88,
        column: 7,
        span: 2889..2895,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 8,
        span: 2895..2896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 88,
        column: 14,
        span: 2896..2902,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 88,
        column: 15,
        span: 2902..2903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 88,
        column: 18,
        span: 2903..2906,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 19,
        span: 2906..2907,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abc",
        ),
        line: 88,
        column: 22,
        span: 2907..2910,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 23,
        span: 2910..2911,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 88,
        column: 26,
        span: 2912..2914,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "256",
                    after_decimal: "",
                },
            ),
        ),
        line: 88,
        column: 30,
        span: 2914..2918,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 31,
        span: 2918..2919,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 90,
        column: 9,
        span: 2921..2929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        line: 90,
        column: 16,
        span: 2930..2936,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 90,
        column: 17,
        span: 2936..2937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 90,
        column: 18,
        span: 2937..2938,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 90,
        column: 19,
        span: 2938..2939,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 91,
        column: 8,
        span: 2942..2947,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 91,
        column: 12,
        span: 2948..2951,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 91,
        column: 14,
        span: 2952..2953,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 91,
        column: 16,
        span: 2954..2955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 91,
        column: 18,
        span: 2956..2957,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 91,
        column: 20,
        span: 2958..2959,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 91,
        column: 23,
        span: 2960..2962,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 91,
        column: 25,
        span: 2963..2964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 92,
        column: 9,
        span: 2967..2973,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 92,
        column: 10,
        span: 2973..2974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 92,
        column: 14,
        span: 2974..2978,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 92,
        column: 15,
        span: 2978..2979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abc",
        ),
        line: 92,
        column: 18,
        span: 2979..2982,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 92,
        column: 19,
        span: 2982..2983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 92,
        column: 21,
        span: 2984..2985,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 92,
        column: 22,
        span: 2985..2986,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 92,
        column: 31,
        span: 2987..2995,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 92,
        column: 32,
        span: 2995..2996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 92,
        column: 33,
        span: 2996..2997,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 92,
        column: 34,
        span: 2997..2998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 92,
        column: 38,
        span: 2999..3002,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 92,
        column: 39,
        span: 3002..3003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 92,
        column: 40,
        span: 3003..3004,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 92,
        column: 42,
        span: 3005..3006,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 92,
        column: 46,
        span: 3007..3010,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 92,
        column: 47,
        span: 3010..3011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 92,
        column: 48,
        span: 3011..3012,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 92,
        column: 51,
        span: 3013..3015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 92,
        column: 53,
        span: 3016..3017,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 92,
        column: 57,
        span: 3018..3021,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 92,
        column: 58,
        span: 3021..3022,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 93,
        column: 9,
        span: 3025..3031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 93,
        column: 13,
        span: 3032..3035,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 93,
        column: 14,
        span: 3035..3036,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 93,
        column: 0,
        span: 3036..3037,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 94,
        column: 0,
        span: 3038..3041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 96,
        column: 7,
        span: 3043..3049,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 8,
        span: 3049..3050,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 96,
        column: 14,
        span: 3050..3056,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 96,
        column: 15,
        span: 3056..3057,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 96,
        column: 18,
        span: 3057..3060,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 19,
        span: 3060..3061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        line: 96,
        column: 25,
        span: 3061..3067,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 26,
        span: 3067..3068,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[\\200-\\210]'",
        ),
        line: 96,
        column: 39,
        span: 3068..3081,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 40,
        span: 3081..3082,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 41,
        span: 3082..3083,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 96,
        column: 44,
        span: 3084..3086,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 96,
        column: 47,
        span: 3086..3089,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 48,
        span: 3089..3090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 98,
        column: 7,
        span: 3092..3098,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
        column: 8,
        span: 3098..3099,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        line: 98,
        column: 14,
        span: 3099..3105,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
        column: 15,
        span: 3105..3106,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[a-z]'",
        ),
        line: 98,
        column: 22,
        span: 3106..3113,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
        column: 23,
        span: 3113..3114,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 98,
        column: 26,
        span: 3115..3117,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcdefghijklmnopqrstuvwxyz\"",
        ),
        line: 98,
        column: 55,
        span: 3118..3146,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
        column: 56,
        span: 3146..3147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 99,
        column: 7,
        span: 3148..3154,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
        column: 8,
        span: 3154..3155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        line: 99,
        column: 14,
        span: 3155..3161,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
        column: 15,
        span: 3161..3162,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[a-z%d]'",
        ),
        line: 99,
        column: 24,
        span: 3162..3171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
        column: 25,
        span: 3171..3172,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 99,
        column: 28,
        span: 3173..3175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        line: 99,
        column: 35,
        span: 3176..3182,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
        column: 36,
        span: 3182..3183,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[%da-uu-z]'",
        ),
        line: 99,
        column: 48,
        span: 3183..3195,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
        column: 49,
        span: 3195..3196,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
        column: 50,
        span: 3196..3197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 100,
        column: 7,
        span: 3198..3204,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 8,
        span: 3204..3205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        line: 100,
        column: 14,
        span: 3205..3211,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 15,
        span: 3211..3212,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[a-]'",
        ),
        line: 100,
        column: 21,
        span: 3212..3218,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 22,
        span: 3218..3219,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 100,
        column: 25,
        span: 3220..3222,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-a\"",
        ),
        line: 100,
        column: 30,
        span: 3223..3227,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 31,
        span: 3227..3228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 101,
        column: 7,
        span: 3229..3235,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
        column: 8,
        span: 3235..3236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        line: 101,
        column: 14,
        span: 3236..3242,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
        column: 15,
        span: 3242..3243,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[^%W]'",
        ),
        line: 101,
        column: 22,
        span: 3243..3250,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
        column: 23,
        span: 3250..3251,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 101,
        column: 26,
        span: 3252..3254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        line: 101,
        column: 33,
        span: 3255..3261,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
        column: 34,
        span: 3261..3262,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[%w]'",
        ),
        line: 101,
        column: 40,
        span: 3262..3268,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
        column: 41,
        span: 3268..3269,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
        column: 42,
        span: 3269..3270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 102,
        column: 7,
        span: 3271..3277,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
        column: 8,
        span: 3277..3278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        line: 102,
        column: 14,
        span: 3278..3284,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
        column: 15,
        span: 3284..3285,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[]%%]'",
        ),
        line: 102,
        column: 22,
        span: 3285..3292,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
        column: 23,
        span: 3292..3293,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 102,
        column: 26,
        span: 3294..3296,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%]'",
        ),
        line: 102,
        column: 31,
        span: 3297..3301,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
        column: 32,
        span: 3301..3302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 103,
        column: 7,
        span: 3303..3309,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 8,
        span: 3309..3310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        line: 103,
        column: 14,
        span: 3310..3316,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 15,
        span: 3316..3317,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[a%-z]'",
        ),
        line: 103,
        column: 23,
        span: 3317..3325,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
        column: 24,
        span: 3325..3326,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 103,
        column: 27,
        span: 3327..3329,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-az'",
        ),
        line: 103,
        column: 33,
        span: 3330..3335,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
        column: 34,
        span: 3335..3336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 104,
        column: 7,
        span: 3337..3343,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
        column: 8,
        span: 3343..3344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        line: 104,
        column: 14,
        span: 3344..3350,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
        column: 15,
        span: 3350..3351,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[%^%[%-a%]%-b]'",
        ),
        line: 104,
        column: 31,
        span: 3351..3367,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
        column: 32,
        span: 3367..3368,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 104,
        column: 35,
        span: 3369..3371,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-[]^ab'",
        ),
        line: 104,
        column: 44,
        span: 3372..3380,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
        column: 45,
        span: 3380..3381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 105,
        column: 7,
        span: 3382..3388,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
        column: 8,
        span: 3388..3389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        line: 105,
        column: 14,
        span: 3389..3395,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
        column: 15,
        span: 3395..3396,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%Z'",
        ),
        line: 105,
        column: 19,
        span: 3396..3400,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
        column: 20,
        span: 3400..3401,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 105,
        column: 23,
        span: 3402..3404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        line: 105,
        column: 30,
        span: 3405..3411,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
        column: 31,
        span: 3411..3412,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[\\1-\\255]'",
        ),
        line: 105,
        column: 42,
        span: 3412..3423,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
        column: 43,
        span: 3423..3424,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
        column: 44,
        span: 3424..3425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 106,
        column: 7,
        span: 3426..3432,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
        column: 8,
        span: 3432..3433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        line: 106,
        column: 14,
        span: 3433..3439,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
        column: 15,
        span: 3439..3440,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.'",
        ),
        line: 106,
        column: 18,
        span: 3440..3443,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
        column: 19,
        span: 3443..3444,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 106,
        column: 22,
        span: 3445..3447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        line: 106,
        column: 29,
        span: 3448..3454,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
        column: 30,
        span: 3454..3455,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[\\1-\\255%z]'",
        ),
        line: 106,
        column: 43,
        span: 3455..3468,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
        column: 44,
        span: 3468..3469,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
        column: 45,
        span: 3469..3470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 107,
        column: 6,
        span: 3471..3476,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
        column: 7,
        span: 3476..3477,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 107,
        column: 10,
        span: 3477..3480,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
        column: 11,
        span: 3480..3481,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 107,
        column: 12,
        span: 3481..3482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 109,
        column: 7,
        span: 3484..3490,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 8,
        span: 3490..3491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 109,
        column: 14,
        span: 3491..3497,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 109,
        column: 15,
        span: 3497..3498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 109,
        column: 20,
        span: 3498..3503,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 21,
        span: 3503..3504,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo xyzK\"",
        ),
        line: 109,
        column: 31,
        span: 3504..3514,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 109,
        column: 32,
        span: 3514..3515,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%w+)K\"",
        ),
        line: 109,
        column: 41,
        span: 3516..3524,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 42,
        span: 3524..3525,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 109,
        column: 45,
        span: 3526..3528,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xyz\"",
        ),
        line: 109,
        column: 51,
        span: 3529..3534,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 52,
        span: 3534..3535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 110,
        column: 7,
        span: 3536..3542,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
        column: 8,
        span: 3542..3543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 110,
        column: 14,
        span: 3543..3549,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 110,
        column: 15,
        span: 3549..3550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 110,
        column: 20,
        span: 3550..3555,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
        column: 21,
        span: 3555..3556,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"254 K\"",
        ),
        line: 110,
        column: 28,
        span: 3556..3563,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 110,
        column: 29,
        span: 3563..3564,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%d*)K\"",
        ),
        line: 110,
        column: 38,
        span: 3565..3573,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
        column: 39,
        span: 3573..3574,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 110,
        column: 42,
        span: 3575..3577,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 110,
        column: 45,
        span: 3578..3580,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
        column: 46,
        span: 3580..3581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 111,
        column: 7,
        span: 3582..3588,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 8,
        span: 3588..3589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 111,
        column: 14,
        span: 3589..3595,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 111,
        column: 15,
        span: 3595..3596,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 111,
        column: 20,
        span: 3596..3601,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 21,
        span: 3601..3602,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo \"",
        ),
        line: 111,
        column: 27,
        span: 3602..3608,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 28,
        span: 3608..3609,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%w*)$\"",
        ),
        line: 111,
        column: 37,
        span: 3610..3618,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 38,
        span: 3618..3619,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 111,
        column: 41,
        span: 3620..3622,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 111,
        column: 44,
        span: 3623..3625,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 45,
        span: 3625..3626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 112,
        column: 7,
        span: 3627..3633,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 8,
        span: 3633..3634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 112,
        column: 14,
        span: 3634..3640,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 112,
        column: 15,
        span: 3640..3641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 112,
        column: 20,
        span: 3641..3646,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 21,
        span: 3646..3647,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo \"",
        ),
        line: 112,
        column: 27,
        span: 3647..3653,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 112,
        column: 28,
        span: 3653..3654,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%w+)$\"",
        ),
        line: 112,
        column: 37,
        span: 3655..3663,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 38,
        span: 3663..3664,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 112,
        column: 41,
        span: 3665..3667,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 112,
        column: 45,
        span: 3668..3671,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 46,
        span: 3671..3672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 113,
        column: 7,
        span: 3673..3679,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
        column: 8,
        span: 3679..3680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 113,
        column: 14,
        span: 3680..3686,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 113,
        column: 15,
        span: 3686..3687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 113,
        column: 19,
        span: 3687..3691,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
        column: 20,
        span: 3691..3692,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(�lo)\"",
        ),
        line: 113,
        column: 27,
        span: 3692..3699,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 113,
        column: 28,
        span: 3699..3700,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%(�\"",
        ),
        line: 113,
        column: 34,
        span: 3701..3706,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
        column: 35,
        span: 3706..3707,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 113,
        column: 38,
        span: 3708..3710,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 113,
        column: 40,
        span: 3710..3712,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
        column: 41,
        span: 3712..3713,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 114,
        column: 6,
        span: 3714..3719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 114,
        column: 8,
        span: 3720..3721,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 114,
        column: 9,
        span: 3721..3722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 114,
        column: 11,
        span: 3723..3724,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 114,
        column: 12,
        span: 3724..3725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 114,
        column: 14,
        span: 3726..3727,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 114,
        column: 15,
        span: 3727..3728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 114,
        column: 17,
        span: 3729..3730,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 114,
        column: 18,
        span: 3730..3731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 114,
        column: 20,
        span: 3732..3733,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 114,
        column: 22,
        span: 3734..3735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 114,
        column: 29,
        span: 3736..3742,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 114,
        column: 30,
        span: 3742..3743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 114,
        column: 35,
        span: 3743..3748,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
        column: 36,
        span: 3748..3749,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"�lo alo\"",
        ),
        line: 114,
        column: 45,
        span: 3749..3758,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 114,
        column: 46,
        span: 3758..3759,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^(((.).).* (%w*))$\"",
        ),
        line: 114,
        column: 67,
        span: 3760..3780,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
        column: 68,
        span: 3780..3781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 115,
        column: 7,
        span: 3782..3788,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
        column: 8,
        span: 3788..3789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 115,
        column: 9,
        span: 3789..3790,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 115,
        column: 12,
        span: 3791..3793,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'�lo alo'",
        ),
        line: 115,
        column: 22,
        span: 3794..3803,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 115,
        column: 26,
        span: 3804..3807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 115,
        column: 28,
        span: 3808..3809,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 115,
        column: 31,
        span: 3810..3812,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'�l'",
        ),
        line: 115,
        column: 36,
        span: 3813..3817,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 115,
        column: 40,
        span: 3818..3821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 115,
        column: 42,
        span: 3822..3823,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 115,
        column: 45,
        span: 3824..3826,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'�'",
        ),
        line: 115,
        column: 49,
        span: 3827..3830,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 115,
        column: 53,
        span: 3831..3834,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 115,
        column: 55,
        span: 3835..3836,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 115,
        column: 58,
        span: 3837..3839,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        line: 115,
        column: 64,
        span: 3840..3845,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 115,
        column: 68,
        span: 3846..3849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 115,
        column: 70,
        span: 3850..3851,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 115,
        column: 73,
        span: 3852..3854,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 115,
        column: 77,
        span: 3855..3858,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
        column: 78,
        span: 3858..3859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 116,
        column: 2,
        span: 3860..3861,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 116,
        column: 3,
        span: 3861..3862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 116,
        column: 5,
        span: 3863..3864,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 116,
        column: 6,
        span: 3864..3865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 116,
        column: 8,
        span: 3866..3867,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 116,
        column: 9,
        span: 3867..3868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 116,
        column: 11,
        span: 3869..3870,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 116,
        column: 13,
        span: 3871..3872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 116,
        column: 20,
        span: 3873..3879,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 116,
        column: 21,
        span: 3879..3880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 116,
        column: 26,
        span: 3880..3885,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
        column: 27,
        span: 3885..3886,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0123456789'",
        ),
        line: 116,
        column: 39,
        span: 3886..3898,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 116,
        column: 40,
        span: 3898..3899,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'(.+(.?)())'",
        ),
        line: 116,
        column: 53,
        span: 3900..3912,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
        column: 54,
        span: 3912..3913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 117,
        column: 7,
        span: 3914..3920,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 8,
        span: 3920..3921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 117,
        column: 9,
        span: 3921..3922,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 117,
        column: 12,
        span: 3923..3925,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0123456789'",
        ),
        line: 117,
        column: 25,
        span: 3926..3938,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 117,
        column: 29,
        span: 3939..3942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 117,
        column: 31,
        span: 3943..3944,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 117,
        column: 34,
        span: 3945..3947,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 117,
        column: 37,
        span: 3948..3950,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 117,
        column: 41,
        span: 3951..3954,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 117,
        column: 43,
        span: 3955..3956,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 117,
        column: 46,
        span: 3957..3959,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 117,
        column: 49,
        span: 3959..3962,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 117,
        column: 53,
        span: 3963..3966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 117,
        column: 55,
        span: 3967..3968,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 117,
        column: 58,
        span: 3969..3971,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 117,
        column: 62,
        span: 3972..3975,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 63,
        span: 3975..3976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 118,
        column: 6,
        span: 3977..3982,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 7,
        span: 3982..3983,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 118,
        column: 10,
        span: 3983..3986,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 11,
        span: 3986..3987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 120,
        column: 7,
        span: 3989..3995,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
        column: 8,
        span: 3995..3996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 120,
        column: 14,
        span: 3996..4002,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 120,
        column: 15,
        span: 4002..4003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 120,
        column: 19,
        span: 4003..4007,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
        column: 20,
        span: 4007..4008,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'�lo �lo'",
        ),
        line: 120,
        column: 29,
        span: 4008..4017,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 30,
        span: 4017..4018,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'�'",
        ),
        line: 120,
        column: 34,
        span: 4019..4022,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 35,
        span: 4022..4023,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 120,
        column: 39,
        span: 4024..4027,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
        column: 40,
        span: 4027..4028,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 120,
        column: 43,
        span: 4029..4031,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xlo xlo'",
        ),
        line: 120,
        column: 53,
        span: 4032..4041,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
        column: 54,
        span: 4041..4042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 121,
        column: 7,
        span: 4043..4049,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 121,
        column: 8,
        span: 4049..4050,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 121,
        column: 14,
        span: 4050..4056,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 121,
        column: 15,
        span: 4056..4057,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 121,
        column: 19,
        span: 4057..4061,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 121,
        column: 20,
        span: 4061..4062,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo �lo  '",
        ),
        line: 121,
        column: 31,
        span: 4062..4073,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 32,
        span: 4073..4074,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' +$'",
        ),
        line: 121,
        column: 38,
        span: 4075..4080,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 39,
        span: 4080..4081,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 121,
        column: 42,
        span: 4082..4084,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
        column: 43,
        span: 4084..4085,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 121,
        column: 46,
        span: 4086..4088,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo �lo'",
        ),
        line: 121,
        column: 56,
        span: 4089..4098,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
        column: 57,
        span: 4098..4099,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 122,
        column: 7,
        span: 4108..4114,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 8,
        span: 4114..4115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 122,
        column: 14,
        span: 4115..4121,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 122,
        column: 15,
        span: 4121..4122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 122,
        column: 19,
        span: 4122..4126,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 20,
        span: 4126..4127,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  alo alo  '",
        ),
        line: 122,
        column: 33,
        span: 4127..4140,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
        column: 34,
        span: 4140..4141,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^%s*(.-)%s*$'",
        ),
        line: 122,
        column: 49,
        span: 4142..4156,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
        column: 50,
        span: 4156..4157,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%1'",
        ),
        line: 122,
        column: 55,
        span: 4158..4162,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 56,
        span: 4162..4163,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 122,
        column: 59,
        span: 4164..4166,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo alo'",
        ),
        line: 122,
        column: 69,
        span: 4167..4176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 70,
        span: 4176..4177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 123,
        column: 7,
        span: 4193..4199,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
        column: 8,
        span: 4199..4200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 123,
        column: 14,
        span: 4200..4206,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 123,
        column: 15,
        span: 4206..4207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 123,
        column: 19,
        span: 4207..4211,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
        column: 20,
        span: 4211..4212,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo  alo  \\n 123\\n '",
        ),
        line: 123,
        column: 41,
        span: 4212..4233,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 123,
        column: 42,
        span: 4233..4234,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%s+'",
        ),
        line: 123,
        column: 48,
        span: 4235..4240,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 123,
        column: 49,
        span: 4240..4241,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' '",
        ),
        line: 123,
        column: 53,
        span: 4242..4245,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
        column: 54,
        span: 4245..4246,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 123,
        column: 57,
        span: 4247..4249,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo alo 123 '",
        ),
        line: 123,
        column: 72,
        span: 4250..4264,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
        column: 73,
        span: 4264..4265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 124,
        column: 2,
        span: 4266..4267,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 124,
        column: 4,
        span: 4268..4269,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ab� d\"",
        ),
        line: 124,
        column: 12,
        span: 4270..4277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 125,
        column: 2,
        span: 4278..4279,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 3,
        span: 4279..4280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 125,
        column: 5,
        span: 4281..4282,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 125,
        column: 7,
        span: 4283..4284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 125,
        column: 14,
        span: 4285..4291,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 125,
        column: 15,
        span: 4291..4292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 125,
        column: 19,
        span: 4292..4296,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 20,
        span: 4296..4297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 125,
        column: 21,
        span: 4297..4298,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 22,
        span: 4298..4299,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'(.)'",
        ),
        line: 125,
        column: 28,
        span: 4300..4305,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 29,
        span: 4305..4306,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%1@'",
        ),
        line: 125,
        column: 35,
        span: 4307..4312,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
        column: 36,
        span: 4312..4313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 126,
        column: 7,
        span: 4314..4320,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 126,
        column: 8,
        span: 4320..4321,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'@'",
        ),
        line: 126,
        column: 11,
        span: 4321..4324,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 126,
        column: 14,
        span: 4325..4327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 126,
        column: 16,
        span: 4328..4329,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 126,
        column: 19,
        span: 4330..4332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 126,
        column: 26,
        span: 4333..4339,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 126,
        column: 27,
        span: 4339..4340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 126,
        column: 31,
        span: 4340..4344,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 126,
        column: 32,
        span: 4344..4345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 126,
        column: 33,
        span: 4345..4346,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
        column: 34,
        span: 4346..4347,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 126,
        column: 37,
        span: 4348..4350,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
        column: 38,
        span: 4350..4351,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'@'",
        ),
        line: 126,
        column: 42,
        span: 4352..4355,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 126,
        column: 43,
        span: 4355..4356,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 126,
        column: 47,
        span: 4357..4360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 126,
        column: 49,
        span: 4361..4362,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 126,
        column: 52,
        span: 4363..4365,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
        column: 54,
        span: 4365..4367,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 126,
        column: 55,
        span: 4367..4368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 127,
        column: 2,
        span: 4369..4370,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 127,
        column: 3,
        span: 4370..4371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 127,
        column: 5,
        span: 4372..4373,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 127,
        column: 7,
        span: 4374..4375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 127,
        column: 14,
        span: 4376..4382,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 127,
        column: 15,
        span: 4382..4383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 127,
        column: 19,
        span: 4383..4387,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 127,
        column: 20,
        span: 4387..4388,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ab�d'",
        ),
        line: 127,
        column: 26,
        span: 4388..4394,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 127,
        column: 27,
        span: 4394..4395,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'(.)'",
        ),
        line: 127,
        column: 33,
        span: 4396..4401,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 127,
        column: 34,
        span: 4401..4402,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%0@'",
        ),
        line: 127,
        column: 40,
        span: 4403..4408,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 127,
        column: 41,
        span: 4408..4409,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 127,
        column: 43,
        span: 4409..4411,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 127,
        column: 44,
        span: 4411..4412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 128,
        column: 7,
        span: 4413..4419,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 128,
        column: 8,
        span: 4419..4420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 128,
        column: 9,
        span: 4420..4421,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 128,
        column: 12,
        span: 4422..4424,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a@b@�d'",
        ),
        line: 128,
        column: 21,
        span: 4425..4433,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 128,
        column: 25,
        span: 4434..4437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 128,
        column: 27,
        span: 4438..4439,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 128,
        column: 30,
        span: 4440..4442,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 128,
        column: 32,
        span: 4442..4444,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 128,
        column: 33,
        span: 4444..4445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 129,
        column: 7,
        span: 4446..4452,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
        column: 8,
        span: 4452..4453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 129,
        column: 14,
        span: 4453..4459,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 129,
        column: 15,
        span: 4459..4460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 129,
        column: 19,
        span: 4460..4464,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
        column: 20,
        span: 4464..4465,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo alo'",
        ),
        line: 129,
        column: 29,
        span: 4465..4474,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 30,
        span: 4474..4475,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'()[al]'",
        ),
        line: 129,
        column: 39,
        span: 4476..4484,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 40,
        span: 4484..4485,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%1'",
        ),
        line: 129,
        column: 45,
        span: 4486..4490,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 46,
        span: 4490..4491,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 129,
        column: 49,
        span: 4492..4494,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'12o 56o'",
        ),
        line: 129,
        column: 59,
        span: 4495..4504,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 60,
        span: 4504..4505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 130,
        column: 7,
        span: 4506..4512,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
        column: 8,
        span: 4512..4513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 130,
        column: 14,
        span: 4513..4519,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 130,
        column: 15,
        span: 4519..4520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 130,
        column: 19,
        span: 4520..4524,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
        column: 20,
        span: 4524..4525,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc=xyz\"",
        ),
        line: 130,
        column: 29,
        span: 4525..4534,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 30,
        span: 4534..4535,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%w*)(%p)(%w+)\"",
        ),
        line: 130,
        column: 47,
        span: 4536..4552,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 48,
        span: 4552..4553,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%3%2%1-%0\"",
        ),
        line: 130,
        column: 60,
        span: 4554..4565,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
        column: 61,
        span: 4565..4566,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 130,
        column: 64,
        span: 4567..4569,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xyz=abc-abc=xyz\"",
        ),
        line: 131,
        column: 20,
        span: 4572..4589,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
        column: 21,
        span: 4589..4590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 132,
        column: 7,
        span: 4591..4597,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 132,
        column: 8,
        span: 4597..4598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 132,
        column: 14,
        span: 4598..4604,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 132,
        column: 15,
        span: 4604..4605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 132,
        column: 19,
        span: 4605..4609,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 132,
        column: 20,
        span: 4609..4610,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        line: 132,
        column: 25,
        span: 4610..4615,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 26,
        span: 4615..4616,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%w\"",
        ),
        line: 132,
        column: 31,
        span: 4617..4621,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 32,
        span: 4621..4622,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%1%0\"",
        ),
        line: 132,
        column: 39,
        span: 4623..4629,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 132,
        column: 40,
        span: 4629..4630,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 132,
        column: 43,
        span: 4631..4633,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aabbcc\"",
        ),
        line: 132,
        column: 52,
        span: 4634..4642,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 132,
        column: 53,
        span: 4642..4643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 133,
        column: 7,
        span: 4644..4650,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
        column: 8,
        span: 4650..4651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 133,
        column: 14,
        span: 4651..4657,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 133,
        column: 15,
        span: 4657..4658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 133,
        column: 19,
        span: 4658..4662,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
        column: 20,
        span: 4662..4663,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        line: 133,
        column: 25,
        span: 4663..4668,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 26,
        span: 4668..4669,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%w+\"",
        ),
        line: 133,
        column: 32,
        span: 4670..4675,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 33,
        span: 4675..4676,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%0%1\"",
        ),
        line: 133,
        column: 40,
        span: 4677..4683,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 41,
        span: 4683..4684,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 133,
        column: 44,
        span: 4685..4687,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcabc\"",
        ),
        line: 133,
        column: 53,
        span: 4688..4696,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 54,
        span: 4696..4697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 134,
        column: 7,
        span: 4698..4704,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
        column: 8,
        span: 4704..4705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 134,
        column: 14,
        span: 4705..4711,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 134,
        column: 15,
        span: 4711..4712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 134,
        column: 19,
        span: 4712..4716,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
        column: 20,
        span: 4716..4717,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'���'",
        ),
        line: 134,
        column: 25,
        span: 4717..4722,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 26,
        span: 4722..4723,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'$'",
        ),
        line: 134,
        column: 30,
        span: 4724..4727,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 31,
        span: 4727..4728,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0��'",
        ),
        line: 134,
        column: 38,
        span: 4729..4735,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
        column: 39,
        span: 4735..4736,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 134,
        column: 42,
        span: 4737..4739,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'���\\0��'",
        ),
        line: 134,
        column: 52,
        span: 4740..4749,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
        column: 53,
        span: 4749..4750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 135,
        column: 7,
        span: 4751..4757,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 135,
        column: 8,
        span: 4757..4758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 135,
        column: 14,
        span: 4758..4764,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 135,
        column: 15,
        span: 4764..4765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 135,
        column: 19,
        span: 4765..4769,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 135,
        column: 20,
        span: 4769..4770,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 135,
        column: 22,
        span: 4770..4772,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 135,
        column: 23,
        span: 4772..4773,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^'",
        ),
        line: 135,
        column: 27,
        span: 4774..4777,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 135,
        column: 28,
        span: 4777..4778,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'r'",
        ),
        line: 135,
        column: 32,
        span: 4779..4782,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 135,
        column: 33,
        span: 4782..4783,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 135,
        column: 36,
        span: 4784..4786,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'r'",
        ),
        line: 135,
        column: 40,
        span: 4787..4790,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 135,
        column: 41,
        span: 4790..4791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 136,
        column: 7,
        span: 4792..4798,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 136,
        column: 8,
        span: 4798..4799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 136,
        column: 14,
        span: 4799..4805,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 136,
        column: 15,
        span: 4805..4806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 136,
        column: 19,
        span: 4806..4810,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 136,
        column: 20,
        span: 4810..4811,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 136,
        column: 22,
        span: 4811..4813,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
        column: 23,
        span: 4813..4814,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'$'",
        ),
        line: 136,
        column: 27,
        span: 4815..4818,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
        column: 28,
        span: 4818..4819,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'r'",
        ),
        line: 136,
        column: 32,
        span: 4820..4823,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 136,
        column: 33,
        span: 4823..4824,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 136,
        column: 36,
        span: 4825..4827,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'r'",
        ),
        line: 136,
        column: 40,
        span: 4828..4831,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 136,
        column: 41,
        span: 4831..4832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 137,
        column: 6,
        span: 4833..4838,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
        column: 7,
        span: 4838..4839,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 137,
        column: 10,
        span: 4839..4842,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
        column: 11,
        span: 4842..4843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 139,
        column: 7,
        span: 4845..4851,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
        column: 8,
        span: 4851..4852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 139,
        column: 14,
        span: 4852..4858,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 139,
        column: 15,
        span: 4858..4859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 139,
        column: 19,
        span: 4859..4863,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
        column: 20,
        span: 4863..4864,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"um (dois) tres (quatro)\"",
        ),
        line: 139,
        column: 45,
        span: 4864..4889,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
        column: 46,
        span: 4889..4890,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%(%w+%))\"",
        ),
        line: 139,
        column: 58,
        span: 4891..4902,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
        column: 59,
        span: 4902..4903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 139,
        column: 66,
        span: 4904..4910,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 139,
        column: 67,
        span: 4910..4911,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upper",
        ),
        line: 139,
        column: 72,
        span: 4911..4916,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 73,
        span: 4916..4917,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 139,
        column: 76,
        span: 4918..4920,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"um (DOIS) tres (QUATRO)\"",
        ),
        line: 140,
        column: 28,
        span: 4923..4948,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 29,
        span: 4948..4949,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 142,
        column: 0,
        span: 4951..4953,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 143,
        column: 8,
        span: 4956..4961,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 143,
        column: 17,
        span: 4962..4970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setglobal",
        ),
        line: 143,
        column: 27,
        span: 4971..4980,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 143,
        column: 28,
        span: 4980..4981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 143,
        column: 29,
        span: 4981..4982,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 143,
        column: 30,
        span: 4982..4983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 143,
        column: 32,
        span: 4984..4985,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 143,
        column: 33,
        span: 4985..4986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawset",
        ),
        line: 143,
        column: 40,
        span: 4987..4993,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 143,
        column: 41,
        span: 4993..4994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 143,
        column: 43,
        span: 4994..4996,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 143,
        column: 44,
        span: 4996..4997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 143,
        column: 46,
        span: 4998..4999,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 143,
        column: 47,
        span: 4999..5000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 143,
        column: 49,
        span: 5001..5002,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 143,
        column: 50,
        span: 5002..5003,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 143,
        column: 0,
        span: 5004..5007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 145,
        column: 9,
        span: 5011..5017,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 145,
        column: 10,
        span: 5017..5018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 145,
        column: 14,
        span: 5018..5022,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
        column: 15,
        span: 5022..5023,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=roberto,roberto=a\"",
        ),
        line: 145,
        column: 36,
        span: 5023..5044,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 145,
        column: 37,
        span: 5044..5045,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%w+)=(%w%w*)\"",
        ),
        line: 145,
        column: 53,
        span: 5046..5061,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 145,
        column: 54,
        span: 5061..5062,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setglobal",
        ),
        line: 145,
        column: 64,
        span: 5063..5072,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
        column: 65,
        span: 5072..5073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 146,
        column: 9,
        span: 5076..5082,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 10,
        span: 5082..5083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 146,
        column: 12,
        span: 5083..5085,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 146,
        column: 13,
        span: 5085..5086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 146,
        column: 14,
        span: 5086..5087,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 146,
        column: 17,
        span: 5088..5090,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"roberto\"",
        ),
        line: 146,
        column: 27,
        span: 5091..5100,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 146,
        column: 31,
        span: 5101..5104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 146,
        column: 34,
        span: 5105..5107,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 146,
        column: 35,
        span: 5107..5108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "roberto",
        ),
        line: 146,
        column: 42,
        span: 5108..5115,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 146,
        column: 45,
        span: 5116..5118,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 146,
        column: 49,
        span: 5119..5122,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 50,
        span: 5122..5123,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 147,
        column: 0,
        span: 5124..5127,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 149,
        column: 9,
        span: 5129..5137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 149,
        column: 11,
        span: 5138..5139,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
        column: 12,
        span: 5139..5140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 149,
        column: 13,
        span: 5140..5141,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 149,
        column: 14,
        span: 5141..5142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 149,
        column: 16,
        span: 5143..5144,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
        column: 17,
        span: 5144..5145,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 149,
        column: 24,
        span: 5146..5152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 149,
        column: 31,
        span: 5153..5159,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 149,
        column: 32,
        span: 5159..5160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 149,
        column: 36,
        span: 5160..5164,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
        column: 37,
        span: 5164..5165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 149,
        column: 38,
        span: 5165..5166,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 149,
        column: 39,
        span: 5166..5167,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.'",
        ),
        line: 149,
        column: 43,
        span: 5168..5171,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 149,
        column: 44,
        span: 5171..5172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 149,
        column: 46,
        span: 5173..5174,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
        column: 47,
        span: 5174..5175,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 149,
        column: 0,
        span: 5176..5179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 151,
        column: 7,
        span: 5181..5187,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 8,
        span: 5187..5188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 151,
        column: 14,
        span: 5188..5194,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 151,
        column: 15,
        span: 5194..5195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 151,
        column: 19,
        span: 5195..5199,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 20,
        span: 5199..5200,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"trocar tudo em |teste|b| � |beleza|al|\"",
        ),
        line: 151,
        column: 60,
        span: 5200..5240,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 151,
        column: 61,
        span: 5240..5241,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"|([^|]*)|([^|]*)|\"",
        ),
        line: 151,
        column: 81,
        span: 5242..5261,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 151,
        column: 82,
        span: 5261..5262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 151,
        column: 84,
        span: 5263..5264,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
        column: 85,
        span: 5264..5265,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 151,
        column: 88,
        span: 5266..5268,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"trocar tudo em bbbbb � alalalalalal\"",
        ),
        line: 152,
        column: 40,
        span: 5271..5308,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 41,
        span: 5308..5309,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 154,
        column: 6,
        span: 5311..5316,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 154,
        column: 15,
        span: 5317..5325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 154,
        column: 24,
        span: 5326..5334,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 25,
        span: 5334..5335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 154,
        column: 26,
        span: 5335..5336,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 27,
        span: 5336..5337,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 154,
        column: 34,
        span: 5338..5344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        line: 154,
        column: 45,
        span: 5345..5355,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 46,
        span: 5355..5356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 154,
        column: 47,
        span: 5356..5357,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 48,
        span: 5357..5358,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 49,
        span: 5358..5359,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 50,
        span: 5359..5360,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 154,
        column: 53,
        span: 5361..5363,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 154,
        column: 56,
        span: 5364..5366,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 154,
        column: 0,
        span: 5367..5370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 156,
        column: 7,
        span: 5372..5378,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
        column: 8,
        span: 5378..5379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 156,
        column: 14,
        span: 5379..5385,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 156,
        column: 15,
        span: 5385..5386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 156,
        column: 19,
        span: 5386..5390,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
        column: 20,
        span: 5390..5391,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo $a=1$ novamente $return a$\"",
        ),
        line: 156,
        column: 52,
        span: 5391..5423,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 156,
        column: 53,
        span: 5423..5424,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"$([^$]*)%$\"",
        ),
        line: 156,
        column: 66,
        span: 5425..5437,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 156,
        column: 67,
        span: 5437..5438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 156,
        column: 76,
        span: 5439..5447,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
        column: 77,
        span: 5447..5448,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 156,
        column: 80,
        span: 5449..5451,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo  novamente 1\"",
        ),
        line: 157,
        column: 21,
        span: 5454..5472,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 157,
        column: 22,
        span: 5472..5473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 159,
        column: 2,
        span: 5475..5476,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 159,
        column: 4,
        span: 5477..5478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 159,
        column: 11,
        span: 5479..5485,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 159,
        column: 12,
        span: 5485..5486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 159,
        column: 16,
        span: 5486..5490,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
        column: 17,
        span: 5490..5491,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"$x=string.gsub('alo', '.', string.upper)$ assim vai para $return x$\"",
        ),
        line: 159,
        column: 86,
        span: 5491..5560,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 159,
        column: 87,
        span: 5560..5561,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"$([^$]*)%$\"",
        ),
        line: 160,
        column: 15,
        span: 5564..5576,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 160,
        column: 16,
        span: 5576..5577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 160,
        column: 25,
        span: 5578..5586,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 160,
        column: 26,
        span: 5586..5587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 161,
        column: 7,
        span: 5588..5594,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
        column: 8,
        span: 5594..5595,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 161,
        column: 9,
        span: 5595..5596,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 161,
        column: 12,
        span: 5597..5599,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' assim vai para ALO'",
        ),
        line: 161,
        column: 34,
        span: 5600..5621,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
        column: 35,
        span: 5621..5622,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 163,
        column: 2,
        span: 5624..5625,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 163,
        column: 4,
        span: 5626..5627,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 163,
        column: 6,
        span: 5628..5629,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 163,
        column: 7,
        span: 5629..5630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 164,
        column: 2,
        span: 5631..5632,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 164,
        column: 4,
        span: 5633..5634,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a alo jose  joao'",
        ),
        line: 164,
        column: 23,
        span: 5635..5653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 165,
        column: 2,
        span: 5654..5655,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 165,
        column: 4,
        span: 5656..5657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 165,
        column: 11,
        span: 5658..5664,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 165,
        column: 12,
        span: 5664..5665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 165,
        column: 16,
        span: 5665..5669,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 17,
        span: 5669..5670,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 165,
        column: 18,
        span: 5670..5671,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 165,
        column: 19,
        span: 5671..5672,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'()(%w+)()'",
        ),
        line: 165,
        column: 31,
        span: 5673..5684,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 165,
        column: 32,
        span: 5684..5685,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 165,
        column: 41,
        span: 5686..5694,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 42,
        span: 5694..5695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 165,
        column: 43,
        span: 5695..5696,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 165,
        column: 44,
        span: 5696..5697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 165,
        column: 46,
        span: 5698..5699,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 165,
        column: 47,
        span: 5699..5700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 165,
        column: 49,
        span: 5701..5702,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 50,
        span: 5702..5703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 166,
        column: 9,
        span: 5706..5712,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 10,
        span: 5712..5713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 166,
        column: 16,
        span: 5713..5719,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 166,
        column: 17,
        span: 5719..5720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 166,
        column: 20,
        span: 5720..5723,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 21,
        span: 5723..5724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 166,
        column: 22,
        span: 5724..5725,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 23,
        span: 5725..5726,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 166,
        column: 26,
        span: 5727..5729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 166,
        column: 28,
        span: 5730..5731,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 166,
        column: 30,
        span: 5732..5733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 166,
        column: 32,
        span: 5734..5735,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 33,
        span: 5735..5736,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 166,
        column: 34,
        span: 5736..5737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 167,
        column: 4,
        span: 5740..5741,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 167,
        column: 5,
        span: 5741..5742,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 167,
        column: 6,
        span: 5742..5743,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 167,
        column: 7,
        span: 5743..5744,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 167,
        column: 9,
        span: 5745..5746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 167,
        column: 11,
        span: 5747..5748,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 167,
        column: 13,
        span: 5749..5750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 167,
        column: 15,
        span: 5751..5752,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 167,
        column: 16,
        span: 5752..5753,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 168,
        column: 4,
        span: 5754..5757,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
        column: 5,
        span: 5757..5758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 169,
        column: 7,
        span: 5759..5765,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 8,
        span: 5765..5766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 169,
        column: 9,
        span: 5766..5767,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 169,
        column: 12,
        span: 5768..5770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 169,
        column: 14,
        span: 5771..5772,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 169,
        column: 18,
        span: 5773..5776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 169,
        column: 20,
        span: 5777..5778,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 169,
        column: 21,
        span: 5778..5779,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 22,
        span: 5778..5780,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 169,
        column: 23,
        span: 5780..5781,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 169,
        column: 26,
        span: 5782..5784,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 28,
        span: 5784..5786,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 169,
        column: 32,
        span: 5787..5790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 169,
        column: 34,
        span: 5791..5792,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 169,
        column: 35,
        span: 5792..5793,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 36,
        span: 5792..5794,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 169,
        column: 37,
        span: 5794..5795,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 169,
        column: 40,
        span: 5796..5798,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 42,
        span: 5798..5800,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 169,
        column: 46,
        span: 5801..5804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 169,
        column: 48,
        span: 5805..5806,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 169,
        column: 49,
        span: 5806..5807,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 50,
        span: 5806..5808,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 169,
        column: 51,
        span: 5808..5809,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 169,
        column: 54,
        span: 5810..5812,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 56,
        span: 5812..5814,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 169,
        column: 60,
        span: 5815..5818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 169,
        column: 62,
        span: 5819..5820,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 169,
        column: 63,
        span: 5820..5821,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 65,
        span: 5820..5823,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 169,
        column: 66,
        span: 5823..5824,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 169,
        column: 69,
        span: 5825..5827,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 71,
        span: 5827..5829,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 72,
        span: 5829..5830,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 172,
        column: 9,
        span: 5833..5841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isbalanced",
        ),
        line: 172,
        column: 20,
        span: 5842..5852,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
        column: 21,
        span: 5852..5853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 172,
        column: 22,
        span: 5853..5854,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
        column: 23,
        span: 5854..5855,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 173,
        column: 9,
        span: 5858..5864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 173,
        column: 16,
        span: 5865..5871,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 173,
        column: 17,
        span: 5871..5872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 173,
        column: 21,
        span: 5872..5876,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
        column: 22,
        span: 5876..5877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 173,
        column: 28,
        span: 5877..5883,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 173,
        column: 29,
        span: 5883..5884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 173,
        column: 33,
        span: 5884..5888,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
        column: 34,
        span: 5888..5889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 173,
        column: 35,
        span: 5889..5890,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 173,
        column: 36,
        span: 5890..5891,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%b()\"",
        ),
        line: 173,
        column: 43,
        span: 5892..5898,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 173,
        column: 44,
        span: 5898..5899,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 173,
        column: 47,
        span: 5900..5902,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
        column: 48,
        span: 5902..5903,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 173,
        column: 49,
        span: 5903..5904,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[()]\"",
        ),
        line: 173,
        column: 56,
        span: 5905..5911,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
        column: 57,
        span: 5911..5912,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 173,
        column: 60,
        span: 5913..5915,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 173,
        column: 0,
        span: 5916..5919,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 174,
        column: 0,
        span: 5920..5923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 176,
        column: 7,
        span: 5925..5931,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 8,
        span: 5931..5932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isbalanced",
        ),
        line: 176,
        column: 18,
        span: 5932..5942,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 19,
        span: 5942..5943,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(9 ((8))(\\0) 7) \\0\\0 a b ()(c)() a\"",
        ),
        line: 176,
        column: 55,
        span: 5943..5979,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 56,
        span: 5979..5980,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 57,
        span: 5980..5981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 177,
        column: 7,
        span: 5982..5988,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
        column: 8,
        span: 5988..5989,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 177,
        column: 11,
        span: 5989..5992,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isbalanced",
        ),
        line: 177,
        column: 22,
        span: 5993..6003,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
        column: 23,
        span: 6003..6004,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(9 ((8) 7) a b (\\0 c) a\"",
        ),
        line: 177,
        column: 48,
        span: 6004..6029,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
        column: 49,
        span: 6029..6030,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
        column: 50,
        span: 6030..6031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 178,
        column: 7,
        span: 6032..6038,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
        column: 8,
        span: 6038..6039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 178,
        column: 14,
        span: 6039..6045,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 178,
        column: 15,
        span: 6045..6046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 178,
        column: 19,
        span: 6046..6050,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
        column: 20,
        span: 6050..6051,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo 'oi' alo\"",
        ),
        line: 178,
        column: 34,
        span: 6051..6065,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 178,
        column: 35,
        span: 6065..6066,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%b''\"",
        ),
        line: 178,
        column: 42,
        span: 6067..6073,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 178,
        column: 43,
        span: 6073..6074,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"'",
        ),
        line: 178,
        column: 47,
        span: 6075..6078,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
        column: 48,
        span: 6078..6079,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 178,
        column: 51,
        span: 6080..6082,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo \" alo'",
        ),
        line: 178,
        column: 63,
        span: 6083..6094,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
        column: 64,
        span: 6094..6095,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 181,
        column: 6,
        span: 6098..6103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 181,
        column: 8,
        span: 6104..6105,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 181,
        column: 10,
        span: 6106..6107,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 181,
        column: 12,
        span: 6108..6109,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"apple\"",
        ),
        line: 181,
        column: 20,
        span: 6110..6117,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
        column: 21,
        span: 6117..6118,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"orange\"",
        ),
        line: 181,
        column: 30,
        span: 6119..6127,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
        column: 31,
        span: 6127..6128,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lime\"",
        ),
        line: 181,
        column: 38,
        span: 6129..6135,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 181,
        column: 39,
        span: 6135..6136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 181,
        column: 41,
        span: 6137..6138,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 181,
        column: 43,
        span: 6139..6140,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 181,
        column: 45,
        span: 6140..6142,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 181,
        column: 47,
        span: 6143..6144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 182,
        column: 7,
        span: 6145..6151,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 182,
        column: 8,
        span: 6151..6152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 182,
        column: 14,
        span: 6152..6158,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 182,
        column: 15,
        span: 6158..6159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 182,
        column: 19,
        span: 6159..6163,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 182,
        column: 20,
        span: 6163..6164,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x and x and x\"",
        ),
        line: 182,
        column: 35,
        span: 6164..6179,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 182,
        column: 36,
        span: 6179..6180,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 182,
        column: 40,
        span: 6181..6184,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 182,
        column: 41,
        span: 6184..6185,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 182,
        column: 50,
        span: 6186..6194,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 182,
        column: 51,
        span: 6194..6195,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 182,
        column: 52,
        span: 6195..6196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 182,
        column: 54,
        span: 6197..6198,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 182,
        column: 55,
        span: 6198..6199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 182,
        column: 56,
        span: 6199..6200,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 182,
        column: 58,
        span: 6201..6202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 182,
        column: 60,
        span: 6203..6204,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 182,
        column: 61,
        span: 6204..6205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 182,
        column: 62,
        span: 6205..6206,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 182,
        column: 64,
        span: 6207..6208,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 182,
        column: 66,
        span: 6208..6210,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 182,
        column: 67,
        span: 6210..6211,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 182,
        column: 74,
        span: 6212..6218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 182,
        column: 76,
        span: 6219..6220,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 182,
        column: 77,
        span: 6220..6221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 182,
        column: 78,
        span: 6221..6222,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 182,
        column: 79,
        span: 6222..6223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 182,
        column: 80,
        span: 6223..6224,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 182,
        column: 81,
        span: 6224..6225,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 182,
        column: 85,
        span: 6226..6229,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 182,
        column: 86,
        span: 6229..6230,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 183,
        column: 5,
        span: 6233..6235,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"apple and orange and lime\"",
        ),
        line: 183,
        column: 33,
        span: 6236..6263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 183,
        column: 34,
        span: 6263..6264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 185,
        column: 2,
        span: 6266..6267,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 185,
        column: 4,
        span: 6268..6269,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 185,
        column: 6,
        span: 6270..6271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 185,
        column: 8,
        span: 6272..6273,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 185,
        column: 10,
        span: 6274..6275,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 185,
        column: 12,
        span: 6275..6277,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 185,
        column: 14,
        span: 6278..6279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 186,
        column: 7,
        span: 6280..6286,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 186,
        column: 8,
        span: 6286..6287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 186,
        column: 12,
        span: 6287..6291,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 13,
        span: 6291..6292,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"first second word\"",
        ),
        line: 186,
        column: 32,
        span: 6292..6311,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 33,
        span: 6311..6312,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%w%w*\"",
        ),
        line: 186,
        column: 41,
        span: 6313..6320,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 42,
        span: 6320..6321,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 186,
        column: 51,
        span: 6322..6330,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 52,
        span: 6330..6331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 186,
        column: 53,
        span: 6331..6332,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 54,
        span: 6332..6333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 186,
        column: 56,
        span: 6334..6335,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 186,
        column: 57,
        span: 6335..6336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 186,
        column: 58,
        span: 6336..6337,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 186,
        column: 60,
        span: 6338..6339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 186,
        column: 62,
        span: 6340..6341,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 186,
        column: 63,
        span: 6341..6342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 186,
        column: 64,
        span: 6342..6343,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 186,
        column: 66,
        span: 6344..6345,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 186,
        column: 68,
        span: 6345..6347,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 186,
        column: 69,
        span: 6347..6348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 187,
        column: 4,
        span: 6351..6352,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 187,
        column: 5,
        span: 6352..6353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 187,
        column: 6,
        span: 6353..6354,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 187,
        column: 7,
        span: 6354..6355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 187,
        column: 8,
        span: 6355..6356,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 187,
        column: 9,
        span: 6356..6357,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 187,
        column: 11,
        span: 6358..6359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 187,
        column: 0,
        span: 6360..6361,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 188,
        column: 4,
        span: 6362..6365,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
        column: 5,
        span: 6365..6366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 189,
        column: 7,
        span: 6367..6373,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 189,
        column: 8,
        span: 6373..6374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 189,
        column: 9,
        span: 6374..6375,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 189,
        column: 10,
        span: 6375..6376,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 189,
        column: 11,
        span: 6375..6377,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 189,
        column: 12,
        span: 6377..6378,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 189,
        column: 15,
        span: 6379..6381,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"first\"",
        ),
        line: 189,
        column: 23,
        span: 6382..6389,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 189,
        column: 27,
        span: 6390..6393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 189,
        column: 29,
        span: 6394..6395,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 189,
        column: 30,
        span: 6395..6396,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 189,
        column: 31,
        span: 6395..6397,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 189,
        column: 32,
        span: 6397..6398,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 189,
        column: 35,
        span: 6399..6401,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"second\"",
        ),
        line: 189,
        column: 44,
        span: 6402..6410,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 189,
        column: 48,
        span: 6411..6414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 189,
        column: 50,
        span: 6415..6416,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 189,
        column: 51,
        span: 6416..6417,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 189,
        column: 52,
        span: 6416..6418,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 189,
        column: 53,
        span: 6418..6419,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 189,
        column: 56,
        span: 6420..6422,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"word\"",
        ),
        line: 189,
        column: 63,
        span: 6423..6429,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 189,
        column: 67,
        span: 6430..6433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 189,
        column: 69,
        span: 6434..6435,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 189,
        column: 70,
        span: 6435..6436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 189,
        column: 71,
        span: 6436..6437,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 189,
        column: 74,
        span: 6438..6440,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 189,
        column: 76,
        span: 6440..6442,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 189,
        column: 77,
        span: 6442..6443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 191,
        column: 2,
        span: 6445..6446,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 191,
        column: 4,
        span: 6447..6448,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 191,
        column: 6,
        span: 6449..6450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 191,
        column: 8,
        span: 6451..6452,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 191,
        column: 10,
        span: 6453..6454,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 191,
        column: 12,
        span: 6454..6456,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 191,
        column: 14,
        span: 6457..6458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 192,
        column: 7,
        span: 6459..6465,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 8,
        span: 6465..6466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 192,
        column: 14,
        span: 6466..6472,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 192,
        column: 15,
        span: 6472..6473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 192,
        column: 19,
        span: 6473..6477,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 20,
        span: 6477..6478,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"first second word\"",
        ),
        line: 192,
        column: 39,
        span: 6478..6497,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 192,
        column: 40,
        span: 6497..6498,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%w+\"",
        ),
        line: 192,
        column: 46,
        span: 6499..6504,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 192,
        column: 47,
        span: 6504..6505,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 193,
        column: 11,
        span: 6508..6516,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 12,
        span: 6516..6517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 193,
        column: 13,
        span: 6517..6518,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
        column: 14,
        span: 6518..6519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 193,
        column: 16,
        span: 6520..6521,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 193,
        column: 17,
        span: 6521..6522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 193,
        column: 18,
        span: 6522..6523,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 193,
        column: 20,
        span: 6524..6525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 193,
        column: 22,
        span: 6526..6527,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 193,
        column: 23,
        span: 6527..6528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 193,
        column: 24,
        span: 6528..6529,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 193,
        column: 26,
        span: 6530..6531,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 193,
        column: 28,
        span: 6531..6533,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 193,
        column: 29,
        span: 6533..6534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 194,
        column: 6,
        span: 6539..6540,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 194,
        column: 7,
        span: 6540..6541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 194,
        column: 8,
        span: 6541..6542,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 194,
        column: 9,
        span: 6542..6543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 194,
        column: 10,
        span: 6543..6544,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 194,
        column: 11,
        span: 6544..6545,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 194,
        column: 13,
        span: 6546..6547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 194,
        column: 0,
        span: 6548..6549,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 195,
        column: 6,
        span: 6552..6555,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 195,
        column: 7,
        span: 6555..6556,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 195,
        column: 9,
        span: 6556..6558,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 10,
        span: 6558..6559,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 195,
        column: 13,
        span: 6560..6562,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"first second word\"",
        ),
        line: 195,
        column: 33,
        span: 6563..6582,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 34,
        span: 6582..6583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 196,
        column: 7,
        span: 6584..6590,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 196,
        column: 8,
        span: 6590..6591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 196,
        column: 9,
        span: 6591..6592,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 196,
        column: 10,
        span: 6592..6593,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 196,
        column: 11,
        span: 6592..6594,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 196,
        column: 12,
        span: 6594..6595,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 196,
        column: 15,
        span: 6596..6598,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"first\"",
        ),
        line: 196,
        column: 23,
        span: 6599..6606,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 196,
        column: 27,
        span: 6607..6610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 196,
        column: 29,
        span: 6611..6612,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 196,
        column: 30,
        span: 6612..6613,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 196,
        column: 31,
        span: 6612..6614,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 196,
        column: 32,
        span: 6614..6615,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 196,
        column: 35,
        span: 6616..6618,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"second\"",
        ),
        line: 196,
        column: 44,
        span: 6619..6627,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 196,
        column: 48,
        span: 6628..6631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 196,
        column: 50,
        span: 6632..6633,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 196,
        column: 51,
        span: 6633..6634,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 196,
        column: 52,
        span: 6633..6635,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 196,
        column: 53,
        span: 6635..6636,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 196,
        column: 56,
        span: 6637..6639,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 196,
        column: 60,
        span: 6640..6643,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 196,
        column: 61,
        span: 6643..6644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 198,
        column: 7,
        span: 6646..6652,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 198,
        column: 8,
        span: 6652..6653,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 198,
        column: 11,
        span: 6653..6656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 198,
        column: 17,
        span: 6657..6662,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 198,
        column: 18,
        span: 6662..6663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 198,
        column: 24,
        span: 6663..6669,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 198,
        column: 25,
        span: 6669..6670,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 198,
        column: 29,
        span: 6670..6674,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 198,
        column: 30,
        span: 6674..6675,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 198,
        column: 36,
        span: 6676..6681,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 198,
        column: 37,
        span: 6681..6682,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(.\"",
        ),
        line: 198,
        column: 42,
        span: 6683..6687,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 198,
        column: 43,
        span: 6687..6688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 198,
        column: 49,
        span: 6689..6694,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 198,
        column: 50,
        span: 6694..6695,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 198,
        column: 51,
        span: 6695..6696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 199,
        column: 7,
        span: 6697..6703,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 199,
        column: 8,
        span: 6703..6704,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 199,
        column: 11,
        span: 6704..6707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 199,
        column: 17,
        span: 6708..6713,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 199,
        column: 18,
        span: 6713..6714,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 199,
        column: 24,
        span: 6714..6720,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 199,
        column: 25,
        span: 6720..6721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 199,
        column: 29,
        span: 6721..6725,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 199,
        column: 30,
        span: 6725..6726,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 199,
        column: 36,
        span: 6727..6732,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 199,
        column: 37,
        span: 6732..6733,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".)\"",
        ),
        line: 199,
        column: 42,
        span: 6734..6738,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 199,
        column: 43,
        span: 6738..6739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 199,
        column: 49,
        span: 6740..6745,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 199,
        column: 50,
        span: 6745..6746,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 199,
        column: 51,
        span: 6746..6747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 200,
        column: 7,
        span: 6748..6754,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 8,
        span: 6754..6755,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 200,
        column: 11,
        span: 6755..6758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 200,
        column: 17,
        span: 6759..6764,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 18,
        span: 6764..6765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 200,
        column: 24,
        span: 6765..6771,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 200,
        column: 25,
        span: 6771..6772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 200,
        column: 29,
        span: 6772..6776,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 200,
        column: 30,
        span: 6776..6777,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 200,
        column: 36,
        span: 6778..6783,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 200,
        column: 37,
        span: 6783..6784,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(.\"",
        ),
        line: 200,
        column: 42,
        span: 6785..6789,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 200,
        column: 43,
        span: 6789..6790,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 200,
        column: 45,
        span: 6791..6792,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 200,
        column: 46,
        span: 6792..6793,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 47,
        span: 6793..6794,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 48,
        span: 6794..6795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 201,
        column: 7,
        span: 6796..6802,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
        column: 8,
        span: 6802..6803,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 201,
        column: 11,
        span: 6803..6806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 201,
        column: 17,
        span: 6807..6812,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
        column: 18,
        span: 6812..6813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 201,
        column: 24,
        span: 6813..6819,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 201,
        column: 25,
        span: 6819..6820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 201,
        column: 29,
        span: 6820..6824,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 201,
        column: 30,
        span: 6824..6825,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 201,
        column: 36,
        span: 6826..6831,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 201,
        column: 37,
        span: 6831..6832,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(.)\"",
        ),
        line: 201,
        column: 43,
        span: 6833..6838,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 201,
        column: 44,
        span: 6838..6839,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%2\"",
        ),
        line: 201,
        column: 49,
        span: 6840..6844,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
        column: 50,
        span: 6844..6845,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
        column: 51,
        span: 6845..6846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 202,
        column: 7,
        span: 6847..6853,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 8,
        span: 6853..6854,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 202,
        column: 11,
        span: 6854..6857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 202,
        column: 17,
        span: 6858..6863,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 18,
        span: 6863..6864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 202,
        column: 24,
        span: 6864..6870,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 202,
        column: 25,
        span: 6870..6871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 202,
        column: 29,
        span: 6871..6875,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 202,
        column: 30,
        span: 6875..6876,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 202,
        column: 36,
        span: 6877..6882,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 202,
        column: 37,
        span: 6882..6883,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%1)\"",
        ),
        line: 202,
        column: 44,
        span: 6884..6890,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 202,
        column: 45,
        span: 6890..6891,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 202,
        column: 49,
        span: 6892..6895,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 50,
        span: 6895..6896,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 51,
        span: 6896..6897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 203,
        column: 7,
        span: 6898..6904,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 8,
        span: 6904..6905,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 203,
        column: 11,
        span: 6905..6908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 203,
        column: 17,
        span: 6909..6914,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 18,
        span: 6914..6915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 203,
        column: 24,
        span: 6915..6921,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 203,
        column: 25,
        span: 6921..6922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 203,
        column: 29,
        span: 6922..6926,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 203,
        column: 30,
        span: 6926..6927,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 203,
        column: 36,
        span: 6928..6933,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 203,
        column: 37,
        span: 6933..6934,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%0)\"",
        ),
        line: 203,
        column: 44,
        span: 6935..6941,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 203,
        column: 45,
        span: 6941..6942,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 203,
        column: 49,
        span: 6943..6946,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 50,
        span: 6946..6947,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 51,
        span: 6947..6948,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 206,
        column: 6,
        span: 6965..6970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 206,
        column: 8,
        span: 6971..6972,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 206,
        column: 10,
        span: 6973..6974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 206,
        column: 17,
        span: 6975..6981,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 206,
        column: 18,
        span: 6981..6982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 206,
        column: 21,
        span: 6982..6985,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
        column: 22,
        span: 6985..6986,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 206,
        column: 25,
        span: 6986..6989,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 206,
        column: 26,
        span: 6989..6990,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300000",
                    after_decimal: "",
                },
            ),
        ),
        line: 206,
        column: 33,
        span: 6990..6997,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
        column: 34,
        span: 6997..6998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 207,
        column: 7,
        span: 6999..7005,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 207,
        column: 8,
        span: 7005..7006,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 207,
        column: 14,
        span: 7006..7012,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 207,
        column: 15,
        span: 7012..7013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 207,
        column: 19,
        span: 7013..7017,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 207,
        column: 20,
        span: 7017..7018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 207,
        column: 21,
        span: 7018..7019,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 207,
        column: 22,
        span: 7019..7020,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^a*.?$'",
        ),
        line: 207,
        column: 31,
        span: 7021..7029,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
        column: 32,
        span: 7029..7030,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
        column: 33,
        span: 7030..7031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 208,
        column: 7,
        span: 7032..7038,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 8,
        span: 7038..7039,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 208,
        column: 11,
        span: 7039..7042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 208,
        column: 18,
        span: 7043..7049,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 208,
        column: 19,
        span: 7049..7050,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 208,
        column: 23,
        span: 7050..7054,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 24,
        span: 7054..7055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 208,
        column: 25,
        span: 7055..7056,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 208,
        column: 26,
        span: 7056..7057,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^a*.?b$'",
        ),
        line: 208,
        column: 36,
        span: 7058..7067,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 37,
        span: 7067..7068,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 38,
        span: 7068..7069,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 209,
        column: 7,
        span: 7070..7076,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
        column: 8,
        span: 7076..7077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 209,
        column: 14,
        span: 7077..7083,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 209,
        column: 15,
        span: 7083..7084,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 209,
        column: 19,
        span: 7084..7088,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
        column: 20,
        span: 7088..7089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 209,
        column: 21,
        span: 7089..7090,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 209,
        column: 22,
        span: 7090..7091,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^a-.?$'",
        ),
        line: 209,
        column: 31,
        span: 7092..7100,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
        column: 32,
        span: 7100..7101,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
        column: 33,
        span: 7101..7102,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 212,
        column: 9,
        span: 7126..7134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rev",
        ),
        line: 212,
        column: 13,
        span: 7135..7138,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 14,
        span: 7138..7139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 212,
        column: 15,
        span: 7139..7140,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 16,
        span: 7140..7141,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 213,
        column: 9,
        span: 7144..7150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 213,
        column: 16,
        span: 7151..7157,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 213,
        column: 17,
        span: 7157..7158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 213,
        column: 21,
        span: 7158..7162,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 22,
        span: 7162..7163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 213,
        column: 23,
        span: 7163..7164,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 213,
        column: 24,
        span: 7164..7165,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(.)(.+)\"",
        ),
        line: 213,
        column: 34,
        span: 7166..7175,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 213,
        column: 35,
        span: 7175..7176,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 213,
        column: 44,
        span: 7177..7185,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 45,
        span: 7185..7186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 213,
        column: 46,
        span: 7186..7187,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 213,
        column: 47,
        span: 7187..7188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        line: 213,
        column: 50,
        span: 7189..7191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 51,
        span: 7191..7192,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 213,
        column: 58,
        span: 7193..7199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rev",
        ),
        line: 213,
        column: 62,
        span: 7200..7203,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 63,
        span: 7203..7204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        line: 213,
        column: 65,
        span: 7204..7206,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 66,
        span: 7206..7207,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 213,
        column: 69,
        span: 7208..7210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 213,
        column: 71,
        span: 7211..7212,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 213,
        column: 75,
        span: 7213..7216,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 76,
        span: 7216..7217,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 214,
        column: 0,
        span: 7218..7221,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 216,
        column: 6,
        span: 7223..7228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 216,
        column: 8,
        span: 7229..7230,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 216,
        column: 10,
        span: 7231..7232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 216,
        column: 17,
        span: 7233..7239,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 216,
        column: 18,
        span: 7239..7240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 216,
        column: 21,
        span: 7240..7243,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 22,
        span: 7243..7244,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'012345'",
        ),
        line: 216,
        column: 30,
        span: 7244..7252,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 216,
        column: 31,
        span: 7252..7253,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 216,
        column: 34,
        span: 7253..7256,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 35,
        span: 7256..7257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 217,
        column: 7,
        span: 7258..7264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 8,
        span: 7264..7265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rev",
        ),
        line: 217,
        column: 11,
        span: 7265..7268,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 12,
        span: 7268..7269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rev",
        ),
        line: 217,
        column: 15,
        span: 7269..7272,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 16,
        span: 7272..7273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 217,
        column: 17,
        span: 7273..7274,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 18,
        span: 7274..7275,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 19,
        span: 7275..7276,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 217,
        column: 22,
        span: 7277..7279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 217,
        column: 24,
        span: 7280..7281,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 25,
        span: 7281..7282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 221,
        column: 7,
        span: 7305..7311,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 8,
        span: 7311..7312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 221,
        column: 14,
        span: 7312..7318,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 221,
        column: 15,
        span: 7318..7319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 221,
        column: 19,
        span: 7319..7323,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 20,
        span: 7323..7324,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        line: 221,
        column: 29,
        span: 7324..7333,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 221,
        column: 30,
        span: 7333..7334,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        line: 221,
        column: 34,
        span: 7335..7338,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 221,
        column: 35,
        span: 7338..7339,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 221,
        column: 37,
        span: 7340..7341,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 221,
        column: 38,
        span: 7341..7342,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 39,
        span: 7342..7343,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 221,
        column: 42,
        span: 7344..7346,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        line: 221,
        column: 52,
        span: 7347..7356,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 53,
        span: 7356..7357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 222,
        column: 7,
        span: 7358..7364,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
        column: 8,
        span: 7364..7365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 222,
        column: 14,
        span: 7365..7371,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 222,
        column: 15,
        span: 7371..7372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 222,
        column: 19,
        span: 7372..7376,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
        column: 20,
        span: 7376..7377,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        line: 222,
        column: 29,
        span: 7377..7386,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 222,
        column: 30,
        span: 7386..7387,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(.)\"",
        ),
        line: 222,
        column: 36,
        span: 7388..7393,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 222,
        column: 37,
        span: 7393..7394,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 222,
        column: 39,
        span: 7395..7396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 222,
        column: 41,
        span: 7397..7398,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 222,
        column: 43,
        span: 7399..7400,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AA\"",
        ),
        line: 222,
        column: 48,
        span: 7401..7405,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 222,
        column: 49,
        span: 7405..7406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 222,
        column: 51,
        span: 7407..7408,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 222,
        column: 53,
        span: 7409..7410,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 222,
        column: 56,
        span: 7411..7413,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 222,
        column: 58,
        span: 7414..7415,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
        column: 59,
        span: 7415..7416,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 222,
        column: 62,
        span: 7417..7419,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AAo AAo\"",
        ),
        line: 222,
        column: 72,
        span: 7420..7429,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
        column: 73,
        span: 7429..7430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 223,
        column: 7,
        span: 7431..7437,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 223,
        column: 8,
        span: 7437..7438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 223,
        column: 14,
        span: 7438..7444,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 223,
        column: 15,
        span: 7444..7445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 223,
        column: 19,
        span: 7445..7449,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 223,
        column: 20,
        span: 7449..7450,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        line: 223,
        column: 29,
        span: 7450..7459,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 223,
        column: 30,
        span: 7459..7460,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(.).\"",
        ),
        line: 223,
        column: 37,
        span: 7461..7467,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 223,
        column: 38,
        span: 7467..7468,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 223,
        column: 40,
        span: 7469..7470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 223,
        column: 42,
        span: 7471..7472,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 223,
        column: 44,
        span: 7473..7474,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AA\"",
        ),
        line: 223,
        column: 49,
        span: 7475..7479,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 223,
        column: 50,
        span: 7479..7480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 223,
        column: 52,
        span: 7481..7482,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 223,
        column: 54,
        span: 7483..7484,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"K\"",
        ),
        line: 223,
        column: 58,
        span: 7485..7488,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 223,
        column: 60,
        span: 7489..7490,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 223,
        column: 61,
        span: 7490..7491,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 223,
        column: 64,
        span: 7492..7494,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AAo AAo\"",
        ),
        line: 223,
        column: 74,
        span: 7495..7504,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 223,
        column: 75,
        span: 7504..7505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 224,
        column: 7,
        span: 7506..7512,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
        column: 8,
        span: 7512..7513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 224,
        column: 14,
        span: 7513..7519,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 224,
        column: 15,
        span: 7519..7520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 224,
        column: 19,
        span: 7520..7524,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
        column: 20,
        span: 7524..7525,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        line: 224,
        column: 29,
        span: 7525..7534,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 224,
        column: 30,
        span: 7534..7535,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"((.)(.?))\"",
        ),
        line: 224,
        column: 42,
        span: 7536..7547,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 224,
        column: 43,
        span: 7547..7548,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 224,
        column: 45,
        span: 7549..7550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "al",
        ),
        line: 224,
        column: 48,
        span: 7551..7553,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 224,
        column: 50,
        span: 7554..7555,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AA\"",
        ),
        line: 224,
        column: 55,
        span: 7556..7560,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 224,
        column: 56,
        span: 7560..7561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 224,
        column: 58,
        span: 7562..7563,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 224,
        column: 60,
        span: 7564..7565,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 224,
        column: 66,
        span: 7566..7571,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 224,
        column: 68,
        span: 7572..7573,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 69,
        span: 7573..7574,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 224,
        column: 72,
        span: 7575..7577,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AAo AAo\"",
        ),
        line: 224,
        column: 82,
        span: 7578..7587,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 83,
        span: 7587..7588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 226,
        column: 7,
        span: 7590..7596,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 226,
        column: 8,
        span: 7596..7597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 226,
        column: 14,
        span: 7597..7603,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 226,
        column: 15,
        span: 7603..7604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 226,
        column: 19,
        span: 7604..7608,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 226,
        column: 20,
        span: 7608..7609,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        line: 226,
        column: 29,
        span: 7609..7618,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 226,
        column: 30,
        span: 7618..7619,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"().\"",
        ),
        line: 226,
        column: 36,
        span: 7620..7625,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 226,
        column: 37,
        span: 7625..7626,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 226,
        column: 39,
        span: 7627..7628,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 226,
        column: 41,
        span: 7628..7630,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 226,
        column: 42,
        span: 7630..7631,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 226,
        column: 44,
        span: 7631..7633,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 226,
        column: 45,
        span: 7633..7634,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 226,
        column: 47,
        span: 7634..7636,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 226,
        column: 49,
        span: 7637..7638,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
        column: 50,
        span: 7638..7639,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 226,
        column: 53,
        span: 7640..7642,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"256 alo\"",
        ),
        line: 226,
        column: 63,
        span: 7643..7652,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
        column: 64,
        span: 7652..7653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 228,
        column: 2,
        span: 7655..7656,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 228,
        column: 4,
        span: 7657..7658,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 228,
        column: 6,
        span: 7659..7660,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 228,
        column: 7,
        span: 7660..7661,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 228,
        column: 8,
        span: 7661..7662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 229,
        column: 13,
        span: 7663..7675,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 229,
        column: 14,
        span: 7675..7676,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 229,
        column: 15,
        span: 7676..7677,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 229,
        column: 16,
        span: 7677..7678,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 229,
        column: 18,
        span: 7679..7680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 229,
        column: 26,
        span: 7681..7688,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 229,
        column: 28,
        span: 7689..7690,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 229,
        column: 37,
        span: 7691..7699,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 229,
        column: 38,
        span: 7699..7700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 229,
        column: 39,
        span: 7700..7701,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 229,
        column: 40,
        span: 7701..7702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 229,
        column: 42,
        span: 7703..7704,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 229,
        column: 43,
        span: 7704..7705,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 229,
        column: 50,
        span: 7706..7712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 229,
        column: 57,
        span: 7713..7719,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 229,
        column: 58,
        span: 7719..7720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upper",
        ),
        line: 229,
        column: 63,
        span: 7720..7725,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 229,
        column: 64,
        span: 7725..7726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 229,
        column: 65,
        span: 7726..7727,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 229,
        column: 66,
        span: 7727..7728,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 229,
        column: 70,
        span: 7729..7732,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 229,
        column: 72,
        span: 7733..7734,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 229,
        column: 73,
        span: 7734..7735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 230,
        column: 7,
        span: 7736..7742,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 230,
        column: 8,
        span: 7742..7743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 230,
        column: 14,
        span: 7743..7749,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 230,
        column: 15,
        span: 7749..7750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 230,
        column: 19,
        span: 7750..7754,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 230,
        column: 20,
        span: 7754..7755,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a alo b hi\"",
        ),
        line: 230,
        column: 32,
        span: 7755..7767,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 230,
        column: 33,
        span: 7767..7768,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%w%w+\"",
        ),
        line: 230,
        column: 41,
        span: 7769..7776,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 230,
        column: 42,
        span: 7776..7777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 230,
        column: 44,
        span: 7778..7779,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 230,
        column: 45,
        span: 7779..7780,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 230,
        column: 48,
        span: 7781..7783,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a ALO b HI\"",
        ),
        line: 230,
        column: 61,
        span: 7784..7796,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 230,
        column: 62,
        span: 7796..7797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 234,
        column: 7,
        span: 7820..7826,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 234,
        column: 8,
        span: 7826..7827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 234,
        column: 14,
        span: 7827..7833,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 234,
        column: 15,
        span: 7833..7834,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gfind",
        ),
        line: 234,
        column: 20,
        span: 7834..7839,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 234,
        column: 23,
        span: 7840..7842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 234,
        column: 30,
        span: 7843..7849,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 234,
        column: 31,
        span: 7849..7850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 234,
        column: 37,
        span: 7850..7856,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 234,
        column: 38,
        span: 7856..7857,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 235,
        column: 6,
        span: 7858..7863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 235,
        column: 8,
        span: 7864..7865,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 235,
        column: 10,
        span: 7866..7867,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 235,
        column: 0,
        span: 7867..7869,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 236,
        column: 4,
        span: 7870..7873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 236,
        column: 6,
        span: 7874..7875,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 236,
        column: 9,
        span: 7876..7878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 236,
        column: 16,
        span: 7879..7885,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 236,
        column: 17,
        span: 7885..7886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 236,
        column: 23,
        span: 7886..7892,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
        column: 24,
        span: 7892..7893,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'abcde'",
        ),
        line: 236,
        column: 31,
        span: 7893..7900,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 236,
        column: 32,
        span: 7900..7901,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'()'",
        ),
        line: 236,
        column: 37,
        span: 7902..7906,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
        column: 38,
        span: 7906..7907,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 236,
        column: 41,
        span: 7908..7910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 236,
        column: 48,
        span: 7911..7917,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
        column: 49,
        span: 7917..7918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 236,
        column: 50,
        span: 7918..7919,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 236,
        column: 53,
        span: 7920..7922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 236,
        column: 55,
        span: 7923..7924,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 236,
        column: 57,
        span: 7925..7926,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 236,
        column: 59,
        span: 7926..7928,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
        column: 60,
        span: 7928..7929,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 236,
        column: 61,
        span: 7929..7930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 236,
        column: 63,
        span: 7931..7932,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 236,
        column: 65,
        span: 7933..7934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 236,
        column: 67,
        span: 7935..7936,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 236,
        column: 0,
        span: 7937..7940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 237,
        column: 7,
        span: 7941..7947,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
        column: 8,
        span: 7947..7948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 237,
        column: 9,
        span: 7948..7949,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 237,
        column: 12,
        span: 7950..7952,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 237,
        column: 14,
        span: 7952..7954,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 15,
        span: 7954..7955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 239,
        column: 2,
        span: 7957..7958,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 239,
        column: 4,
        span: 7959..7960,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 239,
        column: 6,
        span: 7961..7962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 239,
        column: 8,
        span: 7963..7964,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 239,
        column: 10,
        span: 7965..7966,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 239,
        column: 12,
        span: 7966..7968,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 239,
        column: 14,
        span: 7969..7970,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 240,
        column: 4,
        span: 7971..7974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 240,
        column: 6,
        span: 7975..7976,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 240,
        column: 9,
        span: 7977..7979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 240,
        column: 16,
        span: 7980..7986,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 240,
        column: 17,
        span: 7986..7987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 240,
        column: 23,
        span: 7987..7993,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 24,
        span: 7993..7994,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"first second word\"",
        ),
        line: 240,
        column: 43,
        span: 7994..8013,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 240,
        column: 44,
        span: 8013..8014,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%w+\"",
        ),
        line: 240,
        column: 50,
        span: 8015..8020,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 51,
        span: 8020..8021,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 240,
        column: 0,
        span: 8022..8024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 241,
        column: 4,
        span: 8027..8028,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 241,
        column: 5,
        span: 8028..8029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 241,
        column: 6,
        span: 8029..8030,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 241,
        column: 8,
        span: 8031..8032,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 241,
        column: 10,
        span: 8033..8034,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 241,
        column: 11,
        span: 8034..8035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 241,
        column: 12,
        span: 8035..8036,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 241,
        column: 14,
        span: 8037..8038,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 241,
        column: 16,
        span: 8038..8040,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 241,
        column: 17,
        span: 8040..8041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 242,
        column: 4,
        span: 8044..8045,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 242,
        column: 5,
        span: 8045..8046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 242,
        column: 6,
        span: 8046..8047,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 242,
        column: 7,
        span: 8047..8048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 242,
        column: 8,
        span: 8048..8049,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 242,
        column: 9,
        span: 8049..8050,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 242,
        column: 11,
        span: 8051..8052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 242,
        column: 0,
        span: 8053..8054,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 243,
        column: 0,
        span: 8055..8058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 244,
        column: 7,
        span: 8059..8065,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 244,
        column: 8,
        span: 8065..8066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 244,
        column: 9,
        span: 8066..8067,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 244,
        column: 10,
        span: 8067..8068,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 244,
        column: 11,
        span: 8067..8069,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 244,
        column: 12,
        span: 8069..8070,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 244,
        column: 15,
        span: 8071..8073,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"first\"",
        ),
        line: 244,
        column: 23,
        span: 8074..8081,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 244,
        column: 27,
        span: 8082..8085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 244,
        column: 29,
        span: 8086..8087,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 244,
        column: 30,
        span: 8087..8088,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 244,
        column: 31,
        span: 8087..8089,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 244,
        column: 32,
        span: 8089..8090,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 244,
        column: 35,
        span: 8091..8093,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"second\"",
        ),
        line: 244,
        column: 44,
        span: 8094..8102,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 244,
        column: 48,
        span: 8103..8106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 244,
        column: 50,
        span: 8107..8108,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 244,
        column: 51,
        span: 8108..8109,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 244,
        column: 52,
        span: 8108..8110,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 244,
        column: 53,
        span: 8110..8111,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 244,
        column: 56,
        span: 8112..8114,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"word\"",
        ),
        line: 244,
        column: 63,
        span: 8115..8121,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 244,
        column: 64,
        span: 8121..8122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 246,
        column: 2,
        span: 8124..8125,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 246,
        column: 4,
        span: 8126..8127,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 246,
        column: 6,
        span: 8128..8129,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 246,
        column: 8,
        span: 8129..8131,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 246,
        column: 9,
        span: 8131..8132,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 246,
        column: 11,
        span: 8132..8134,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 246,
        column: 12,
        span: 8134..8135,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 246,
        column: 14,
        span: 8135..8137,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 246,
        column: 16,
        span: 8138..8139,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 247,
        column: 4,
        span: 8140..8143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 247,
        column: 6,
        span: 8144..8145,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 247,
        column: 9,
        span: 8146..8148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 247,
        column: 16,
        span: 8149..8155,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 247,
        column: 17,
        span: 8155..8156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 247,
        column: 23,
        span: 8156..8162,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 24,
        span: 8162..8163,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxx uu ppar r\"",
        ),
        line: 247,
        column: 40,
        span: 8163..8179,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 247,
        column: 41,
        span: 8179..8180,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"()(.)%2\"",
        ),
        line: 247,
        column: 51,
        span: 8181..8190,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 52,
        span: 8190..8191,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 247,
        column: 0,
        span: 8192..8194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 248,
        column: 9,
        span: 8197..8203,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 248,
        column: 10,
        span: 8203..8204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 248,
        column: 11,
        span: 8204..8205,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 248,
        column: 14,
        span: 8206..8208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 248,
        column: 20,
        span: 8209..8214,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 248,
        column: 21,
        span: 8214..8215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 248,
        column: 27,
        span: 8215..8221,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 248,
        column: 28,
        span: 8221..8222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 248,
        column: 29,
        span: 8222..8223,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 248,
        column: 30,
        span: 8223..8224,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 248,
        column: 32,
        span: 8224..8226,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 248,
        column: 33,
        span: 8226..8227,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 248,
        column: 34,
        span: 8227..8228,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 249,
        column: 0,
        span: 8229..8232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 250,
        column: 7,
        span: 8233..8239,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
        column: 8,
        span: 8239..8240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 250,
        column: 13,
        span: 8240..8245,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 250,
        column: 14,
        span: 8245..8246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        line: 250,
        column: 18,
        span: 8246..8250,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
        column: 19,
        span: 8250..8251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 250,
        column: 20,
        span: 8251..8252,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
        column: 21,
        span: 8252..8253,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 250,
        column: 24,
        span: 8254..8256,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 250,
        column: 26,
        span: 8256..8258,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
        column: 27,
        span: 8258..8259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 252,
        column: 2,
        span: 8261..8262,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 252,
        column: 4,
        span: 8263..8264,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 252,
        column: 6,
        span: 8265..8266,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 252,
        column: 7,
        span: 8266..8267,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 253,
        column: 4,
        span: 8268..8271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 253,
        column: 6,
        span: 8272..8273,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 253,
        column: 7,
        span: 8273..8274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 253,
        column: 9,
        span: 8275..8276,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 253,
        column: 12,
        span: 8277..8279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 253,
        column: 19,
        span: 8280..8286,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 253,
        column: 20,
        span: 8286..8287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 253,
        column: 26,
        span: 8287..8293,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 27,
        span: 8293..8294,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"13 14 10 = 11, 15= 16, 22=23\"",
        ),
        line: 253,
        column: 57,
        span: 8294..8324,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 253,
        column: 58,
        span: 8324..8325,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%d+)%s*=%s*(%d+)\"",
        ),
        line: 253,
        column: 78,
        span: 8326..8345,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 79,
        span: 8345..8346,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 253,
        column: 0,
        span: 8347..8349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 254,
        column: 4,
        span: 8352..8353,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 254,
        column: 5,
        span: 8353..8354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 254,
        column: 6,
        span: 8354..8355,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 254,
        column: 7,
        span: 8355..8356,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 254,
        column: 9,
        span: 8357..8358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 254,
        column: 0,
        span: 8359..8360,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 255,
        column: 0,
        span: 8361..8364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 256,
        column: 2,
        span: 8365..8366,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 256,
        column: 4,
        span: 8367..8368,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 256,
        column: 0,
        span: 8368..8370,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 257,
        column: 4,
        span: 8371..8374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 257,
        column: 6,
        span: 8375..8376,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
        column: 7,
        span: 8376..8377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 257,
        column: 9,
        span: 8378..8379,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 257,
        column: 12,
        span: 8380..8382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 257,
        column: 18,
        span: 8383..8388,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
        column: 19,
        span: 8388..8389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 257,
        column: 20,
        span: 8389..8390,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
        column: 21,
        span: 8390..8391,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 257,
        column: 24,
        span: 8392..8394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 257,
        column: 31,
        span: 8395..8401,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
        column: 32,
        span: 8401..8402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 257,
        column: 33,
        span: 8402..8403,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 257,
        column: 35,
        span: 8404..8405,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 257,
        column: 37,
        span: 8405..8407,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 257,
        column: 40,
        span: 8408..8410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 257,
        column: 42,
        span: 8411..8412,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 257,
        column: 44,
        span: 8413..8414,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 257,
        column: 46,
        span: 8414..8416,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
        column: 47,
        span: 8416..8417,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 257,
        column: 48,
        span: 8417..8418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 257,
        column: 50,
        span: 8419..8420,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 257,
        column: 52,
        span: 8421..8422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 257,
        column: 54,
        span: 8423..8424,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 257,
        column: 56,
        span: 8425..8426,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 257,
        column: 58,
        span: 8426..8428,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 257,
        column: 0,
        span: 8429..8432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 258,
        column: 7,
        span: 8433..8439,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
        column: 8,
        span: 8439..8440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 258,
        column: 9,
        span: 8440..8441,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 258,
        column: 12,
        span: 8442..8444,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
        column: 14,
        span: 8444..8446,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
        column: 15,
        span: 8446..8447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 263,
        column: 7,
        span: 8483..8489,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 263,
        column: 8,
        span: 8489..8490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 263,
        column: 14,
        span: 8490..8496,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 263,
        column: 15,
        span: 8496..8497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 263,
        column: 19,
        span: 8497..8501,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 263,
        column: 20,
        span: 8501..8502,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa aa a aaa a\"",
        ),
        line: 263,
        column: 36,
        span: 8502..8518,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 263,
        column: 37,
        span: 8518..8519,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[%w]a\"",
        ),
        line: 263,
        column: 47,
        span: 8520..8529,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 263,
        column: 48,
        span: 8529..8530,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 263,
        column: 52,
        span: 8531..8534,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 263,
        column: 53,
        span: 8534..8535,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 263,
        column: 56,
        span: 8536..8538,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xaa xa x xaa x\"",
        ),
        line: 263,
        column: 73,
        span: 8539..8555,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 263,
        column: 74,
        span: 8555..8556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 264,
        column: 7,
        span: 8557..8563,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
        column: 8,
        span: 8563..8564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 264,
        column: 14,
        span: 8564..8570,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 264,
        column: 15,
        span: 8570..8571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 264,
        column: 19,
        span: 8571..8575,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
        column: 20,
        span: 8575..8576,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[[]] [][] [[[[\"",
        ),
        line: 264,
        column: 36,
        span: 8576..8592,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 264,
        column: 37,
        span: 8592..8593,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[[].\"",
        ),
        line: 264,
        column: 46,
        span: 8594..8602,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 264,
        column: 47,
        span: 8602..8603,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 264,
        column: 51,
        span: 8604..8607,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
        column: 52,
        span: 8607..8608,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 264,
        column: 55,
        span: 8609..8611,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x[]] x]x] x[[[\"",
        ),
        line: 264,
        column: 72,
        span: 8612..8628,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
        column: 73,
        span: 8628..8629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 265,
        column: 7,
        span: 8630..8636,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
        column: 8,
        span: 8636..8637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 265,
        column: 14,
        span: 8637..8643,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 265,
        column: 15,
        span: 8643..8644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 265,
        column: 19,
        span: 8644..8648,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
        column: 20,
        span: 8648..8649,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"01abc45de3\"",
        ),
        line: 265,
        column: 32,
        span: 8649..8661,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 265,
        column: 33,
        span: 8661..8662,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[%d]\"",
        ),
        line: 265,
        column: 42,
        span: 8663..8671,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 265,
        column: 43,
        span: 8671..8672,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        line: 265,
        column: 47,
        span: 8673..8676,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
        column: 48,
        span: 8676..8677,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 265,
        column: 51,
        span: 8678..8680,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".01abc.45de.3\"",
        ),
        line: 265,
        column: 67,
        span: 8681..8696,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
        column: 68,
        span: 8696..8697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 266,
        column: 7,
        span: 8698..8704,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
        column: 8,
        span: 8704..8705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 266,
        column: 14,
        span: 8705..8711,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 266,
        column: 15,
        span: 8711..8712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 266,
        column: 19,
        span: 8712..8716,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
        column: 20,
        span: 8716..8717,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"01abc45 de3x\"",
        ),
        line: 266,
        column: 34,
        span: 8717..8731,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 266,
        column: 35,
        span: 8731..8732,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[%D]%w\"",
        ),
        line: 266,
        column: 46,
        span: 8733..8743,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 266,
        column: 47,
        span: 8743..8744,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        line: 266,
        column: 51,
        span: 8745..8748,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
        column: 52,
        span: 8748..8749,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 266,
        column: 55,
        span: 8750..8752,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"01.bc45 de3.\"",
        ),
        line: 266,
        column: 70,
        span: 8753..8767,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
        column: 71,
        span: 8767..8768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 267,
        column: 7,
        span: 8769..8775,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 8,
        span: 8775..8776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 267,
        column: 14,
        span: 8776..8782,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 267,
        column: 15,
        span: 8782..8783,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 267,
        column: 19,
        span: 8783..8787,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 20,
        span: 8787..8788,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        line: 267,
        column: 30,
        span: 8788..8798,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 267,
        column: 31,
        span: 8798..8799,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[\\1-\\255]%w\"",
        ),
        line: 267,
        column: 47,
        span: 8800..8815,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 267,
        column: 48,
        span: 8815..8816,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        line: 267,
        column: 52,
        span: 8817..8820,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
        column: 53,
        span: 8820..8821,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 267,
        column: 56,
        span: 8822..8824,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".unction\"",
        ),
        line: 267,
        column: 67,
        span: 8825..8835,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
        column: 68,
        span: 8835..8836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 268,
        column: 7,
        span: 8837..8843,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
        column: 8,
        span: 8843..8844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 268,
        column: 14,
        span: 8844..8850,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 268,
        column: 15,
        span: 8850..8851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 268,
        column: 19,
        span: 8851..8855,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
        column: 20,
        span: 8855..8856,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        line: 268,
        column: 30,
        span: 8856..8866,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 268,
        column: 31,
        span: 8866..8867,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[^\\1-\\255]\"",
        ),
        line: 268,
        column: 46,
        span: 8868..8882,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 268,
        column: 47,
        span: 8882..8883,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        line: 268,
        column: 51,
        span: 8884..8887,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
        column: 52,
        span: 8887..8888,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 268,
        column: 55,
        span: 8889..8891,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function.\"",
        ),
        line: 268,
        column: 67,
        span: 8892..8903,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
        column: 68,
        span: 8903..8904,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 270,
        column: 6,
        span: 8906..8911,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 270,
        column: 8,
        span: 8912..8913,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 270,
        column: 9,
        span: 8913..8914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 270,
        column: 11,
        span: 8915..8916,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 270,
        column: 13,
        span: 8917..8918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 270,
        column: 20,
        span: 8919..8925,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 270,
        column: 21,
        span: 8925..8926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 270,
        column: 25,
        span: 8926..8930,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 270,
        column: 26,
        span: 8930..8931,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" alo aalo allo\"",
        ),
        line: 270,
        column: 42,
        span: 8931..8947,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 270,
        column: 43,
        span: 8947..8948,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[%S].-%f[%s].-%f[%S]\"",
        ),
        line: 270,
        column: 68,
        span: 8949..8973,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 270,
        column: 69,
        span: 8973..8974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 271,
        column: 7,
        span: 8975..8981,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 271,
        column: 8,
        span: 8981..8982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 271,
        column: 9,
        span: 8982..8983,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 271,
        column: 12,
        span: 8984..8986,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 271,
        column: 14,
        span: 8986..8988,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 271,
        column: 18,
        span: 8989..8992,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 271,
        column: 20,
        span: 8993..8994,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 271,
        column: 23,
        span: 8995..8997,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 271,
        column: 25,
        span: 8997..8999,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 271,
        column: 26,
        span: 8999..9000,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 272,
        column: 6,
        span: 9001..9006,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 272,
        column: 8,
        span: 9007..9008,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 272,
        column: 10,
        span: 9009..9010,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 272,
        column: 17,
        span: 9011..9017,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 272,
        column: 18,
        span: 9017..9018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 272,
        column: 23,
        span: 9018..9023,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 272,
        column: 24,
        span: 9023..9024,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" alo aalo allo\"",
        ),
        line: 272,
        column: 40,
        span: 9024..9040,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 272,
        column: 41,
        span: 9040..9041,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[%S](.-%f[%s].-%f[%S])\"",
        ),
        line: 272,
        column: 68,
        span: 9042..9068,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 272,
        column: 69,
        span: 9068..9069,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 273,
        column: 7,
        span: 9070..9076,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 273,
        column: 8,
        span: 9076..9077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 273,
        column: 9,
        span: 9077..9078,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 273,
        column: 12,
        span: 9079..9081,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo '",
        ),
        line: 273,
        column: 19,
        span: 9082..9088,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 273,
        column: 20,
        span: 9088..9089,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 275,
        column: 6,
        span: 9091..9096,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 275,
        column: 8,
        span: 9097..9098,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 275,
        column: 10,
        span: 9099..9100,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 275,
        column: 12,
        span: 9101..9102,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 275,
        column: 14,
        span: 9102..9104,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 275,
        column: 15,
        span: 9104..9105,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 275,
        column: 17,
        span: 9105..9107,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 275,
        column: 18,
        span: 9107..9108,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 275,
        column: 20,
        span: 9108..9110,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 275,
        column: 21,
        span: 9110..9111,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        line: 275,
        column: 24,
        span: 9111..9114,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 275,
        column: 25,
        span: 9114..9115,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "17",
                    after_decimal: "",
                },
            ),
        ),
        line: 275,
        column: 28,
        span: 9115..9118,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 275,
        column: 29,
        span: 9118..9119,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 275,
        column: 31,
        span: 9120..9121,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 276,
        column: 4,
        span: 9122..9125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 276,
        column: 6,
        span: 9126..9127,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 276,
        column: 9,
        span: 9128..9130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 276,
        column: 16,
        span: 9131..9137,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 276,
        column: 17,
        span: 9137..9138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 276,
        column: 23,
        span: 9138..9144,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 276,
        column: 24,
        span: 9144..9145,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo th02 is 1hat\"",
        ),
        line: 276,
        column: 46,
        span: 9145..9167,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 276,
        column: 47,
        span: 9167..9168,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"()%f[%w%d]\"",
        ),
        line: 276,
        column: 60,
        span: 9169..9181,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 276,
        column: 61,
        span: 9181..9182,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 276,
        column: 0,
        span: 9183..9185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 277,
        column: 9,
        span: 9188..9194,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 10,
        span: 9194..9195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 277,
        column: 15,
        span: 9195..9200,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 277,
        column: 16,
        span: 9200..9201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 277,
        column: 22,
        span: 9201..9207,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 23,
        span: 9207..9208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 277,
        column: 24,
        span: 9208..9209,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
        column: 25,
        span: 9209..9210,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 277,
        column: 27,
        span: 9210..9212,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 28,
        span: 9212..9213,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 277,
        column: 31,
        span: 9214..9216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 277,
        column: 33,
        span: 9217..9218,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 34,
        span: 9218..9219,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 278,
        column: 0,
        span: 9220..9223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 279,
        column: 7,
        span: 9224..9230,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 279,
        column: 8,
        span: 9230..9231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 279,
        column: 13,
        span: 9231..9236,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 279,
        column: 14,
        span: 9236..9237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        line: 279,
        column: 18,
        span: 9237..9241,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 279,
        column: 19,
        span: 9241..9242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 279,
        column: 20,
        span: 9242..9243,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 279,
        column: 21,
        span: 9243..9244,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 279,
        column: 24,
        span: 9245..9247,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 279,
        column: 26,
        span: 9247..9249,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 279,
        column: 27,
        span: 9249..9250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 282,
        column: 6,
        span: 9253..9258,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 282,
        column: 7,
        span: 9258..9259,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 282,
        column: 11,
        span: 9259..9263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 282,
        column: 12,
        span: 9263..9264,
    },
]
