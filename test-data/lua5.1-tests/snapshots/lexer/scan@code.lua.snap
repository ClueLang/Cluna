---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.1-tests/code.lua
---
[
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 2,
            column: 3,
            span: 1..3,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 2,
            column: 5,
            span: 4..5,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 2,
            column: 7,
            span: 5..7,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 2,
            column: 10,
            span: 7..10,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 2,
            column: 0,
            span: 11..15,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 3,
            column: 4,
            span: 18..19,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        position: Position {
            line: 3,
            column: 11,
            span: 19..26,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 3,
            column: 14,
            span: 27..29,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 3,
            column: 20,
            span: 30..35,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 3,
            column: 21,
            span: 35..36,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 3,
            column: 22,
            span: 36..37,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\a\\n >>> testC not active: skipping opcode tests <<<\\n\\a'",
        ),
        position: Position {
            line: 3,
            column: 80,
            span: 37..95,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 3,
            column: 81,
            span: 95..96,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 4,
            column: 0,
            span: 99..105,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 5,
            column: 0,
            span: 106..109,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 6,
            column: 6,
            span: 110..115,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing code generation and optimizations\"",
        ),
        position: Position {
            line: 6,
            column: 50,
            span: 116..159,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 10,
            column: 0,
            span: 210..212,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 11,
            column: 8,
            span: 215..220,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 11,
            column: 17,
            span: 221..229,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 11,
            column: 19,
            span: 230..231,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 11,
            column: 21,
            span: 232..233,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 11,
            column: 22,
            span: 233..234,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 11,
            column: 23,
            span: 234..235,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 12,
            column: 6,
            span: 238..241,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 12,
            column: 8,
            span: 242..243,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 12,
            column: 9,
            span: 243..244,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 12,
            column: 10,
            span: 244..245,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 12,
            column: 11,
            span: 245..246,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        position: Position {
            line: 12,
            column: 12,
            span: 246..247,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 12,
            column: 15,
            span: 248..250,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 12,
            column: 17,
            span: 251..252,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 12,
            column: 20,
            span: 253..255,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 12,
            column: 0,
            span: 256..259,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 13,
            column: 0,
            span: 262..265,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 14,
            column: 0,
            span: 266..269,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 17,
            column: 9,
            span: 272..280,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 17,
            column: 15,
            span: 281..286,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 17,
            column: 17,
            span: 287..288,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 17,
            column: 18,
            span: 288..289,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 17,
            column: 19,
            span: 289..290,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 17,
            column: 23,
            span: 291..294,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 17,
            column: 24,
            span: 294..295,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 18,
            column: 8,
            span: 298..303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 18,
            column: 10,
            span: 304..305,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 18,
            column: 12,
            span: 306..307,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 18,
            column: 14,
            span: 308..309,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 18,
            column: 15,
            span: 309..310,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "listcode",
        ),
        position: Position {
            line: 18,
            column: 23,
            span: 310..318,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 18,
            column: 24,
            span: 318..319,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 18,
            column: 25,
            span: 319..320,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 18,
            column: 26,
            span: 320..321,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 19,
            column: 6,
            span: 324..327,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 19,
            column: 8,
            span: 328..329,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 19,
            column: 9,
            span: 329..330,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 19,
            column: 10,
            span: 329..331,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 19,
            column: 11,
            span: 331..332,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 19,
            column: 15,
            span: 333..336,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 19,
            column: 16,
            span: 336..337,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 19,
            column: 17,
            span: 337..338,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 19,
            column: 0,
            span: 339..341,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 21,
            column: 11,
            span: 373..379,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 21,
            column: 12,
            span: 379..380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 21,
            column: 18,
            span: 380..386,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 21,
            column: 19,
            span: 386..387,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 21,
            column: 23,
            span: 387..391,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 21,
            column: 24,
            span: 391..392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 21,
            column: 25,
            span: 392..393,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 21,
            column: 26,
            span: 393..394,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 21,
            column: 27,
            span: 394..395,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 21,
            column: 28,
            span: 395..396,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 21,
            column: 29,
            span: 396..397,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'- '",
        ),
        position: Position {
            line: 21,
            column: 34,
            span: 398..402,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 21,
            column: 36,
            span: 402..404,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 21,
            column: 39,
            span: 404..407,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 21,
            column: 40,
            span: 407..408,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 21,
            column: 41,
            span: 408..409,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 21,
            column: 42,
            span: 409..410,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 21,
            column: 44,
            span: 410..412,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' *%d'",
        ),
        position: Position {
            line: 21,
            column: 50,
            span: 412..418,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 21,
            column: 51,
            span: 418..419,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 21,
            column: 52,
            span: 419..420,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 22,
            column: 0,
            span: 423..426,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 23,
            column: 9,
            span: 429..435,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 23,
            column: 10,
            span: 435..436,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 23,
            column: 11,
            span: 436..437,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 23,
            column: 12,
            span: 437..438,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 23,
            column: 15,
            span: 438..441,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 23,
            column: 16,
            span: 441..442,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 23,
            column: 17,
            span: 442..443,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 23,
            column: 18,
            span: 443..444,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 23,
            column: 19,
            span: 443..445,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 23,
            column: 20,
            span: 445..446,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 23,
            column: 23,
            span: 447..449,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 23,
            column: 27,
            span: 450..453,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 23,
            column: 28,
            span: 453..454,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 24,
            column: 0,
            span: 455..458,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 27,
            column: 9,
            span: 461..469,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkequal",
        ),
        position: Position {
            line: 27,
            column: 20,
            span: 470..480,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 27,
            column: 22,
            span: 481..482,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 27,
            column: 23,
            span: 482..483,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 27,
            column: 24,
            span: 483..484,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 27,
            column: 26,
            span: 485..486,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 27,
            column: 27,
            span: 486..487,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 28,
            column: 4,
            span: 490..491,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 28,
            column: 6,
            span: 492..493,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 28,
            column: 8,
            span: 494..495,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 28,
            column: 9,
            span: 495..496,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "listcode",
        ),
        position: Position {
            line: 28,
            column: 17,
            span: 496..504,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 28,
            column: 18,
            span: 504..505,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 28,
            column: 19,
            span: 505..506,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 28,
            column: 20,
            span: 506..507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 29,
            column: 4,
            span: 510..511,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 29,
            column: 6,
            span: 512..513,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 29,
            column: 8,
            span: 514..515,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 29,
            column: 9,
            span: 515..516,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "listcode",
        ),
        position: Position {
            line: 29,
            column: 17,
            span: 516..524,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 29,
            column: 18,
            span: 524..525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 29,
            column: 19,
            span: 525..526,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 29,
            column: 20,
            span: 526..527,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 30,
            column: 6,
            span: 530..533,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 30,
            column: 8,
            span: 534..535,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 30,
            column: 10,
            span: 536..537,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 30,
            column: 12,
            span: 537..539,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 30,
            column: 13,
            span: 539..540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 30,
            column: 19,
            span: 541..546,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 30,
            column: 20,
            span: 546..547,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        position: Position {
            line: 30,
            column: 24,
            span: 547..551,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 30,
            column: 25,
            span: 551..552,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 30,
            column: 26,
            span: 552..553,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 30,
            column: 27,
            span: 553..554,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 30,
            column: 0,
            span: 555..557,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 31,
            column: 6,
            span: 562..563,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 31,
            column: 7,
            span: 563..564,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 31,
            column: 8,
            span: 564..565,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 31,
            column: 9,
            span: 565..566,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 31,
            column: 11,
            span: 567..568,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 31,
            column: 18,
            span: 569..575,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 31,
            column: 19,
            span: 575..576,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 31,
            column: 23,
            span: 576..580,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 31,
            column: 24,
            span: 580..581,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 31,
            column: 25,
            span: 581..582,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 31,
            column: 26,
            span: 582..583,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 31,
            column: 27,
            span: 583..584,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 31,
            column: 28,
            span: 584..585,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 31,
            column: 29,
            span: 585..586,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%b()'",
        ),
        position: Position {
            line: 31,
            column: 36,
            span: 587..593,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 31,
            column: 37,
            span: 593..594,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 31,
            column: 40,
            span: 595..597,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 31,
            column: 41,
            span: 597..598,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 32,
            column: 6,
            span: 627..628,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 32,
            column: 7,
            span: 628..629,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 32,
            column: 8,
            span: 629..630,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 32,
            column: 9,
            span: 630..631,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 32,
            column: 11,
            span: 632..633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 32,
            column: 18,
            span: 634..640,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 32,
            column: 19,
            span: 640..641,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 32,
            column: 23,
            span: 641..645,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 32,
            column: 24,
            span: 645..646,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 32,
            column: 25,
            span: 646..647,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 32,
            column: 26,
            span: 647..648,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 32,
            column: 27,
            span: 648..649,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 32,
            column: 28,
            span: 649..650,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 32,
            column: 29,
            span: 650..651,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%b()'",
        ),
        position: Position {
            line: 32,
            column: 36,
            span: 652..658,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 32,
            column: 37,
            span: 658..659,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 32,
            column: 40,
            span: 660..662,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 32,
            column: 41,
            span: 662..663,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 33,
            column: 11,
            span: 692..698,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 33,
            column: 12,
            span: 698..699,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 33,
            column: 13,
            span: 699..700,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 33,
            column: 14,
            span: 700..701,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 33,
            column: 15,
            span: 701..702,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 33,
            column: 16,
            span: 702..703,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 33,
            column: 19,
            span: 704..706,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 33,
            column: 21,
            span: 707..708,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 33,
            column: 22,
            span: 708..709,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 33,
            column: 23,
            span: 709..710,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 33,
            column: 24,
            span: 710..711,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 33,
            column: 25,
            span: 711..712,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 34,
            column: 0,
            span: 715..718,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 35,
            column: 0,
            span: 719..722,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 39,
            column: 6,
            span: 752..757,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 39,
            column: 7,
            span: 757..758,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 39,
            column: 15,
            span: 758..766,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 39,
            column: 17,
            span: 767..768,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 39,
            column: 18,
            span: 768..769,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 40,
            column: 4,
            span: 772..773,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 40,
            column: 12,
            span: 773..781,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 40,
            column: 14,
            span: 782..783,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 40,
            column: 15,
            span: 783..784,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 40,
            column: 19,
            span: 785..788,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 40,
            column: 20,
            span: 788..789,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 40,
            column: 21,
            span: 789..790,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 40,
            column: 22,
            span: 790..791,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 40,
            column: 23,
            span: 791..792,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 40,
            column: 24,
            span: 792..793,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 40,
            column: 25,
            span: 793..794,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 41,
            column: 4,
            span: 795..798,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 41,
            column: 5,
            span: 798..799,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'CLOSURE'",
        ),
        position: Position {
            line: 41,
            column: 15,
            span: 800..809,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 41,
            column: 16,
            span: 809..810,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'NEWTABLE'",
        ),
        position: Position {
            line: 41,
            column: 27,
            span: 811..821,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 41,
            column: 28,
            span: 821..822,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'GETGLOBAL'",
        ),
        position: Position {
            line: 41,
            column: 40,
            span: 823..834,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 41,
            column: 41,
            span: 834..835,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'CALL'",
        ),
        position: Position {
            line: 41,
            column: 48,
            span: 836..842,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 41,
            column: 49,
            span: 842..843,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETLIST'",
        ),
        position: Position {
            line: 41,
            column: 59,
            span: 844..853,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 41,
            column: 60,
            span: 853..854,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'CALL'",
        ),
        position: Position {
            line: 41,
            column: 67,
            span: 855..861,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 41,
            column: 68,
            span: 861..862,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        position: Position {
            line: 41,
            column: 77,
            span: 863..871,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 78,
            span: 871..872,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 45,
            column: 6,
            span: 899..904,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 45,
            column: 7,
            span: 904..905,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 45,
            column: 15,
            span: 905..913,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 45,
            column: 17,
            span: 914..915,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 45,
            column: 18,
            span: 915..916,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 46,
            column: 8,
            span: 919..924,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 46,
            column: 10,
            span: 925..926,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 46,
            column: 11,
            span: 926..927,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 46,
            column: 12,
            span: 927..928,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 46,
            column: 13,
            span: 928..929,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 46,
            column: 0,
            span: 929..930,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 47,
            column: 8,
            span: 933..938,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 47,
            column: 10,
            span: 939..940,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 47,
            column: 11,
            span: 940..941,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 47,
            column: 17,
            span: 942..947,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 47,
            column: 19,
            span: 948..949,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 47,
            column: 20,
            span: 949..950,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 48,
            column: 4,
            span: 953..954,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 48,
            column: 6,
            span: 955..956,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 48,
            column: 10,
            span: 957..960,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 48,
            column: 11,
            span: 960..961,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 48,
            column: 13,
            span: 962..963,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 48,
            column: 14,
            span: 963..964,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 48,
            column: 0,
            span: 964..967,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 49,
            column: 4,
            span: 968..971,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 49,
            column: 5,
            span: 971..972,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        position: Position {
            line: 49,
            column: 14,
            span: 973..981,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 49,
            column: 15,
            span: 981..982,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 53,
            column: 6,
            span: 1002..1007,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 53,
            column: 8,
            span: 1008..1009,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 53,
            column: 16,
            span: 1009..1017,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 53,
            column: 18,
            span: 1018..1019,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 53,
            column: 19,
            span: 1019..1020,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 53,
            column: 20,
            span: 1020..1021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 53,
            column: 21,
            span: 1021..1022,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 53,
            column: 22,
            span: 1022..1023,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 53,
            column: 23,
            span: 1023..1024,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 53,
            column: 24,
            span: 1024..1025,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 53,
            column: 31,
            span: 1026..1032,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 53,
            column: 33,
            span: 1033..1034,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 53,
            column: 37,
            span: 1035..1038,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 53,
            column: 38,
            span: 1038..1039,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        position: Position {
            line: 53,
            column: 47,
            span: 1040..1048,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 53,
            column: 48,
            span: 1048..1049,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 57,
            column: 6,
            span: 1070..1075,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 57,
            column: 7,
            span: 1075..1076,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 57,
            column: 15,
            span: 1076..1084,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 57,
            column: 17,
            span: 1085..1086,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 57,
            column: 18,
            span: 1086..1087,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 57,
            column: 24,
            span: 1088..1093,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 57,
            column: 29,
            span: 1094..1098,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 57,
            column: 32,
            span: 1099..1101,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 57,
            column: 38,
            span: 1102..1107,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 57,
            column: 40,
            span: 1108..1109,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 57,
            column: 42,
            span: 1110..1111,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 57,
            column: 44,
            span: 1112..1113,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 57,
            column: 45,
            span: 1112..1114,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 57,
            column: 49,
            span: 1115..1118,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 57,
            column: 53,
            span: 1119..1122,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 57,
            column: 54,
            span: 1122..1123,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADK'",
        ),
        position: Position {
            line: 58,
            column: 8,
            span: 1124..1131,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 9,
            span: 1131..1132,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        position: Position {
            line: 58,
            column: 15,
            span: 1133..1138,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 16,
            span: 1138..1139,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        position: Position {
            line: 58,
            column: 25,
            span: 1140..1148,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 58,
            column: 26,
            span: 1148..1149,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 60,
            column: 6,
            span: 1151..1156,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 60,
            column: 7,
            span: 1156..1157,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 60,
            column: 15,
            span: 1157..1165,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 60,
            column: 17,
            span: 1166..1167,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 60,
            column: 18,
            span: 1167..1168,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 60,
            column: 24,
            span: 1169..1174,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 60,
            column: 26,
            span: 1174..1176,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 60,
            column: 29,
            span: 1177..1179,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 60,
            column: 35,
            span: 1180..1185,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 60,
            column: 37,
            span: 1186..1187,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 60,
            column: 39,
            span: 1188..1189,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 60,
            column: 41,
            span: 1190..1191,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 60,
            column: 42,
            span: 1190..1192,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 60,
            column: 46,
            span: 1193..1196,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 60,
            column: 50,
            span: 1197..1200,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 60,
            column: 51,
            span: 1200..1201,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADK'",
        ),
        position: Position {
            line: 61,
            column: 8,
            span: 1202..1209,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 61,
            column: 9,
            span: 1209..1210,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        position: Position {
            line: 61,
            column: 15,
            span: 1211..1216,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 61,
            column: 16,
            span: 1216..1217,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        position: Position {
            line: 61,
            column: 25,
            span: 1218..1226,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 61,
            column: 26,
            span: 1226..1227,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 63,
            column: 6,
            span: 1229..1234,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 63,
            column: 7,
            span: 1234..1235,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 63,
            column: 15,
            span: 1235..1243,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 63,
            column: 17,
            span: 1244..1245,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 63,
            column: 18,
            span: 1245..1246,
        },
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        position: Position {
            line: 63,
            column: 25,
            span: 1247..1253,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 63,
            column: 31,
            span: 1254..1259,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 63,
            column: 33,
            span: 1260..1261,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 63,
            column: 35,
            span: 1262..1263,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 63,
            column: 37,
            span: 1263..1265,
        },
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        position: Position {
            line: 63,
            column: 43,
            span: 1266..1271,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 63,
            column: 49,
            span: 1272..1277,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 63,
            column: 53,
            span: 1278..1281,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 63,
            column: 54,
            span: 1281..1282,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADK'",
        ),
        position: Position {
            line: 64,
            column: 8,
            span: 1283..1290,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 64,
            column: 9,
            span: 1290..1291,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        position: Position {
            line: 64,
            column: 15,
            span: 1292..1297,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 64,
            column: 16,
            span: 1297..1298,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        position: Position {
            line: 64,
            column: 25,
            span: 1299..1307,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 64,
            column: 26,
            span: 1307..1308,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 66,
            column: 6,
            span: 1310..1315,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 66,
            column: 7,
            span: 1315..1316,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 66,
            column: 15,
            span: 1316..1324,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 66,
            column: 17,
            span: 1325..1326,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 66,
            column: 18,
            span: 1326..1327,
        },
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        position: Position {
            line: 66,
            column: 25,
            span: 1328..1334,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 66,
            column: 31,
            span: 1335..1340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 66,
            column: 33,
            span: 1341..1342,
        },
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        position: Position {
            line: 66,
            column: 39,
            span: 1343..1348,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 66,
            column: 43,
            span: 1349..1352,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 66,
            column: 47,
            span: 1353..1356,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 66,
            column: 48,
            span: 1356..1357,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADNIL'",
        ),
        position: Position {
            line: 67,
            column: 10,
            span: 1358..1367,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 67,
            column: 11,
            span: 1367..1368,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        position: Position {
            line: 67,
            column: 17,
            span: 1369..1374,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 67,
            column: 18,
            span: 1374..1375,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        position: Position {
            line: 67,
            column: 27,
            span: 1376..1384,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 67,
            column: 28,
            span: 1384..1385,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 69,
            column: 6,
            span: 1387..1392,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 69,
            column: 7,
            span: 1392..1393,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 69,
            column: 15,
            span: 1393..1401,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 69,
            column: 17,
            span: 1402..1403,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 69,
            column: 18,
            span: 1403..1404,
        },
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        position: Position {
            line: 69,
            column: 25,
            span: 1405..1411,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 69,
            column: 31,
            span: 1412..1417,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 69,
            column: 33,
            span: 1418..1419,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 69,
            column: 35,
            span: 1420..1421,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 69,
            column: 37,
            span: 1421..1423,
        },
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        position: Position {
            line: 69,
            column: 43,
            span: 1424..1429,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 69,
            column: 48,
            span: 1430..1434,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 69,
            column: 52,
            span: 1435..1438,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 69,
            column: 53,
            span: 1438..1439,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADK'",
        ),
        position: Position {
            line: 70,
            column: 8,
            span: 1440..1447,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 70,
            column: 9,
            span: 1447..1448,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        position: Position {
            line: 70,
            column: 18,
            span: 1449..1457,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 70,
            column: 19,
            span: 1457..1458,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 74,
            column: 6,
            span: 1484..1489,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 74,
            column: 7,
            span: 1489..1490,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 74,
            column: 15,
            span: 1490..1498,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 74,
            column: 17,
            span: 1499..1500,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 74,
            column: 18,
            span: 1500..1501,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 74,
            column: 19,
            span: 1501..1502,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 74,
            column: 20,
            span: 1502..1503,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 74,
            column: 21,
            span: 1503..1504,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 74,
            column: 22,
            span: 1504..1505,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 74,
            column: 23,
            span: 1505..1506,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 74,
            column: 24,
            span: 1506..1507,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 74,
            column: 25,
            span: 1507..1508,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 74,
            column: 32,
            span: 1509..1515,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 74,
            column: 34,
            span: 1516..1517,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 74,
            column: 36,
            span: 1517..1519,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 74,
            column: 37,
            span: 1519..1520,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 74,
            column: 39,
            span: 1520..1522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 74,
            column: 40,
            span: 1522..1523,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 74,
            column: 42,
            span: 1523..1525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 74,
            column: 43,
            span: 1525..1526,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 74,
            column: 47,
            span: 1527..1530,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 74,
            column: 48,
            span: 1530..1531,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        position: Position {
            line: 75,
            column: 9,
            span: 1534..1540,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 75,
            column: 10,
            span: 1540..1541,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        position: Position {
            line: 75,
            column: 17,
            span: 1542..1548,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 75,
            column: 18,
            span: 1548..1549,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        position: Position {
            line: 75,
            column: 25,
            span: 1550..1556,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 75,
            column: 26,
            span: 1556..1557,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        position: Position {
            line: 75,
            column: 33,
            span: 1558..1564,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 75,
            column: 34,
            span: 1564..1565,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'CONCAT'",
        ),
        position: Position {
            line: 75,
            column: 43,
            span: 1566..1574,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 75,
            column: 44,
            span: 1574..1575,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        position: Position {
            line: 75,
            column: 53,
            span: 1576..1584,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 75,
            column: 54,
            span: 1584..1585,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 78,
            column: 6,
            span: 1594..1599,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 78,
            column: 7,
            span: 1599..1600,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 78,
            column: 15,
            span: 1600..1608,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 78,
            column: 17,
            span: 1609..1610,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 78,
            column: 18,
            span: 1610..1611,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 78,
            column: 25,
            span: 1612..1618,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 78,
            column: 29,
            span: 1619..1622,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 78,
            column: 33,
            span: 1623..1626,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 78,
            column: 37,
            span: 1627..1630,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 78,
            column: 41,
            span: 1631..1634,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 78,
            column: 42,
            span: 1634..1635,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADBOOL'",
        ),
        position: Position {
            line: 78,
            column: 53,
            span: 1636..1646,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 78,
            column: 54,
            span: 1646..1647,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        position: Position {
            line: 78,
            column: 63,
            span: 1648..1656,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 78,
            column: 64,
            span: 1656..1657,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 79,
            column: 6,
            span: 1658..1663,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 79,
            column: 7,
            span: 1663..1664,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 79,
            column: 15,
            span: 1664..1672,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 79,
            column: 17,
            span: 1673..1674,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 79,
            column: 18,
            span: 1674..1675,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 79,
            column: 25,
            span: 1676..1682,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 79,
            column: 29,
            span: 1683..1686,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 79,
            column: 33,
            span: 1687..1690,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 79,
            column: 39,
            span: 1691..1696,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 79,
            column: 43,
            span: 1697..1700,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 79,
            column: 44,
            span: 1700..1701,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADBOOL'",
        ),
        position: Position {
            line: 79,
            column: 55,
            span: 1702..1712,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 79,
            column: 56,
            span: 1712..1713,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        position: Position {
            line: 79,
            column: 65,
            span: 1714..1722,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 79,
            column: 66,
            span: 1722..1723,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 80,
            column: 6,
            span: 1724..1729,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 80,
            column: 7,
            span: 1729..1730,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 80,
            column: 15,
            span: 1730..1738,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 80,
            column: 17,
            span: 1739..1740,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 80,
            column: 18,
            span: 1740..1741,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 80,
            column: 25,
            span: 1742..1748,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 80,
            column: 29,
            span: 1749..1752,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 80,
            column: 33,
            span: 1753..1756,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 80,
            column: 38,
            span: 1757..1761,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 80,
            column: 42,
            span: 1762..1765,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 80,
            column: 43,
            span: 1765..1766,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADBOOL'",
        ),
        position: Position {
            line: 80,
            column: 54,
            span: 1767..1777,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 80,
            column: 55,
            span: 1777..1778,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        position: Position {
            line: 80,
            column: 64,
            span: 1779..1787,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 80,
            column: 65,
            span: 1787..1788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 81,
            column: 6,
            span: 1789..1794,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 81,
            column: 7,
            span: 1794..1795,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 81,
            column: 15,
            span: 1795..1803,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 81,
            column: 17,
            span: 1804..1805,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 81,
            column: 18,
            span: 1805..1806,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 81,
            column: 25,
            span: 1807..1813,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 81,
            column: 29,
            span: 1814..1817,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 81,
            column: 33,
            span: 1818..1821,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 81,
            column: 35,
            span: 1821..1823,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 81,
            column: 39,
            span: 1824..1827,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 81,
            column: 40,
            span: 1827..1828,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADBOOL'",
        ),
        position: Position {
            line: 81,
            column: 51,
            span: 1829..1839,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 81,
            column: 52,
            span: 1839..1840,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        position: Position {
            line: 81,
            column: 61,
            span: 1841..1849,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 81,
            column: 62,
            span: 1849..1850,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 84,
            column: 6,
            span: 1879..1884,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 84,
            column: 7,
            span: 1884..1885,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 84,
            column: 15,
            span: 1885..1893,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 84,
            column: 17,
            span: 1894..1895,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 84,
            column: 18,
            span: 1895..1896,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 85,
            column: 8,
            span: 1899..1904,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 85,
            column: 10,
            span: 1905..1906,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 85,
            column: 11,
            span: 1906..1907,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 85,
            column: 12,
            span: 1907..1908,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 85,
            column: 13,
            span: 1908..1909,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 85,
            column: 14,
            span: 1909..1910,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 85,
            column: 15,
            span: 1910..1911,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 85,
            column: 0,
            span: 1911..1912,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 86,
            column: 4,
            span: 1915..1916,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 86,
            column: 6,
            span: 1917..1918,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 86,
            column: 8,
            span: 1919..1920,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 86,
            column: 9,
            span: 1920..1921,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 86,
            column: 0,
            span: 1920..1922,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 87,
            column: 4,
            span: 1925..1926,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 87,
            column: 5,
            span: 1926..1927,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 87,
            column: 6,
            span: 1926..1928,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 87,
            column: 7,
            span: 1928..1929,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 87,
            column: 8,
            span: 1929..1930,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 87,
            column: 10,
            span: 1931..1932,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 87,
            column: 11,
            span: 1932..1933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 87,
            column: 12,
            span: 1933..1934,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 87,
            column: 13,
            span: 1934..1935,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 87,
            column: 15,
            span: 1936..1937,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 87,
            column: 17,
            span: 1938..1939,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 87,
            column: 18,
            span: 1939..1940,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 87,
            column: 19,
            span: 1940..1941,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 87,
            column: 20,
            span: 1941..1942,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 87,
            column: 22,
            span: 1943..1944,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 87,
            column: 24,
            span: 1945..1946,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 87,
            column: 25,
            span: 1946..1947,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 87,
            column: 26,
            span: 1947..1948,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: ".5",
                },
            ),
        ),
        position: Position {
            line: 87,
            column: 30,
            span: 1947..1952,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 87,
            column: 32,
            span: 1953..1954,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 87,
            column: 34,
            span: 1955..1956,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 87,
            column: 35,
            span: 1956..1957,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 87,
            column: 36,
            span: 1957..1958,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 87,
            column: 37,
            span: 1958..1959,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 87,
            column: 38,
            span: 1959..1960,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 87,
            column: 40,
            span: 1961..1962,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 87,
            column: 42,
            span: 1963..1964,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 87,
            column: 43,
            span: 1964..1965,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 87,
            column: 44,
            span: 1965..1966,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 87,
            column: 45,
            span: 1966..1967,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 87,
            column: 46,
            span: 1967..1968,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 87,
            column: 0,
            span: 1969..1970,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 88,
            column: 4,
            span: 1971..1974,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 88,
            column: 5,
            span: 1974..1975,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MUL'",
        ),
        position: Position {
            line: 89,
            column: 8,
            span: 1978..1983,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 89,
            column: 9,
            span: 1983..1984,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'DIV'",
        ),
        position: Position {
            line: 90,
            column: 8,
            span: 1987..1992,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 90,
            column: 9,
            span: 1992..1993,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ADD'",
        ),
        position: Position {
            line: 90,
            column: 15,
            span: 1994..1999,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 90,
            column: 16,
            span: 1999..2000,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'GETTABLE'",
        ),
        position: Position {
            line: 90,
            column: 27,
            span: 2001..2011,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 90,
            column: 28,
            span: 2011..2012,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SUB'",
        ),
        position: Position {
            line: 90,
            column: 34,
            span: 2013..2018,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 90,
            column: 35,
            span: 2018..2019,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'GETTABLE'",
        ),
        position: Position {
            line: 90,
            column: 46,
            span: 2020..2030,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 90,
            column: 47,
            span: 2030..2031,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'POW'",
        ),
        position: Position {
            line: 90,
            column: 53,
            span: 2032..2037,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 90,
            column: 54,
            span: 2037..2038,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'UNM'",
        ),
        position: Position {
            line: 91,
            column: 10,
            span: 2043..2048,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 91,
            column: 11,
            span: 2048..2049,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABLE'",
        ),
        position: Position {
            line: 91,
            column: 22,
            span: 2050..2060,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 91,
            column: 23,
            span: 2060..2061,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABLE'",
        ),
        position: Position {
            line: 91,
            column: 34,
            span: 2062..2072,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 91,
            column: 35,
            span: 2072..2073,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        position: Position {
            line: 91,
            column: 44,
            span: 2074..2082,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 91,
            column: 45,
            span: 2082..2083,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 95,
            column: 6,
            span: 2116..2121,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 95,
            column: 7,
            span: 2121..2122,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 95,
            column: 15,
            span: 2122..2130,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 95,
            column: 17,
            span: 2131..2132,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 95,
            column: 18,
            span: 2132..2133,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 96,
            column: 8,
            span: 2136..2141,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 96,
            column: 10,
            span: 2142..2143,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 96,
            column: 11,
            span: 2143..2144,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 96,
            column: 0,
            span: 2144..2145,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 97,
            column: 4,
            span: 2148..2149,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 97,
            column: 5,
            span: 2149..2150,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 97,
            column: 6,
            span: 2150..2151,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 97,
            column: 8,
            span: 2152..2153,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 97,
            column: 0,
            span: 2153..2155,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 98,
            column: 4,
            span: 2158..2159,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 98,
            column: 5,
            span: 2159..2160,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 98,
            column: 6,
            span: 2160..2161,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 98,
            column: 8,
            span: 2162..2163,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 98,
            column: 0,
            span: 2164..2165,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 99,
            column: 4,
            span: 2168..2169,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 99,
            column: 5,
            span: 2169..2170,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 99,
            column: 6,
            span: 2170..2171,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 99,
            column: 7,
            span: 2171..2172,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 99,
            column: 9,
            span: 2173..2174,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'y'",
        ),
        position: Position {
            line: 99,
            column: 13,
            span: 2175..2178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 100,
            column: 4,
            span: 2181..2182,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 100,
            column: 6,
            span: 2183..2184,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 100,
            column: 8,
            span: 2184..2186,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 100,
            column: 10,
            span: 2187..2188,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 100,
            column: 0,
            span: 2189..2190,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 101,
            column: 4,
            span: 2193..2194,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 101,
            column: 6,
            span: 2195..2196,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 101,
            column: 8,
            span: 2196..2198,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 101,
            column: 9,
            span: 2198..2199,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 101,
            column: 0,
            span: 2199..2200,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 102,
            column: 4,
            span: 2203..2204,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 102,
            column: 6,
            span: 2205..2206,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 102,
            column: 8,
            span: 2206..2208,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 102,
            column: 9,
            span: 2208..2209,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 102,
            column: 0,
            span: 2208..2210,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 103,
            column: 4,
            span: 2213..2214,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 103,
            column: 5,
            span: 2214..2215,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 103,
            column: 9,
            span: 2215..2219,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 103,
            column: 10,
            span: 2219..2220,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 103,
            column: 12,
            span: 2221..2222,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 103,
            column: 0,
            span: 2223..2228,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 104,
            column: 4,
            span: 2229..2232,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 104,
            column: 5,
            span: 2232..2233,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABLE'",
        ),
        position: Position {
            line: 105,
            column: 13,
            span: 2236..2246,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 105,
            column: 14,
            span: 2246..2247,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABLE'",
        ),
        position: Position {
            line: 105,
            column: 25,
            span: 2248..2258,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 105,
            column: 26,
            span: 2258..2259,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABLE'",
        ),
        position: Position {
            line: 105,
            column: 37,
            span: 2260..2270,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 105,
            column: 38,
            span: 2270..2271,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SUB'",
        ),
        position: Position {
            line: 105,
            column: 44,
            span: 2272..2277,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 105,
            column: 45,
            span: 2277..2278,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'DIV'",
        ),
        position: Position {
            line: 105,
            column: 51,
            span: 2279..2284,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 105,
            column: 52,
            span: 2284..2285,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADK'",
        ),
        position: Position {
            line: 105,
            column: 60,
            span: 2286..2293,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 105,
            column: 61,
            span: 2293..2294,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABLE'",
        ),
        position: Position {
            line: 106,
            column: 13,
            span: 2297..2307,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 106,
            column: 14,
            span: 2307..2308,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        position: Position {
            line: 106,
            column: 23,
            span: 2309..2317,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 106,
            column: 24,
            span: 2317..2318,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 108,
            column: 6,
            span: 2320..2325,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 108,
            column: 15,
            span: 2326..2334,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 108,
            column: 17,
            span: 2335..2336,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 108,
            column: 19,
            span: 2337..2338,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 108,
            column: 20,
            span: 2338..2339,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 108,
            column: 27,
            span: 2340..2346,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 108,
            column: 29,
            span: 2347..2348,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 108,
            column: 30,
            span: 2348..2349,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 108,
            column: 31,
            span: 2349..2350,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 108,
            column: 32,
            span: 2349..2351,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 108,
            column: 33,
            span: 2351..2352,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 108,
            column: 34,
            span: 2351..2353,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 108,
            column: 36,
            span: 2354..2355,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 108,
            column: 38,
            span: 2356..2357,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 108,
            column: 39,
            span: 2357..2358,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 108,
            column: 40,
            span: 2358..2359,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 108,
            column: 41,
            span: 2358..2360,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 108,
            column: 42,
            span: 2360..2361,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 108,
            column: 43,
            span: 2361..2362,
        },
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        position: Position {
            line: 108,
            column: 45,
            span: 2363..2364,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 108,
            column: 47,
            span: 2364..2366,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 108,
            column: 48,
            span: 2366..2367,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 108,
            column: 49,
            span: 2367..2368,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 108,
            column: 50,
            span: 2367..2369,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 108,
            column: 52,
            span: 2370..2371,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 108,
            column: 54,
            span: 2371..2373,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 108,
            column: 56,
            span: 2374..2375,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 108,
            column: 58,
            span: 2375..2377,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 108,
            column: 0,
            span: 2378..2381,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 110,
            column: 6,
            span: 2383..2388,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 110,
            column: 7,
            span: 2388..2389,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 110,
            column: 8,
            span: 2389..2390,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 110,
            column: 9,
            span: 2390..2391,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADK'",
        ),
        position: Position {
            line: 110,
            column: 17,
            span: 2392..2399,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 110,
            column: 18,
            span: 2399..2400,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        position: Position {
            line: 110,
            column: 27,
            span: 2401..2409,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 110,
            column: 28,
            span: 2409..2410,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 111,
            column: 7,
            span: 2411..2417,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 111,
            column: 8,
            span: 2417..2418,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 111,
            column: 9,
            span: 2418..2419,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 111,
            column: 10,
            span: 2419..2420,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 111,
            column: 11,
            span: 2420..2421,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 111,
            column: 14,
            span: 2422..2424,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 111,
            column: 16,
            span: 2425..2426,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 111,
            column: 17,
            span: 2425..2427,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 111,
            column: 18,
            span: 2427..2428,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 113,
            column: 6,
            span: 2430..2435,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 113,
            column: 7,
            span: 2435..2436,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 113,
            column: 15,
            span: 2436..2444,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 113,
            column: 17,
            span: 2445..2446,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 113,
            column: 18,
            span: 2446..2447,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 114,
            column: 8,
            span: 2450..2455,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 114,
            column: 10,
            span: 2456..2457,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 114,
            column: 11,
            span: 2457..2458,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 114,
            column: 12,
            span: 2458..2459,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 114,
            column: 13,
            span: 2459..2460,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 114,
            column: 0,
            span: 2460..2461,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 115,
            column: 4,
            span: 2464..2465,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 115,
            column: 5,
            span: 2465..2466,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 115,
            column: 6,
            span: 2466..2467,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 115,
            column: 7,
            span: 2467..2468,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 115,
            column: 8,
            span: 2468..2469,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 115,
            column: 10,
            span: 2470..2471,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 115,
            column: 12,
            span: 2472..2473,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 115,
            column: 14,
            span: 2474..2475,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 115,
            column: 15,
            span: 2475..2476,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 115,
            column: 0,
            span: 2477..2478,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 116,
            column: 4,
            span: 2481..2482,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 116,
            column: 5,
            span: 2482..2483,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 116,
            column: 6,
            span: 2483..2484,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 116,
            column: 7,
            span: 2484..2485,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 116,
            column: 8,
            span: 2485..2486,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 116,
            column: 10,
            span: 2487..2488,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 116,
            column: 12,
            span: 2489..2490,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 116,
            column: 14,
            span: 2491..2492,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 116,
            column: 15,
            span: 2492..2493,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 116,
            column: 0,
            span: 2494..2495,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 117,
            column: 4,
            span: 2498..2499,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 117,
            column: 5,
            span: 2499..2500,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 117,
            column: 7,
            span: 2501..2502,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 117,
            column: 9,
            span: 2503..2504,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 117,
            column: 11,
            span: 2505..2506,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 117,
            column: 12,
            span: 2506..2507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 117,
            column: 0,
            span: 2508..2509,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 118,
            column: 4,
            span: 2512..2513,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 118,
            column: 6,
            span: 2514..2515,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 118,
            column: 0,
            span: 2516..2517,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 119,
            column: 4,
            span: 2518..2521,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 119,
            column: 5,
            span: 2521..2522,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        position: Position {
            line: 120,
            column: 9,
            span: 2526..2532,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 120,
            column: 10,
            span: 2532..2533,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        position: Position {
            line: 120,
            column: 17,
            span: 2534..2540,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 120,
            column: 18,
            span: 2540..2541,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABLE'",
        ),
        position: Position {
            line: 120,
            column: 29,
            span: 2542..2552,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 120,
            column: 30,
            span: 2552..2553,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        position: Position {
            line: 121,
            column: 9,
            span: 2556..2562,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 121,
            column: 10,
            span: 2562..2563,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        position: Position {
            line: 121,
            column: 17,
            span: 2564..2570,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 121,
            column: 18,
            span: 2570..2571,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        position: Position {
            line: 121,
            column: 25,
            span: 2572..2578,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 121,
            column: 26,
            span: 2578..2579,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABLE'",
        ),
        position: Position {
            line: 121,
            column: 37,
            span: 2580..2590,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 121,
            column: 38,
            span: 2590..2591,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        position: Position {
            line: 122,
            column: 9,
            span: 2594..2600,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 122,
            column: 10,
            span: 2600..2601,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        position: Position {
            line: 122,
            column: 17,
            span: 2602..2608,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 122,
            column: 18,
            span: 2608..2609,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        position: Position {
            line: 122,
            column: 25,
            span: 2610..2616,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 122,
            column: 26,
            span: 2616..2617,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        position: Position {
            line: 124,
            column: 11,
            span: 2643..2651,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 124,
            column: 12,
            span: 2651..2652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkequal",
        ),
        position: Position {
            line: 128,
            column: 11,
            span: 2678..2688,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 128,
            column: 12,
            span: 2688..2689,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 128,
            column: 20,
            span: 2689..2697,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 128,
            column: 22,
            span: 2698..2699,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 128,
            column: 23,
            span: 2699..2700,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 128,
            column: 26,
            span: 2701..2703,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 128,
            column: 28,
            span: 2704..2705,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 128,
            column: 29,
            span: 2705..2706,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 128,
            column: 31,
            span: 2706..2708,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 128,
            column: 34,
            span: 2708..2711,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 128,
            column: 35,
            span: 2711..2712,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 128,
            column: 40,
            span: 2713..2717,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 128,
            column: 42,
            span: 2718..2719,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 128,
            column: 43,
            span: 2719..2720,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 128,
            column: 44,
            span: 2719..2721,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 128,
            column: 48,
            span: 2722..2725,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 128,
            column: 49,
            span: 2725..2726,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 128,
            column: 52,
            span: 2727..2729,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 128,
            column: 54,
            span: 2730..2731,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 128,
            column: 56,
            span: 2731..2733,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 128,
            column: 59,
            span: 2733..2736,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 128,
            column: 64,
            span: 2737..2741,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 128,
            column: 66,
            span: 2742..2743,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 128,
            column: 67,
            span: 2743..2744,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 128,
            column: 68,
            span: 2743..2745,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 128,
            column: 72,
            span: 2746..2749,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 128,
            column: 76,
            span: 2750..2753,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 128,
            column: 77,
            span: 2753..2754,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 129,
            column: 20,
            span: 2766..2774,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 129,
            column: 22,
            span: 2775..2776,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 129,
            column: 23,
            span: 2776..2777,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 129,
            column: 26,
            span: 2778..2780,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 129,
            column: 28,
            span: 2781..2782,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 129,
            column: 29,
            span: 2782..2783,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 129,
            column: 31,
            span: 2783..2785,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 129,
            column: 32,
            span: 2784..2786,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 129,
            column: 33,
            span: 2786..2787,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 129,
            column: 38,
            span: 2788..2792,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 129,
            column: 40,
            span: 2793..2794,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 129,
            column: 41,
            span: 2794..2795,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 129,
            column: 42,
            span: 2794..2796,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 129,
            column: 46,
            span: 2797..2800,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 129,
            column: 47,
            span: 2800..2801,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 129,
            column: 50,
            span: 2802..2804,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 129,
            column: 52,
            span: 2805..2806,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 129,
            column: 54,
            span: 2806..2808,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 129,
            column: 55,
            span: 2807..2809,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 129,
            column: 60,
            span: 2810..2814,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 129,
            column: 62,
            span: 2815..2816,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 129,
            column: 63,
            span: 2816..2817,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 129,
            column: 64,
            span: 2816..2818,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 129,
            column: 68,
            span: 2819..2822,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 129,
            column: 72,
            span: 2823..2826,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 129,
            column: 73,
            span: 2826..2827,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 131,
            column: 6,
            span: 2829..2834,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 131,
            column: 7,
            span: 2834..2835,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 131,
            column: 15,
            span: 2835..2843,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 131,
            column: 17,
            span: 2844..2845,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 131,
            column: 18,
            span: 2845..2846,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 131,
            column: 21,
            span: 2847..2849,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 131,
            column: 23,
            span: 2850..2851,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 131,
            column: 25,
            span: 2851..2853,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 131,
            column: 28,
            span: 2853..2856,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 131,
            column: 33,
            span: 2857..2861,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 131,
            column: 35,
            span: 2862..2863,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 131,
            column: 36,
            span: 2863..2864,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 131,
            column: 37,
            span: 2863..2865,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 131,
            column: 41,
            span: 2866..2869,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 131,
            column: 45,
            span: 2870..2873,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 131,
            column: 46,
            span: 2873..2874,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'GETGLOBAL'",
        ),
        position: Position {
            line: 132,
            column: 12,
            span: 2875..2886,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 132,
            column: 13,
            span: 2886..2887,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'EQ'",
        ),
        position: Position {
            line: 132,
            column: 18,
            span: 2888..2892,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 132,
            column: 19,
            span: 2892..2893,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        position: Position {
            line: 132,
            column: 25,
            span: 2894..2899,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 132,
            column: 26,
            span: 2899..2900,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADK'",
        ),
        position: Position {
            line: 132,
            column: 34,
            span: 2901..2908,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 132,
            column: 35,
            span: 2908..2909,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETGLOBAL'",
        ),
        position: Position {
            line: 132,
            column: 47,
            span: 2910..2921,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 132,
            column: 48,
            span: 2921..2922,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        position: Position {
            line: 132,
            column: 57,
            span: 2923..2931,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 132,
            column: 58,
            span: 2931..2932,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkequal",
        ),
        position: Position {
            line: 135,
            column: 11,
            span: 2947..2957,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 135,
            column: 12,
            span: 2957..2958,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 135,
            column: 20,
            span: 2958..2966,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 135,
            column: 22,
            span: 2967..2968,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 135,
            column: 23,
            span: 2968..2969,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 135,
            column: 29,
            span: 2970..2975,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 135,
            column: 31,
            span: 2976..2977,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 135,
            column: 32,
            span: 2977..2978,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 135,
            column: 35,
            span: 2979..2981,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 135,
            column: 39,
            span: 2982..2985,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 135,
            column: 41,
            span: 2986..2987,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 135,
            column: 42,
            span: 2987..2988,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 135,
            column: 45,
            span: 2989..2991,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 135,
            column: 47,
            span: 2992..2993,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 135,
            column: 48,
            span: 2993..2994,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 135,
            column: 53,
            span: 2995..2999,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 135,
            column: 55,
            span: 3000..3001,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 135,
            column: 56,
            span: 3001..3002,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 135,
            column: 57,
            span: 3002..3003,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 135,
            column: 61,
            span: 3004..3007,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 135,
            column: 65,
            span: 3008..3011,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 135,
            column: 66,
            span: 3011..3012,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 136,
            column: 20,
            span: 3024..3032,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 136,
            column: 22,
            span: 3033..3034,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 136,
            column: 23,
            span: 3034..3035,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 136,
            column: 29,
            span: 3036..3041,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 136,
            column: 31,
            span: 3042..3043,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 136,
            column: 32,
            span: 3043..3044,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 136,
            column: 35,
            span: 3045..3047,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 136,
            column: 37,
            span: 3048..3049,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 136,
            column: 40,
            span: 3049..3052,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 136,
            column: 42,
            span: 3053..3054,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 136,
            column: 46,
            span: 3055..3058,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 136,
            column: 50,
            span: 3059..3062,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 136,
            column: 52,
            span: 3063..3064,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 136,
            column: 53,
            span: 3064..3065,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 136,
            column: 58,
            span: 3066..3070,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 136,
            column: 60,
            span: 3071..3072,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 136,
            column: 61,
            span: 3072..3073,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 136,
            column: 62,
            span: 3073..3074,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 136,
            column: 66,
            span: 3075..3078,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 136,
            column: 70,
            span: 3079..3082,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 136,
            column: 71,
            span: 3082..3083,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkequal",
        ),
        position: Position {
            line: 138,
            column: 11,
            span: 3085..3095,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 138,
            column: 12,
            span: 3095..3096,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 138,
            column: 20,
            span: 3096..3104,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 138,
            column: 22,
            span: 3105..3106,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 138,
            column: 23,
            span: 3106..3107,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 138,
            column: 24,
            span: 3107..3108,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 138,
            column: 30,
            span: 3109..3114,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 138,
            column: 32,
            span: 3115..3116,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 138,
            column: 33,
            span: 3116..3117,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 138,
            column: 40,
            span: 3118..3124,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 138,
            column: 42,
            span: 3124..3126,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 138,
            column: 45,
            span: 3127..3129,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 138,
            column: 47,
            span: 3130..3131,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 138,
            column: 51,
            span: 3132..3135,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 138,
            column: 53,
            span: 3136..3137,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 138,
            column: 56,
            span: 3138..3140,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 138,
            column: 58,
            span: 3141..3142,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 138,
            column: 62,
            span: 3143..3146,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 138,
            column: 63,
            span: 3146..3147,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 139,
            column: 20,
            span: 3159..3167,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 139,
            column: 22,
            span: 3168..3169,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 139,
            column: 23,
            span: 3169..3170,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 139,
            column: 24,
            span: 3170..3171,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 139,
            column: 30,
            span: 3172..3177,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 139,
            column: 32,
            span: 3178..3179,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 139,
            column: 33,
            span: 3179..3180,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 139,
            column: 40,
            span: 3181..3187,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 139,
            column: 44,
            span: 3188..3191,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 139,
            column: 46,
            span: 3192..3193,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 139,
            column: 49,
            span: 3193..3196,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 139,
            column: 50,
            span: 3196..3197,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 139,
            column: 51,
            span: 3197..3198,
        },
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        position: Position {
            line: 139,
            column: 54,
            span: 3199..3201,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 139,
            column: 56,
            span: 3201..3203,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 139,
            column: 57,
            span: 3203..3204,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 139,
            column: 60,
            span: 3205..3207,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 139,
            column: 64,
            span: 3208..3211,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 139,
            column: 65,
            span: 3211..3212,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 139,
            column: 66,
            span: 3212..3213,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 139,
            column: 69,
            span: 3214..3216,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 139,
            column: 71,
            span: 3217..3218,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 139,
            column: 72,
            span: 3218..3219,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 139,
            column: 73,
            span: 3219..3220,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 139,
            column: 77,
            span: 3221..3224,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 139,
            column: 78,
            span: 3224..3225,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 142,
            column: 6,
            span: 3228..3233,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        position: Position {
            line: 142,
            column: 11,
            span: 3234..3238,
        },
    },
]
