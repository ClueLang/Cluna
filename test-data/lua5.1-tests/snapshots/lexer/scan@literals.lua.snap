---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.1-tests/literals.lua
---
[
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 1,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 1,
    },
    Token {
        kind: String,
        lexeme: "'testing scanner'",
        line: 1,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 1,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 3,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "dostring",
        line: 3,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 3,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 3,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 3,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 3,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 3,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 3,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 3,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 3,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 3,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "dostring",
        line: 5,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 5,
    },
    Token {
        kind: String,
        lexeme: "\"x = 'a\\0a'\"",
        line: 5,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 6,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 6,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 6,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 6,
    },
    Token {
        kind: String,
        lexeme: "'a\\0a'",
        line: 6,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 6,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        line: 6,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 6,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 6,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 6,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 6,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 6,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 9,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 9,
    },
    Token {
        kind: String,
        lexeme: "'\\n\\\"\\'\\\\'",
        line: 9,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 9,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 9,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\n\n\"'\\]]",
        line: 11,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 13,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 13,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 13,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 13,
    },
    Token {
        kind: String,
        lexeme: "\"\\a\\b\\f\\n\\r\\t\\v\"",
        line: 13,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 13,
    },
    Token {
        kind: String,
        lexeme: "\"^%c%c%c%c%c%c%c$\"",
        line: 13,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 13,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 16,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 16,
    },
    Token {
        kind: String,
        lexeme: "\"\\09912\"",
        line: 16,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 16,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 16,
    },
    Token {
        kind: String,
        lexeme: "'c12'",
        line: 16,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 17,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 17,
    },
    Token {
        kind: String,
        lexeme: "\"\\99ab\"",
        line: 17,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 17,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 17,
    },
    Token {
        kind: String,
        lexeme: "'cab'",
        line: 17,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 17,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 18,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 18,
    },
    Token {
        kind: String,
        lexeme: "\"\\099\"",
        line: 18,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 18,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 18,
    },
    Token {
        kind: String,
        lexeme: "'\\99'",
        line: 18,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 19,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 19,
    },
    Token {
        kind: String,
        lexeme: "\"\\099\\n\"",
        line: 19,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 19,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 19,
    },
    Token {
        kind: String,
        lexeme: "'c\\10'",
        line: 19,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 20,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 20,
    },
    Token {
        kind: String,
        lexeme: "'\\0\\0\\0alo'",
        line: 20,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 20,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 20,
    },
    Token {
        kind: String,
        lexeme: "'\\0'",
        line: 20,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 20,
    },
    Token {
        kind: String,
        lexeme: "'\\0\\0'",
        line: 20,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 20,
    },
    Token {
        kind: String,
        lexeme: "'alo'",
        line: 20,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 22,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 22,
    },
    Token {
        kind: Number,
        lexeme: "010",
        line: 22,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 22,
    },
    Token {
        kind: Number,
        lexeme: "020",
        line: 22,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 22,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 22,
    },
    Token {
        kind: Number,
        lexeme: "030",
        line: 22,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 22,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 22,
    },
    Token {
        kind: String,
        lexeme: "\"1020-30\"",
        line: 22,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "var",
        line: 26,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 26,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 26,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 26,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 26,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 26,
    },
    Token {
        kind: Number,
        lexeme: "15000",
        line: 26,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 27,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 27,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 27,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 27,
    },
    Token {
        kind: String,
        lexeme: "\"%s = 5\"",
        line: 27,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "var",
        line: 27,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "dostring",
        line: 28,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 28,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 29,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 29,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "var",
        line: 29,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 29,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 29,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 29,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 29,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "var",
        line: 30,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 30,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 31,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 31,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 31,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 34,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 34,
    },
    Token {
        kind: String,
        lexeme: "\"\\n\\t\"",
        line: 34,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 34,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 34,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\n\n\t]]",
        line: 36,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 37,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 37,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\n\n $debug]]",
        line: 39,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 39,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 39,
    },
    Token {
        kind: String,
        lexeme: "\"\\n $debug\"",
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 40,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 40,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[ [ ]]",
        line: 40,
    },
    Token {
        kind: NotEquals,
        lexeme: " ~",
        line: 40,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 40,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[ ] ]]",
        line: 40,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 42,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 42,
    },
    Token {
        kind: String,
        lexeme: "\"001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789\"",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 43,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 43,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        line: 43,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 43,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 43,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 43,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 43,
    },
    Token {
        kind: Number,
        lexeme: "960",
        line: 43,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 44,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 44,
    },
    Token {
        kind: MultilineString,
        lexeme: "[=[\nprint('+')\n\na1 = [[\"isto e' um string com v�rias 'aspas'\"]]\na2 = \"'aspas'\"\n\nassert(string.find(a1, a2) == 31)\nprint('+')\n\na1 = [==[temp = [[um valor qualquer]]; ]==]\nassert(loadstring(a1))()\nassert(temp == 'um valor qualquer')\n-- long strings --\nb = \"001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789\"\nassert(string.len(b) == 960)\nprint('+')\n\na = [[00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n]]\nassert(string.len(a) == 1863)\nassert(string.sub(a, 1, 40) == string.sub(b, 1, 40))\nx = 1\n]=]",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 90,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 90,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 90,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 91,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 91,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "dostring",
        line: 92,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 92,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 93,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 93,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 95,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 95,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 96,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 96,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 97,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 97,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 101,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 101,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\na = 1        -- a comment\nb = 2\n\n\nx = [=[\nhi\n]=]\ny = \"\\\nhello\\r\\n\\\n\"\nreturn debug.getinfo(1).currentline\n]]",
        line: 113,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "_",
        line: 115,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 115,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        line: 115,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 115,
    },
    Token {
        kind: String,
        lexeme: "\"\\n\"",
        line: 115,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 115,
    },
    Token {
        kind: String,
        lexeme: "\"\\r\"",
        line: 115,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 115,
    },
    Token {
        kind: String,
        lexeme: "\"\\n\\r\"",
        line: 115,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 115,
    },
    Token {
        kind: String,
        lexeme: "\"\\r\\n\"",
        line: 115,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 115,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 115,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 116,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "nn",
        line: 116,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 116,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 116,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 116,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 116,
    },
    Token {
        kind: String,
        lexeme: "\"\\n\"",
        line: 116,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 116,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 117,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "dostring",
        line: 117,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 117,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 117,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 117,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "nn",
        line: 117,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 118,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 118,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 118,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 118,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 118,
    },
    Token {
        kind: String,
        lexeme: "\"hi\\n\"",
        line: 118,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 118,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 118,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 118,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 118,
    },
    Token {
        kind: String,
        lexeme: "\"\\nhello\\r\\n\\n\"",
        line: 118,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 118,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 123,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 123,
    },
    Token {
        kind: MultilineString,
        lexeme: "[==[]=]==]",
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 124,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 124,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 124,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 124,
    },
    Token {
        kind: String,
        lexeme: "\"]=\"",
        line: 124,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 126,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 126,
    },
    Token {
        kind: MultilineString,
        lexeme: "[==[[===[[=[]]=][====[]]===]===]==]",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 127,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 127,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 127,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 127,
    },
    Token {
        kind: String,
        lexeme: "\"[===[[=[]]=][====[]]===]===\"",
        line: 127,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 129,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 129,
    },
    Token {
        kind: MultilineString,
        lexeme: "[====[[===[[=[]]=][====[]]===]===]====]",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 130,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 130,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 130,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 130,
    },
    Token {
        kind: String,
        lexeme: "\"[===[[=[]]=][====[]]===]===\"",
        line: 130,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 132,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 132,
    },
    Token {
        kind: MultilineString,
        lexeme: "[=[]]]]]]]]]=]",
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 133,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 133,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 133,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 133,
    },
    Token {
        kind: String,
        lexeme: "\"]]]]]]]]\"",
        line: 133,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 133,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 144,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 144,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 144,
    },
    Token {
        kind: String,
        lexeme: "\"=\"",
        line: 144,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 144,
    },
    Token {
        kind: String,
        lexeme: "\"[\"",
        line: 144,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 144,
    },
    Token {
        kind: String,
        lexeme: "\"]\"",
        line: 144,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 144,
    },
    Token {
        kind: String,
        lexeme: "\"\\n\"",
        line: 144,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 144,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        line: 145,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 145,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 145,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 146,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "gen",
        line: 146,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 146,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 146,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 146,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 147,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 147,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 147,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 147,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "coroutine",
        line: 147,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "yield",
        line: 147,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 147,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 147,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 148,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: "_",
        line: 149,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 149,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        line: 149,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 149,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 149,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: "gen",
        line: 150,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 150,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 150,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 150,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 150,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 150,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 150,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 151,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 152,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 153,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 155,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: "coroutine",
        line: 155,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: "wrap",
        line: 155,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 155,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 155,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 155,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: "gen",
        line: 155,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 155,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 155,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        line: 155,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 155,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 155,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 155,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 156,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 156,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 156,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 156,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 156,
    },
    Token {
        kind: String,
        lexeme: "\"return [====[\\n\"",
        line: 156,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 156,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 156,
    },
    Token {
        kind: String,
        lexeme: "\"]====]\"",
        line: 156,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 156,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 156,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 156,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 156,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 157,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 161,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: "setlocale",
        line: 161,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 161,
    },
    Token {
        kind: String,
        lexeme: "\"pt_BR\"",
        line: 161,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 161,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 161,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: "setlocale",
        line: 161,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 161,
    },
    Token {
        kind: String,
        lexeme: "\"ptb\"",
        line: 161,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 161,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 162,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "tonumber",
        line: 162,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 162,
    },
    Token {
        kind: String,
        lexeme: "\"3,4\"",
        line: 162,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 162,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 162,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 162,
    },
    Token {
        kind: Number,
        lexeme: "3.4",
        line: 162,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "tonumber",
        line: 162,
    },
    Token {
        kind: String,
        lexeme: "\"3.4\"",
        line: 162,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 162,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 162,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 162,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 163,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 163,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 163,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 163,
    },
    Token {
        kind: String,
        lexeme: "\"return 3.4\"",
        line: 163,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 163,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 163,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 163,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 163,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 163,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 163,
    },
    Token {
        kind: Number,
        lexeme: "3.4",
        line: 163,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 164,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 164,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 164,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 164,
    },
    Token {
        kind: String,
        lexeme: "\"return .4,3\"",
        line: 164,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 164,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 164,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 164,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 164,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 164,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 164,
    },
    Token {
        kind: Number,
        lexeme: ".4",
        line: 164,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 165,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 165,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 165,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 165,
    },
    Token {
        kind: String,
        lexeme: "\"return 4.\"",
        line: 165,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 165,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 165,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 165,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 165,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 165,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 165,
    },
    Token {
        kind: Number,
        lexeme: "4.",
        line: 165,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 166,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 166,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 166,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 166,
    },
    Token {
        kind: String,
        lexeme: "\"return 4.+.5\"",
        line: 166,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 166,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 166,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 166,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 166,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 166,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 166,
    },
    Token {
        kind: Number,
        lexeme: "4.5",
        line: 166,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 166,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 167,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 167,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 167,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 167,
    },
    Token {
        kind: String,
        lexeme: "\"return 4.5.\"",
        line: 167,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 168,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 168,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 168,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 168,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 168,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 168,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 168,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 168,
    },
    Token {
        kind: String,
        lexeme: "\"'4%.5%.'\"",
        line: 168,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 168,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 168,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 169,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 169,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: "setlocale",
        line: 169,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 169,
    },
    Token {
        kind: String,
        lexeme: "\"C\"",
        line: 169,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 169,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 169,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 170,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: "Message",
        line: 171,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 171,
    },
    Token {
        kind: String,
        lexeme: "'\\a\\n >>> pt_BR locale not available: skipping decimal point tests <<<\\n\\a'",
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 172,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 176,
    },
    Token {
        kind: String,
        lexeme: "'OK'",
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 176,
    },
]
