---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.1-tests/literals.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 1,
            column: 5,
            span: 0..5,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1,
            column: 6,
            span: 5..6,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing scanner'",
        ),
        position: Position {
            line: 1,
            column: 23,
            span: 6..23,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1,
            column: 24,
            span: 23..24,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 3,
            column: 6,
            span: 26..31,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 3,
            column: 15,
            span: 32..40,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 3,
            column: 24,
            span: 41..49,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 3,
            column: 25,
            span: 49..50,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 3,
            column: 26,
            span: 50..51,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 3,
            column: 27,
            span: 51..52,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 3,
            column: 34,
            span: 53..59,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 3,
            column: 41,
            span: 60..66,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 3,
            column: 42,
            span: 66..67,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        position: Position {
            line: 3,
            column: 52,
            span: 67..77,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 3,
            column: 53,
            span: 77..78,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 3,
            column: 54,
            span: 78..79,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 3,
            column: 55,
            span: 79..80,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 3,
            column: 56,
            span: 80..81,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 3,
            column: 57,
            span: 81..82,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 3,
            column: 58,
            span: 82..83,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 3,
            column: 0,
            span: 84..87,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 5,
            column: 9,
            span: 89..97,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 5,
            column: 10,
            span: 97..98,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x = 'a\\0a'\"",
        ),
        position: Position {
            line: 5,
            column: 22,
            span: 98..110,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 5,
            column: 23,
            span: 110..111,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 6,
            column: 7,
            span: 112..118,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 6,
            column: 8,
            span: 118..119,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 6,
            column: 9,
            span: 119..120,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 6,
            column: 12,
            span: 121..123,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0a'",
        ),
        position: Position {
            line: 6,
            column: 19,
            span: 124..130,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 6,
            column: 23,
            span: 131..134,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 6,
            column: 30,
            span: 135..141,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 6,
            column: 31,
            span: 141..142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 6,
            column: 34,
            span: 142..145,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 6,
            column: 35,
            span: 145..146,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 6,
            column: 36,
            span: 146..147,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 6,
            column: 37,
            span: 147..148,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 6,
            column: 40,
            span: 149..151,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 6,
            column: 42,
            span: 151..153,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 6,
            column: 43,
            span: 153..154,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 9,
            column: 7,
            span: 176..182,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 9,
            column: 8,
            span: 182..183,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n\\\"\\'\\\\'",
        ),
        position: Position {
            line: 9,
            column: 18,
            span: 183..193,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 9,
            column: 21,
            span: 194..196,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n\n\"'\\]]",
        ),
        position: Position {
            line: 11,
            column: 6,
            span: 197..206,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 11,
            column: 7,
            span: 206..207,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 13,
            column: 7,
            span: 209..215,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 13,
            column: 8,
            span: 215..216,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 13,
            column: 14,
            span: 216..222,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 13,
            column: 15,
            span: 222..223,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 13,
            column: 19,
            span: 223..227,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 13,
            column: 20,
            span: 227..228,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\a\\b\\f\\n\\r\\t\\v\"",
        ),
        position: Position {
            line: 13,
            column: 36,
            span: 228..244,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 13,
            column: 37,
            span: 244..245,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^%c%c%c%c%c%c%c$\"",
        ),
        position: Position {
            line: 13,
            column: 56,
            span: 246..264,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 13,
            column: 57,
            span: 264..265,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 13,
            column: 58,
            span: 265..266,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 16,
            column: 7,
            span: 300..306,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 16,
            column: 8,
            span: 306..307,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\09912\"",
        ),
        position: Position {
            line: 16,
            column: 16,
            span: 307..315,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 16,
            column: 19,
            span: 316..318,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'c12'",
        ),
        position: Position {
            line: 16,
            column: 25,
            span: 319..324,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 16,
            column: 26,
            span: 324..325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 17,
            column: 7,
            span: 326..332,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 17,
            column: 8,
            span: 332..333,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\99ab\"",
        ),
        position: Position {
            line: 17,
            column: 15,
            span: 333..340,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 17,
            column: 18,
            span: 341..343,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'cab'",
        ),
        position: Position {
            line: 17,
            column: 24,
            span: 344..349,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 17,
            column: 25,
            span: 349..350,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 18,
            column: 7,
            span: 351..357,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 18,
            column: 8,
            span: 357..358,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\099\"",
        ),
        position: Position {
            line: 18,
            column: 14,
            span: 358..364,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 18,
            column: 17,
            span: 365..367,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\99'",
        ),
        position: Position {
            line: 18,
            column: 23,
            span: 368..373,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 18,
            column: 24,
            span: 373..374,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 19,
            column: 7,
            span: 375..381,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 19,
            column: 8,
            span: 381..382,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\099\\n\"",
        ),
        position: Position {
            line: 19,
            column: 16,
            span: 382..390,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 19,
            column: 19,
            span: 391..393,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'c\\10'",
        ),
        position: Position {
            line: 19,
            column: 26,
            span: 394..400,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 19,
            column: 27,
            span: 400..401,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 20,
            column: 7,
            span: 402..408,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 20,
            column: 8,
            span: 408..409,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0\\0alo'",
        ),
        position: Position {
            line: 20,
            column: 19,
            span: 409..420,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 20,
            column: 22,
            span: 421..423,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0'",
        ),
        position: Position {
            line: 20,
            column: 27,
            span: 424..428,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 20,
            column: 30,
            span: 429..431,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0'",
        ),
        position: Position {
            line: 20,
            column: 37,
            span: 432..438,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 20,
            column: 40,
            span: 439..441,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        position: Position {
            line: 20,
            column: 46,
            span: 442..447,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 20,
            column: 47,
            span: 447..448,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 22,
            column: 7,
            span: 450..456,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 22,
            column: 8,
            span: 456..457,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "010",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 22,
            column: 11,
            span: 456..460,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 22,
            column: 14,
            span: 461..463,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "020",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 22,
            column: 18,
            span: 463..467,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 22,
            column: 21,
            span: 468..470,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 22,
            column: 23,
            span: 471..472,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "030",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 22,
            column: 26,
            span: 471..475,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 22,
            column: 29,
            span: 476..478,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1020-30\"",
        ),
        position: Position {
            line: 22,
            column: 39,
            span: 479..488,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 22,
            column: 40,
            span: 488..489,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "var",
        ),
        position: Position {
            line: 26,
            column: 4,
            span: 515..518,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 26,
            column: 6,
            span: 519..520,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 26,
            column: 13,
            span: 521..527,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 26,
            column: 14,
            span: 527..528,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 26,
            column: 17,
            span: 528..531,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 26,
            column: 18,
            span: 531..532,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 26,
            column: 21,
            span: 532..535,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 26,
            column: 22,
            span: 535..536,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 26,
            column: 28,
            span: 536..542,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 26,
            column: 29,
            span: 542..543,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 27,
            column: 5,
            span: 544..548,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 27,
            column: 7,
            span: 549..550,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 27,
            column: 14,
            span: 551..557,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 27,
            column: 15,
            span: 557..558,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 27,
            column: 21,
            span: 558..564,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 27,
            column: 22,
            span: 564..565,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%s = 5\"",
        ),
        position: Position {
            line: 27,
            column: 30,
            span: 565..573,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 27,
            column: 31,
            span: 573..574,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "var",
        ),
        position: Position {
            line: 27,
            column: 35,
            span: 575..578,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 27,
            column: 36,
            span: 578..579,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 28,
            column: 9,
            span: 580..588,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 28,
            column: 10,
            span: 588..589,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 28,
            column: 14,
            span: 589..593,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 28,
            column: 15,
            span: 593..594,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 29,
            column: 7,
            span: 595..601,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 29,
            column: 8,
            span: 601..602,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 29,
            column: 10,
            span: 602..604,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 29,
            column: 11,
            span: 604..605,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "var",
        ),
        position: Position {
            line: 29,
            column: 14,
            span: 605..608,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 29,
            column: 15,
            span: 608..609,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 29,
            column: 18,
            span: 610..612,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 29,
            column: 20,
            span: 612..614,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 29,
            column: 21,
            span: 614..615,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "var",
        ),
        position: Position {
            line: 30,
            column: 4,
            span: 616..619,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 30,
            column: 6,
            span: 620..621,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 30,
            column: 0,
            span: 622..625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 31,
            column: 6,
            span: 626..631,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 31,
            column: 7,
            span: 631..632,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 31,
            column: 10,
            span: 632..635,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 31,
            column: 11,
            span: 635..636,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 34,
            column: 7,
            span: 652..658,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 34,
            column: 8,
            span: 658..659,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\t\"",
        ),
        position: Position {
            line: 34,
            column: 14,
            span: 659..665,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 34,
            column: 17,
            span: 666..668,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n\n\t]]",
        ),
        position: Position {
            line: 36,
            column: 4,
            span: 669..676,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 36,
            column: 5,
            span: 676..677,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 37,
            column: 7,
            span: 678..684,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 37,
            column: 8,
            span: 684..685,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n\n $debug]]",
        ),
        position: Position {
            line: 39,
            column: 10,
            span: 685..698,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 39,
            column: 13,
            span: 699..701,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n $debug\"",
        ),
        position: Position {
            line: 39,
            column: 25,
            span: 702..713,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 39,
            column: 26,
            span: 713..714,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 40,
            column: 7,
            span: 715..721,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 40,
            column: 8,
            span: 721..722,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ [ ]]",
        ),
        position: Position {
            line: 40,
            column: 15,
            span: 722..729,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 40,
            column: 18,
            span: 730..732,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ ] ]]",
        ),
        position: Position {
            line: 40,
            column: 26,
            span: 733..740,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 40,
            column: 27,
            span: 740..741,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 42,
            column: 2,
            span: 761..762,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 42,
            column: 4,
            span: 763..764,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(

        ),
        position: Position {
            line: 42,
            column: 967,
            span: 765..1727,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 43,
            column: 7,
            span: 1728..1734,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 43,
            column: 8,
            span: 1734..1735,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 43,
            column: 14,
            span: 1735..1741,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 43,
            column: 15,
            span: 1741..1742,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 43,
            column: 18,
            span: 1742..1745,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 43,
            column: 19,
            span: 1745..1746,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 43,
            column: 20,
            span: 1746..1747,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 43,
            column: 21,
            span: 1747..1748,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 43,
            column: 24,
            span: 1749..1751,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "960",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 43,
            column: 28,
            span: 1751..1755,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 43,
            column: 29,
            span: 1755..1756,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 44,
            column: 5,
            span: 1757..1761,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 44,
            column: 7,
            span: 1762..1763,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[=[\nprint('+')\n\na1 = [[\"isto e' um string com v�rias 'aspas'\"]]\na2 = \"'aspas'\"\n\nassert(string.find(a1, a2) == 31)\nprint('+')\n\na1 = [==[temp = [[um valor qualquer]]; ]==]\nassert(loadstring(a1))()\nassert(temp == 'um valor qualquer')\n-- long strings --\nb = \"001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789\"\nassert(string.len(b) == 960)\nprint('+')\n\na = [[00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n]]\nassert(string.len(a) == 1863)\nassert(string.sub(a, 1, 40) == string.sub(b, 1, 40))\nx = 1\n]=]",
        ),
        position: Position {
            line: 88,
            column: 4,
            span: 1764..4986,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 90,
            column: 6,
            span: 4988..4993,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 90,
            column: 7,
            span: 4993..4994,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 90,
            column: 10,
            span: 4994..4997,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 90,
            column: 11,
            span: 4997..4998,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 91,
            column: 2,
            span: 4999..5000,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 91,
            column: 4,
            span: 5001..5002,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 91,
            column: 0,
            span: 5003..5006,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 92,
            column: 9,
            span: 5007..5015,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 92,
            column: 10,
            span: 5015..5016,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 92,
            column: 14,
            span: 5016..5020,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 92,
            column: 15,
            span: 5020..5021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 93,
            column: 7,
            span: 5022..5028,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 93,
            column: 8,
            span: 5028..5029,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 93,
            column: 9,
            span: 5029..5030,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 93,
            column: 10,
            span: 5030..5031,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 95,
            column: 5,
            span: 5033..5037,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 95,
            column: 7,
            span: 5038..5039,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 95,
            column: 0,
            span: 5040..5043,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 96,
            column: 2,
            span: 5044..5045,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 96,
            column: 4,
            span: 5046..5047,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 96,
            column: 0,
            span: 5048..5051,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 97,
            column: 2,
            span: 5052..5053,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 97,
            column: 4,
            span: 5054..5055,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 97,
            column: 0,
            span: 5056..5059,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 101,
            column: 5,
            span: 5083..5087,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 101,
            column: 7,
            span: 5088..5089,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\na = 1        -- a comment\nb = 2\n\n\nx = [=[\nhi\n]=]\ny = \"\\\nhello\\r\\n\\\n\"\nreturn debug.getinfo(1).currentline\n]]",
        ),
        position: Position {
            line: 113,
            column: 3,
            span: 5090..5200,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 115,
            column: 4,
            span: 5202..5205,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 115,
            column: 6,
            span: 5206..5207,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 115,
            column: 7,
            span: 5207..5208,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 115,
            column: 9,
            span: 5209..5210,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 115,
            column: 12,
            span: 5211..5213,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        position: Position {
            line: 115,
            column: 18,
            span: 5214..5219,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 115,
            column: 20,
            span: 5220..5221,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        position: Position {
            line: 115,
            column: 25,
            span: 5222..5226,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 115,
            column: 26,
            span: 5226..5227,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\r\"",
        ),
        position: Position {
            line: 115,
            column: 31,
            span: 5228..5232,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 115,
            column: 32,
            span: 5232..5233,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\r\"",
        ),
        position: Position {
            line: 115,
            column: 39,
            span: 5234..5240,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 115,
            column: 40,
            span: 5240..5241,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\r\\n\"",
        ),
        position: Position {
            line: 115,
            column: 47,
            span: 5242..5248,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 115,
            column: 49,
            span: 5249..5250,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 115,
            column: 0,
            span: 5251..5253,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 116,
            column: 8,
            span: 5256..5261,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 116,
            column: 13,
            span: 5262..5266,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 116,
            column: 14,
            span: 5266..5267,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nn",
        ),
        position: Position {
            line: 116,
            column: 17,
            span: 5268..5270,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 116,
            column: 19,
            span: 5271..5272,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 116,
            column: 26,
            span: 5273..5279,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 116,
            column: 27,
            span: 5279..5280,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 116,
            column: 31,
            span: 5280..5284,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 116,
            column: 32,
            span: 5284..5285,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 116,
            column: 36,
            span: 5285..5289,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 116,
            column: 37,
            span: 5289..5290,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        position: Position {
            line: 116,
            column: 42,
            span: 5291..5295,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 116,
            column: 43,
            span: 5295..5296,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 116,
            column: 45,
            span: 5297..5298,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 116,
            column: 46,
            span: 5298..5299,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 117,
            column: 9,
            span: 5302..5308,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 117,
            column: 10,
            span: 5308..5309,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 117,
            column: 18,
            span: 5309..5317,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 117,
            column: 19,
            span: 5317..5318,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 117,
            column: 23,
            span: 5318..5322,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 117,
            column: 24,
            span: 5322..5323,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 117,
            column: 27,
            span: 5324..5326,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nn",
        ),
        position: Position {
            line: 117,
            column: 30,
            span: 5327..5329,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 117,
            column: 31,
            span: 5329..5330,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 118,
            column: 9,
            span: 5333..5339,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 118,
            column: 10,
            span: 5339..5340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 118,
            column: 12,
            span: 5340..5342,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 118,
            column: 13,
            span: 5342..5343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 118,
            column: 14,
            span: 5343..5344,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 118,
            column: 17,
            span: 5345..5347,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\\n\"",
        ),
        position: Position {
            line: 118,
            column: 24,
            span: 5348..5354,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 118,
            column: 28,
            span: 5355..5358,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 118,
            column: 31,
            span: 5359..5361,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 118,
            column: 32,
            span: 5361..5362,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 118,
            column: 33,
            span: 5362..5363,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 118,
            column: 36,
            span: 5364..5366,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\nhello\\r\\n\\n\"",
        ),
        position: Position {
            line: 118,
            column: 52,
            span: 5367..5382,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 118,
            column: 53,
            span: 5382..5383,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 119,
            column: 0,
            span: 5384..5387,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 123,
            column: 2,
            span: 5441..5442,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 123,
            column: 4,
            span: 5443..5444,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[==[]=]==]",
        ),
        position: Position {
            line: 123,
            column: 15,
            span: 5445..5455,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 124,
            column: 7,
            span: 5456..5462,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 124,
            column: 8,
            span: 5462..5463,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 124,
            column: 9,
            span: 5463..5464,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 124,
            column: 12,
            span: 5465..5467,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"]=\"",
        ),
        position: Position {
            line: 124,
            column: 17,
            span: 5468..5472,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 124,
            column: 18,
            span: 5472..5473,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 126,
            column: 2,
            span: 5475..5476,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 126,
            column: 4,
            span: 5477..5478,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[==[[===[[=[]]=][====[]]===]===]==]",
        ),
        position: Position {
            line: 126,
            column: 40,
            span: 5479..5514,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 127,
            column: 7,
            span: 5515..5521,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 127,
            column: 8,
            span: 5521..5522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 127,
            column: 9,
            span: 5522..5523,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 127,
            column: 12,
            span: 5524..5526,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[===[[=[]]=][====[]]===]===\"",
        ),
        position: Position {
            line: 127,
            column: 42,
            span: 5527..5556,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 127,
            column: 43,
            span: 5556..5557,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 129,
            column: 2,
            span: 5559..5560,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 129,
            column: 4,
            span: 5561..5562,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[====[[===[[=[]]=][====[]]===]===]====]",
        ),
        position: Position {
            line: 129,
            column: 44,
            span: 5563..5602,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 130,
            column: 7,
            span: 5603..5609,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 130,
            column: 8,
            span: 5609..5610,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 130,
            column: 9,
            span: 5610..5611,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 130,
            column: 12,
            span: 5612..5614,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[===[[=[]]=][====[]]===]===\"",
        ),
        position: Position {
            line: 130,
            column: 42,
            span: 5615..5644,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 130,
            column: 43,
            span: 5644..5645,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 132,
            column: 2,
            span: 5647..5648,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 132,
            column: 4,
            span: 5649..5650,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[=[]]]]]]]]]=]",
        ),
        position: Position {
            line: 132,
            column: 19,
            span: 5651..5665,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 133,
            column: 7,
            span: 5666..5672,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 133,
            column: 8,
            span: 5672..5673,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 133,
            column: 9,
            span: 5673..5674,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 133,
            column: 12,
            span: 5675..5677,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"]]]]]]]]\"",
        ),
        position: Position {
            line: 133,
            column: 23,
            span: 5678..5688,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 133,
            column: 24,
            span: 5688..5689,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 144,
            column: 6,
            span: 5799..5804,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 144,
            column: 8,
            span: 5805..5806,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 144,
            column: 10,
            span: 5807..5808,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 144,
            column: 12,
            span: 5809..5810,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=\"",
        ),
        position: Position {
            line: 144,
            column: 16,
            span: 5811..5814,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 144,
            column: 17,
            span: 5814..5815,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[\"",
        ),
        position: Position {
            line: 144,
            column: 21,
            span: 5816..5819,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 144,
            column: 22,
            span: 5819..5820,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"]\"",
        ),
        position: Position {
            line: 144,
            column: 26,
            span: 5821..5824,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 144,
            column: 27,
            span: 5824..5825,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        position: Position {
            line: 144,
            column: 32,
            span: 5826..5830,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 144,
            column: 34,
            span: 5831..5832,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 145,
            column: 6,
            span: 5833..5838,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 145,
            column: 10,
            span: 5839..5842,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 145,
            column: 12,
            span: 5843..5844,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 145,
            column: 0,
            span: 5844..5846,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 146,
            column: 6,
            span: 5847..5852,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 146,
            column: 15,
            span: 5853..5861,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gen",
        ),
        position: Position {
            line: 146,
            column: 19,
            span: 5862..5865,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 146,
            column: 20,
            span: 5865..5866,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 146,
            column: 21,
            span: 5866..5867,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 146,
            column: 22,
            span: 5867..5868,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 146,
            column: 24,
            span: 5869..5870,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 146,
            column: 25,
            span: 5870..5871,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 147,
            column: 5,
            span: 5874..5876,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 147,
            column: 7,
            span: 5877..5878,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 147,
            column: 10,
            span: 5879..5881,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 147,
            column: 12,
            span: 5881..5883,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 147,
            column: 17,
            span: 5884..5888,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 147,
            column: 27,
            span: 5889..5898,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 147,
            column: 28,
            span: 5898..5899,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 147,
            column: 33,
            span: 5899..5904,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 147,
            column: 34,
            span: 5904..5905,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 147,
            column: 35,
            span: 5905..5906,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 147,
            column: 36,
            span: 5906..5907,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 148,
            column: 0,
            span: 5910..5914,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 149,
            column: 8,
            span: 5919..5922,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 149,
            column: 10,
            span: 5923..5924,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 149,
            column: 11,
            span: 5924..5925,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 149,
            column: 13,
            span: 5926..5927,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 149,
            column: 16,
            span: 5928..5930,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        position: Position {
            line: 149,
            column: 22,
            span: 5931..5936,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 149,
            column: 23,
            span: 5936..5937,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 149,
            column: 24,
            span: 5937..5938,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 149,
            column: 25,
            span: 5938..5939,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 149,
            column: 0,
            span: 5940..5942,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gen",
        ),
        position: Position {
            line: 150,
            column: 10,
            span: 5949..5952,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 150,
            column: 11,
            span: 5952..5953,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 150,
            column: 12,
            span: 5953..5954,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 150,
            column: 15,
            span: 5955..5957,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 150,
            column: 17,
            span: 5958..5959,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 150,
            column: 18,
            span: 5959..5960,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 150,
            column: 20,
            span: 5961..5962,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 150,
            column: 22,
            span: 5963..5964,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 150,
            column: 24,
            span: 5964..5966,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 150,
            column: 25,
            span: 5966..5967,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 151,
            column: 0,
            span: 5972..5975,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 152,
            column: 0,
            span: 5978..5981,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 153,
            column: 0,
            span: 5982..5985,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 155,
            column: 4,
            span: 5987..5990,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 155,
            column: 6,
            span: 5991..5992,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 155,
            column: 9,
            span: 5993..5995,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 155,
            column: 19,
            span: 5996..6005,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 155,
            column: 20,
            span: 6005..6006,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 155,
            column: 24,
            span: 6006..6010,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 155,
            column: 25,
            span: 6010..6011,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 155,
            column: 33,
            span: 6011..6019,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 155,
            column: 34,
            span: 6019..6020,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 155,
            column: 35,
            span: 6020..6021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gen",
        ),
        position: Position {
            line: 155,
            column: 39,
            span: 6022..6025,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 155,
            column: 40,
            span: 6025..6026,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 155,
            column: 42,
            span: 6026..6028,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 155,
            column: 43,
            span: 6028..6029,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 155,
            column: 47,
            span: 6030..6033,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 155,
            column: 48,
            span: 6033..6034,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 155,
            column: 52,
            span: 6035..6038,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 155,
            column: 53,
            span: 6038..6039,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 155,
            column: 0,
            span: 6040..6042,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 156,
            column: 9,
            span: 6045..6051,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 156,
            column: 10,
            span: 6051..6052,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 156,
            column: 11,
            span: 6052..6053,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 156,
            column: 14,
            span: 6054..6056,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        position: Position {
            line: 156,
            column: 25,
            span: 6057..6067,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 156,
            column: 26,
            span: 6067..6068,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return [====[\\n\"",
        ),
        position: Position {
            line: 156,
            column: 43,
            span: 6068..6085,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 156,
            column: 46,
            span: 6086..6088,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 156,
            column: 48,
            span: 6089..6090,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 156,
            column: 51,
            span: 6091..6093,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"]====]\"",
        ),
        position: Position {
            line: 156,
            column: 60,
            span: 6094..6102,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 156,
            column: 61,
            span: 6102..6103,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 156,
            column: 62,
            span: 6103..6104,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 156,
            column: 63,
            span: 6104..6105,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 156,
            column: 64,
            span: 6105..6106,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 157,
            column: 0,
            span: 6107..6110,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 161,
            column: 3,
            span: 6145..6147,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 161,
            column: 6,
            span: 6148..6150,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 161,
            column: 7,
            span: 6150..6151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocale",
        ),
        position: Position {
            line: 161,
            column: 16,
            span: 6151..6160,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 161,
            column: 17,
            span: 6160..6161,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pt_BR\"",
        ),
        position: Position {
            line: 161,
            column: 24,
            span: 6161..6168,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 161,
            column: 25,
            span: 6168..6169,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 161,
            column: 28,
            span: 6170..6172,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 161,
            column: 31,
            span: 6173..6175,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 161,
            column: 32,
            span: 6175..6176,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocale",
        ),
        position: Position {
            line: 161,
            column: 41,
            span: 6176..6185,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 161,
            column: 42,
            span: 6185..6186,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ptb\"",
        ),
        position: Position {
            line: 161,
            column: 47,
            span: 6186..6191,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 161,
            column: 48,
            span: 6191..6192,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 161,
            column: 0,
            span: 6193..6197,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 162,
            column: 9,
            span: 6200..6206,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 162,
            column: 10,
            span: 6206..6207,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        position: Position {
            line: 162,
            column: 18,
            span: 6207..6215,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 162,
            column: 19,
            span: 6215..6216,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3,4\"",
        ),
        position: Position {
            line: 162,
            column: 24,
            span: 6216..6221,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 162,
            column: 25,
            span: 6221..6222,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 162,
            column: 28,
            span: 6223..6225,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".4",
                },
            ),
        ),
        position: Position {
            line: 162,
            column: 32,
            span: 6225..6229,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 162,
            column: 36,
            span: 6230..6233,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        position: Position {
            line: 162,
            column: 45,
            span: 6234..6242,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3.4\"",
        ),
        position: Position {
            line: 162,
            column: 51,
            span: 6243..6248,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 162,
            column: 54,
            span: 6249..6251,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 162,
            column: 58,
            span: 6252..6255,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 162,
            column: 59,
            span: 6255..6256,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 163,
            column: 9,
            span: 6259..6265,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 163,
            column: 10,
            span: 6265..6266,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 163,
            column: 16,
            span: 6266..6272,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 163,
            column: 17,
            span: 6272..6273,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        position: Position {
            line: 163,
            column: 27,
            span: 6273..6283,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 163,
            column: 28,
            span: 6283..6284,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 3.4\"",
        ),
        position: Position {
            line: 163,
            column: 40,
            span: 6284..6296,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 163,
            column: 41,
            span: 6296..6297,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 163,
            column: 42,
            span: 6297..6298,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 163,
            column: 43,
            span: 6298..6299,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 163,
            column: 44,
            span: 6299..6300,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 163,
            column: 47,
            span: 6301..6303,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".4",
                },
            ),
        ),
        position: Position {
            line: 163,
            column: 51,
            span: 6303..6307,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 163,
            column: 52,
            span: 6307..6308,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 164,
            column: 9,
            span: 6311..6317,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 164,
            column: 10,
            span: 6317..6318,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 164,
            column: 16,
            span: 6318..6324,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 164,
            column: 17,
            span: 6324..6325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        position: Position {
            line: 164,
            column: 27,
            span: 6325..6335,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 164,
            column: 28,
            span: 6335..6336,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return .4,3\"",
        ),
        position: Position {
            line: 164,
            column: 41,
            span: 6336..6349,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 164,
            column: 42,
            span: 6349..6350,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 164,
            column: 43,
            span: 6350..6351,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 164,
            column: 44,
            span: 6351..6352,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 164,
            column: 45,
            span: 6352..6353,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 164,
            column: 48,
            span: 6354..6356,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".4",
                },
            ),
        ),
        position: Position {
            line: 164,
            column: 52,
            span: 6356..6359,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 164,
            column: 53,
            span: 6359..6360,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 165,
            column: 9,
            span: 6363..6369,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 165,
            column: 10,
            span: 6369..6370,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 165,
            column: 16,
            span: 6370..6376,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 165,
            column: 17,
            span: 6376..6377,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        position: Position {
            line: 165,
            column: 27,
            span: 6377..6387,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 165,
            column: 28,
            span: 6387..6388,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 4.\"",
        ),
        position: Position {
            line: 165,
            column: 39,
            span: 6388..6399,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 165,
            column: 40,
            span: 6399..6400,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 165,
            column: 41,
            span: 6400..6401,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 165,
            column: 42,
            span: 6401..6402,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 165,
            column: 43,
            span: 6402..6403,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 165,
            column: 46,
            span: 6404..6406,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 165,
            column: 49,
            span: 6406..6409,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 165,
            column: 50,
            span: 6409..6410,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 166,
            column: 9,
            span: 6413..6419,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 166,
            column: 10,
            span: 6419..6420,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 166,
            column: 16,
            span: 6420..6426,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 166,
            column: 17,
            span: 6426..6427,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        position: Position {
            line: 166,
            column: 27,
            span: 6427..6437,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 166,
            column: 28,
            span: 6437..6438,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 4.+.5\"",
        ),
        position: Position {
            line: 166,
            column: 42,
            span: 6438..6452,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 166,
            column: 43,
            span: 6452..6453,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 166,
            column: 44,
            span: 6453..6454,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 166,
            column: 45,
            span: 6454..6455,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 166,
            column: 46,
            span: 6455..6456,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 166,
            column: 49,
            span: 6457..6459,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".5",
                },
            ),
        ),
        position: Position {
            line: 166,
            column: 53,
            span: 6459..6463,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 166,
            column: 54,
            span: 6463..6464,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 167,
            column: 8,
            span: 6467..6472,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 167,
            column: 10,
            span: 6473..6474,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 167,
            column: 11,
            span: 6474..6475,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 167,
            column: 13,
            span: 6476..6477,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 167,
            column: 15,
            span: 6478..6479,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        position: Position {
            line: 167,
            column: 26,
            span: 6480..6490,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 167,
            column: 27,
            span: 6490..6491,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 4.5.\"",
        ),
        position: Position {
            line: 167,
            column: 40,
            span: 6491..6504,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 167,
            column: 41,
            span: 6504..6505,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 168,
            column: 9,
            span: 6508..6514,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 168,
            column: 10,
            span: 6514..6515,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 168,
            column: 16,
            span: 6515..6521,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 168,
            column: 17,
            span: 6521..6522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 168,
            column: 21,
            span: 6522..6526,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 168,
            column: 22,
            span: 6526..6527,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 168,
            column: 23,
            span: 6527..6528,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 168,
            column: 24,
            span: 6528..6529,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'4%.5%.'\"",
        ),
        position: Position {
            line: 168,
            column: 35,
            span: 6530..6540,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 168,
            column: 36,
            span: 6540..6541,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 168,
            column: 37,
            span: 6541..6542,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 169,
            column: 9,
            span: 6545..6551,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 169,
            column: 10,
            span: 6551..6552,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 169,
            column: 12,
            span: 6552..6554,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 169,
            column: 13,
            span: 6554..6555,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocale",
        ),
        position: Position {
            line: 169,
            column: 22,
            span: 6555..6564,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 169,
            column: 23,
            span: 6564..6565,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C\"",
        ),
        position: Position {
            line: 169,
            column: 26,
            span: 6565..6568,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 169,
            column: 27,
            span: 6568..6569,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 169,
            column: 28,
            span: 6569..6570,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 170,
            column: 0,
            span: 6571..6575,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 171,
            column: 4,
            span: 6578..6579,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        position: Position {
            line: 171,
            column: 11,
            span: 6579..6586,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 171,
            column: 14,
            span: 6587..6589,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 171,
            column: 20,
            span: 6590..6595,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 171,
            column: 21,
            span: 6595..6596,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 171,
            column: 22,
            span: 6596..6597,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\a\\n >>> pt_BR locale not available: skipping decimal point tests <<<\\n\\a'",
        ),
        position: Position {
            line: 172,
            column: 80,
            span: 6602..6677,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 172,
            column: 81,
            span: 6677..6678,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 173,
            column: 0,
            span: 6679..6682,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 176,
            column: 6,
            span: 6685..6690,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 176,
            column: 7,
            span: 6690..6691,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        position: Position {
            line: 176,
            column: 11,
            span: 6691..6695,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 176,
            column: 12,
            span: 6695..6696,
        },
    },
]
