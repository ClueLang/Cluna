---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.1-tests/errors.lua
---
[
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 1,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 1,
    },
    Token {
        kind: String,
        lexeme: "\"testing errors\"",
        line: 1,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 1,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 3,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 3,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 3,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 4,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 4,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 4,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 4,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 4,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 4,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 4,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 4,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 4,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 5,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 5,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 5,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 5,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 5,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 5,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 5,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "cond",
        line: 6,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 6,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 6,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 6,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 6,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 7,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 7,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "cond",
        line: 7,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 7,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 7,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 8,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 11,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 11,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 11,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 12,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 12,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 12,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 12,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 12,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 12,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 12,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 12,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 12,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 12,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 12,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 12,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 12,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 13,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "checksyntax",
        line: 15,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 15,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "extra",
        line: 15,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "token",
        line: 15,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "line",
        line: 15,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 15,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 16,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 16,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 16,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "token",
        line: 17,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 17,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 17,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 17,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 17,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 17,
    },
    Token {
        kind: Identifier,
        lexeme: "token",
        line: 17,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 17,
    },
    Token {
        kind: String,
        lexeme: "\"(%p)\"",
        line: 17,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 17,
    },
    Token {
        kind: String,
        lexeme: "\"%%%1\"",
        line: 17,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 17,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "pt",
        line: 18,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 18,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 18,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 18,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[^%%[string \".*\"%%]:%d: .- near '%s'$]]",
        line: 18,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "line",
        line: 19,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "token",
        line: 19,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 20,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 20,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 20,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 20,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "pt",
        line: 20,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 20,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 21,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 21,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 21,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 21,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 21,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 21,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 21,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 21,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 21,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 21,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 21,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 26,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 26,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 26,
    },
    Token {
        kind: String,
        lexeme: "\"error('hi', 0)\"",
        line: 26,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 26,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 26,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 26,
    },
    Token {
        kind: String,
        lexeme: "'hi'",
        line: 26,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 29,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 29,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 29,
    },
    Token {
        kind: String,
        lexeme: "\"error()\"",
        line: 29,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 29,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 29,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 29,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 29,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 33,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 33,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 33,
    },
    Token {
        kind: String,
        lexeme: "\"unpack({}, 1, n=2^30)\"",
        line: 33,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 33,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 34,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 34,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 34,
    },
    Token {
        kind: String,
        lexeme: "\"a=math.sin()\"",
        line: 34,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 34,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 35,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 35,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 35,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 35,
    },
    Token {
        kind: String,
        lexeme: "\"tostring(1)\"",
        line: 35,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 35,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 35,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 35,
    },
    Token {
        kind: String,
        lexeme: "\"tostring()\"",
        line: 35,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 35,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 36,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 36,
    },
    Token {
        kind: String,
        lexeme: "\"tonumber()\"",
        line: 36,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 37,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 37,
    },
    Token {
        kind: String,
        lexeme: "\"repeat until 1; a\"",
        line: 37,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "checksyntax",
        line: 38,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 38,
    },
    Token {
        kind: String,
        lexeme: "\"break label\"",
        line: 38,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 38,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 38,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 38,
    },
    Token {
        kind: String,
        lexeme: "\"label\"",
        line: 38,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 38,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 38,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 39,
    },
    Token {
        kind: String,
        lexeme: "\";\"",
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 40,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 40,
    },
    Token {
        kind: String,
        lexeme: "\"a=1;;\"",
        line: 40,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 41,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 41,
    },
    Token {
        kind: String,
        lexeme: "\"return;;\"",
        line: 41,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 42,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 42,
    },
    Token {
        kind: String,
        lexeme: "\"assert(false)\"",
        line: 42,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 43,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 43,
    },
    Token {
        kind: String,
        lexeme: "\"assert(nil)\"",
        line: 43,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 44,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 44,
    },
    Token {
        kind: String,
        lexeme: "\"a=math.sin\\n(3)\"",
        line: 44,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 45,
    },
    Token {
        kind: String,
        lexeme: "\"function a (... , ...) end\"",
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 46,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 46,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 46,
    },
    Token {
        kind: String,
        lexeme: "\"function a (, ...) end\"",
        line: 46,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 46,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "checksyntax",
        line: 48,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 48,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\n  local a = {4\n\n]]",
        line: 51,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 51,
    },
    Token {
        kind: String,
        lexeme: "\"'}' expected (to close '{' at line 1)\"",
        line: 51,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 51,
    },
    Token {
        kind: String,
        lexeme: "\"<eof>\"",
        line: 51,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 51,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 51,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 56,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 56,
    },
    Token {
        kind: String,
        lexeme: "\"a=1; bbbb=2; a=math.sin(3)+bbbb(3)\"",
        line: 56,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 56,
    },
    Token {
        kind: String,
        lexeme: "\"global 'bbbb'\"",
        line: 56,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 57,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 57,
    },
    Token {
        kind: String,
        lexeme: "\"a=1; local a,bbbb=2,3; a = math.sin(1) and bbbb(3)\"",
        line: 57,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 57,
    },
    Token {
        kind: String,
        lexeme: "\"local 'bbbb'\"",
        line: 58,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 59,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 59,
    },
    Token {
        kind: String,
        lexeme: "\"a={}; do local a=1 end a:bbbb(3)\"",
        line: 59,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 59,
    },
    Token {
        kind: String,
        lexeme: "\"method 'bbbb'\"",
        line: 59,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 60,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 60,
    },
    Token {
        kind: String,
        lexeme: "\"local a={}; a.bbbb(3)\"",
        line: 60,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 60,
    },
    Token {
        kind: String,
        lexeme: "\"field 'bbbb'\"",
        line: 60,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 61,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 61,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 61,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 61,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 61,
    },
    Token {
        kind: String,
        lexeme: "\"a={13}; local bbbb=1; a[bbbb](3)\"",
        line: 61,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 61,
    },
    Token {
        kind: String,
        lexeme: "\"'bbbb'\"",
        line: 61,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 61,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 62,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 62,
    },
    Token {
        kind: String,
        lexeme: "\"a={13}; local bbbb=1; a[bbbb](3)\"",
        line: 62,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 62,
    },
    Token {
        kind: String,
        lexeme: "\"number\"",
        line: 62,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "aaa",
        line: 64,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 64,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 65,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 65,
    },
    Token {
        kind: String,
        lexeme: "\"aaa.bbb:ddd(9)\"",
        line: 65,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 65,
    },
    Token {
        kind: String,
        lexeme: "\"global 'aaa'\"",
        line: 65,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 66,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 66,
    },
    Token {
        kind: String,
        lexeme: "\"local aaa={bbb=1}; aaa.bbb:ddd(9)\"",
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 66,
    },
    Token {
        kind: String,
        lexeme: "\"field 'bbb'\"",
        line: 66,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 67,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 67,
    },
    Token {
        kind: String,
        lexeme: "\"local aaa={bbb={}}; aaa.bbb:ddd(9)\"",
        line: 67,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 67,
    },
    Token {
        kind: String,
        lexeme: "\"method 'ddd'\"",
        line: 67,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 68,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 68,
    },
    Token {
        kind: String,
        lexeme: "\"local a,b,c; (function () a = b+1 end)()\"",
        line: 68,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 68,
    },
    Token {
        kind: String,
        lexeme: "\"upvalue 'b'\"",
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 69,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 69,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 69,
    },
    Token {
        kind: String,
        lexeme: "\"local aaa={bbb={ddd=next}}; aaa.bbb:ddd(nil)\"",
        line: 69,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 71,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 71,
    },
    Token {
        kind: String,
        lexeme: "\"b=1; local aaa='a'; x=aaa+b\"",
        line: 71,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 71,
    },
    Token {
        kind: String,
        lexeme: "\"local 'aaa'\"",
        line: 71,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 72,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 72,
    },
    Token {
        kind: String,
        lexeme: "\"aaa={}; x=3/aaa\"",
        line: 72,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 72,
    },
    Token {
        kind: String,
        lexeme: "\"global 'aaa'\"",
        line: 72,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 73,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 73,
    },
    Token {
        kind: String,
        lexeme: "\"aaa='2'; b=nil;x=aaa*b\"",
        line: 73,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 73,
    },
    Token {
        kind: String,
        lexeme: "\"global 'b'\"",
        line: 73,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 74,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 74,
    },
    Token {
        kind: String,
        lexeme: "\"aaa={}; x=-aaa\"",
        line: 74,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 74,
    },
    Token {
        kind: String,
        lexeme: "\"global 'aaa'\"",
        line: 74,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 75,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 75,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 75,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 75,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 75,
    },
    Token {
        kind: String,
        lexeme: "\"aaa={}; x=(aaa or aaa)+(aaa and aaa)\"",
        line: 75,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 75,
    },
    Token {
        kind: String,
        lexeme: "\"'aaa'\"",
        line: 75,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 75,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 76,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 76,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 76,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 76,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 76,
    },
    Token {
        kind: String,
        lexeme: "\"aaa={}; (aaa or aaa)()\"",
        line: 76,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 76,
    },
    Token {
        kind: String,
        lexeme: "\"'aaa'\"",
        line: 76,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 76,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 78,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 78,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[aaa=9\nrepeat until 3==3\nlocal x=math.sin(math.cos(3))\nif math.sin(1) == x then return math.sin(1) end   -- tail call\nlocal a,b = 1, {\n  {x='a'..'b'..'c', y='b', z=x},\n  {1,2,3,4,5} or 3+3<=3+3,\n  3+1>3+1,\n  {d = x and aaa[x or y]}}\n]]",
        line: 87,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 87,
    },
    Token {
        kind: String,
        lexeme: "\"global 'aaa'\"",
        line: 87,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 89,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 89,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\nlocal x,y = {},1\nif math.sin(1) == 0 then return 3 end    -- return\nx.a()]]",
        line: 92,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 92,
    },
    Token {
        kind: String,
        lexeme: "\"field 'a'\"",
        line: 92,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 94,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 94,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\nprefix = nil\ninsert = nil\nwhile 1 do  \n  local a\n  if nil then break end\n  insert(prefix, a)\nend]]",
        line: 101,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 101,
    },
    Token {
        kind: String,
        lexeme: "\"global 'insert'\"",
        line: 101,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 103,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 103,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[  -- tail call\n  return math.sin(\"a\")\n]]",
        line: 105,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 105,
    },
    Token {
        kind: String,
        lexeme: "\"'sin'\"",
        line: 105,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 107,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 107,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[collectgarbage(\"nooption\")]]",
        line: 107,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 107,
    },
    Token {
        kind: String,
        lexeme: "\"invalid option\"",
        line: 107,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 109,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 109,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[x = print .. \"a\"]]",
        line: 109,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 109,
    },
    Token {
        kind: String,
        lexeme: "\"concatenate\"",
        line: 109,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 111,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 111,
    },
    Token {
        kind: String,
        lexeme: "\"getmetatable(io.stdin).__gc()\"",
        line: 111,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 111,
    },
    Token {
        kind: String,
        lexeme: "\"no value\"",
        line: 111,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 113,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 113,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "lineerror",
        line: 118,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 118,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 118,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "err",
        line: 119,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 119,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 119,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 119,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 119,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 119,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 119,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "line",
        line: 120,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 120,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "match",
        line: 120,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 120,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 120,
    },
    Token {
        kind: String,
        lexeme: "\":(%d+):\"",
        line: 120,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 120,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: "line",
        line: 121,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: "line",
        line: 121,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 121,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 121,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 124,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "lineerror",
        line: 124,
    },
    Token {
        kind: String,
        lexeme: "\"local a\\n for i=1,'a' do \\n print(i) \\n end\"",
        line: 124,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 124,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 124,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 124,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 125,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "lineerror",
        line: 125,
    },
    Token {
        kind: String,
        lexeme: "\"\\n local a \\n for k,v in 3 \\n do \\n print(k) \\n end\"",
        line: 125,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 125,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 125,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 125,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 126,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "lineerror",
        line: 126,
    },
    Token {
        kind: String,
        lexeme: "\"\\n\\n for k,v in \\n 3 \\n do \\n print(k) \\n end\"",
        line: 126,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 126,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 126,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 126,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 127,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "lineerror",
        line: 127,
    },
    Token {
        kind: String,
        lexeme: "\"function a.x.y ()\\na=a+1\\nend\"",
        line: 127,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 127,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 127,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 127,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 127,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 129,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 129,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\nfunction g() f() end\nfunction f(x) error('a', X) end\ng()\n]]",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "X",
        line: 134,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 134,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 134,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 134,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "lineerror",
        line: 134,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 134,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 134,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 134,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 134,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 134,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "X",
        line: 135,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 135,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 135,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 135,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "lineerror",
        line: 135,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 135,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 135,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 135,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 135,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 135,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "X",
        line: 136,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 136,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 136,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 136,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "lineerror",
        line: 136,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 136,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 136,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 136,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 136,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 136,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "X",
        line: 137,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 137,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 137,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 137,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "lineerror",
        line: 137,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 137,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 137,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 137,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 137,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 137,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "lineerror",
        line: 139,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 139,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "C",
        line: 141,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 141,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 141,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 142,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 142,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "getinfo",
        line: 142,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 142,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 142,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 142,
    },
    Token {
        kind: String,
        lexeme: "\"l\"",
        line: 142,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 142,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "currentline",
        line: 142,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 142,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 142,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 142,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "C",
        line: 142,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "C",
        line: 142,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 142,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 142,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 142,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 142,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 142,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 142,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 144,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "checkstackmessage",
        line: 144,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 144,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 144,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 145,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 145,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 145,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 145,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 145,
    },
    Token {
        kind: String,
        lexeme: "\"^.-:%d+: stack overflow\"",
        line: 145,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 145,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 145,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 147,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "checkstackmessage",
        line: 147,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 147,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 147,
    },
    Token {
        kind: String,
        lexeme: "'y()'",
        line: 147,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 147,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 147,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 148,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 148,
    },
    Token {
        kind: Identifier,
        lexeme: "checkstackmessage",
        line: 148,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 148,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 148,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 148,
    },
    Token {
        kind: String,
        lexeme: "'y()'",
        line: 148,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 148,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 148,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 148,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 149,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: "checkstackmessage",
        line: 149,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 149,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 149,
    },
    Token {
        kind: String,
        lexeme: "'y()'",
        line: 149,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 149,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 149,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: "C",
        line: 151,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 151,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 151,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 152,
    },
    Token {
        kind: Identifier,
        lexeme: "l1",
        line: 152,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 153,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: "g",
        line: 153,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 153,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: "l1",
        line: 154,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 154,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: "getinfo",
        line: 154,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 154,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 154,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 154,
    },
    Token {
        kind: String,
        lexeme: "\"l\"",
        line: 154,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 154,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: "currentline",
        line: 154,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 154,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 154,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 154,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 155,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "_",
        line: 156,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "stackmsg",
        line: 156,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "xpcall",
        line: 156,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "g",
        line: 156,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 156,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "traceback",
        line: 156,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 156,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: "stack",
        line: 157,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 157,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 157,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 157,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: "line",
        line: 158,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 158,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: "gmatch",
        line: 158,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: "stackmsg",
        line: 158,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 158,
    },
    Token {
        kind: String,
        lexeme: "\"[^\\n]*\"",
        line: 158,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 158,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 158,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: "curr",
        line: 159,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 159,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: "match",
        line: 159,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: "line",
        line: 159,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 159,
    },
    Token {
        kind: String,
        lexeme: "\":(%d+):\"",
        line: 159,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 159,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: "curr",
        line: 160,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 160,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: "insert",
        line: 160,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: "stack",
        line: 160,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: "tonumber",
        line: 160,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: "curr",
        line: 160,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 160,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 160,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 160,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 161,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 162,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 162,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 162,
    },
    Token {
        kind: While,
        lexeme: "while",
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "stack",
        line: 163,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 163,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 163,
    },
    Token {
        kind: NotEquals,
        lexeme: " ~",
        line: 163,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "l1",
        line: 163,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 164,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: "stack",
        line: 164,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 164,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 164,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 164,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 164,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 165,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 165,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 165,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 165,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 167,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 167,
    },
    Token {
        kind: GreaterThan,
        lexeme: ">",
        line: 167,
    },
    Token {
        kind: Number,
        lexeme: "15",
        line: 167,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 167,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: "res",
        line: 171,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 171,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: "xpcall",
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: "error",
        line: 171,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: "error",
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 172,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "res",
        line: 172,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 172,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 172,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 172,
    },
    Token {
        kind: String,
        lexeme: "'string'",
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 172,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 174,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 174,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 174,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 174,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 175,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "x=",
        line: 175,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 175,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 175,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: "error",
        line: 175,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 175,
    },
    Token {
        kind: String,
        lexeme: "'a\\n'",
        line: 175,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 175,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 176,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: "aux",
        line: 177,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 177,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 177,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 177,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 177,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 177,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 177,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 177,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 177,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 177,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 177,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 178,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 178,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: "xpcall",
        line: 178,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: "aux",
        line: 178,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: "aux",
        line: 178,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 178,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 179,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 179,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 179,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 179,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 180,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 182,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 182,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 182,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 182,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 185,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 185,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: "error",
        line: 185,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 185,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 185,
    },
    Token {
        kind: String,
        lexeme: "'x'",
        line: 185,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 185,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: "res",
        line: 186,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 186,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "xpcall",
        line: 186,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 186,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 186,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 186,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "r",
        line: 186,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 186,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 186,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 186,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "r",
        line: 186,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 186,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 186,
    },
    Token {
        kind: String,
        lexeme: "'y'",
        line: 186,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 186,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 186,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 187,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 187,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 187,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 187,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 187,
    },
    Token {
        kind: String,
        lexeme: "'xy'",
        line: 187,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 189,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 189,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 189,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: "checksyntax",
        line: 190,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 190,
    },
    Token {
        kind: String,
        lexeme: "\"syntax error\"",
        line: 190,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 190,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 190,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 190,
    },
    Token {
        kind: String,
        lexeme: "\"error\"",
        line: 190,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 190,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 190,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: "checksyntax",
        line: 191,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 191,
    },
    Token {
        kind: String,
        lexeme: "\"1.000\"",
        line: 191,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 191,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 191,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 191,
    },
    Token {
        kind: String,
        lexeme: "\"1.000\"",
        line: 191,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 191,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 191,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 191,
    },
    Token {
        kind: Identifier,
        lexeme: "checksyntax",
        line: 192,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 192,
    },
    Token {
        kind: String,
        lexeme: "\"[[a]]\"",
        line: 192,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 192,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 192,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 192,
    },
    Token {
        kind: String,
        lexeme: "\"[[a]]\"",
        line: 192,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 192,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 192,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 192,
    },
    Token {
        kind: Identifier,
        lexeme: "checksyntax",
        line: 193,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 193,
    },
    Token {
        kind: String,
        lexeme: "\"'aa'\"",
        line: 193,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 193,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 193,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 193,
    },
    Token {
        kind: String,
        lexeme: "\"'aa'\"",
        line: 193,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 193,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 193,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: "checksyntax",
        line: 196,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 196,
    },
    Token {
        kind: String,
        lexeme: "\"\\255a = 1\"",
        line: 196,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 196,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 196,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 196,
    },
    Token {
        kind: String,
        lexeme: "\"\\255\"",
        line: 196,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 196,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 196,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 196,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 198,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 198,
    },
    Token {
        kind: String,
        lexeme: "'I = loadstring(\"a=9+\"); a=3'",
        line: 198,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 199,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 199,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 199,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "a=",
        line: 199,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 199,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 199,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 199,
    },
    Token {
        kind: Identifier,
        lexeme: "I",
        line: 199,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 199,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 199,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 199,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 199,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 200,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 200,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 200,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 202,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 202,
    },
    Token {
        kind: Number,
        lexeme: "1000",
        line: 202,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: "rawget",
        line: 203,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 203,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 203,
    },
    Token {
        kind: String,
        lexeme: "\"_soft\"",
        line: 203,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 203,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 203,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 203,
    },
    Token {
        kind: Number,
        lexeme: "100",
        line: 203,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 203,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 204,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 204,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 204,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 204,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 205,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 205,
    },
    Token {
        kind: String,
        lexeme: "'a = '",
        line: 205,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 205,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 206,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 206,
    },
    Token {
        kind: String,
        lexeme: "'a = 4+nil'",
        line: 206,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 206,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 207,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 211,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 211,
    },
    Token {
        kind: Identifier,
        lexeme: "testrep",
        line: 211,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 211,
    },
    Token {
        kind: Identifier,
        lexeme: "init",
        line: 211,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 211,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 211,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 211,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 212,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 212,
    },
    Token {
        kind: String,
        lexeme: "\"local a; \"",
        line: 212,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: "init",
        line: 212,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 212,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 212,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 212,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 212,
    },
    Token {
        kind: Number,
        lexeme: "400",
        line: 212,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 212,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 213,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 213,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 213,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 213,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 213,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 213,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 213,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 213,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 213,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 214,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 214,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 214,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 214,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 214,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 214,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 214,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 214,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 214,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 214,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 214,
    },
    Token {
        kind: String,
        lexeme: "\"syntax levels\"",
        line: 214,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 214,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 214,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 215,
    },
    Token {
        kind: Identifier,
        lexeme: "testrep",
        line: 216,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 216,
    },
    Token {
        kind: String,
        lexeme: "\"a=\"",
        line: 216,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 216,
    },
    Token {
        kind: String,
        lexeme: "\"{\"",
        line: 216,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: "testrep",
        line: 217,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 217,
    },
    Token {
        kind: String,
        lexeme: "\"a=\"",
        line: 217,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 217,
    },
    Token {
        kind: String,
        lexeme: "\"(\"",
        line: 217,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: "testrep",
        line: 218,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 218,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 218,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 218,
    },
    Token {
        kind: String,
        lexeme: "\"a(\"",
        line: 218,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 218,
    },
    Token {
        kind: Identifier,
        lexeme: "testrep",
        line: 219,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 219,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 219,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 219,
    },
    Token {
        kind: String,
        lexeme: "\"do \"",
        line: 219,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 219,
    },
    Token {
        kind: Identifier,
        lexeme: "testrep",
        line: 220,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 220,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 220,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 220,
    },
    Token {
        kind: String,
        lexeme: "\"while a do \"",
        line: 220,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 220,
    },
    Token {
        kind: Identifier,
        lexeme: "testrep",
        line: 221,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 221,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 221,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 221,
    },
    Token {
        kind: String,
        lexeme: "\"if a then else \"",
        line: 221,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: "testrep",
        line: 222,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 222,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 222,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 222,
    },
    Token {
        kind: String,
        lexeme: "\"function foo () \"",
        line: 222,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: "testrep",
        line: 223,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 223,
    },
    Token {
        kind: String,
        lexeme: "\"a=\"",
        line: 223,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 223,
    },
    Token {
        kind: String,
        lexeme: "\"a..\"",
        line: 223,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 223,
    },
    Token {
        kind: Identifier,
        lexeme: "testrep",
        line: 224,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 224,
    },
    Token {
        kind: String,
        lexeme: "\"a=\"",
        line: 224,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 224,
    },
    Token {
        kind: String,
        lexeme: "\"a^\"",
        line: 224,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 224,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 229,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 229,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 229,
    },
    Token {
        kind: String,
        lexeme: "\"function foo ()\\n  local \"",
        line: 229,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 230,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 230,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 230,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 230,
    },
    Token {
        kind: Number,
        lexeme: "70",
        line: 230,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 231,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 231,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 231,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 231,
    },
    Token {
        kind: String,
        lexeme: "\"a\"",
        line: 231,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 231,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 231,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 231,
    },
    Token {
        kind: String,
        lexeme: "\", \"",
        line: 231,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 233,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 233,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 233,
    },
    Token {
        kind: String,
        lexeme: "\"b\\n\"",
        line: 233,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 234,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 234,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 234,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 234,
    },
    Token {
        kind: Number,
        lexeme: "70",
        line: 234,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 235,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 235,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 235,
    },
    Token {
        kind: String,
        lexeme: "\"function foo\"",
        line: 235,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 235,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 235,
    },
    Token {
        kind: String,
        lexeme: "\" ()\\n a\"",
        line: 235,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 235,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 235,
    },
    Token {
        kind: String,
        lexeme: "\"=3\\n\"",
        line: 235,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 236,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 237,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 237,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 237,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 237,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 237,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 237,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 237,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 237,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 237,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 238,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 238,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 238,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 238,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 238,
    },
    Token {
        kind: String,
        lexeme: "\"line 3\"",
        line: 238,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 238,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 241,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 241,
    },
    Token {
        kind: String,
        lexeme: "\"\\nfunction foo ()\\n  local \"",
        line: 241,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 242,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 242,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 242,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 242,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 242,
    },
    Token {
        kind: Number,
        lexeme: "300",
        line: 242,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 242,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 243,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 243,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 243,
    },
    Token {
        kind: String,
        lexeme: "\"a\"",
        line: 243,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 243,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 243,
    },
    Token {
        kind: String,
        lexeme: "\", \"",
        line: 243,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 244,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 245,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 245,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 245,
    },
    Token {
        kind: String,
        lexeme: "\"b\\n\"",
        line: 245,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 246,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 246,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 246,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 246,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 247,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 247,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 247,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 247,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 247,
    },
    Token {
        kind: String,
        lexeme: "\"line 2\"",
        line: 247,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 247,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 250,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 250,
    },
    Token {
        kind: String,
        lexeme: "'OK'",
        line: 250,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 250,
    },
]
