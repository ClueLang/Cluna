---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.1-tests/errors.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 1,
        column: 5,
        span: 0..5,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1,
        column: 6,
        span: 5..6,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing errors\"",
        ),
        line: 1,
        column: 22,
        span: 6..22,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1,
        column: 23,
        span: 22..23,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 3,
        column: 9,
        span: 25..33,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 3,
        column: 14,
        span: 34..38,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 3,
        column: 16,
        span: 39..40,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 3,
        column: 17,
        span: 40..41,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 3,
        column: 18,
        span: 41..42,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 4,
        column: 8,
        span: 45..50,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 4,
        column: 10,
        span: 51..52,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 4,
        column: 11,
        span: 52..53,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 4,
        column: 15,
        span: 54..57,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 4,
        column: 17,
        span: 58..59,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        line: 4,
        column: 28,
        span: 60..70,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 4,
        column: 29,
        span: 70..71,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 4,
        column: 30,
        span: 71..72,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 4,
        column: 31,
        span: 72..73,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 5,
        column: 5,
        span: 76..78,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 5,
        column: 7,
        span: 79..80,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 5,
        column: 10,
        span: 81..83,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 5,
        column: 14,
        span: 84..87,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 5,
        column: 19,
        span: 88..92,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 5,
        column: 26,
        span: 93..99,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 5,
        column: 30,
        span: 100..103,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 5,
        column: 0,
        span: 104..107,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 6,
        column: 8,
        span: 110..115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cond",
        ),
        line: 6,
        column: 13,
        span: 116..120,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 6,
        column: 14,
        span: 120..121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 6,
        column: 18,
        span: 122..125,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 6,
        column: 20,
        span: 126..127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 6,
        column: 26,
        span: 128..133,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 6,
        column: 27,
        span: 133..134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 6,
        column: 28,
        span: 134..135,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 6,
        column: 29,
        span: 135..136,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 7,
        column: 9,
        span: 139..145,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 7,
        column: 11,
        span: 146..147,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 7,
        column: 14,
        span: 147..150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cond",
        ),
        line: 7,
        column: 19,
        span: 151..155,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 7,
        column: 20,
        span: 155..156,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 7,
        column: 24,
        span: 157..160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 7,
        column: 0,
        span: 161..164,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 8,
        column: 0,
        span: 165..168,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 11,
        column: 9,
        span: 171..179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 11,
        column: 22,
        span: 180..192,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 11,
        column: 24,
        span: 193..194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 11,
        column: 28,
        span: 194..198,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 11,
        column: 29,
        span: 198..199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 11,
        column: 33,
        span: 200..203,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 11,
        column: 34,
        span: 203..204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 12,
        column: 9,
        span: 207..213,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 10,
        span: 213..214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 12,
        column: 16,
        span: 214..220,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 12,
        column: 17,
        span: 220..221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 12,
        column: 21,
        span: 221..225,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 22,
        span: 225..226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 12,
        column: 26,
        span: 226..230,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 27,
        span: 230..231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 12,
        column: 31,
        span: 231..235,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 32,
        span: 235..236,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 12,
        column: 33,
        span: 236..237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 12,
        column: 37,
        span: 238..241,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 12,
        column: 38,
        span: 241..242,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 12,
        column: 40,
        span: 242..244,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 12,
        column: 41,
        span: 244..245,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 12,
        column: 46,
        span: 246..250,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 47,
        span: 250..251,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 48,
        span: 251..252,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 13,
        column: 0,
        span: 253..256,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 15,
        column: 9,
        span: 258..266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 15,
        column: 21,
        span: 267..278,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
        column: 23,
        span: 279..280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 15,
        column: 27,
        span: 280..284,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 15,
        column: 28,
        span: 284..285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extra",
        ),
        line: 15,
        column: 34,
        span: 286..291,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 15,
        column: 35,
        span: 291..292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 15,
        column: 41,
        span: 293..298,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 15,
        column: 42,
        span: 298..299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 15,
        column: 47,
        span: 300..304,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
        column: 48,
        span: 304..305,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 16,
        column: 8,
        span: 308..313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 16,
        column: 12,
        span: 314..317,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 16,
        column: 14,
        span: 318..319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 16,
        column: 19,
        span: 320..324,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 20,
        span: 324..325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 16,
        column: 24,
        span: 325..329,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 25,
        span: 329..330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 17,
        column: 8,
        span: 333..338,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 17,
        column: 10,
        span: 339..340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 17,
        column: 17,
        span: 341..347,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 17,
        column: 18,
        span: 347..348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 17,
        column: 22,
        span: 348..352,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 17,
        column: 23,
        span: 352..353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 17,
        column: 28,
        span: 353..358,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 17,
        column: 29,
        span: 358..359,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%p)\"",
        ),
        line: 17,
        column: 36,
        span: 360..366,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 17,
        column: 37,
        span: 366..367,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%%%1\"",
        ),
        line: 17,
        column: 44,
        span: 368..374,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 17,
        column: 45,
        span: 374..375,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 18,
        column: 8,
        span: 378..383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pt",
        ),
        line: 18,
        column: 11,
        span: 384..386,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 18,
        column: 13,
        span: 387..388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 18,
        column: 20,
        span: 389..395,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 18,
        column: 21,
        span: 395..396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 18,
        column: 27,
        span: 396..402,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
        column: 28,
        span: 402..403,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[^%%[string \".*\"%%]:%d: .- near '%s'$]]",
        ),
        line: 18,
        column: 68,
        span: 403..443,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 18,
        column: 69,
        span: 443..444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 19,
        column: 32,
        span: 472..476,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 19,
        column: 33,
        span: 476..477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 19,
        column: 39,
        span: 478..483,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 40,
        span: 483..484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 20,
        column: 9,
        span: 487..493,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 10,
        span: 493..494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 20,
        column: 16,
        span: 494..500,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 20,
        column: 17,
        span: 500..501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 20,
        column: 21,
        span: 501..505,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 22,
        span: 505..506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 20,
        column: 25,
        span: 506..509,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
        column: 26,
        span: 509..510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pt",
        ),
        line: 20,
        column: 29,
        span: 511..513,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 30,
        span: 513..514,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 31,
        span: 514..515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 21,
        column: 9,
        span: 518..524,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
        column: 10,
        span: 524..525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 21,
        column: 16,
        span: 525..531,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 21,
        column: 17,
        span: 531..532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 21,
        column: 21,
        span: 532..536,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
        column: 22,
        span: 536..537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 21,
        column: 25,
        span: 537..540,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 21,
        column: 26,
        span: 540..541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 21,
        column: 30,
        span: 542..545,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 21,
        column: 31,
        span: 545..546,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 21,
        column: 33,
        span: 546..548,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 21,
        column: 34,
        span: 548..549,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 21,
        column: 39,
        span: 550..554,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
        column: 40,
        span: 554..555,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
        column: 41,
        span: 555..556,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 22,
        column: 0,
        span: 557..560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 26,
        column: 7,
        span: 604..610,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
        column: 8,
        span: 610..611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 26,
        column: 12,
        span: 611..615,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
        column: 13,
        span: 615..616,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error('hi', 0)\"",
        ),
        line: 26,
        column: 29,
        span: 616..632,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
        column: 30,
        span: 632..633,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 26,
        column: 33,
        span: 634..636,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'hi'",
        ),
        line: 26,
        column: 38,
        span: 637..641,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
        column: 39,
        span: 641..642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 29,
        column: 7,
        span: 679..685,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
        column: 8,
        span: 685..686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 29,
        column: 12,
        span: 686..690,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
        column: 13,
        span: 690..691,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error()\"",
        ),
        line: 29,
        column: 22,
        span: 691..700,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
        column: 23,
        span: 700..701,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 29,
        column: 26,
        span: 702..704,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 29,
        column: 30,
        span: 705..708,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
        column: 31,
        span: 708..709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 33,
        column: 7,
        span: 766..772,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 8,
        span: 772..773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 33,
        column: 12,
        span: 773..777,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 13,
        span: 777..778,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unpack({}, 1, n=2^30)\"",
        ),
        line: 33,
        column: 36,
        span: 778..801,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 37,
        span: 801..802,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 38,
        span: 802..803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 34,
        column: 7,
        span: 804..810,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 8,
        span: 810..811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 34,
        column: 12,
        span: 811..815,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 13,
        span: 815..816,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=math.sin()\"",
        ),
        line: 34,
        column: 27,
        span: 816..830,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 28,
        span: 830..831,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 29,
        span: 831..832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 35,
        column: 7,
        span: 833..839,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 8,
        span: 839..840,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 35,
        column: 11,
        span: 840..843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 35,
        column: 16,
        span: 844..848,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 17,
        span: 848..849,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tostring(1)\"",
        ),
        line: 35,
        column: 30,
        span: 849..862,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 31,
        span: 862..863,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 35,
        column: 35,
        span: 864..867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 35,
        column: 40,
        span: 868..872,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 41,
        span: 872..873,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tostring()\"",
        ),
        line: 35,
        column: 53,
        span: 873..885,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 54,
        span: 885..886,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 55,
        span: 886..887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 36,
        column: 7,
        span: 888..894,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 8,
        span: 894..895,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 36,
        column: 12,
        span: 895..899,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tonumber()\"",
        ),
        line: 36,
        column: 24,
        span: 899..911,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 25,
        span: 911..912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 37,
        column: 7,
        span: 913..919,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 8,
        span: 919..920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 37,
        column: 12,
        span: 920..924,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"repeat until 1; a\"",
        ),
        line: 37,
        column: 31,
        span: 924..943,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 32,
        span: 943..944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 38,
        column: 12,
        span: 945..956,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 13,
        span: 956..957,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"break label\"",
        ),
        line: 38,
        column: 26,
        span: 957..970,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 27,
        span: 970..971,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 38,
        column: 30,
        span: 972..974,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 31,
        span: 974..975,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"label\"",
        ),
        line: 38,
        column: 39,
        span: 976..983,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 40,
        span: 983..984,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 38,
        column: 42,
        span: 984..986,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 43,
        span: 986..987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 39,
        column: 7,
        span: 988..994,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 8,
        span: 994..995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 39,
        column: 12,
        span: 995..999,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        line: 39,
        column: 15,
        span: 999..1002,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 16,
        span: 1002..1003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 40,
        column: 7,
        span: 1004..1010,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 8,
        span: 1010..1011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 40,
        column: 12,
        span: 1011..1015,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=1;;\"",
        ),
        line: 40,
        column: 19,
        span: 1015..1022,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 20,
        span: 1022..1023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 41,
        column: 7,
        span: 1024..1030,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 8,
        span: 1030..1031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 41,
        column: 12,
        span: 1031..1035,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return;;\"",
        ),
        line: 41,
        column: 22,
        span: 1035..1045,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 23,
        span: 1045..1046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 42,
        column: 7,
        span: 1047..1053,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
        column: 8,
        span: 1053..1054,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 42,
        column: 12,
        span: 1054..1058,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"assert(false)\"",
        ),
        line: 42,
        column: 27,
        span: 1058..1073,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
        column: 28,
        span: 1073..1074,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 43,
        column: 7,
        span: 1075..1081,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 8,
        span: 1081..1082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 43,
        column: 12,
        span: 1082..1086,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"assert(nil)\"",
        ),
        line: 43,
        column: 25,
        span: 1086..1099,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 26,
        span: 1099..1100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 44,
        column: 7,
        span: 1101..1107,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 8,
        span: 1107..1108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 44,
        column: 12,
        span: 1108..1112,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=math.sin\\n(3)\"",
        ),
        line: 44,
        column: 29,
        span: 1112..1129,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 30,
        span: 1129..1130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 45,
        column: 7,
        span: 1131..1137,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 8,
        span: 1137..1138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 45,
        column: 12,
        span: 1138..1142,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 13,
        span: 1142..1143,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function a (... , ...) end\"",
        ),
        line: 45,
        column: 41,
        span: 1143..1171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 42,
        span: 1171..1172,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 43,
        span: 1172..1173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 46,
        column: 7,
        span: 1174..1180,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 8,
        span: 1180..1181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 46,
        column: 12,
        span: 1181..1185,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 13,
        span: 1185..1186,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function a (, ...) end\"",
        ),
        line: 46,
        column: 37,
        span: 1186..1210,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 38,
        span: 1210..1211,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 39,
        span: 1211..1212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 48,
        column: 12,
        span: 1214..1225,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
        column: 13,
        span: 1225..1226,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  local a = {4\n\n]]",
        ),
        line: 51,
        column: 3,
        span: 1226..1247,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
        column: 4,
        span: 1247..1248,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'}' expected (to close '{' at line 1)\"",
        ),
        line: 51,
        column: 44,
        span: 1249..1288,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
        column: 45,
        span: 1288..1289,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<eof>\"",
        ),
        line: 51,
        column: 53,
        span: 1290..1297,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
        column: 54,
        span: 1297..1298,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 51,
        column: 56,
        span: 1298..1300,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
        column: 57,
        span: 1300..1301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 56,
        column: 13,
        span: 1340..1352,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 14,
        span: 1352..1353,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=1; bbbb=2; a=math.sin(3)+bbbb(3)\"",
        ),
        line: 56,
        column: 50,
        span: 1353..1389,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 51,
        span: 1389..1390,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'bbbb'\"",
        ),
        line: 56,
        column: 67,
        span: 1391..1406,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 68,
        span: 1406..1407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 57,
        column: 13,
        span: 1408..1420,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
        column: 14,
        span: 1420..1421,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=1; local a,bbbb=2,3; a = math.sin(1) and bbbb(3)\"",
        ),
        line: 57,
        column: 66,
        span: 1421..1473,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 57,
        column: 67,
        span: 1473..1474,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local 'bbbb'\"",
        ),
        line: 58,
        column: 22,
        span: 1482..1496,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 23,
        span: 1496..1497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 59,
        column: 13,
        span: 1498..1510,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 14,
        span: 1510..1511,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a={}; do local a=1 end a:bbbb(3)\"",
        ),
        line: 59,
        column: 48,
        span: 1511..1545,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 59,
        column: 49,
        span: 1545..1546,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"method 'bbbb'\"",
        ),
        line: 59,
        column: 65,
        span: 1547..1562,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 66,
        span: 1562..1563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 60,
        column: 13,
        span: 1564..1576,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 14,
        span: 1576..1577,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a={}; a.bbbb(3)\"",
        ),
        line: 60,
        column: 37,
        span: 1577..1600,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 60,
        column: 38,
        span: 1600..1601,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field 'bbbb'\"",
        ),
        line: 60,
        column: 53,
        span: 1602..1616,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 54,
        span: 1616..1617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 61,
        column: 7,
        span: 1618..1624,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 8,
        span: 1624..1625,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 61,
        column: 11,
        span: 1625..1628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 61,
        column: 18,
        span: 1629..1635,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 61,
        column: 19,
        span: 1635..1636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 61,
        column: 23,
        span: 1636..1640,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 24,
        span: 1640..1641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 61,
        column: 28,
        span: 1641..1645,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a={13}; local bbbb=1; a[bbbb](3)\"",
        ),
        line: 61,
        column: 62,
        span: 1645..1679,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 63,
        span: 1679..1680,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'bbbb'\"",
        ),
        line: 61,
        column: 72,
        span: 1681..1689,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 73,
        span: 1689..1690,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 74,
        span: 1690..1691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 62,
        column: 13,
        span: 1692..1704,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 14,
        span: 1704..1705,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a={13}; local bbbb=1; a[bbbb](3)\"",
        ),
        line: 62,
        column: 48,
        span: 1705..1739,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 62,
        column: 49,
        span: 1739..1740,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number\"",
        ),
        line: 62,
        column: 58,
        span: 1741..1749,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 59,
        span: 1749..1750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aaa",
        ),
        line: 64,
        column: 4,
        span: 1752..1755,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 64,
        column: 6,
        span: 1756..1757,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 64,
        column: 0,
        span: 1758..1761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 65,
        column: 13,
        span: 1762..1774,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 14,
        span: 1774..1775,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa.bbb:ddd(9)\"",
        ),
        line: 65,
        column: 30,
        span: 1775..1791,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 65,
        column: 31,
        span: 1791..1792,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'aaa'\"",
        ),
        line: 65,
        column: 46,
        span: 1793..1807,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 47,
        span: 1807..1808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 66,
        column: 13,
        span: 1809..1821,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 14,
        span: 1821..1822,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local aaa={bbb=1}; aaa.bbb:ddd(9)\"",
        ),
        line: 66,
        column: 49,
        span: 1822..1857,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 50,
        span: 1857..1858,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field 'bbb'\"",
        ),
        line: 66,
        column: 64,
        span: 1859..1872,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 65,
        span: 1872..1873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 67,
        column: 13,
        span: 1874..1886,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 14,
        span: 1886..1887,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local aaa={bbb={}}; aaa.bbb:ddd(9)\"",
        ),
        line: 67,
        column: 50,
        span: 1887..1923,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
        column: 51,
        span: 1923..1924,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"method 'ddd'\"",
        ),
        line: 67,
        column: 66,
        span: 1925..1939,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 67,
        span: 1939..1940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 68,
        column: 13,
        span: 1941..1953,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 14,
        span: 1953..1954,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a,b,c; (function () a = b+1 end)()\"",
        ),
        line: 68,
        column: 56,
        span: 1954..1996,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 68,
        column: 57,
        span: 1996..1997,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"upvalue 'b'\"",
        ),
        line: 68,
        column: 71,
        span: 1998..2011,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 72,
        span: 2011..2012,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 69,
        column: 7,
        span: 2013..2019,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 8,
        span: 2019..2020,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 69,
        column: 11,
        span: 2020..2023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 69,
        column: 16,
        span: 2024..2028,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local aaa={bbb={ddd=next}}; aaa.bbb:ddd(nil)\"",
        ),
        line: 69,
        column: 62,
        span: 2028..2074,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 63,
        span: 2074..2075,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 71,
        column: 13,
        span: 2077..2089,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 14,
        span: 2089..2090,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b=1; local aaa='a'; x=aaa+b\"",
        ),
        line: 71,
        column: 43,
        span: 2090..2119,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 44,
        span: 2119..2120,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local 'aaa'\"",
        ),
        line: 71,
        column: 58,
        span: 2121..2134,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 59,
        span: 2134..2135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 72,
        column: 13,
        span: 2136..2148,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 14,
        span: 2148..2149,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa={}; x=3/aaa\"",
        ),
        line: 72,
        column: 31,
        span: 2149..2166,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 72,
        column: 32,
        span: 2166..2167,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'aaa'\"",
        ),
        line: 72,
        column: 47,
        span: 2168..2182,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 48,
        span: 2182..2183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 73,
        column: 13,
        span: 2184..2196,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 14,
        span: 2196..2197,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa='2'; b=nil;x=aaa*b\"",
        ),
        line: 73,
        column: 38,
        span: 2197..2221,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 73,
        column: 39,
        span: 2221..2222,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'b'\"",
        ),
        line: 73,
        column: 52,
        span: 2223..2235,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 53,
        span: 2235..2236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 74,
        column: 13,
        span: 2237..2249,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
        column: 14,
        span: 2249..2250,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa={}; x=-aaa\"",
        ),
        line: 74,
        column: 30,
        span: 2250..2266,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 74,
        column: 31,
        span: 2266..2267,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'aaa'\"",
        ),
        line: 74,
        column: 46,
        span: 2268..2282,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
        column: 47,
        span: 2282..2283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 75,
        column: 7,
        span: 2284..2290,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
        column: 8,
        span: 2290..2291,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 75,
        column: 11,
        span: 2291..2294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 75,
        column: 18,
        span: 2295..2301,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 75,
        column: 19,
        span: 2301..2302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 75,
        column: 23,
        span: 2302..2306,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
        column: 24,
        span: 2306..2307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 75,
        column: 28,
        span: 2307..2311,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa={}; x=(aaa or aaa)+(aaa and aaa)\"",
        ),
        line: 75,
        column: 66,
        span: 2311..2349,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 75,
        column: 67,
        span: 2349..2350,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'aaa'\"",
        ),
        line: 75,
        column: 75,
        span: 2351..2358,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
        column: 76,
        span: 2358..2359,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
        column: 77,
        span: 2359..2360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 76,
        column: 7,
        span: 2361..2367,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 8,
        span: 2367..2368,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 76,
        column: 11,
        span: 2368..2371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 76,
        column: 18,
        span: 2372..2378,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 76,
        column: 19,
        span: 2378..2379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 76,
        column: 23,
        span: 2379..2383,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 24,
        span: 2383..2384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 76,
        column: 28,
        span: 2384..2388,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa={}; (aaa or aaa)()\"",
        ),
        line: 76,
        column: 52,
        span: 2388..2412,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 76,
        column: 53,
        span: 2412..2413,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'aaa'\"",
        ),
        line: 76,
        column: 61,
        span: 2414..2421,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 62,
        span: 2421..2422,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 63,
        span: 2422..2423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 78,
        column: 13,
        span: 2425..2437,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 14,
        span: 2437..2438,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[aaa=9\nrepeat until 3==3\nlocal x=math.sin(math.cos(3))\nif math.sin(1) == x then return math.sin(1) end   -- tail call\nlocal a,b = 1, {\n  {x='a'..'b'..'c', y='b', z=x},\n  {1,2,3,4,5} or 3+3<=3+3,\n  3+1>3+1,\n  {d = x and aaa[x or y]}}\n]]",
        ),
        line: 87,
        column: 3,
        span: 2438..2674,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 87,
        column: 4,
        span: 2674..2675,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'aaa'\"",
        ),
        line: 87,
        column: 19,
        span: 2676..2690,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 20,
        span: 2690..2691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 89,
        column: 13,
        span: 2693..2705,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
        column: 14,
        span: 2705..2706,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal x,y = {},1\nif math.sin(1) == 0 then return 3 end    -- return\nx.a()]]",
        ),
        line: 92,
        column: 8,
        span: 2706..2784,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 92,
        column: 9,
        span: 2784..2785,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field 'a'\"",
        ),
        line: 92,
        column: 21,
        span: 2786..2797,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 92,
        column: 22,
        span: 2797..2798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 94,
        column: 13,
        span: 2800..2812,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
        column: 14,
        span: 2812..2813,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nprefix = nil\ninsert = nil\nwhile 1 do  \n  local a\n  if nil then break end\n  insert(prefix, a)\nend]]",
        ),
        line: 101,
        column: 6,
        span: 2813..2914,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 101,
        column: 7,
        span: 2914..2915,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'insert'\"",
        ),
        line: 101,
        column: 25,
        span: 2916..2933,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
        column: 26,
        span: 2933..2934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 103,
        column: 13,
        span: 2936..2948,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 14,
        span: 2948..2949,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[  -- tail call\n  return math.sin(\"a\")\n]]",
        ),
        line: 105,
        column: 3,
        span: 2949..2991,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 105,
        column: 4,
        span: 2991..2992,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'sin'\"",
        ),
        line: 105,
        column: 12,
        span: 2993..3000,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
        column: 13,
        span: 3000..3001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 107,
        column: 13,
        span: 3003..3015,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
        column: 14,
        span: 3015..3016,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[collectgarbage(\"nooption\")]]",
        ),
        line: 107,
        column: 44,
        span: 3016..3046,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 107,
        column: 45,
        span: 3046..3047,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid option\"",
        ),
        line: 107,
        column: 62,
        span: 3048..3064,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
        column: 63,
        span: 3064..3065,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 109,
        column: 13,
        span: 3067..3079,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 14,
        span: 3079..3080,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[x = print .. \"a\"]]",
        ),
        line: 109,
        column: 34,
        span: 3080..3100,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 109,
        column: 35,
        span: 3100..3101,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concatenate\"",
        ),
        line: 109,
        column: 49,
        span: 3102..3115,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 50,
        span: 3115..3116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 111,
        column: 13,
        span: 3118..3130,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 14,
        span: 3130..3131,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"getmetatable(io.stdin).__gc()\"",
        ),
        line: 111,
        column: 45,
        span: 3131..3162,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 46,
        span: 3162..3163,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"no value\"",
        ),
        line: 111,
        column: 57,
        span: 3164..3174,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 58,
        span: 3174..3175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 113,
        column: 6,
        span: 3177..3182,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 113,
        column: 9,
        span: 3182..3185,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 118,
        column: 9,
        span: 3211..3219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 118,
        column: 19,
        span: 3220..3229,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 21,
        span: 3230..3231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 118,
        column: 22,
        span: 3231..3232,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 23,
        span: 3232..3233,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 119,
        column: 8,
        span: 3236..3241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 119,
        column: 12,
        span: 3242..3245,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 119,
        column: 13,
        span: 3245..3246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 119,
        column: 16,
        span: 3246..3249,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 119,
        column: 18,
        span: 3250..3251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 119,
        column: 24,
        span: 3252..3257,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 119,
        column: 25,
        span: 3257..3258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        line: 119,
        column: 35,
        span: 3258..3268,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 119,
        column: 36,
        span: 3268..3269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 119,
        column: 37,
        span: 3269..3270,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 119,
        column: 38,
        span: 3270..3271,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 119,
        column: 39,
        span: 3271..3272,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 120,
        column: 8,
        span: 3275..3280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 120,
        column: 13,
        span: 3281..3285,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 120,
        column: 15,
        span: 3286..3287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 120,
        column: 22,
        span: 3288..3294,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 120,
        column: 23,
        span: 3294..3295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 120,
        column: 28,
        span: 3295..3300,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
        column: 29,
        span: 3300..3301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 120,
        column: 32,
        span: 3301..3304,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 33,
        span: 3304..3305,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\":(%d+):\"",
        ),
        line: 120,
        column: 43,
        span: 3306..3315,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
        column: 44,
        span: 3315..3316,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 121,
        column: 9,
        span: 3319..3325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 121,
        column: 14,
        span: 3326..3330,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 121,
        column: 18,
        span: 3331..3334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 121,
        column: 23,
        span: 3335..3339,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 121,
        column: 24,
        span: 3339..3340,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 0,
        span: 3339..3341,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 122,
        column: 0,
        span: 3342..3345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 124,
        column: 7,
        span: 3347..3353,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
        column: 8,
        span: 3353..3354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 124,
        column: 17,
        span: 3354..3363,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a\\n for i=1,'a' do \\n print(i) \\n end\"",
        ),
        line: 124,
        column: 62,
        span: 3363..3408,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 124,
        column: 65,
        span: 3409..3411,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 124,
        column: 67,
        span: 3411..3413,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
        column: 68,
        span: 3413..3414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 125,
        column: 7,
        span: 3415..3421,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 8,
        span: 3421..3422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 125,
        column: 17,
        span: 3422..3431,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n local a \\n for k,v in 3 \\n do \\n print(k) \\n end\"",
        ),
        line: 125,
        column: 70,
        span: 3431..3484,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 125,
        column: 73,
        span: 3485..3487,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 75,
        span: 3487..3489,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
        column: 76,
        span: 3489..3490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 126,
        column: 7,
        span: 3491..3497,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 126,
        column: 8,
        span: 3497..3498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 126,
        column: 17,
        span: 3498..3507,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\n for k,v in \\n 3 \\n do \\n print(k) \\n end\"",
        ),
        line: 126,
        column: 64,
        span: 3507..3554,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 126,
        column: 67,
        span: 3555..3557,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
        column: 69,
        span: 3557..3559,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 126,
        column: 70,
        span: 3559..3560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 127,
        column: 7,
        span: 3561..3567,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 127,
        column: 8,
        span: 3567..3568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 127,
        column: 17,
        span: 3568..3577,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function a.x.y ()\\na=a+1\\nend\"",
        ),
        line: 127,
        column: 48,
        span: 3577..3608,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 127,
        column: 51,
        span: 3609..3611,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 127,
        column: 53,
        span: 3611..3613,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 127,
        column: 54,
        span: 3613..3614,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 129,
        column: 6,
        span: 3616..3621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 129,
        column: 8,
        span: 3622..3623,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 129,
        column: 10,
        span: 3624..3625,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nfunction g() f() end\nfunction f(x) error('a', X) end\ng()\n]]",
        ),
        line: 133,
        column: 3,
        span: 3626..3688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 134,
        column: 2,
        span: 3689..3690,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 134,
        column: 3,
        span: 3690..3691,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 134,
        column: 4,
        span: 3690..3692,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 134,
        column: 5,
        span: 3692..3693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 134,
        column: 11,
        span: 3693..3699,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
        column: 12,
        span: 3699..3700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 134,
        column: 21,
        span: 3700..3709,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
        column: 22,
        span: 3709..3710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 134,
        column: 23,
        span: 3710..3711,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
        column: 24,
        span: 3711..3712,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 134,
        column: 27,
        span: 3713..3715,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 134,
        column: 29,
        span: 3715..3717,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
        column: 30,
        span: 3717..3718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 135,
        column: 2,
        span: 3719..3720,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 135,
        column: 3,
        span: 3720..3721,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 135,
        column: 4,
        span: 3720..3722,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 135,
        column: 5,
        span: 3722..3723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 135,
        column: 11,
        span: 3723..3729,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 135,
        column: 12,
        span: 3729..3730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 135,
        column: 21,
        span: 3730..3739,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 135,
        column: 22,
        span: 3739..3740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 135,
        column: 23,
        span: 3740..3741,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 135,
        column: 24,
        span: 3741..3742,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 135,
        column: 27,
        span: 3743..3745,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 135,
        column: 31,
        span: 3746..3749,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 135,
        column: 32,
        span: 3749..3750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 136,
        column: 2,
        span: 3751..3752,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 136,
        column: 3,
        span: 3752..3753,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 136,
        column: 4,
        span: 3752..3754,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 136,
        column: 5,
        span: 3754..3755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 136,
        column: 11,
        span: 3755..3761,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 136,
        column: 12,
        span: 3761..3762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 136,
        column: 21,
        span: 3762..3771,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 136,
        column: 22,
        span: 3771..3772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 136,
        column: 23,
        span: 3772..3773,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 136,
        column: 24,
        span: 3773..3774,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 136,
        column: 27,
        span: 3775..3777,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 136,
        column: 29,
        span: 3777..3779,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 136,
        column: 30,
        span: 3779..3780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 137,
        column: 2,
        span: 3781..3782,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 137,
        column: 3,
        span: 3782..3783,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
        column: 4,
        span: 3782..3784,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 137,
        column: 5,
        span: 3784..3785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 137,
        column: 11,
        span: 3785..3791,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
        column: 12,
        span: 3791..3792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 137,
        column: 21,
        span: 3792..3801,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
        column: 22,
        span: 3801..3802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 137,
        column: 23,
        span: 3802..3803,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
        column: 24,
        span: 3803..3804,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 137,
        column: 27,
        span: 3805..3807,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
        column: 29,
        span: 3807..3809,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
        column: 30,
        span: 3809..3810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 139,
        column: 10,
        span: 3812..3821,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 139,
        column: 12,
        span: 3822..3823,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 139,
        column: 0,
        span: 3824..3827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 141,
        column: 2,
        span: 3829..3830,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 141,
        column: 4,
        span: 3831..3832,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 141,
        column: 0,
        span: 3832..3834,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 142,
        column: 6,
        span: 3835..3840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 142,
        column: 8,
        span: 3841..3842,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 142,
        column: 10,
        span: 3843..3844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 142,
        column: 16,
        span: 3845..3850,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 142,
        column: 17,
        span: 3850..3851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 142,
        column: 24,
        span: 3851..3858,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 142,
        column: 25,
        span: 3858..3859,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 142,
        column: 26,
        span: 3858..3860,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 142,
        column: 27,
        span: 3860..3861,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 142,
        column: 31,
        span: 3862..3865,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 142,
        column: 32,
        span: 3865..3866,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 142,
        column: 33,
        span: 3866..3867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 142,
        column: 44,
        span: 3867..3878,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 142,
        column: 45,
        span: 3878..3879,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 142,
        column: 54,
        span: 3880..3888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 142,
        column: 56,
        span: 3889..3890,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 142,
        column: 58,
        span: 3891..3892,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 142,
        column: 59,
        span: 3892..3893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 142,
        column: 61,
        span: 3894..3895,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 142,
        column: 62,
        span: 3895..3896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 142,
        column: 63,
        span: 3896..3897,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 142,
        column: 64,
        span: 3897..3898,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 142,
        column: 65,
        span: 3897..3899,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 142,
        column: 66,
        span: 3899..3900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 142,
        column: 68,
        span: 3901..3902,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 142,
        column: 69,
        span: 3902..3903,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 142,
        column: 70,
        span: 3903..3904,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 142,
        column: 0,
        span: 3905..3908,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 144,
        column: 6,
        span: 3910..3915,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 144,
        column: 15,
        span: 3916..3924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkstackmessage",
        ),
        line: 144,
        column: 33,
        span: 3925..3942,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
        column: 35,
        span: 3943..3944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 144,
        column: 36,
        span: 3944..3945,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
        column: 37,
        span: 3945..3946,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 145,
        column: 9,
        span: 3949..3955,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
        column: 11,
        span: 3956..3957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 145,
        column: 17,
        span: 3957..3963,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 145,
        column: 18,
        span: 3963..3964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 145,
        column: 22,
        span: 3964..3968,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
        column: 23,
        span: 3968..3969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 145,
        column: 24,
        span: 3969..3970,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 145,
        column: 25,
        span: 3970..3971,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^.-:%d+: stack overflow\"",
        ),
        line: 145,
        column: 51,
        span: 3972..3997,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
        column: 52,
        span: 3997..3998,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
        column: 53,
        span: 3998..3999,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 146,
        column: 0,
        span: 4000..4003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 147,
        column: 7,
        span: 4004..4010,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
        column: 8,
        span: 4010..4011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkstackmessage",
        ),
        line: 147,
        column: 25,
        span: 4011..4028,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
        column: 26,
        span: 4028..4029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 147,
        column: 30,
        span: 4029..4033,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
        column: 31,
        span: 4033..4034,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'y()'",
        ),
        line: 147,
        column: 36,
        span: 4034..4039,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 37,
        span: 4039..4040,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 38,
        span: 4040..4041,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 39,
        span: 4041..4042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 148,
        column: 7,
        span: 4043..4049,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 8,
        span: 4049..4050,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkstackmessage",
        ),
        line: 148,
        column: 25,
        span: 4050..4067,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 26,
        span: 4067..4068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 148,
        column: 30,
        span: 4068..4072,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 31,
        span: 4072..4073,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'y()'",
        ),
        line: 148,
        column: 36,
        span: 4073..4078,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
        column: 37,
        span: 4078..4079,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
        column: 38,
        span: 4079..4080,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
        column: 39,
        span: 4080..4081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 149,
        column: 7,
        span: 4082..4088,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
        column: 8,
        span: 4088..4089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkstackmessage",
        ),
        line: 149,
        column: 25,
        span: 4089..4106,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
        column: 26,
        span: 4106..4107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 149,
        column: 30,
        span: 4107..4111,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
        column: 31,
        span: 4111..4112,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'y()'",
        ),
        line: 149,
        column: 36,
        span: 4112..4117,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
        column: 37,
        span: 4117..4118,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
        column: 38,
        span: 4118..4119,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
        column: 39,
        span: 4119..4120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 151,
        column: 2,
        span: 4148..4149,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 151,
        column: 4,
        span: 4150..4151,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 151,
        column: 0,
        span: 4151..4153,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 152,
        column: 6,
        span: 4154..4159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l1",
        ),
        line: 152,
        column: 0,
        span: 4160..4162,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 153,
        column: 6,
        span: 4163..4168,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 153,
        column: 15,
        span: 4169..4177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 153,
        column: 17,
        span: 4178..4179,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
        column: 18,
        span: 4179..4180,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
        column: 19,
        span: 4180..4181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l1",
        ),
        line: 154,
        column: 5,
        span: 4184..4186,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 154,
        column: 7,
        span: 4187..4188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 154,
        column: 13,
        span: 4189..4194,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 154,
        column: 14,
        span: 4194..4195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 154,
        column: 21,
        span: 4195..4202,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 22,
        span: 4202..4203,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 154,
        column: 23,
        span: 4202..4204,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 154,
        column: 24,
        span: 4204..4205,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 154,
        column: 28,
        span: 4206..4209,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 29,
        span: 4209..4210,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 154,
        column: 30,
        span: 4210..4211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 154,
        column: 41,
        span: 4211..4222,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 154,
        column: 42,
        span: 4222..4223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 154,
        column: 44,
        span: 4224..4225,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 45,
        span: 4225..4226,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 46,
        span: 4226..4227,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 155,
        column: 0,
        span: 4228..4231,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 156,
        column: 6,
        span: 4232..4237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 156,
        column: 8,
        span: 4238..4239,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 156,
        column: 9,
        span: 4239..4240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stackmsg",
        ),
        line: 156,
        column: 18,
        span: 4241..4249,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 156,
        column: 20,
        span: 4250..4251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 156,
        column: 27,
        span: 4252..4258,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
        column: 28,
        span: 4258..4259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 156,
        column: 29,
        span: 4259..4260,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 156,
        column: 30,
        span: 4260..4261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 156,
        column: 36,
        span: 4262..4267,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 156,
        column: 37,
        span: 4267..4268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 156,
        column: 46,
        span: 4268..4277,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
        column: 47,
        span: 4277..4278,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 157,
        column: 6,
        span: 4279..4284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        line: 157,
        column: 12,
        span: 4285..4290,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 157,
        column: 14,
        span: 4291..4292,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 157,
        column: 16,
        span: 4293..4294,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 157,
        column: 17,
        span: 4294..4295,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 158,
        column: 4,
        span: 4296..4299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 158,
        column: 9,
        span: 4300..4304,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 158,
        column: 12,
        span: 4305..4307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 158,
        column: 19,
        span: 4308..4314,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 158,
        column: 20,
        span: 4314..4315,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 158,
        column: 26,
        span: 4315..4321,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
        column: 27,
        span: 4321..4322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stackmsg",
        ),
        line: 158,
        column: 35,
        span: 4322..4330,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 158,
        column: 36,
        span: 4330..4331,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[^\\n]*\"",
        ),
        line: 158,
        column: 45,
        span: 4332..4340,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
        column: 46,
        span: 4340..4341,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 158,
        column: 0,
        span: 4342..4344,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 159,
        column: 8,
        span: 4347..4352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "curr",
        ),
        line: 159,
        column: 13,
        span: 4353..4357,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 159,
        column: 15,
        span: 4358..4359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 159,
        column: 22,
        span: 4360..4366,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 159,
        column: 23,
        span: 4366..4367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 159,
        column: 28,
        span: 4367..4372,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
        column: 29,
        span: 4372..4373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 159,
        column: 33,
        span: 4373..4377,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 159,
        column: 34,
        span: 4377..4378,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\":(%d+):\"",
        ),
        line: 159,
        column: 44,
        span: 4379..4388,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 159,
        column: 45,
        span: 4388..4389,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 160,
        column: 5,
        span: 4392..4394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "curr",
        ),
        line: 160,
        column: 10,
        span: 4395..4399,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 160,
        column: 15,
        span: 4400..4404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 160,
        column: 21,
        span: 4405..4410,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 160,
        column: 22,
        span: 4410..4411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 160,
        column: 28,
        span: 4411..4417,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 160,
        column: 29,
        span: 4417..4418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        line: 160,
        column: 34,
        span: 4418..4423,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 160,
        column: 35,
        span: 4423..4424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 160,
        column: 44,
        span: 4425..4433,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 160,
        column: 45,
        span: 4433..4434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "curr",
        ),
        line: 160,
        column: 49,
        span: 4434..4438,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 160,
        column: 50,
        span: 4438..4439,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 160,
        column: 51,
        span: 4439..4440,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 160,
        column: 0,
        span: 4441..4444,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 161,
        column: 0,
        span: 4445..4448,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 162,
        column: 6,
        span: 4449..4454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 162,
        column: 8,
        span: 4455..4456,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 162,
        column: 9,
        span: 4456..4457,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 162,
        column: 0,
        span: 4456..4458,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 163,
        column: 6,
        span: 4459..4464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        line: 163,
        column: 12,
        span: 4465..4470,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 163,
        column: 13,
        span: 4470..4471,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 163,
        column: 14,
        span: 4471..4472,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 163,
        column: 15,
        span: 4472..4473,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 163,
        column: 18,
        span: 4474..4476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l1",
        ),
        line: 163,
        column: 21,
        span: 4477..4479,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 163,
        column: 0,
        span: 4480..4482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 164,
        column: 9,
        span: 4485..4491,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 164,
        column: 10,
        span: 4491..4492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        line: 164,
        column: 15,
        span: 4492..4497,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 164,
        column: 16,
        span: 4497..4498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 164,
        column: 17,
        span: 4498..4499,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 164,
        column: 18,
        span: 4499..4500,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 164,
        column: 21,
        span: 4501..4503,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 164,
        column: 23,
        span: 4504..4505,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 164,
        column: 24,
        span: 4505..4506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 165,
        column: 4,
        span: 4509..4510,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 165,
        column: 6,
        span: 4511..4512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 165,
        column: 8,
        span: 4513..4514,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 165,
        column: 9,
        span: 4514..4515,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 165,
        column: 0,
        span: 4514..4516,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 166,
        column: 0,
        span: 4517..4520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 167,
        column: 7,
        span: 4521..4527,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
        column: 8,
        span: 4527..4528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 167,
        column: 9,
        span: 4528..4529,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 167,
        column: 11,
        span: 4530..4531,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 167,
        column: 14,
        span: 4531..4534,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 15,
        span: 4534..4535,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 171,
        column: 6,
        span: 4565..4570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 171,
        column: 10,
        span: 4571..4574,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 171,
        column: 11,
        span: 4574..4575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 171,
        column: 15,
        span: 4576..4579,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 171,
        column: 17,
        span: 4580..4581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 171,
        column: 24,
        span: 4582..4588,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 25,
        span: 4588..4589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 171,
        column: 30,
        span: 4589..4594,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 171,
        column: 31,
        span: 4594..4595,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 171,
        column: 37,
        span: 4596..4601,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 38,
        span: 4601..4602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 172,
        column: 7,
        span: 4603..4609,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
        column: 8,
        span: 4609..4610,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 172,
        column: 11,
        span: 4610..4613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 172,
        column: 15,
        span: 4614..4617,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 172,
        column: 19,
        span: 4618..4621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 172,
        column: 24,
        span: 4622..4626,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
        column: 25,
        span: 4626..4627,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 172,
        column: 28,
        span: 4627..4630,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
        column: 29,
        span: 4630..4631,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 172,
        column: 32,
        span: 4632..4634,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 172,
        column: 41,
        span: 4635..4643,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
        column: 42,
        span: 4643..4644,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 174,
        column: 6,
        span: 4646..4651,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 174,
        column: 15,
        span: 4652..4660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 174,
        column: 17,
        span: 4661..4662,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
        column: 19,
        span: 4663..4664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 174,
        column: 20,
        span: 4664..4665,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
        column: 21,
        span: 4665..4666,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 175,
        column: 5,
        span: 4669..4671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 175,
        column: 7,
        span: 4672..4673,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 175,
        column: 9,
        span: 4673..4675,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 175,
        column: 10,
        span: 4674..4676,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 175,
        column: 15,
        span: 4677..4681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 175,
        column: 21,
        span: 4682..4687,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
        column: 22,
        span: 4687..4688,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\n'",
        ),
        line: 175,
        column: 27,
        span: 4688..4693,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
        column: 28,
        span: 4693..4694,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 176,
        column: 0,
        span: 4697..4701,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 177,
        column: 10,
        span: 4706..4711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 177,
        column: 14,
        span: 4712..4715,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 177,
        column: 16,
        span: 4716..4717,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 177,
        column: 25,
        span: 4718..4726,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
        column: 27,
        span: 4727..4728,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
        column: 28,
        span: 4728..4729,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 177,
        column: 35,
        span: 4730..4736,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 177,
        column: 37,
        span: 4737..4738,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
        column: 38,
        span: 4738..4739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 177,
        column: 39,
        span: 4739..4740,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 177,
        column: 40,
        span: 4740..4741,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 177,
        column: 41,
        span: 4740..4742,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
        column: 42,
        span: 4742..4743,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 177,
        column: 0,
        span: 4744..4747,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 178,
        column: 10,
        span: 4752..4757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 178,
        column: 12,
        span: 4758..4759,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 178,
        column: 13,
        span: 4759..4760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 178,
        column: 14,
        span: 4760..4761,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 178,
        column: 16,
        span: 4762..4763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 178,
        column: 23,
        span: 4764..4770,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
        column: 24,
        span: 4770..4771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 178,
        column: 27,
        span: 4771..4774,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 178,
        column: 28,
        span: 4774..4775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 178,
        column: 32,
        span: 4776..4779,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
        column: 33,
        span: 4779..4780,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 179,
        column: 11,
        span: 4785..4791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 179,
        column: 13,
        span: 4792..4793,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 179,
        column: 14,
        span: 4793..4794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 179,
        column: 0,
        span: 4794..4795,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 180,
        column: 0,
        span: 4798..4801,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 181,
        column: 0,
        span: 4802..4805,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 182,
        column: 2,
        span: 4806..4807,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 182,
        column: 3,
        span: 4807..4808,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 182,
        column: 4,
        span: 4807..4809,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 182,
        column: 5,
        span: 4809..4810,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 185,
        column: 9,
        span: 4835..4843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 185,
        column: 11,
        span: 4844..4845,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 12,
        span: 4845..4846,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 13,
        span: 4846..4847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 185,
        column: 19,
        span: 4848..4853,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 185,
        column: 20,
        span: 4853..4854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 185,
        column: 23,
        span: 4854..4857,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 185,
        column: 24,
        span: 4857..4858,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 185,
        column: 27,
        span: 4858..4861,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 185,
        column: 28,
        span: 4861..4862,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 185,
        column: 0,
        span: 4863..4866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 186,
        column: 4,
        span: 4867..4870,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 5,
        span: 4870..4871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 186,
        column: 9,
        span: 4872..4875,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 186,
        column: 11,
        span: 4876..4877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 186,
        column: 18,
        span: 4878..4884,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 19,
        span: 4884..4885,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 186,
        column: 20,
        span: 4885..4886,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 21,
        span: 4886..4887,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 186,
        column: 30,
        span: 4888..4896,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 32,
        span: 4897..4898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 186,
        column: 33,
        span: 4898..4899,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 34,
        span: 4899..4900,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 186,
        column: 41,
        span: 4901..4907,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 186,
        column: 43,
        span: 4908..4909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 186,
        column: 46,
        span: 4909..4912,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 186,
        column: 47,
        span: 4912..4913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 186,
        column: 48,
        span: 4913..4914,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 186,
        column: 49,
        span: 4914..4915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 186,
        column: 52,
        span: 4915..4918,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 186,
        column: 54,
        span: 4918..4920,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'y'",
        ),
        line: 186,
        column: 57,
        span: 4920..4923,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 186,
        column: 58,
        span: 4923..4924,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 186,
        column: 62,
        span: 4925..4928,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 63,
        span: 4928..4929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 187,
        column: 7,
        span: 4930..4936,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 187,
        column: 8,
        span: 4936..4937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 187,
        column: 11,
        span: 4937..4940,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 187,
        column: 12,
        span: 4940..4941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 187,
        column: 15,
        span: 4941..4944,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 187,
        column: 18,
        span: 4945..4947,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xy'",
        ),
        line: 187,
        column: 23,
        span: 4948..4952,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 187,
        column: 24,
        span: 4952..4953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 189,
        column: 6,
        span: 4955..4960,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 189,
        column: 7,
        span: 4960..4961,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 189,
        column: 10,
        span: 4961..4964,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 189,
        column: 11,
        span: 4964..4965,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 190,
        column: 12,
        span: 4966..4977,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 13,
        span: 4977..4978,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"syntax error\"",
        ),
        line: 190,
        column: 27,
        span: 4978..4992,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 190,
        column: 28,
        span: 4992..4993,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 190,
        column: 31,
        span: 4994..4996,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 190,
        column: 32,
        span: 4996..4997,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error\"",
        ),
        line: 190,
        column: 40,
        span: 4998..5005,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 190,
        column: 41,
        span: 5005..5006,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 190,
        column: 43,
        span: 5006..5008,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
        column: 44,
        span: 5008..5009,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 191,
        column: 12,
        span: 5010..5021,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 13,
        span: 5021..5022,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1.000\"",
        ),
        line: 191,
        column: 20,
        span: 5022..5029,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 191,
        column: 21,
        span: 5029..5030,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 191,
        column: 24,
        span: 5031..5033,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 191,
        column: 25,
        span: 5033..5034,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1.000\"",
        ),
        line: 191,
        column: 33,
        span: 5035..5042,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 191,
        column: 34,
        span: 5042..5043,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 191,
        column: 36,
        span: 5043..5045,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 37,
        span: 5045..5046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 192,
        column: 12,
        span: 5047..5058,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 13,
        span: 5058..5059,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[[a]]\"",
        ),
        line: 192,
        column: 20,
        span: 5059..5066,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 192,
        column: 21,
        span: 5066..5067,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 192,
        column: 24,
        span: 5068..5070,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 192,
        column: 25,
        span: 5070..5071,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[[a]]\"",
        ),
        line: 192,
        column: 33,
        span: 5072..5079,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 192,
        column: 34,
        span: 5079..5080,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 192,
        column: 36,
        span: 5080..5082,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
        column: 37,
        span: 5082..5083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 193,
        column: 12,
        span: 5084..5095,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 13,
        span: 5095..5096,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'aa'\"",
        ),
        line: 193,
        column: 19,
        span: 5096..5102,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 193,
        column: 20,
        span: 5102..5103,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 193,
        column: 23,
        span: 5104..5106,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 193,
        column: 24,
        span: 5106..5107,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'aa'\"",
        ),
        line: 193,
        column: 31,
        span: 5108..5114,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 193,
        column: 32,
        span: 5114..5115,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 193,
        column: 34,
        span: 5115..5117,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
        column: 35,
        span: 5117..5118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 196,
        column: 12,
        span: 5157..5168,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 196,
        column: 13,
        span: 5168..5169,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\255a = 1\"",
        ),
        line: 196,
        column: 24,
        span: 5169..5180,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 196,
        column: 25,
        span: 5180..5181,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 196,
        column: 28,
        span: 5182..5184,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 196,
        column: 29,
        span: 5184..5185,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\255\"",
        ),
        line: 196,
        column: 36,
        span: 5186..5192,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 196,
        column: 37,
        span: 5192..5193,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 196,
        column: 39,
        span: 5193..5195,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 196,
        column: 40,
        span: 5195..5196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 198,
        column: 5,
        span: 5198..5202,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 198,
        column: 6,
        span: 5202..5203,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'I = loadstring(\"a=9+\"); a=3'",
        ),
        line: 198,
        column: 35,
        span: 5203..5232,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 198,
        column: 36,
        span: 5232..5233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 199,
        column: 7,
        span: 5234..5240,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 199,
        column: 8,
        span: 5240..5241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 199,
        column: 9,
        span: 5241..5242,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 199,
        column: 11,
        span: 5242..5244,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 199,
        column: 12,
        span: 5243..5245,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 199,
        column: 16,
        span: 5246..5249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "I",
        ),
        line: 199,
        column: 18,
        span: 5250..5251,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 199,
        column: 21,
        span: 5252..5254,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 199,
        column: 25,
        span: 5255..5258,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 199,
        column: 26,
        span: 5258..5259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 200,
        column: 6,
        span: 5260..5265,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 7,
        span: 5265..5266,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 200,
        column: 10,
        span: 5266..5269,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 11,
        span: 5269..5270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 202,
        column: 4,
        span: 5272..5275,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 202,
        column: 6,
        span: 5276..5277,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 202,
        column: 0,
        span: 5277..5282,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 203,
        column: 3,
        span: 5283..5285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        line: 203,
        column: 10,
        span: 5286..5292,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 11,
        span: 5292..5293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 203,
        column: 13,
        span: 5293..5295,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 203,
        column: 14,
        span: 5295..5296,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"_soft\"",
        ),
        line: 203,
        column: 22,
        span: 5297..5304,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 23,
        span: 5304..5305,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 203,
        column: 28,
        span: 5306..5310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 203,
        column: 32,
        span: 5311..5314,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 203,
        column: 34,
        span: 5315..5316,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 203,
        column: 38,
        span: 5316..5320,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 203,
        column: 0,
        span: 5321..5324,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 204,
        column: 4,
        span: 5325..5328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 204,
        column: 6,
        span: 5329..5330,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 204,
        column: 7,
        span: 5330..5331,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 8,
        span: 5330..5332,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 9,
        span: 5332..5333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 204,
        column: 12,
        span: 5333..5336,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 204,
        column: 0,
        span: 5337..5339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 205,
        column: 7,
        span: 5342..5346,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 8,
        span: 5346..5347,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a = '",
        ),
        line: 205,
        column: 14,
        span: 5347..5353,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 15,
        span: 5353..5354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 206,
        column: 7,
        span: 5357..5361,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
        column: 8,
        span: 5361..5362,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a = 4+nil'",
        ),
        line: 206,
        column: 19,
        span: 5362..5373,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
        column: 20,
        span: 5373..5374,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 207,
        column: 0,
        span: 5375..5378,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 211,
        column: 6,
        span: 5406..5411,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 211,
        column: 15,
        span: 5412..5420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 211,
        column: 23,
        span: 5421..5428,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 211,
        column: 25,
        span: 5429..5430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "init",
        ),
        line: 211,
        column: 29,
        span: 5430..5434,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 211,
        column: 30,
        span: 5434..5435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 211,
        column: 34,
        span: 5436..5439,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 211,
        column: 35,
        span: 5439..5440,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 212,
        column: 8,
        span: 5443..5448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 212,
        column: 10,
        span: 5449..5450,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 212,
        column: 12,
        span: 5451..5452,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a; \"",
        ),
        line: 212,
        column: 24,
        span: 5453..5464,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 212,
        column: 26,
        span: 5464..5466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "init",
        ),
        line: 212,
        column: 30,
        span: 5466..5470,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 212,
        column: 33,
        span: 5471..5473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 212,
        column: 40,
        span: 5474..5480,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 212,
        column: 41,
        span: 5480..5481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 212,
        column: 44,
        span: 5481..5484,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 45,
        span: 5484..5485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 212,
        column: 48,
        span: 5485..5488,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 212,
        column: 49,
        span: 5488..5489,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "400",
                    after_decimal: "",
                },
            ),
        ),
        line: 212,
        column: 53,
        span: 5489..5493,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 54,
        span: 5493..5494,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 213,
        column: 8,
        span: 5497..5502,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 213,
        column: 10,
        span: 5503..5504,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 213,
        column: 11,
        span: 5504..5505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 213,
        column: 12,
        span: 5505..5506,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 213,
        column: 14,
        span: 5507..5508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        line: 213,
        column: 25,
        span: 5509..5519,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 26,
        span: 5519..5520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 213,
        column: 27,
        span: 5520..5521,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 28,
        span: 5521..5522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 214,
        column: 9,
        span: 5525..5531,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
        column: 10,
        span: 5531..5532,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 214,
        column: 13,
        span: 5532..5535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 214,
        column: 15,
        span: 5536..5537,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 214,
        column: 19,
        span: 5538..5541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 214,
        column: 26,
        span: 5542..5548,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 214,
        column: 27,
        span: 5548..5549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 214,
        column: 31,
        span: 5549..5553,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
        column: 32,
        span: 5553..5554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 214,
        column: 33,
        span: 5554..5555,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 214,
        column: 34,
        span: 5555..5556,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"syntax levels\"",
        ),
        line: 214,
        column: 50,
        span: 5557..5572,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 51,
        span: 5572..5573,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 52,
        span: 5573..5574,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 215,
        column: 0,
        span: 5575..5578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 216,
        column: 8,
        span: 5579..5586,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 9,
        span: 5586..5587,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=\"",
        ),
        line: 216,
        column: 13,
        span: 5587..5591,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 216,
        column: 14,
        span: 5591..5592,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"{\"",
        ),
        line: 216,
        column: 18,
        span: 5593..5596,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 19,
        span: 5596..5597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 217,
        column: 8,
        span: 5598..5605,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 9,
        span: 5605..5606,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=\"",
        ),
        line: 217,
        column: 13,
        span: 5606..5610,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 217,
        column: 14,
        span: 5610..5611,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(\"",
        ),
        line: 217,
        column: 18,
        span: 5612..5615,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 19,
        span: 5615..5616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 218,
        column: 8,
        span: 5617..5624,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
        column: 9,
        span: 5624..5625,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 218,
        column: 11,
        span: 5625..5627,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 218,
        column: 12,
        span: 5627..5628,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a(\"",
        ),
        line: 218,
        column: 17,
        span: 5629..5633,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
        column: 18,
        span: 5633..5634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 219,
        column: 8,
        span: 5635..5642,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
        column: 9,
        span: 5642..5643,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 219,
        column: 11,
        span: 5643..5645,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 219,
        column: 12,
        span: 5645..5646,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"do \"",
        ),
        line: 219,
        column: 18,
        span: 5647..5652,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
        column: 19,
        span: 5652..5653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 220,
        column: 8,
        span: 5654..5661,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 220,
        column: 9,
        span: 5661..5662,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 220,
        column: 11,
        span: 5662..5664,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 220,
        column: 12,
        span: 5664..5665,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"while a do \"",
        ),
        line: 220,
        column: 26,
        span: 5666..5679,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 220,
        column: 27,
        span: 5679..5680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 221,
        column: 8,
        span: 5681..5688,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 9,
        span: 5688..5689,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 221,
        column: 11,
        span: 5689..5691,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 221,
        column: 12,
        span: 5691..5692,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"if a then else \"",
        ),
        line: 221,
        column: 30,
        span: 5693..5710,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 31,
        span: 5710..5711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 222,
        column: 8,
        span: 5712..5719,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
        column: 9,
        span: 5719..5720,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 222,
        column: 11,
        span: 5720..5722,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 222,
        column: 12,
        span: 5722..5723,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function foo () \"",
        ),
        line: 222,
        column: 31,
        span: 5724..5742,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
        column: 32,
        span: 5742..5743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 223,
        column: 8,
        span: 5744..5751,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 223,
        column: 9,
        span: 5751..5752,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=\"",
        ),
        line: 223,
        column: 13,
        span: 5752..5756,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 223,
        column: 14,
        span: 5756..5757,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a..\"",
        ),
        line: 223,
        column: 20,
        span: 5758..5763,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 223,
        column: 21,
        span: 5763..5764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 224,
        column: 8,
        span: 5765..5772,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
        column: 9,
        span: 5772..5773,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=\"",
        ),
        line: 224,
        column: 13,
        span: 5773..5777,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 224,
        column: 14,
        span: 5777..5778,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a^\"",
        ),
        line: 224,
        column: 19,
        span: 5779..5783,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 20,
        span: 5783..5784,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 229,
        column: 6,
        span: 5823..5828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 229,
        column: 9,
        span: 5830..5831,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 229,
        column: 11,
        span: 5832..5833,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function foo ()\\n  local \"",
        ),
        line: 229,
        column: 39,
        span: 5834..5861,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 230,
        column: 4,
        span: 5862..5865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 230,
        column: 6,
        span: 5866..5867,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 230,
        column: 8,
        span: 5868..5869,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 230,
        column: 10,
        span: 5869..5871,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 230,
        column: 11,
        span: 5871..5872,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "70",
                    after_decimal: "",
                },
            ),
        ),
        line: 230,
        column: 13,
        span: 5871..5874,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 230,
        column: 0,
        span: 5875..5877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 231,
        column: 4,
        span: 5880..5881,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 231,
        column: 6,
        span: 5882..5883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 231,
        column: 8,
        span: 5884..5885,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 231,
        column: 10,
        span: 5885..5887,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 231,
        column: 13,
        span: 5887..5890,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 231,
        column: 15,
        span: 5890..5892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 231,
        column: 16,
        span: 5892..5893,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 231,
        column: 18,
        span: 5893..5895,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\", \"",
        ),
        line: 231,
        column: 22,
        span: 5895..5899,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 232,
        column: 0,
        span: 5900..5903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 233,
        column: 2,
        span: 5904..5905,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 233,
        column: 4,
        span: 5906..5907,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 233,
        column: 6,
        span: 5908..5909,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 233,
        column: 8,
        span: 5909..5911,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\\n\"",
        ),
        line: 233,
        column: 13,
        span: 5911..5916,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 234,
        column: 4,
        span: 5917..5920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 234,
        column: 6,
        span: 5921..5922,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 234,
        column: 8,
        span: 5923..5924,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 234,
        column: 10,
        span: 5924..5926,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 234,
        column: 11,
        span: 5926..5927,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "70",
                    after_decimal: "",
                },
            ),
        ),
        line: 234,
        column: 13,
        span: 5926..5929,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 234,
        column: 0,
        span: 5930..5932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 235,
        column: 4,
        span: 5935..5936,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 235,
        column: 6,
        span: 5937..5938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 235,
        column: 8,
        span: 5939..5940,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 235,
        column: 10,
        span: 5940..5942,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function foo\"",
        ),
        line: 235,
        column: 24,
        span: 5942..5956,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 235,
        column: 26,
        span: 5956..5958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 235,
        column: 27,
        span: 5958..5959,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 235,
        column: 29,
        span: 5959..5961,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" ()\\n a\"",
        ),
        line: 235,
        column: 38,
        span: 5961..5970,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 235,
        column: 40,
        span: 5970..5972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 235,
        column: 41,
        span: 5972..5973,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 235,
        column: 43,
        span: 5973..5975,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=3\\n\"",
        ),
        line: 235,
        column: 49,
        span: 5975..5981,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 236,
        column: 0,
        span: 5982..5985,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 237,
        column: 6,
        span: 5986..5991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 237,
        column: 8,
        span: 5992..5993,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 237,
        column: 9,
        span: 5993..5994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 237,
        column: 10,
        span: 5994..5995,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 237,
        column: 12,
        span: 5996..5997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        line: 237,
        column: 23,
        span: 5998..6008,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
        column: 24,
        span: 6008..6009,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 237,
        column: 25,
        span: 6009..6010,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 26,
        span: 6010..6011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 238,
        column: 7,
        span: 6012..6018,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 238,
        column: 8,
        span: 6018..6019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 238,
        column: 14,
        span: 6019..6025,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 238,
        column: 15,
        span: 6025..6026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 238,
        column: 19,
        span: 6026..6030,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 238,
        column: 20,
        span: 6030..6031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 238,
        column: 21,
        span: 6031..6032,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 238,
        column: 22,
        span: 6032..6033,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line 3\"",
        ),
        line: 238,
        column: 31,
        span: 6034..6042,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 238,
        column: 32,
        span: 6042..6043,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 238,
        column: 33,
        span: 6043..6044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 241,
        column: 2,
        span: 6065..6066,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 241,
        column: 4,
        span: 6067..6068,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\nfunction foo ()\\n  local \"",
        ),
        line: 241,
        column: 34,
        span: 6069..6098,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 242,
        column: 4,
        span: 6099..6102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 242,
        column: 6,
        span: 6103..6104,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 242,
        column: 8,
        span: 6105..6106,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 242,
        column: 10,
        span: 6106..6108,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 242,
        column: 11,
        span: 6108..6109,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300",
                    after_decimal: "",
                },
            ),
        ),
        line: 242,
        column: 14,
        span: 6108..6112,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 242,
        column: 0,
        span: 6113..6115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 243,
        column: 4,
        span: 6118..6119,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 243,
        column: 6,
        span: 6120..6121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 243,
        column: 8,
        span: 6122..6123,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 243,
        column: 10,
        span: 6123..6125,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 243,
        column: 13,
        span: 6125..6128,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 243,
        column: 15,
        span: 6128..6130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 243,
        column: 16,
        span: 6130..6131,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 243,
        column: 18,
        span: 6131..6133,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\", \"",
        ),
        line: 243,
        column: 22,
        span: 6133..6137,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 244,
        column: 0,
        span: 6139..6142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 245,
        column: 2,
        span: 6143..6144,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 245,
        column: 4,
        span: 6145..6146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 245,
        column: 6,
        span: 6147..6148,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 245,
        column: 8,
        span: 6148..6150,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\\n\"",
        ),
        line: 245,
        column: 13,
        span: 6150..6155,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 246,
        column: 6,
        span: 6156..6161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 246,
        column: 8,
        span: 6162..6163,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 246,
        column: 9,
        span: 6163..6164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 246,
        column: 10,
        span: 6164..6165,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 246,
        column: 12,
        span: 6166..6167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        line: 246,
        column: 23,
        span: 6168..6178,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 246,
        column: 24,
        span: 6178..6179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 246,
        column: 25,
        span: 6179..6180,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 246,
        column: 26,
        span: 6180..6181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 247,
        column: 7,
        span: 6182..6188,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 8,
        span: 6188..6189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 247,
        column: 14,
        span: 6189..6195,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 247,
        column: 15,
        span: 6195..6196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 247,
        column: 19,
        span: 6196..6200,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 20,
        span: 6200..6201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 247,
        column: 21,
        span: 6201..6202,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 247,
        column: 22,
        span: 6202..6203,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line 2\"",
        ),
        line: 247,
        column: 31,
        span: 6204..6212,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 32,
        span: 6212..6213,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 33,
        span: 6213..6214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 250,
        column: 6,
        span: 6217..6222,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
        column: 7,
        span: 6222..6223,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 250,
        column: 11,
        span: 6223..6227,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
        column: 12,
        span: 6227..6228,
    },
]
