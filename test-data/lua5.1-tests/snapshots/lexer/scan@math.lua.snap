---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.1-tests/math.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 1,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing numbers and math lib\"",
        ),
        line: 1,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 3,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 4,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 4,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 4,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 4,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 4,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 4,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 4,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 4,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 4,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" 3e0 \"",
        ),
        line: 4,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 4,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" 10  \"",
        ),
        line: 4,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 5,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 5,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 5,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 5,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 5,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 5,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 5,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 5,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 5,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 5,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 5,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 5,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 5,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 5,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 5,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 5,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10\"",
        ),
        line: 5,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 5,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 5,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 5,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 6,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 6,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 6,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 6,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 6,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 6,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 6,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 6,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 6,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 6,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 6,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 6,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 6,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 6,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 6,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 6,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 7,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 7,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 7,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 7,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 7,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 7,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" 3e0 \"",
        ),
        line: 7,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 7,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 7,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" 10  \"",
        ),
        line: 7,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 7,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 7,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 7,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 7,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"  10 \"",
        ),
        line: 7,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 8,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 8,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 8,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 8,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 8,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 8,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 8,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 8,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 8,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 9,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 12,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 13,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 13,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 13,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "modf",
        ),
        line: 13,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 13,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 13,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 14,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 14,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 14,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 14,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 14,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 14,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 14,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 15,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 15,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 15,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 15,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 15,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 16,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 16,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 16,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 16,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 16,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 16,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 17,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 19,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 19,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 20,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'#'",
        ),
        line: 20,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 20,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 20,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 20,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 20,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 21,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 21,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 22,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 23,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"***\"",
        ),
        line: 23,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 24,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 27,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 27,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 27,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 27,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 27,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 27,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 28,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 28,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+0.01'",
        ),
        line: 28,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 28,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 28,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 28,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 28,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 28,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+.01'",
        ),
        line: 28,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 28,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".01",
                },
            ),
        ),
        line: 28,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 29,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.01'",
        ),
        line: 29,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 29,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".01",
                },
            ),
        ),
        line: 29,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 29,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-1.'",
        ),
        line: 29,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 29,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 29,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 29,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 30,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+1.'",
        ),
        line: 30,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 30,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 30,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 31,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 31,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+ 0.01'",
        ),
        line: 31,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 31,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 31,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 31,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+.e1'",
        ),
        line: 31,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 31,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 31,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 32,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1e'",
        ),
        line: 32,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 32,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 32,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 32,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1.0e+'",
        ),
        line: 32,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 32,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 32,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 33,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.'",
        ),
        line: 33,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 33,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 33,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 34,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 34,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-12'",
        ),
        line: 34,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 34,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 34,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 34,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 34,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 34,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 35,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 35,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-1.2e2'",
        ),
        line: 35,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 35,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 35,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 35,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 35,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "120",
                    after_decimal: "",
                },
            ),
        ),
        line: 35,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 36,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 36,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 36,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1  a'",
        ),
        line: 36,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 36,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 36,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 37,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 37,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 37,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'e1'",
        ),
        line: 37,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 37,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 37,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 38,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 38,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 38,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'e  1'",
        ),
        line: 38,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 38,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 38,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' 3.4.5 '",
        ),
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 39,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 40,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 40,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 40,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 40,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 40,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 40,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 41,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 41,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 41,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 41,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 41,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 41,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 41,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 41,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 42,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 42,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 42,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  '",
        ),
        line: 42,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 42,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 42,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 43,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 43,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 43,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  '",
        ),
        line: 43,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 43,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 43,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 43,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 43,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 44,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 44,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 44,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'99'",
        ),
        line: 44,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 44,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 44,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 44,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 44,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  1010  '",
        ),
        line: 45,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 45,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 45,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 46,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 46,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'10'",
        ),
        line: 46,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 46,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 49,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 49,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'fFfa'",
        ),
        line: 49,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 49,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 49,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 49,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 49,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 51,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 51,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 51,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 51,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 51,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1'",
        ),
        line: 51,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 51,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 51,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 51,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 51,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 51,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 51,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 51,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 51,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 53,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 53,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ffffFFFF'",
        ),
        line: 53,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 53,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 53,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 53,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 53,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 53,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 53,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 53,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 55,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 55,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 55,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 55,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 55,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 55,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 56,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 56,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 56,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "2",
            },
        ),
        line: 56,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 56,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".01",
                },
            ),
        ),
        line: 56,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 56,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "-2",
            },
        ),
        line: 56,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 57,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1111111111111111",
                    after_decimal: "",
                },
            ),
        ),
        line: 57,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 57,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1111111111111110",
                    after_decimal: "",
                },
            ),
        ),
        line: 57,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 57,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1000",
                    after_decimal: ".00",
                },
                exponent: "-03",
            },
        ),
        line: 57,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 59,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 59,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 59,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1.'",
        ),
        line: 59,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 59,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.1'",
        ),
        line: 59,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 60,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1111111111111111'",
        ),
        line: 60,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 60,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1111111111111110'",
        ),
        line: 60,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 60,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"  +0.001e+3 \\n\\t\"",
        ),
        line: 60,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 62,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 62,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 62,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 62,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 63,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 63,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 63,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 63,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "-10",
            },
        ),
        line: 63,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 63,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 64,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abs",
        ),
        line: 64,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 64,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 64,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 64,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 67,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
                exponent: "-30",
            },
        ),
        line: 67,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 67,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "0",
                    after_decimal: ".9",
                },
                exponent: "-31",
            },
        ),
        line: 67,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 67,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "0",
                    after_decimal: ".9",
                },
                exponent: "30",
            },
        ),
        line: 67,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 67,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
                exponent: "31",
            },
        ),
        line: 67,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 69,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".123456",
                },
            ),
        ),
        line: 69,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 69,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".123455",
                },
            ),
        ),
        line: 69,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 71,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 71,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+1.23E30'",
        ),
        line: 71,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 71,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".23",
                },
            ),
        ),
        line: 71,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 71,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 71,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 74,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 74,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 74,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 74,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 74,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 74,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 74,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 74,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 74,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 74,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 74,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 74,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 74,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 74,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 75,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 75,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 75,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 75,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 75,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 75,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 75,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 75,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 75,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 75,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 75,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 75,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 75,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 75,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 76,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 76,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 76,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 76,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 76,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 76,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 76,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 76,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 76,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 76,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 76,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 76,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 76,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 77,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 77,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 77,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 77,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 77,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 77,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 77,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 77,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 77,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 77,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 77,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 77,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 77,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 78,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 78,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 78,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 78,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 78,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 78,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 78,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 78,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 78,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 78,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 78,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 78,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 78,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 78,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 79,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 79,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 79,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 79,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 79,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 79,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 79,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 79,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 79,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 79,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 79,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 79,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 79,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 79,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 80,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 80,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 80,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 80,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 80,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 80,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 80,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 81,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 81,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 81,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 81,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 81,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 81,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 81,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 81,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 81,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 81,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 81,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 81,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 81,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 84,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 84,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 84,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 84,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 84,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 84,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 84,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 84,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 85,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 85,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 85,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 85,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 85,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 86,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 86,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 86,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 86,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 86,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 86,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 86,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 87,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 87,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 87,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 87,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 87,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 87,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".001",
                },
            ),
        ),
        line: 87,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 87,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".141",
                },
            ),
        ),
        line: 87,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 89,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testbit",
        ),
        line: 89,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 89,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 89,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 90,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 90,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 90,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 90,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 90,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 90,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 90,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 90,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 93,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 93,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 93,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 93,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 93,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: ".8",
                },
            ),
        ),
        line: 93,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 93,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 93,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 93,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cos",
        ),
        line: 93,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 93,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: ".8",
                },
            ),
        ),
        line: 93,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 93,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 93,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 93,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 93,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 94,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 94,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 94,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tan",
        ),
        line: 94,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 94,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 94,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 94,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 94,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 94,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 95,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 95,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 95,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 95,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 95,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 95,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 95,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 95,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 95,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 95,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 95,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 95,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cos",
        ),
        line: 95,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 95,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 95,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 95,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 95,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 95,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 95,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 96,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 96,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 96,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "atan",
        ),
        line: 96,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 96,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 96,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 96,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 96,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 96,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 96,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 96,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "acos",
        ),
        line: 96,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 96,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 96,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 96,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 96,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 96,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 97,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 97,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "asin",
        ),
        line: 97,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 97,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 97,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 97,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 97,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 97,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 98,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 98,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 98,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deg",
        ),
        line: 98,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 98,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 98,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 98,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 98,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 98,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "90",
                    after_decimal: "",
                },
            ),
        ),
        line: 98,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 98,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 98,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rad",
        ),
        line: 98,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "90",
                    after_decimal: "",
                },
            ),
        ),
        line: 98,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 98,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 98,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 98,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 98,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 99,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 99,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abs",
        ),
        line: 99,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 99,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 99,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 99,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 99,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 100,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 100,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 100,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "atan2",
        ),
        line: 100,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 100,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 100,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 100,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 100,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 100,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 100,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 100,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 101,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 101,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 101,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 101,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 101,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 101,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 102,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 102,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 102,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 102,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 102,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 102,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 103,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 103,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mod",
        ),
        line: 103,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 103,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 103,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 103,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 103,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 103,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 104,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 104,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 104,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sqrt",
        ),
        line: 104,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 104,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 104,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 104,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 104,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 104,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 105,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 105,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 105,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log10",
        ),
        line: 105,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 105,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log",
        ),
        line: 105,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 105,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log",
        ),
        line: 105,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 106,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 106,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 106,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "exp",
        ),
        line: 106,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 106,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 107,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 107,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 107,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 107,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 107,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 107,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 107,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 107,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 107,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 107,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 107,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 107,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 108,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 108,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 108,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "frexp",
        ),
        line: 108,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 108,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 108,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 109,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 109,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 109,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ldexp",
        ),
        line: 109,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 109,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 109,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 109,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 109,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 111,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 111,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 111,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tanh",
        ),
        line: 111,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 111,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 111,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sinh",
        ),
        line: 111,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 111,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 111,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cosh",
        ),
        line: 111,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 111,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 113,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 113,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' 1.3e-2 '",
        ),
        line: 113,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 113,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
                exponent: "-2",
            },
        ),
        line: 113,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 114,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 114,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' -1.00000000000001 '",
        ),
        line: 114,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 114,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 114,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".00000000000001",
                },
            ),
        ),
        line: 114,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 118,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8388609",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 118,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 118,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8388609",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 118,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 119,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 119,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8388608",
                    after_decimal: "",
                },
            ),
        ),
        line: 119,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 119,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 119,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8388608",
                    after_decimal: "",
                },
            ),
        ),
        line: 119,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 119,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 119,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 120,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8388607",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 120,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 120,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8388607",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 120,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        line: 122,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 122,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"_soft\"",
        ),
        line: 122,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 122,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 122,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 124,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 124,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpfile",
        ),
        line: 124,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 125,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 125,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 126,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 126,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 126,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = {\"",
        ),
        line: 126,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 127,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 127,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 127,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 129,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 129,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"{\"",
        ),
        line: 129,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 129,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 129,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 129,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\", \"",
        ),
        line: 129,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 129,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cos",
        ),
        line: 129,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 129,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\", \"",
        ),
        line: 129,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 129,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 129,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 129,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"},\\n\"",
        ),
        line: 129,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 130,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 130,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 130,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 131,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 131,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 132,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 132,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 132,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"}\"",
        ),
        line: 132,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 133,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        line: 133,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        line: 133,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 133,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 134,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        line: 134,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 134,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 134,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'*a'",
        ),
        line: 134,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 135,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 135,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 135,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 135,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 135,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 137,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 137,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 137,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 137,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 137,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 137,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 137,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 137,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 137,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 138,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 138,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 138,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 138,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "600",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 138,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 138,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 138,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 138,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 138,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "600",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 139,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 139,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 139,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 139,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "500",
                    after_decimal: "",
                },
            ),
        ),
        line: 139,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 139,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 139,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 139,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 139,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 139,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cos",
        ),
        line: 139,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "500",
                    after_decimal: "",
                },
            ),
        ),
        line: 139,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 140,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 140,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 140,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 140,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "800",
                    after_decimal: "",
                },
            ),
        ),
        line: 140,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 140,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 140,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 140,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 140,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 140,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cos",
        ),
        line: 140,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "800",
                    after_decimal: "",
                },
            ),
        ),
        line: 140,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 141,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 141,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 141,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 141,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 141,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 141,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 141,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 141,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 141,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 141,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 141,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 141,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 141,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 142,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 142,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 142,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 142,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 142,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 142,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 142,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 142,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 142,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 142,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 142,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 142,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 142,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 142,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".001",
                },
            ),
        ),
        line: 142,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 142,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 143,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 143,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 143,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 143,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 145,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 146,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 146,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "500",
            },
        ),
        line: 146,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 146,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "400",
            },
        ),
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 147,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 147,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 147,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 148,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 148,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 148,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 148,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 149,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 149,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 149,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 149,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 150,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 150,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 150,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 150,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 151,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 151,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 151,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 151,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 152,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 152,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 152,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 152,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 153,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 153,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 153,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 153,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 154,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 154,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 154,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 155,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 155,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 155,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 155,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 155,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 155,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 155,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 155,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 155,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 156,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 156,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 156,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 156,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 156,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 156,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 157,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 157,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 157,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 157,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 158,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 158,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 158,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 158,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 158,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 158,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 158,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 158,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 158,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 159,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 159,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 159,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 159,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 159,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 159,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 159,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 162,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"checktable\"",
        ),
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stat",
        ),
        line: 163,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 163,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 165,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 165,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 165,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 169,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 169,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 169,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'10'",
        ),
        line: 169,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'20'",
        ),
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 170,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 170,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 170,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 170,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 170,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 170,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 170,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 170,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 170,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 170,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 170,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 170,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 170,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 170,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 170,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 170,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 170,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 170,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 170,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 171,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 171,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'10'",
        ),
        line: 171,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 171,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 171,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'20'",
        ),
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 174,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "randomseed",
        ),
        line: 174,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 176,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 176,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Max",
        ),
        line: 177,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 177,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 177,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Min",
        ),
        line: 178,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 178,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 178,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 179,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 180,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 180,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Max",
        ),
        line: 181,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 181,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 181,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Max",
        ),
        line: 181,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 181,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Min",
        ),
        line: 182,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 182,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 182,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Min",
        ),
        line: 182,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 182,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 183,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 183,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 183,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "flag",
        ),
        line: 184,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 184,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Max",
        ),
        line: 184,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 184,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".001",
                },
            ),
        ),
        line: 184,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 184,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Min",
        ),
        line: 184,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 184,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".001",
                },
            ),
        ),
        line: 184,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "flag",
        ),
        line: 185,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 185,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 185,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 186,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 186,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Min",
        ),
        line: 186,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Max",
        ),
        line: 186,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 186,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 186,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 187,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "flag",
        ),
        line: 187,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 187,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 187,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 189,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 189,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 189,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 189,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 189,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 189,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 190,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 190,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 190,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 190,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 191,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 191,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 191,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 191,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 191,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 194,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 194,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Max",
        ),
        line: 195,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 195,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 195,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Min",
        ),
        line: 196,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 196,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 196,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 197,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 198,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 198,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 198,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 198,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 198,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 198,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 198,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 198,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Max",
        ),
        line: 199,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 199,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 199,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Max",
        ),
        line: 199,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 199,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Min",
        ),
        line: 200,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 200,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 200,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Min",
        ),
        line: 200,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 200,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 201,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 201,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 201,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "flag",
        ),
        line: 202,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 202,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Max",
        ),
        line: 202,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 202,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 202,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Min",
        ),
        line: 202,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 202,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 202,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 202,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "flag",
        ),
        line: 203,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 203,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 203,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 204,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 204,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Min",
        ),
        line: 204,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Max",
        ),
        line: 204,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 204,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 205,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "flag",
        ),
        line: 205,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 208,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 208,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
    },
]
