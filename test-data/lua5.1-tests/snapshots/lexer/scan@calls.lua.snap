---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.1-tests/calls.lua
---
[
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 1,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 1,
    },
    Token {
        kind: String,
        lexeme: "\"testing functions and calls\"",
        line: 1,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 1,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 5,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 5,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 5,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 5,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 5,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 5,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 5,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 5,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 5,
    },
    Token {
        kind: String,
        lexeme: "'boolean'",
        line: 5,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 6,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 6,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 6,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 6,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 6,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 6,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 6,
    },
    Token {
        kind: String,
        lexeme: "'boolean'",
        line: 6,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 6,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 6,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 6,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 6,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 6,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 6,
    },
    Token {
        kind: String,
        lexeme: "'boolean'",
        line: 6,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 7,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 7,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 7,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 7,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 7,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 7,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 7,
    },
    Token {
        kind: String,
        lexeme: "'nil'",
        line: 7,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 7,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 7,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 7,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 7,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 7,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 7,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 7,
    },
    Token {
        kind: String,
        lexeme: "'number'",
        line: 7,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 7,
    },
    Token {
        kind: String,
        lexeme: "'x'",
        line: 7,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 7,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 7,
    },
    Token {
        kind: String,
        lexeme: "'string'",
        line: 7,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 8,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 8,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 8,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 8,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 8,
    },
    Token {
        kind: String,
        lexeme: "'table'",
        line: 8,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 8,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 8,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 8,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 8,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 8,
    },
    Token {
        kind: String,
        lexeme: "'function'",
        line: 8,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 10,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 10,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 10,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 10,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 10,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 10,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 10,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 10,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 11,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 11,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 11,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 12,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 12,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 12,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 12,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 12,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 12,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 12,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 13,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 13,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 13,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 13,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 13,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 13,
    },
    Token {
        kind: String,
        lexeme: "'function'",
        line: 13,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "fact",
        line: 17,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 17,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 17,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 18,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "res",
        line: 19,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 19,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 19,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 20,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "fact",
        line: 20,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 20,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 20,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 21,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "n=",
        line: 21,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 21,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 21,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 21,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "res",
        line: 21,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 22,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 22,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "fact",
        line: 22,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 22,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 22,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 22,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 22,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 23,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 25,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "fact",
        line: 25,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 25,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 25,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 25,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 25,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 25,
    },
    Token {
        kind: Number,
        lexeme: "120",
        line: 25,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 25,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 27,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "fact",
        line: 27,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 27,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 27,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 27,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 30,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 30,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 30,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 30,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 30,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "self",
        line: 31,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 31,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 31,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 32,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 32,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 32,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 32,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 32,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "self",
        line: 32,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 32,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 32,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 33,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 33,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 33,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 33,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 33,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "self",
        line: 33,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 35,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 35,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 35,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 35,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 35,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 35,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 35,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 35,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 35,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 35,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 35,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 35,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 35,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 35,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 37,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 37,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 37,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 37,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 37,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 37,
    },
    Token {
        kind: Number,
        lexeme: "100",
        line: 37,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 38,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 38,
    },
    Token {
        kind: String,
        lexeme: "\"t\"",
        line: 38,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 38,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 38,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 38,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 38,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "self",
        line: 38,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 38,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 38,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 38,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "self",
        line: 38,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 38,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 38,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 38,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 40,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 40,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 40,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 40,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 40,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 40,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 40,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 40,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 40,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 40,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 40,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 40,
    },
    Token {
        kind: Number,
        lexeme: "95",
        line: 40,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 40,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 42,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 43,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 43,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 43,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 43,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 43,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 43,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 44,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "add",
        line: 44,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 44,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "self",
        line: 44,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 44,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 44,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 44,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "self",
        line: 44,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 44,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 44,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 44,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 44,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 44,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "self",
        line: 44,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 45,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "add",
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 45,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 45,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "add",
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 45,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 45,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "add",
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 45,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 45,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 45,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 45,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 45,
    },
    Token {
        kind: Number,
        lexeme: "60",
        line: 45,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 45,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 45,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 45,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 45,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 45,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 46,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 48,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 48,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 48,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 48,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 48,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 48,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 48,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 48,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 48,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 48,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 50,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 50,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 50,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "f1",
        line: 50,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 50,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 50,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 50,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 50,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 50,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 50,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 51,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 51,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 51,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "f2",
        line: 51,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 51,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 51,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "self",
        line: 51,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 51,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 51,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 51,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 52,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 52,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 52,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 52,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "f1",
        line: 52,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 52,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 52,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 52,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 52,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 52,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 52,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 53,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 53,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 53,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "f2",
        line: 53,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 53,
    },
    Token {
        kind: String,
        lexeme: "'k'",
        line: 53,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 53,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 53,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 53,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 53,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 53,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 53,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 53,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 53,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 53,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 53,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 53,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 55,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 55,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 55,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 55,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 57,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 57,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 57,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 58,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 58,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 58,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 58,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 58,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 58,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 58,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 58,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 58,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 58,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 58,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 58,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 58,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 58,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 58,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 60,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 61,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 61,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 61,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 62,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 62,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 62,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 62,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 62,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 62,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 62,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 62,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 62,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 62,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 62,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 62,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 62,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 62,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 62,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 62,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 62,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 62,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 62,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 62,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 62,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 62,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 62,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 62,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 62,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 62,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 62,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 62,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 62,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 63,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 63,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 63,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 63,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 63,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 63,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 64,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 64,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 64,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 65,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 65,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 65,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 65,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 65,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 65,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 65,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 65,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 65,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 65,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 65,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 65,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 65,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 65,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 65,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 65,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 65,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 65,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 65,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 65,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 65,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 65,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 65,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 65,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 65,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 65,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 65,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 65,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 65,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 65,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "fat",
        line: 67,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 67,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 67,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 68,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: " <",
        line: 68,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 68,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 68,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 68,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 68,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 68,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 69,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 69,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 69,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 69,
    },
    Token {
        kind: String,
        lexeme: "\"return fat(\"",
        line: 69,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 69,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 69,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 69,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 69,
    },
    Token {
        kind: String,
        lexeme: "\")\"",
        line: 69,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 69,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 69,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 69,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 70,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 73,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 73,
    },
    Token {
        kind: String,
        lexeme: "\"loadstring 'assert(fat(6)==720)' () \"",
        line: 73,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 73,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 73,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 74,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 74,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 74,
    },
    Token {
        kind: String,
        lexeme: "'return fat(5), 3'",
        line: 74,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 75,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 75,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 75,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 75,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 76,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 76,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 76,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 76,
    },
    Token {
        kind: Number,
        lexeme: "120",
        line: 76,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 76,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 76,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 76,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 76,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 77,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 77,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 77,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 77,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "err_on_n",
        line: 79,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 79,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 79,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 80,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "n=",
        line: 80,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 80,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 80,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "error",
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 80,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "exit",
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 80,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 80,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 80,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "err_on_n",
        line: 81,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 81,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 81,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 81,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 81,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "exit",
        line: 81,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 81,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 81,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 81,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 81,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 82,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 83,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 85,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "dummy",
        line: 86,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 86,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 86,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 87,
    },
    Token {
        kind: GreaterThan,
        lexeme: ">",
        line: 87,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 87,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 88,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 88,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 88,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "err_on_n",
        line: 88,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 88,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 88,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "dummy",
        line: 89,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 89,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 89,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 89,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 89,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 90,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 91,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "dummy",
        line: 94,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 94,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 94,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 94,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "deep",
        line: 96,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 96,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 96,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 97,
    },
    Token {
        kind: GreaterThan,
        lexeme: ">",
        line: 97,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 97,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "deep",
        line: 97,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 97,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 97,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 97,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 97,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 97,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "deep",
        line: 99,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 99,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 99,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: "deep",
        line: 100,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 100,
    },
    Token {
        kind: Number,
        lexeme: "200",
        line: 100,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 100,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: "deep",
        line: 103,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 103,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 103,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 103,
    },
    Token {
        kind: GreaterThan,
        lexeme: ">",
        line: 103,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 103,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 103,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: "deep",
        line: 103,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 103,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 103,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 103,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 103,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 103,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 103,
    },
    Token {
        kind: Number,
        lexeme: "101",
        line: 103,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 103,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 104,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: "deep",
        line: 104,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 104,
    },
    Token {
        kind: Number,
        lexeme: "30000",
        line: 104,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 104,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 104,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 104,
    },
    Token {
        kind: Number,
        lexeme: "101",
        line: 104,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 105,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 105,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 105,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 105,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 106,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "deep",
        line: 106,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 106,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 106,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 106,
    },
    Token {
        kind: GreaterThan,
        lexeme: ">",
        line: 106,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 106,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 106,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "self",
        line: 106,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "deep",
        line: 106,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 106,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 106,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 106,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 106,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 106,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 106,
    },
    Token {
        kind: Number,
        lexeme: "101",
        line: 106,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 106,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 107,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 107,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: "deep",
        line: 107,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 107,
    },
    Token {
        kind: Number,
        lexeme: "30000",
        line: 107,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 107,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 107,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 107,
    },
    Token {
        kind: Number,
        lexeme: "101",
        line: 107,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 109,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 109,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 109,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 112,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 112,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 112,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 113,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 113,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 113,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 113,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 113,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 113,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 113,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 113,
    },
    Token {
        kind: Number,
        lexeme: "23",
        line: 113,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 114,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 114,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 114,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 114,
    },
    Token {
        kind: Number,
        lexeme: "23",
        line: 114,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 114,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 114,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 114,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 114,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 114,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 114,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 114,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 114,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 114,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 114,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 114,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 114,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 114,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 114,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 114,
    },
    Token {
        kind: Number,
        lexeme: "40",
        line: 114,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 114,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 117,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 117,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        line: 117,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 118,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 118,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 118,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 118,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 118,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 118,
    },
    Token {
        kind: Number,
        lexeme: "2000",
        line: 118,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 119,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 119,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 119,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 119,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 119,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 119,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 119,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 119,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 120,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "select",
        line: 120,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 120,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 120,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 120,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 120,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 120,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 120,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 120,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "select",
        line: 120,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 120,
    },
    Token {
        kind: String,
        lexeme: "'#'",
        line: 120,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 120,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 120,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 120,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 120,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 120,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 120,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 121,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 121,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 121,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 122,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 122,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 122,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 122,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 122,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 123,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 123,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 123,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 123,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 123,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 124,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 124,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "getn",
        line: 124,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 124,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 124,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 124,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 124,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 124,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 124,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 124,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 124,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 124,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 124,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 124,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 124,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 124,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 124,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 124,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 124,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 125,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 125,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 125,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 125,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 125,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 125,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 125,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 125,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 126,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 126,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "getn",
        line: 126,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 126,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 126,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 126,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 126,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 126,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 126,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 126,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 126,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 126,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 126,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 126,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 126,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 126,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 126,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 126,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 126,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 126,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 126,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 126,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 127,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 127,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 127,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 127,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 127,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 127,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 127,
    },
    Token {
        kind: Number,
        lexeme: "6",
        line: 127,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 127,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 128,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        line: 128,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 128,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 128,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 128,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 128,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 128,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 129,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 129,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 129,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 129,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 129,
    },
    Token {
        kind: Number,
        lexeme: "11",
        line: 129,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 129,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 129,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 129,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 130,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        line: 130,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 130,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 130,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 130,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 130,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 130,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 131,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 131,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 131,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 131,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 131,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 131,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 131,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 131,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 132,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 132,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 132,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 132,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 132,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 132,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 132,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 132,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 132,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 133,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 133,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        line: 133,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 133,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 133,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 133,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 133,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 133,
    },
    Token {
        kind: Number,
        lexeme: "11",
        line: 133,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 134,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 134,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 134,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 134,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 134,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 134,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 134,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 134,
    },
    Token {
        kind: Number,
        lexeme: "11",
        line: 134,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        line: 134,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 134,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 134,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 134,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 135,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 135,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 135,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 135,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 135,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 136,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 136,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "a=",
        line: 136,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 136,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 136,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 136,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "x=",
        line: 136,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 136,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 136,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 137,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 137,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 137,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 137,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 137,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 137,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 137,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 137,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 137,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 137,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 137,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 137,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 137,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 138,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 138,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "a=",
        line: 138,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 138,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 138,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 138,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "x=",
        line: 138,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 138,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 138,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "Y",
        line: 144,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 144,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 144,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "le",
        line: 144,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 144,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 145,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 145,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 145,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 145,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "le",
        line: 146,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 146,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 146,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 146,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 146,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 146,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 146,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 146,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 146,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 146,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 146,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 146,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 147,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 148,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 148,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 148,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 148,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 148,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: "F",
        line: 154,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 154,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 154,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 154,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 154,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 155,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 155,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 155,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 155,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 156,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 156,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 156,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 156,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 156,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 156,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 156,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 157,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 157,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 157,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 157,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 157,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 157,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 157,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 157,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 158,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: "fat",
        line: 161,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: "Y",
        line: 161,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: "F",
        line: 161,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 163,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "fat",
        line: 163,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 163,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 163,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 163,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 163,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 163,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 163,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "fat",
        line: 163,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 163,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 163,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 163,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 163,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 163,
    },
    Token {
        kind: Number,
        lexeme: "24",
        line: 163,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "Y",
        line: 163,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "F",
        line: 163,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 163,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 163,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 163,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 163,
    },
    Token {
        kind: DoubleEquals,
        lexeme: ")=",
        line: 163,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 163,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 163,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "Y",
        line: 163,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "F",
        line: 163,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 163,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 163,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 163,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 163,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 163,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 165,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: "g",
        line: 165,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        line: 165,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 165,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 166,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 166,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 166,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 166,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 166,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 166,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 166,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 167,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 167,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 167,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 167,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 167,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 167,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 167,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 167,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 167,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 167,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 167,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 167,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        line: 167,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 167,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 168,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 169,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        line: 169,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        line: 169,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 169,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 169,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        line: 169,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 169,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 169,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        line: 169,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 169,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 169,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 169,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 172,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "g",
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 172,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 173,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 173,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 173,
    },
    Token {
        kind: Number,
        lexeme: "9",
        line: 173,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 173,
    },
    Token {
        kind: Number,
        lexeme: "16",
        line: 173,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 173,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 173,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 173,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 173,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 173,
    },
    Token {
        kind: Number,
        lexeme: "11",
        line: 173,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 173,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 173,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 173,
    },
    Token {
        kind: Number,
        lexeme: "13",
        line: 173,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 173,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 173,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 173,
    },
    Token {
        kind: Number,
        lexeme: "9",
        line: 173,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 173,
    },
    Token {
        kind: Number,
        lexeme: "16",
        line: 173,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 173,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 173,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: "Y",
        line: 175,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: "F",
        line: 175,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 175,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 175,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 176,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 176,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "unlpack",
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 180,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 181,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 181,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 181,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 181,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 182,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 182,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: " <",
        line: 182,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 182,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: "getn",
        line: 182,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 182,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 182,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 182,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 182,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 183,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 183,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 183,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 183,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 183,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 183,
    },
    Token {
        kind: Identifier,
        lexeme: "unlpack",
        line: 183,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 183,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 183,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 183,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 183,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 183,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 183,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 183,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 184,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 185,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: "equaltab",
        line: 187,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: "t1",
        line: 187,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: "t2",
        line: 187,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 188,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 188,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: "getn",
        line: 188,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: "t1",
        line: 188,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 188,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 188,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 188,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: "getn",
        line: 188,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: "t2",
        line: 188,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 188,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 188,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 189,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: "v1",
        line: 189,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: "ipairs",
        line: 189,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: "t1",
        line: 189,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 189,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 190,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: "v1",
        line: 190,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 190,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: "t2",
        line: 190,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 190,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 190,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 190,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 191,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 192,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 194,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 194,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 194,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 194,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 194,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 194,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 195,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 195,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 195,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 195,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 195,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 195,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 196,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 196,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 196,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 196,
    },
    Token {
        kind: Identifier,
        lexeme: "select",
        line: 196,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 196,
    },
    Token {
        kind: String,
        lexeme: "'#'",
        line: 196,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 196,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 196,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 196,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 197,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 197,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 198,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 200,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 200,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 200,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 200,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 200,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 200,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 200,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 200,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 200,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 200,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 200,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 200,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 201,
    },
    Token {
        kind: Identifier,
        lexeme: "ret2",
        line: 201,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 201,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 201,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 201,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 201,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 201,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 201,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 201,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 201,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 201,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 201,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 203,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 203,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 203,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 203,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: "unlpack",
        line: 203,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 203,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 203,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 203,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 203,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 203,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 203,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 204,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 204,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "a=",
        line: 204,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 204,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 204,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 204,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "b=",
        line: 204,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 204,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 204,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 204,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "c=",
        line: 204,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 204,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 204,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 204,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "d=",
        line: 204,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 204,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 204,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 205,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 205,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 205,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 205,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 205,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 205,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 205,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 205,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 205,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 205,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 205,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 205,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 205,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 205,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 205,
    },
    Token {
        kind: String,
        lexeme: "'alo'",
        line: 205,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 205,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 205,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 205,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 205,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 205,
    },
    Token {
        kind: Identifier,
        lexeme: "equaltab",
        line: 206,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 206,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 206,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 206,
    },
    Token {
        kind: Identifier,
        lexeme: "unlpack",
        line: 206,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 206,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 206,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 206,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 206,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 206,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 206,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 206,
    },
    Token {
        kind: Identifier,
        lexeme: "equaltab",
        line: 207,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 207,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: "unlpack",
        line: 207,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 207,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 207,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 207,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 207,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 207,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 207,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 207,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 207,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 207,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 207,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 207,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 207,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 207,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 208,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 208,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 208,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 208,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: "ret2",
        line: 208,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 208,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 208,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 208,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 208,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: "ret2",
        line: 208,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 208,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 208,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 208,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 209,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 209,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "a=",
        line: 209,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 209,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 209,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 209,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "b=",
        line: 209,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 209,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 209,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 209,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "c=",
        line: 209,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 209,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 209,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 209,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "d=",
        line: 209,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 209,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 209,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 210,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 210,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 210,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 210,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "unlpack",
        line: 210,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 210,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "ret2",
        line: 210,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 210,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 210,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 210,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 210,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "ret2",
        line: 210,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 210,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 210,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 210,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 210,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 210,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 211,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 211,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 211,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "a=",
        line: 211,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 211,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 211,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 211,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 211,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "b=",
        line: 211,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 211,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 211,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 211,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 211,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "c=",
        line: 211,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 211,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 211,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 211,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 211,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "d=",
        line: 211,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 211,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 211,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 211,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 212,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 212,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 212,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 212,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: "unlpack",
        line: 212,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 212,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: "ret2",
        line: 212,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 212,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 212,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 212,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 212,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 212,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: "ret2",
        line: 212,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 212,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 212,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 212,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 212,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 212,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 212,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 213,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 213,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 213,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "a=",
        line: 213,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 213,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 213,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 213,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 213,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "b=",
        line: 213,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 213,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 213,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 213,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 213,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "c=",
        line: 213,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 213,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 213,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 213,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 213,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "d=",
        line: 213,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 213,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 213,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 213,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 215,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 215,
    },
    Token {
        kind: Identifier,
        lexeme: "ret2",
        line: 215,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 215,
    },
    Token {
        kind: Identifier,
        lexeme: "unlpack",
        line: 215,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 215,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 215,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 215,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 215,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 215,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 215,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 215,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 215,
    },
    Token {
        kind: Identifier,
        lexeme: "unlpack",
        line: 215,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 215,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 215,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 215,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 215,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 215,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 215,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 215,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 215,
    },
    Token {
        kind: Identifier,
        lexeme: "unlpack",
        line: 215,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 215,
    },
    Token {
        kind: String,
        lexeme: "\"a\"",
        line: 215,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 215,
    },
    Token {
        kind: String,
        lexeme: "\"b\"",
        line: 215,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 215,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 215,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 216,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 216,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 216,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 216,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 216,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 216,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 216,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 216,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 216,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 216,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 216,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 216,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 216,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 216,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 216,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 216,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 216,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 216,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 216,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 216,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 216,
    },
    Token {
        kind: String,
        lexeme: "\"a\"",
        line: 216,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 216,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 216,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 216,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 216,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 216,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 216,
    },
    Token {
        kind: String,
        lexeme: "\"b\"",
        line: 216,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: "rawget",
        line: 220,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 220,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 220,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 220,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 220,
    },
    Token {
        kind: String,
        lexeme: "\"x\"",
        line: 220,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 220,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 220,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 220,
    },
    Token {
        kind: Identifier,
        lexeme: "rawset",
        line: 221,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 221,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 221,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 221,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 221,
    },
    Token {
        kind: String,
        lexeme: "\"x\"",
        line: 221,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 221,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 221,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 221,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 221,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 222,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: "math",
        line: 222,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: "sin",
        line: 222,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 222,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 222,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 222,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 222,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 222,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 222,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: "math",
        line: 222,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: "sin",
        line: 222,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 222,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 222,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 222,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 223,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 223,
    },
    Token {
        kind: Identifier,
        lexeme: "sort",
        line: 223,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 223,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 223,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 223,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 223,
    },
    Token {
        kind: Number,
        lexeme: "9",
        line: 223,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 223,
    },
    Token {
        kind: Number,
        lexeme: "8",
        line: 223,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 223,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 223,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 223,
    },
    Token {
        kind: Number,
        lexeme: "19",
        line: 223,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 223,
    },
    Token {
        kind: Number,
        lexeme: "23",
        line: 223,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 223,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 223,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 223,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 223,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 223,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 223,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 223,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 223,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 223,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 223,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 223,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 223,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 223,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 223,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 223,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 223,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 223,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 223,
    },
    Token {
        kind: String,
        lexeme: "\"extra arg\"",
        line: 223,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 223,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 227,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 227,
    },
    Token {
        kind: String,
        lexeme: "\"-- a comment\\0\\0\\0\\n  x = 10 + \\n23; \\\n     local a = function () x = 'hi' end; \\\n     return '\\0'\"",
        line: 229,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 230,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 230,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 230,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 231,
    },
    Token {
        kind: Identifier,
        lexeme: "read1",
        line: 231,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 231,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 231,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 231,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 232,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 232,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 232,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 233,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 233,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 234,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 234,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 234,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 234,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 235,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: "sub",
        line: 235,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 235,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 235,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 235,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 235,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 236,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 237,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 239,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 239,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 239,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: "read1",
        line: 239,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 239,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 239,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 239,
    },
    Token {
        kind: String,
        lexeme: "\"modname\"",
        line: 239,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 239,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 240,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 240,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 240,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 240,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 240,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 240,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 240,
    },
    Token {
        kind: String,
        lexeme: "\"\\0\"",
        line: 240,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 240,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 240,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 240,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 240,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 240,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 240,
    },
    Token {
        kind: Number,
        lexeme: "33",
        line: 240,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 240,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 241,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 241,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: "getinfo",
        line: 241,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 241,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 241,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: "source",
        line: 241,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 241,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 241,
    },
    Token {
        kind: String,
        lexeme: "\"modname\"",
        line: 241,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 243,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 243,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: "dump",
        line: 243,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 243,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 243,
    },
    Token {
        kind: String,
        lexeme: "\"x = 1; return x\"",
        line: 243,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 243,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 244,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 244,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 244,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 245,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 245,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 245,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: "read1",
        line: 245,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 245,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 245,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 245,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 246,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 246,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 246,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 246,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 246,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 246,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 246,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 246,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 246,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 246,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 246,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 246,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 248,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 248,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 248,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 249,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 249,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 249,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: "read1",
        line: 249,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 249,
    },
    Token {
        kind: String,
        lexeme: "\"*a = 123\"",
        line: 249,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 249,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 250,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 250,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 250,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 250,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 250,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 250,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 250,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 250,
    },
    Token {
        kind: String,
        lexeme: "\"string\"",
        line: 250,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 250,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 250,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 250,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 250,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 252,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 252,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 252,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 252,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 252,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 252,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: "error",
        line: 252,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 252,
    },
    Token {
        kind: String,
        lexeme: "\"hhi\"",
        line: 252,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 252,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 252,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 253,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 253,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 253,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 253,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 253,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 253,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 253,
    },
    Token {
        kind: String,
        lexeme: "\"hhi\"",
        line: 253,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 253,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 256,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 256,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\n  return function (x)\n    return function (y)\n     return function (z)\n       return x+y+z\n     end\n   end\n  end\n]]",
        line: 264,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 266,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 266,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 266,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 266,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 266,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 266,
    },
    Token {
        kind: Identifier,
        lexeme: "read1",
        line: 266,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 266,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 266,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 266,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 266,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 266,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 267,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 267,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 267,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 267,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 267,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 267,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 267,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 267,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 267,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 267,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 267,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 267,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 267,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 267,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 267,
    },
    Token {
        kind: Number,
        lexeme: "15",
        line: 267,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 267,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 271,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 271,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 271,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 271,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 271,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 272,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 272,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 272,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 272,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 272,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 272,
    },
    Token {
        kind: Identifier,
        lexeme: "dump",
        line: 272,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 272,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 272,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 272,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 272,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 272,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 273,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 273,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 273,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 273,
    },
    Token {
        kind: String,
        lexeme: "\"set\"",
        line: 273,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 273,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 273,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 273,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 273,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 273,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 273,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 273,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 273,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 273,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 273,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 273,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 273,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 273,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 274,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 274,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 275,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 276,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 276,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 277,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 277,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 277,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 277,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 277,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 277,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 277,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 278,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 278,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: "setupvalue",
        line: 278,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 278,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 278,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 278,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 278,
    },
    Token {
        kind: String,
        lexeme: "\"hi\"",
        line: 278,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 278,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 278,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 278,
    },
    Token {
        kind: String,
        lexeme: "\"a\"",
        line: 278,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 279,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 279,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 279,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 279,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 279,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 279,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 279,
    },
    Token {
        kind: String,
        lexeme: "\"hi\"",
        line: 279,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 279,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 280,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 280,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 280,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 280,
    },
    Token {
        kind: Identifier,
        lexeme: "setupvalue",
        line: 280,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 280,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 280,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 280,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 280,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 280,
    },
    Token {
        kind: Number,
        lexeme: "13",
        line: 280,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 280,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 280,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 280,
    },
    Token {
        kind: String,
        lexeme: "\"b\"",
        line: 280,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 280,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 281,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 281,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 281,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: "setupvalue",
        line: 281,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 281,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 281,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 281,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 281,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 281,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 281,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 282,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 282,
    },
    Token {
        kind: String,
        lexeme: "\"set\"",
        line: 282,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 282,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 283,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 283,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 283,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 283,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 283,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 283,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 283,
    },
    Token {
        kind: Number,
        lexeme: "23",
        line: 283,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 283,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 284,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 284,
    },
    Token {
        kind: String,
        lexeme: "\"set\"",
        line: 284,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 284,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 285,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 285,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 285,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 285,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 285,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 285,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 285,
    },
    Token {
        kind: Number,
        lexeme: "24",
        line: 285,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 285,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 289,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 289,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 289,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 289,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 289,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 289,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 289,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 289,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 289,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 289,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 289,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 289,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 289,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 289,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 289,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 289,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 290,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 290,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 290,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 290,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 290,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 290,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 290,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 290,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 290,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 290,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 290,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 290,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 290,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 290,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 290,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 290,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 290,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 290,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 290,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 290,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 291,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 291,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 291,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 291,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 291,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 291,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 291,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 291,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 291,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 291,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 291,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 291,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 291,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 291,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 291,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 291,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 291,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 293,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 293,
    },
    Token {
        kind: String,
        lexeme: "'OK'",
        line: 293,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 293,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: "deep",
        line: 294,
    },
]
