---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.1-tests/calls.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 1,
        column: 5,
        span: 0..5,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1,
        column: 6,
        span: 5..6,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing functions and calls\"",
        ),
        line: 1,
        column: 35,
        span: 6..35,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1,
        column: 36,
        span: 35..36,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 5,
        column: 7,
        span: 84..90,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 5,
        column: 8,
        span: 90..91,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 5,
        column: 12,
        span: 91..95,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 5,
        column: 13,
        span: 95..96,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 5,
        column: 14,
        span: 95..97,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 5,
        column: 15,
        span: 97..98,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 5,
        column: 16,
        span: 97..99,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 5,
        column: 17,
        span: 99..100,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 5,
        column: 20,
        span: 101..103,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'boolean'",
        ),
        line: 5,
        column: 30,
        span: 104..113,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 5,
        column: 31,
        span: 113..114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 6,
        column: 7,
        span: 115..121,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 6,
        column: 8,
        span: 121..122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 6,
        column: 12,
        span: 122..126,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 6,
        column: 13,
        span: 126..127,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 6,
        column: 17,
        span: 127..131,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 6,
        column: 18,
        span: 131..132,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 6,
        column: 21,
        span: 133..135,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'boolean'",
        ),
        line: 6,
        column: 31,
        span: 136..145,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 6,
        column: 35,
        span: 146..149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 6,
        column: 40,
        span: 150..154,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 6,
        column: 41,
        span: 154..155,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 6,
        column: 46,
        span: 155..160,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 6,
        column: 47,
        span: 160..161,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 6,
        column: 50,
        span: 162..164,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'boolean'",
        ),
        line: 6,
        column: 60,
        span: 165..174,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 6,
        column: 61,
        span: 174..175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 7,
        column: 7,
        span: 176..182,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 7,
        column: 8,
        span: 182..183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 7,
        column: 12,
        span: 183..187,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 7,
        column: 13,
        span: 187..188,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 7,
        column: 16,
        span: 188..191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 7,
        column: 17,
        span: 191..192,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 7,
        column: 20,
        span: 193..195,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'nil'",
        ),
        line: 7,
        column: 26,
        span: 196..201,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 7,
        column: 30,
        span: 202..205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 7,
        column: 35,
        span: 206..210,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 7,
        column: 36,
        span: 210..211,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 7,
        column: 37,
        span: 211..212,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 7,
        column: 38,
        span: 211..213,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 7,
        column: 39,
        span: 213..214,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 7,
        column: 42,
        span: 215..217,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'number'",
        ),
        line: 7,
        column: 51,
        span: 218..226,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 7,
        column: 55,
        span: 227..230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 7,
        column: 60,
        span: 231..235,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 7,
        column: 63,
        span: 235..238,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 7,
        column: 66,
        span: 239..241,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 7,
        column: 75,
        span: 242..250,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 7,
        column: 0,
        span: 251..254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 8,
        column: 12,
        span: 262..266,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 8,
        column: 13,
        span: 266..267,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 8,
        column: 14,
        span: 267..268,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 8,
        column: 17,
        span: 269..271,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        line: 8,
        column: 25,
        span: 272..279,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 8,
        column: 29,
        span: 280..283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 8,
        column: 34,
        span: 284..288,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 35,
        span: 288..289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 8,
        column: 39,
        span: 289..293,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 40,
        span: 293..294,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 8,
        column: 43,
        span: 295..297,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'function'",
        ),
        line: 8,
        column: 54,
        span: 298..308,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 55,
        span: 308..309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 10,
        column: 7,
        span: 311..317,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 8,
        span: 317..318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 10,
        column: 12,
        span: 318..322,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 13,
        span: 322..323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 10,
        column: 19,
        span: 323..329,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 20,
        span: 329..330,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 10,
        column: 23,
        span: 331..333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 10,
        column: 28,
        span: 334..338,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 29,
        span: 338..339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 10,
        column: 34,
        span: 339..344,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 35,
        span: 344..345,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 36,
        span: 345..346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 11,
        column: 2,
        span: 347..348,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 11,
        column: 4,
        span: 349..350,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 11,
        column: 0,
        span: 351..354,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 12,
        column: 9,
        span: 355..363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 12,
        column: 11,
        span: 364..365,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 13,
        span: 366..367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 12,
        column: 14,
        span: 367..368,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 15,
        span: 368..369,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 12,
        column: 22,
        span: 370..376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 12,
        column: 24,
        span: 377..378,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 12,
        column: 25,
        span: 378..379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 12,
        column: 26,
        span: 379..380,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 28,
        span: 381..382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 12,
        column: 29,
        span: 382..383,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 30,
        span: 383..384,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 12,
        column: 0,
        span: 385..388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 13,
        column: 7,
        span: 389..395,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 13,
        column: 8,
        span: 395..396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 13,
        column: 12,
        span: 396..400,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 13,
        column: 13,
        span: 400..401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 13,
        column: 14,
        span: 401..402,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 13,
        column: 15,
        span: 402..403,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 13,
        column: 18,
        span: 404..406,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'function'",
        ),
        line: 13,
        column: 29,
        span: 407..417,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 13,
        column: 30,
        span: 417..418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fact",
        ),
        line: 17,
        column: 5,
        span: 457..461,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 17,
        column: 7,
        span: 462..463,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 17,
        column: 0,
        span: 464..469,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 18,
        column: 0,
        span: 470..472,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 19,
        column: 8,
        span: 475..480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 19,
        column: 12,
        span: 481..484,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 19,
        column: 14,
        span: 485..486,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 19,
        column: 0,
        span: 486..488,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 20,
        column: 8,
        span: 491..496,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 20,
        column: 17,
        span: 497..505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fact",
        ),
        line: 20,
        column: 22,
        span: 506..510,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 24,
        span: 511..512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 20,
        column: 25,
        span: 512..513,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 26,
        span: 513..514,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 21,
        column: 7,
        span: 519..521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 21,
        column: 9,
        span: 522..523,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 21,
        column: 11,
        span: 523..525,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 21,
        column: 12,
        span: 524..526,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 21,
        column: 17,
        span: 527..531,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 21,
        column: 24,
        span: 532..538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 21,
        column: 0,
        span: 539..542,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 22,
        column: 9,
        span: 547..551,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 22,
        column: 16,
        span: 552..558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 22,
        column: 18,
        span: 559..560,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 22,
        column: 19,
        span: 560..561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fact",
        ),
        line: 22,
        column: 23,
        span: 561..565,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 24,
        span: 565..566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 22,
        column: 25,
        span: 566..567,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 22,
        column: 26,
        span: 567..568,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 22,
        column: 27,
        span: 567..569,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 28,
        span: 569..570,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 23,
        column: 0,
        span: 575..578,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 24,
        column: 0,
        span: 581..584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 25,
        column: 9,
        span: 587..593,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 10,
        span: 593..594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fact",
        ),
        line: 25,
        column: 14,
        span: 594..598,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 15,
        span: 598..599,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 16,
        span: 598..600,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 17,
        span: 600..601,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 25,
        column: 20,
        span: 602..604,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "120",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 24,
        span: 604..608,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 25,
        span: 608..609,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 26,
        column: 0,
        span: 610..613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 27,
        column: 7,
        span: 614..620,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
        column: 8,
        span: 620..621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fact",
        ),
        line: 27,
        column: 12,
        span: 621..625,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 27,
        column: 15,
        span: 626..628,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 27,
        column: 21,
        span: 629..634,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
        column: 22,
        span: 634..635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 30,
        column: 2,
        span: 661..662,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 30,
        column: 4,
        span: 663..664,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 30,
        column: 6,
        span: 665..666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 30,
        column: 7,
        span: 666..667,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 30,
        column: 9,
        span: 668..669,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 30,
        column: 12,
        span: 669..672,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 30,
        column: 13,
        span: 672..673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 31,
        column: 5,
        span: 674..678,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 31,
        column: 7,
        span: 679..680,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 31,
        column: 0,
        span: 680..683,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 32,
        column: 9,
        span: 684..692,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 32,
        column: 11,
        span: 693..694,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 32,
        column: 12,
        span: 694..695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 32,
        column: 13,
        span: 695..696,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 15,
        span: 697..698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 32,
        column: 16,
        span: 698..699,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 17,
        span: 699..700,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 32,
        column: 24,
        span: 701..707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 32,
        column: 26,
        span: 708..709,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 32,
        column: 27,
        span: 709..710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 32,
        column: 31,
        span: 710..714,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 32,
        column: 32,
        span: 714..715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 32,
        column: 33,
        span: 715..716,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 32,
        column: 0,
        span: 717..720,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 33,
        column: 9,
        span: 721..729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 33,
        column: 11,
        span: 730..731,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 33,
        column: 12,
        span: 731..732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 33,
        column: 13,
        span: 732..733,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 15,
        span: 734..735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 33,
        column: 16,
        span: 735..736,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 17,
        span: 736..737,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 33,
        column: 24,
        span: 738..744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 33,
        column: 26,
        span: 745..746,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 33,
        column: 27,
        span: 746..747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 33,
        column: 31,
        span: 747..751,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 33,
        column: 0,
        span: 752..755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 35,
        column: 7,
        span: 757..763,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 8,
        span: 763..764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 35,
        column: 9,
        span: 764..765,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 35,
        column: 10,
        span: 765..766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 35,
        column: 11,
        span: 766..767,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 12,
        span: 767..768,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 35,
        column: 13,
        span: 767..769,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 14,
        span: 769..770,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 35,
        column: 15,
        span: 770..771,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 35,
        column: 17,
        span: 770..773,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 35,
        column: 20,
        span: 774..776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 35,
        column: 22,
        span: 777..778,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 35,
        column: 23,
        span: 778..779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 35,
        column: 24,
        span: 779..780,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 25,
        span: 780..781,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 35,
        column: 26,
        span: 780..782,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 27,
        span: 782..783,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 28,
        span: 783..784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 37,
        column: 2,
        span: 786..787,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 37,
        column: 3,
        span: 787..788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 37,
        column: 4,
        span: 788..789,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 37,
        column: 6,
        span: 790..791,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 37,
        column: 8,
        span: 792..793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 37,
        column: 9,
        span: 793..794,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 37,
        column: 10,
        span: 794..795,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 37,
        column: 11,
        span: 795..796,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 37,
        column: 14,
        span: 795..799,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 37,
        column: 15,
        span: 799..800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 38,
        column: 2,
        span: 801..802,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 38,
        column: 3,
        span: 802..803,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"t\"",
        ),
        line: 38,
        column: 6,
        span: 803..806,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 38,
        column: 7,
        span: 806..807,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 38,
        column: 8,
        span: 807..808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 38,
        column: 9,
        span: 808..809,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 38,
        column: 11,
        span: 810..811,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 38,
        column: 20,
        span: 812..820,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 22,
        span: 821..822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 38,
        column: 26,
        span: 822..826,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 27,
        span: 826..827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 38,
        column: 29,
        span: 828..829,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 30,
        span: 829..830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 38,
        column: 31,
        span: 830..831,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 32,
        span: 831..832,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 38,
        column: 39,
        span: 833..839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 38,
        column: 44,
        span: 840..844,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 38,
        column: 45,
        span: 844..845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 38,
        column: 46,
        span: 845..846,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 38,
        column: 47,
        span: 846..847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 38,
        column: 48,
        span: 847..848,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 38,
        column: 49,
        span: 848..849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 38,
        column: 50,
        span: 849..850,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 38,
        column: 0,
        span: 851..854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 40,
        column: 7,
        span: 856..862,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 8,
        span: 862..863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 40,
        column: 9,
        span: 863..864,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 40,
        column: 10,
        span: 864..865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 40,
        column: 11,
        span: 865..866,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 40,
        column: 12,
        span: 866..867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 40,
        column: 13,
        span: 867..868,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 14,
        span: 868..869,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 40,
        column: 15,
        span: 868..870,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 40,
        column: 16,
        span: 870..871,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 40,
        column: 17,
        span: 870..872,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 18,
        span: 872..873,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 40,
        column: 21,
        span: 874..876,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 40,
        column: 23,
        span: 877..878,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "95",
                    after_decimal: "",
                },
            ),
        ),
        line: 40,
        column: 25,
        span: 877..880,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 26,
        span: 880..881,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 42,
        column: 0,
        span: 883..885,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 43,
        column: 8,
        span: 888..893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 43,
        column: 10,
        span: 894..895,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 43,
        column: 12,
        span: 896..897,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 43,
        column: 14,
        span: 898..899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 43,
        column: 15,
        span: 899..900,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 43,
        column: 16,
        span: 900..901,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 43,
        column: 17,
        span: 900..902,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 43,
        column: 18,
        span: 902..903,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 44,
        column: 11,
        span: 906..914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 44,
        column: 13,
        span: 915..916,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 44,
        column: 14,
        span: 916..917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "add",
        ),
        line: 44,
        column: 17,
        span: 917..920,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 19,
        span: 921..922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 44,
        column: 20,
        span: 922..923,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 21,
        span: 923..924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 44,
        column: 26,
        span: 925..929,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 44,
        column: 27,
        span: 929..930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 44,
        column: 28,
        span: 930..931,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 44,
        column: 29,
        span: 931..932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 44,
        column: 31,
        span: 933..934,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 44,
        column: 32,
        span: 934..935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 44,
        column: 33,
        span: 935..936,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 44,
        column: 35,
        span: 937..938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 44,
        column: 40,
        span: 939..943,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 44,
        column: 41,
        span: 943..944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 44,
        column: 42,
        span: 944..945,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 44,
        column: 43,
        span: 945..946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 44,
        column: 44,
        span: 946..947,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 44,
        column: 45,
        span: 947..948,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 44,
        column: 48,
        span: 948..951,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 44,
        column: 49,
        span: 951..952,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 44,
        column: 56,
        span: 953..959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 44,
        column: 61,
        span: 960..964,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 44,
        column: 0,
        span: 965..968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 45,
        column: 9,
        span: 971..977,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 10,
        span: 977..978,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 45,
        column: 11,
        span: 978..979,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 45,
        column: 12,
        span: 979..980,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "add",
        ),
        line: 45,
        column: 15,
        span: 980..983,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 16,
        span: 983..984,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 45,
        column: 18,
        span: 983..986,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 19,
        span: 986..987,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 45,
        column: 20,
        span: 987..988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "add",
        ),
        line: 45,
        column: 23,
        span: 988..991,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 24,
        span: 991..992,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 45,
        column: 26,
        span: 991..994,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 27,
        span: 994..995,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 45,
        column: 28,
        span: 995..996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "add",
        ),
        line: 45,
        column: 31,
        span: 996..999,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 32,
        span: 999..1000,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 45,
        column: 34,
        span: 999..1002,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 35,
        span: 1002..1003,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 45,
        column: 36,
        span: 1003..1004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 45,
        column: 37,
        span: 1004..1005,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 45,
        column: 40,
        span: 1006..1008,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        line: 45,
        column: 43,
        span: 1008..1011,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 45,
        column: 47,
        span: 1012..1015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 45,
        column: 49,
        span: 1016..1017,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 45,
        column: 50,
        span: 1017..1018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 45,
        column: 51,
        span: 1018..1019,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 45,
        column: 54,
        span: 1020..1022,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 45,
        column: 57,
        span: 1022..1025,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 58,
        span: 1025..1026,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 46,
        column: 0,
        span: 1027..1030,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 48,
        column: 6,
        span: 1032..1037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 48,
        column: 8,
        span: 1038..1039,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 48,
        column: 10,
        span: 1040..1041,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 48,
        column: 12,
        span: 1042..1043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 48,
        column: 13,
        span: 1043..1044,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 48,
        column: 14,
        span: 1044..1045,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 48,
        column: 15,
        span: 1045..1046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 48,
        column: 16,
        span: 1046..1047,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 48,
        column: 17,
        span: 1047..1048,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 48,
        column: 18,
        span: 1048..1049,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 48,
        column: 19,
        span: 1049..1050,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 48,
        column: 20,
        span: 1050..1051,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 48,
        column: 21,
        span: 1051..1052,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 50,
        column: 9,
        span: 1054..1062,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 50,
        column: 11,
        span: 1063..1064,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 50,
        column: 12,
        span: 1064..1065,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 50,
        column: 13,
        span: 1065..1066,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 50,
        column: 14,
        span: 1066..1067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 50,
        column: 15,
        span: 1067..1068,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 50,
        column: 16,
        span: 1068..1069,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        line: 50,
        column: 18,
        span: 1069..1071,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 50,
        column: 20,
        span: 1072..1073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 50,
        column: 21,
        span: 1073..1074,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 50,
        column: 22,
        span: 1074..1075,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 50,
        column: 29,
        span: 1076..1082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 50,
        column: 31,
        span: 1083..1084,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 50,
        column: 32,
        span: 1084..1085,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
        column: 33,
        span: 1084..1086,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 50,
        column: 0,
        span: 1087..1090,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 51,
        column: 9,
        span: 1091..1099,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 51,
        column: 11,
        span: 1100..1101,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 51,
        column: 12,
        span: 1101..1102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 51,
        column: 13,
        span: 1102..1103,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 51,
        column: 14,
        span: 1103..1104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 51,
        column: 15,
        span: 1104..1105,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 51,
        column: 16,
        span: 1105..1106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2",
        ),
        line: 51,
        column: 18,
        span: 1106..1108,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 51,
        column: 20,
        span: 1109..1110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 51,
        column: 21,
        span: 1110..1111,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
        column: 22,
        span: 1111..1112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 51,
        column: 23,
        span: 1112..1113,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
        column: 24,
        span: 1113..1114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 51,
        column: 29,
        span: 1115..1119,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 51,
        column: 30,
        span: 1119..1120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 51,
        column: 31,
        span: 1120..1121,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 51,
        column: 32,
        span: 1121..1122,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 51,
        column: 34,
        span: 1123..1124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 51,
        column: 36,
        span: 1125..1126,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 51,
        column: 0,
        span: 1127..1130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 52,
        column: 7,
        span: 1131..1137,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
        column: 8,
        span: 1137..1138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 52,
        column: 9,
        span: 1138..1139,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 52,
        column: 10,
        span: 1139..1140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 52,
        column: 11,
        span: 1140..1141,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 52,
        column: 12,
        span: 1141..1142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 52,
        column: 13,
        span: 1142..1143,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 52,
        column: 14,
        span: 1143..1144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        line: 52,
        column: 16,
        span: 1144..1146,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
        column: 17,
        span: 1146..1147,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 52,
        column: 18,
        span: 1146..1148,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 19,
        span: 1148..1149,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 52,
        column: 22,
        span: 1150..1152,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 52,
        column: 24,
        span: 1152..1154,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 25,
        span: 1154..1155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 53,
        column: 2,
        span: 1156..1157,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 53,
        column: 3,
        span: 1157..1158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 53,
        column: 4,
        span: 1158..1159,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 53,
        column: 5,
        span: 1159..1160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 53,
        column: 6,
        span: 1160..1161,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 53,
        column: 7,
        span: 1161..1162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2",
        ),
        line: 53,
        column: 9,
        span: 1162..1164,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 10,
        span: 1164..1165,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'k'",
        ),
        line: 53,
        column: 13,
        span: 1165..1168,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 14,
        span: 1168..1169,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 53,
        column: 17,
        span: 1169..1172,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 18,
        span: 1172..1173,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 53,
        column: 19,
        span: 1173..1174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 53,
        column: 26,
        span: 1175..1181,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 27,
        span: 1181..1182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 53,
        column: 28,
        span: 1182..1183,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 53,
        column: 29,
        span: 1183..1184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 53,
        column: 30,
        span: 1184..1185,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 53,
        column: 31,
        span: 1185..1186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 53,
        column: 32,
        span: 1186..1187,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 53,
        column: 33,
        span: 1187..1188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 53,
        column: 34,
        span: 1188..1189,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 53,
        column: 37,
        span: 1190..1192,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 53,
        column: 40,
        span: 1192..1195,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 41,
        span: 1195..1196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 55,
        column: 6,
        span: 1198..1203,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 7,
        span: 1203..1204,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 55,
        column: 10,
        span: 1204..1207,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
        column: 11,
        span: 1207..1208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 57,
        column: 2,
        span: 1210..1211,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 57,
        column: 4,
        span: 1212..1213,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 57,
        column: 8,
        span: 1214..1217,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 58,
        column: 9,
        span: 1235..1243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 58,
        column: 11,
        span: 1244..1245,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 12,
        span: 1245..1246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 58,
        column: 13,
        span: 1246..1247,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 58,
        column: 14,
        span: 1247..1248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 58,
        column: 15,
        span: 1248..1249,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 58,
        column: 16,
        span: 1249..1250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 58,
        column: 17,
        span: 1250..1251,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 18,
        span: 1251..1252,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 58,
        column: 24,
        span: 1253..1258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 58,
        column: 26,
        span: 1259..1260,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 58,
        column: 28,
        span: 1261..1262,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 58,
        column: 32,
        span: 1263..1266,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 58,
        column: 33,
        span: 1266..1267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 58,
        column: 35,
        span: 1268..1269,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 58,
        column: 36,
        span: 1269..1270,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 58,
        column: 37,
        span: 1270..1271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 58,
        column: 38,
        span: 1271..1272,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 58,
        column: 39,
        span: 1272..1273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 58,
        column: 40,
        span: 1273..1274,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 58,
        column: 41,
        span: 1274..1275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 58,
        column: 42,
        span: 1275..1276,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 58,
        column: 43,
        span: 1276..1277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 58,
        column: 44,
        span: 1277..1278,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 58,
        column: 45,
        span: 1278..1279,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 58,
        column: 0,
        span: 1280..1283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 60,
        column: 2,
        span: 1285..1286,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 3,
        span: 1286..1287,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 61,
        column: 4,
        span: 1328..1330,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 5,
        span: 1330..1331,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 61,
        column: 6,
        span: 1330..1332,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 7,
        span: 1332..1333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 62,
        column: 7,
        span: 1334..1340,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 8,
        span: 1340..1341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 62,
        column: 9,
        span: 1341..1342,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 62,
        column: 10,
        span: 1342..1343,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 62,
        column: 11,
        span: 1342..1344,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 62,
        column: 12,
        span: 1344..1345,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 62,
        column: 15,
        span: 1346..1348,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 62,
        column: 17,
        span: 1348..1350,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 62,
        column: 21,
        span: 1351..1354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 62,
        column: 23,
        span: 1355..1356,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 62,
        column: 24,
        span: 1356..1357,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 62,
        column: 25,
        span: 1356..1358,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 62,
        column: 26,
        span: 1358..1359,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 62,
        column: 29,
        span: 1360..1362,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 62,
        column: 31,
        span: 1362..1364,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 62,
        column: 35,
        span: 1365..1368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 62,
        column: 37,
        span: 1369..1370,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 62,
        column: 38,
        span: 1370..1371,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 62,
        column: 39,
        span: 1370..1372,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 62,
        column: 40,
        span: 1372..1373,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 62,
        column: 43,
        span: 1374..1376,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 62,
        column: 47,
        span: 1377..1380,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 62,
        column: 51,
        span: 1381..1384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 62,
        column: 53,
        span: 1385..1386,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 62,
        column: 54,
        span: 1386..1387,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 62,
        column: 55,
        span: 1386..1388,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 62,
        column: 56,
        span: 1388..1389,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 62,
        column: 59,
        span: 1390..1392,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 62,
        column: 63,
        span: 1393..1396,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 64,
        span: 1396..1397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 63,
        column: 2,
        span: 1398..1399,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 3,
        span: 1399..1400,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 63,
        column: 4,
        span: 1399..1401,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 63,
        column: 5,
        span: 1401..1402,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 63,
        column: 6,
        span: 1401..1403,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 63,
        column: 7,
        span: 1403..1404,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 64,
        column: 8,
        span: 1428..1430,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 64,
        column: 9,
        span: 1430..1431,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 64,
        column: 10,
        span: 1430..1432,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 11,
        span: 1432..1433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 65,
        column: 7,
        span: 1434..1440,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 8,
        span: 1440..1441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 65,
        column: 9,
        span: 1441..1442,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 65,
        column: 10,
        span: 1442..1443,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 65,
        column: 11,
        span: 1442..1444,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 65,
        column: 12,
        span: 1444..1445,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 65,
        column: 15,
        span: 1446..1448,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 65,
        column: 17,
        span: 1448..1450,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 65,
        column: 21,
        span: 1451..1454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 65,
        column: 23,
        span: 1455..1456,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 65,
        column: 24,
        span: 1456..1457,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 65,
        column: 25,
        span: 1456..1458,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 65,
        column: 26,
        span: 1458..1459,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 65,
        column: 29,
        span: 1460..1462,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 65,
        column: 31,
        span: 1462..1464,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 65,
        column: 35,
        span: 1465..1468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 65,
        column: 37,
        span: 1469..1470,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 65,
        column: 38,
        span: 1470..1471,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 65,
        column: 39,
        span: 1470..1472,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 65,
        column: 40,
        span: 1472..1473,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 65,
        column: 43,
        span: 1474..1476,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 65,
        column: 45,
        span: 1476..1478,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 65,
        column: 49,
        span: 1479..1482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 65,
        column: 51,
        span: 1483..1484,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 65,
        column: 52,
        span: 1484..1485,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 65,
        column: 53,
        span: 1484..1486,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 65,
        column: 54,
        span: 1486..1487,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 65,
        column: 57,
        span: 1488..1490,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 65,
        column: 61,
        span: 1491..1494,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 62,
        span: 1494..1495,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 67,
        column: 9,
        span: 1497..1505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fat",
        ),
        line: 67,
        column: 13,
        span: 1506..1509,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 14,
        span: 1509..1510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 67,
        column: 15,
        span: 1510..1511,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 16,
        span: 1511..1512,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 68,
        column: 5,
        span: 1515..1517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 68,
        column: 7,
        span: 1518..1519,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 68,
        column: 10,
        span: 1520..1522,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 68,
        column: 12,
        span: 1522..1524,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 68,
        column: 17,
        span: 1525..1529,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 68,
        column: 24,
        span: 1530..1536,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 68,
        column: 0,
        span: 1536..1538,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 69,
        column: 7,
        span: 1541..1545,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 69,
        column: 14,
        span: 1546..1552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 69,
        column: 16,
        span: 1553..1554,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 69,
        column: 17,
        span: 1554..1555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        line: 69,
        column: 27,
        span: 1555..1565,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 28,
        span: 1565..1566,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return fat(\"",
        ),
        line: 69,
        column: 41,
        span: 1566..1579,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 69,
        column: 44,
        span: 1580..1582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 69,
        column: 46,
        span: 1583..1584,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 69,
        column: 47,
        span: 1584..1585,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 69,
        column: 48,
        span: 1584..1586,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 69,
        column: 51,
        span: 1587..1589,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\")\"",
        ),
        line: 69,
        column: 55,
        span: 1590..1593,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 56,
        span: 1593..1594,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 57,
        span: 1594..1595,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 58,
        span: 1595..1596,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 70,
        column: 0,
        span: 1599..1602,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 71,
        column: 0,
        span: 1603..1606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 73,
        column: 7,
        span: 1608..1614,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 8,
        span: 1614..1615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        line: 73,
        column: 18,
        span: 1615..1625,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"loadstring 'assert(fat(6)==720)' () \"",
        ),
        line: 73,
        column: 57,
        span: 1626..1664,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 58,
        span: 1664..1665,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 59,
        span: 1665..1666,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 60,
        span: 1666..1667,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 74,
        column: 2,
        span: 1668..1669,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 74,
        column: 4,
        span: 1670..1671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        line: 74,
        column: 15,
        span: 1672..1682,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
        column: 16,
        span: 1682..1683,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'return fat(5), 3'",
        ),
        line: 74,
        column: 34,
        span: 1683..1701,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
        column: 35,
        span: 1701..1702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 75,
        column: 2,
        span: 1703..1704,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 75,
        column: 3,
        span: 1704..1705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 75,
        column: 4,
        span: 1705..1706,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 75,
        column: 6,
        span: 1707..1708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 75,
        column: 8,
        span: 1709..1710,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
        column: 9,
        span: 1710..1711,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
        column: 10,
        span: 1711..1712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 76,
        column: 7,
        span: 1713..1719,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 8,
        span: 1719..1720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 76,
        column: 9,
        span: 1720..1721,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 76,
        column: 12,
        span: 1722..1724,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "120",
                    after_decimal: "",
                },
            ),
        ),
        line: 76,
        column: 16,
        span: 1724..1728,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 76,
        column: 20,
        span: 1729..1732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 76,
        column: 22,
        span: 1733..1734,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 76,
        column: 25,
        span: 1735..1737,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 76,
        column: 27,
        span: 1737..1739,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 28,
        span: 1739..1740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 77,
        column: 6,
        span: 1741..1746,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
        column: 7,
        span: 1746..1747,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 77,
        column: 10,
        span: 1747..1750,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
        column: 11,
        span: 1750..1751,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 79,
        column: 9,
        span: 1753..1761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err_on_n",
        ),
        line: 79,
        column: 18,
        span: 1762..1770,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
        column: 20,
        span: 1771..1772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 79,
        column: 21,
        span: 1772..1773,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
        column: 22,
        span: 1773..1774,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 80,
        column: 5,
        span: 1777..1779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 80,
        column: 7,
        span: 1780..1781,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 80,
        column: 9,
        span: 1781..1783,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 80,
        column: 10,
        span: 1782..1784,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 80,
        column: 15,
        span: 1785..1789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 80,
        column: 21,
        span: 1790..1795,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
        column: 22,
        span: 1795..1796,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
        column: 23,
        span: 1796..1797,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 80,
        column: 24,
        span: 1797..1798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "exit",
        ),
        line: 80,
        column: 29,
        span: 1799..1803,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
        column: 30,
        span: 1803..1804,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 80,
        column: 31,
        span: 1803..1805,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
        column: 32,
        span: 1805..1806,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 80,
        column: 33,
        span: 1806..1807,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 81,
        column: 7,
        span: 1810..1814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err_on_n",
        ),
        line: 81,
        column: 16,
        span: 1815..1823,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
        column: 18,
        span: 1824..1825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 81,
        column: 19,
        span: 1825..1826,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 81,
        column: 20,
        span: 1826..1827,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 81,
        column: 21,
        span: 1826..1828,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 22,
        span: 1828..1829,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 81,
        column: 23,
        span: 1829..1830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "exit",
        ),
        line: 81,
        column: 28,
        span: 1831..1835,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
        column: 29,
        span: 1835..1836,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 81,
        column: 30,
        span: 1835..1837,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 31,
        span: 1837..1838,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 81,
        column: 32,
        span: 1838..1839,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 82,
        column: 0,
        span: 1842..1845,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 83,
        column: 0,
        span: 1846..1849,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 85,
        column: 0,
        span: 1851..1853,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 86,
        column: 11,
        span: 1856..1864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        line: 86,
        column: 17,
        span: 1865..1870,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 19,
        span: 1871..1872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 86,
        column: 20,
        span: 1872..1873,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 21,
        span: 1873..1874,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 87,
        column: 7,
        span: 1879..1881,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 87,
        column: 9,
        span: 1882..1883,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 87,
        column: 11,
        span: 1884..1885,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 87,
        column: 13,
        span: 1885..1887,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 87,
        column: 0,
        span: 1888..1892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 88,
        column: 13,
        span: 1899..1905,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 14,
        span: 1905..1906,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 88,
        column: 17,
        span: 1906..1909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 88,
        column: 23,
        span: 1910..1915,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 24,
        span: 1915..1916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err_on_n",
        ),
        line: 88,
        column: 32,
        span: 1916..1924,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 88,
        column: 33,
        span: 1924..1925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 88,
        column: 35,
        span: 1926..1927,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 36,
        span: 1927..1928,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 37,
        span: 1928..1929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        line: 89,
        column: 12,
        span: 1936..1941,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
        column: 13,
        span: 1941..1942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 89,
        column: 14,
        span: 1942..1943,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 89,
        column: 15,
        span: 1943..1944,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 89,
        column: 16,
        span: 1943..1945,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
        column: 17,
        span: 1945..1946,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 90,
        column: 0,
        span: 1951..1954,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 91,
        column: 0,
        span: 1957..1960,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 92,
        column: 0,
        span: 1961..1964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        line: 94,
        column: 6,
        span: 1966..1971,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
        column: 7,
        span: 1971..1972,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 94,
        column: 9,
        span: 1971..1974,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
        column: 10,
        span: 1974..1975,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 96,
        column: 9,
        span: 1977..1985,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 96,
        column: 14,
        span: 1986..1990,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 16,
        span: 1991..1992,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 96,
        column: 17,
        span: 1992..1993,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 18,
        span: 1993..1994,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 97,
        column: 5,
        span: 1997..1999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 97,
        column: 7,
        span: 2000..2001,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 97,
        column: 8,
        span: 2001..2002,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 97,
        column: 9,
        span: 2001..2003,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 97,
        column: 14,
        span: 2004..2008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 97,
        column: 19,
        span: 2009..2013,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
        column: 20,
        span: 2013..2014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 97,
        column: 21,
        span: 2014..2015,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 97,
        column: 22,
        span: 2015..2016,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 97,
        column: 23,
        span: 2015..2017,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
        column: 24,
        span: 2017..2018,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 97,
        column: 0,
        span: 2019..2022,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 98,
        column: 0,
        span: 2023..2026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 99,
        column: 5,
        span: 2027..2031,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
        column: 6,
        span: 2031..2032,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 99,
        column: 8,
        span: 2031..2034,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
        column: 9,
        span: 2034..2035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 100,
        column: 5,
        span: 2036..2040,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 6,
        span: 2040..2041,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 100,
        column: 9,
        span: 2040..2044,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 10,
        span: 2044..2045,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 103,
        column: 9,
        span: 2068..2076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 103,
        column: 14,
        span: 2077..2081,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 16,
        span: 2082..2083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 103,
        column: 17,
        span: 2083..2084,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
        column: 18,
        span: 2084..2085,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 103,
        column: 21,
        span: 2086..2088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 103,
        column: 23,
        span: 2089..2090,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 103,
        column: 24,
        span: 2090..2091,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 103,
        column: 25,
        span: 2090..2092,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 103,
        column: 30,
        span: 2093..2097,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 103,
        column: 37,
        span: 2098..2104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 103,
        column: 42,
        span: 2105..2109,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 43,
        span: 2109..2110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 103,
        column: 44,
        span: 2110..2111,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 103,
        column: 45,
        span: 2111..2112,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 103,
        column: 46,
        span: 2111..2113,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
        column: 47,
        span: 2113..2114,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 103,
        column: 52,
        span: 2115..2119,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 103,
        column: 59,
        span: 2120..2126,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        line: 103,
        column: 63,
        span: 2126..2130,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 103,
        column: 67,
        span: 2131..2134,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 103,
        column: 0,
        span: 2135..2138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 104,
        column: 7,
        span: 2139..2145,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
        column: 8,
        span: 2145..2146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 104,
        column: 12,
        span: 2146..2150,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
        column: 13,
        span: 2150..2151,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30000",
                    after_decimal: "",
                },
            ),
        ),
        line: 104,
        column: 18,
        span: 2150..2156,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
        column: 19,
        span: 2156..2157,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 104,
        column: 22,
        span: 2158..2160,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        line: 104,
        column: 26,
        span: 2160..2164,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
        column: 27,
        span: 2164..2165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 105,
        column: 2,
        span: 2166..2167,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 105,
        column: 4,
        span: 2168..2169,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 105,
        column: 6,
        span: 2170..2171,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 105,
        column: 7,
        span: 2171..2172,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 106,
        column: 9,
        span: 2173..2181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 106,
        column: 11,
        span: 2182..2183,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 106,
        column: 12,
        span: 2183..2184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 106,
        column: 16,
        span: 2184..2188,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
        column: 18,
        span: 2189..2190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 106,
        column: 19,
        span: 2190..2191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
        column: 20,
        span: 2191..2192,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 106,
        column: 23,
        span: 2193..2195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 106,
        column: 25,
        span: 2196..2197,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 106,
        column: 26,
        span: 2197..2198,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
        column: 27,
        span: 2197..2199,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 106,
        column: 32,
        span: 2200..2204,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 106,
        column: 39,
        span: 2205..2211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 106,
        column: 44,
        span: 2212..2216,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 106,
        column: 45,
        span: 2216..2217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 106,
        column: 49,
        span: 2217..2221,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
        column: 50,
        span: 2221..2222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 106,
        column: 51,
        span: 2222..2223,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 106,
        column: 52,
        span: 2223..2224,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
        column: 53,
        span: 2223..2225,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
        column: 54,
        span: 2225..2226,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 106,
        column: 59,
        span: 2227..2231,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 106,
        column: 66,
        span: 2232..2238,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
        column: 70,
        span: 2238..2242,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 106,
        column: 74,
        span: 2243..2246,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 106,
        column: 0,
        span: 2247..2250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 107,
        column: 7,
        span: 2251..2257,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
        column: 8,
        span: 2257..2258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 107,
        column: 9,
        span: 2258..2259,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 107,
        column: 10,
        span: 2259..2260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 107,
        column: 14,
        span: 2260..2264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
        column: 15,
        span: 2264..2265,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30000",
                    after_decimal: "",
                },
            ),
        ),
        line: 107,
        column: 20,
        span: 2264..2270,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
        column: 21,
        span: 2270..2271,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 107,
        column: 24,
        span: 2272..2274,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        line: 107,
        column: 28,
        span: 2274..2278,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
        column: 29,
        span: 2278..2279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 109,
        column: 6,
        span: 2281..2286,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 7,
        span: 2286..2287,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 109,
        column: 10,
        span: 2287..2290,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 11,
        span: 2290..2291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 112,
        column: 2,
        span: 2294..2295,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 112,
        column: 4,
        span: 2296..2297,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 112,
        column: 0,
        span: 2298..2301,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
        column: 2,
        span: 2302..2303,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 113,
        column: 10,
        span: 2303..2311,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
        column: 12,
        span: 2312..2313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 113,
        column: 13,
        span: 2313..2314,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
        column: 14,
        span: 2314..2315,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 113,
        column: 16,
        span: 2316..2317,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 113,
        column: 17,
        span: 2317..2318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 113,
        column: 18,
        span: 2318..2319,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 113,
        column: 22,
        span: 2320..2323,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
        column: 23,
        span: 2323..2324,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
        column: 24,
        span: 2324..2325,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 113,
        column: 26,
        span: 2324..2327,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
        column: 27,
        span: 2327..2328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 114,
        column: 7,
        span: 2329..2335,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
        column: 8,
        span: 2335..2336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 114,
        column: 9,
        span: 2336..2337,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 114,
        column: 12,
        span: 2338..2340,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 114,
        column: 15,
        span: 2340..2343,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 114,
        column: 19,
        span: 2344..2347,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
        column: 21,
        span: 2348..2349,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 114,
        column: 29,
        span: 2349..2357,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
        column: 31,
        span: 2358..2359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 114,
        column: 32,
        span: 2359..2360,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
        column: 33,
        span: 2360..2361,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 114,
        column: 40,
        span: 2362..2368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 114,
        column: 42,
        span: 2369..2370,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 114,
        column: 43,
        span: 2370..2371,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 114,
        column: 44,
        span: 2370..2372,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 114,
        column: 48,
        span: 2373..2376,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
        column: 49,
        span: 2376..2377,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
        column: 50,
        span: 2377..2378,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 114,
        column: 52,
        span: 2377..2380,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
        column: 53,
        span: 2380..2381,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 114,
        column: 56,
        span: 2382..2384,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 114,
        column: 59,
        span: 2384..2387,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
        column: 60,
        span: 2387..2388,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 117,
        column: 6,
        span: 2391..2396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 117,
        column: 8,
        span: 2397..2398,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 9,
        span: 2398..2399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 117,
        column: 10,
        span: 2399..2400,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 11,
        span: 2400..2401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 117,
        column: 12,
        span: 2401..2402,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 13,
        span: 2402..2403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 117,
        column: 0,
        span: 2403..2404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 118,
        column: 2,
        span: 2405..2406,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 118,
        column: 4,
        span: 2407..2408,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 118,
        column: 6,
        span: 2409..2410,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 118,
        column: 7,
        span: 2410..2411,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 118,
        column: 8,
        span: 2411..2412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 118,
        column: 12,
        span: 2413..2416,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 118,
        column: 14,
        span: 2417..2418,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2000",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
        column: 0,
        span: 2418..2423,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 119,
        column: 4,
        span: 2424..2427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 119,
        column: 6,
        span: 2428..2429,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 119,
        column: 7,
        span: 2429..2430,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 119,
        column: 8,
        span: 2429..2431,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 119,
        column: 9,
        span: 2431..2432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 119,
        column: 13,
        span: 2433..2436,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 119,
        column: 16,
        span: 2437..2439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 119,
        column: 18,
        span: 2440..2441,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 119,
        column: 19,
        span: 2441..2442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 119,
        column: 20,
        span: 2442..2443,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 119,
        column: 21,
        span: 2443..2444,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 119,
        column: 22,
        span: 2444..2445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 119,
        column: 23,
        span: 2445..2446,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 119,
        column: 0,
        span: 2447..2450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 120,
        column: 7,
        span: 2451..2457,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
        column: 8,
        span: 2457..2458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 120,
        column: 14,
        span: 2458..2464,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
        column: 15,
        span: 2464..2465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 120,
        column: 18,
        span: 2465..2468,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 19,
        span: 2468..2469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 120,
        column: 26,
        span: 2470..2476,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
        column: 27,
        span: 2476..2477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 120,
        column: 28,
        span: 2477..2478,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
        column: 29,
        span: 2478..2479,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
        column: 30,
        span: 2479..2480,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 120,
        column: 33,
        span: 2481..2483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 120,
        column: 37,
        span: 2484..2487,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 120,
        column: 41,
        span: 2488..2491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 120,
        column: 48,
        span: 2492..2498,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
        column: 49,
        span: 2498..2499,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'#'",
        ),
        line: 120,
        column: 52,
        span: 2499..2502,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 53,
        span: 2502..2503,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 120,
        column: 60,
        span: 2504..2510,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
        column: 61,
        span: 2510..2511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 120,
        column: 62,
        span: 2511..2512,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
        column: 63,
        span: 2512..2513,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
        column: 64,
        span: 2513..2514,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 120,
        column: 67,
        span: 2515..2517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 120,
        column: 71,
        span: 2518..2521,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
        column: 72,
        span: 2521..2522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 121,
        column: 2,
        span: 2523..2524,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 121,
        column: 4,
        span: 2525..2526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 121,
        column: 11,
        span: 2527..2533,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 121,
        column: 12,
        span: 2533..2534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 121,
        column: 13,
        span: 2534..2535,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
        column: 14,
        span: 2535..2536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 122,
        column: 7,
        span: 2537..2543,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 8,
        span: 2543..2544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 122,
        column: 9,
        span: 2544..2545,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 122,
        column: 12,
        span: 2546..2548,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
        column: 14,
        span: 2548..2550,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 15,
        span: 2550..2551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 123,
        column: 2,
        span: 2552..2553,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 123,
        column: 4,
        span: 2554..2555,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 123,
        column: 6,
        span: 2556..2557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 123,
        column: 12,
        span: 2557..2563,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
        column: 13,
        span: 2563..2564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 123,
        column: 14,
        span: 2564..2565,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
        column: 15,
        span: 2565..2566,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 123,
        column: 16,
        span: 2566..2567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 124,
        column: 7,
        span: 2568..2574,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
        column: 8,
        span: 2574..2575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 124,
        column: 13,
        span: 2575..2580,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 124,
        column: 14,
        span: 2580..2581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        line: 124,
        column: 18,
        span: 2581..2585,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
        column: 19,
        span: 2585..2586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 124,
        column: 20,
        span: 2586..2587,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
        column: 21,
        span: 2587..2588,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 124,
        column: 24,
        span: 2589..2591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 124,
        column: 28,
        span: 2592..2595,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 124,
        column: 32,
        span: 2596..2599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 124,
        column: 34,
        span: 2600..2601,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 124,
        column: 35,
        span: 2601..2602,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 124,
        column: 36,
        span: 2601..2603,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 124,
        column: 37,
        span: 2603..2604,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 124,
        column: 40,
        span: 2605..2607,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 124,
        column: 42,
        span: 2607..2609,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 124,
        column: 46,
        span: 2610..2613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 124,
        column: 48,
        span: 2614..2615,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 124,
        column: 49,
        span: 2615..2616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 124,
        column: 52,
        span: 2616..2619,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 124,
        column: 53,
        span: 2619..2620,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 124,
        column: 56,
        span: 2621..2623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 124,
        column: 60,
        span: 2624..2627,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
        column: 61,
        span: 2627..2628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 125,
        column: 2,
        span: 2629..2630,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 125,
        column: 4,
        span: 2631..2632,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 125,
        column: 6,
        span: 2633..2634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 125,
        column: 12,
        span: 2634..2640,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 13,
        span: 2640..2641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 125,
        column: 14,
        span: 2641..2642,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 15,
        span: 2642..2643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 125,
        column: 19,
        span: 2644..2647,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 125,
        column: 20,
        span: 2647..2648,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 21,
        span: 2647..2649,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
        column: 22,
        span: 2649..2650,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 125,
        column: 23,
        span: 2650..2651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 126,
        column: 7,
        span: 2652..2658,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 126,
        column: 8,
        span: 2658..2659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 126,
        column: 13,
        span: 2659..2664,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 126,
        column: 14,
        span: 2664..2665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        line: 126,
        column: 18,
        span: 2665..2669,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 126,
        column: 19,
        span: 2669..2670,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 126,
        column: 20,
        span: 2670..2671,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 126,
        column: 21,
        span: 2671..2672,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 126,
        column: 24,
        span: 2673..2675,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
        column: 26,
        span: 2675..2677,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 126,
        column: 30,
        span: 2678..2681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 126,
        column: 32,
        span: 2682..2683,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 126,
        column: 33,
        span: 2683..2684,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
        column: 34,
        span: 2683..2685,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 126,
        column: 35,
        span: 2685..2686,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 126,
        column: 38,
        span: 2687..2689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 126,
        column: 42,
        span: 2690..2693,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 126,
        column: 43,
        span: 2693..2694,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
        column: 44,
        span: 2693..2695,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 126,
        column: 48,
        span: 2696..2699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 126,
        column: 50,
        span: 2700..2701,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 126,
        column: 51,
        span: 2701..2702,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
        column: 52,
        span: 2701..2703,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 126,
        column: 53,
        span: 2703..2704,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 126,
        column: 56,
        span: 2705..2707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 126,
        column: 60,
        span: 2708..2711,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 126,
        column: 61,
        span: 2711..2712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 127,
        column: 2,
        span: 2713..2714,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 127,
        column: 4,
        span: 2715..2716,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 127,
        column: 6,
        span: 2717..2718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 127,
        column: 12,
        span: 2718..2724,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 127,
        column: 13,
        span: 2724..2725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 127,
        column: 14,
        span: 2725..2726,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 127,
        column: 15,
        span: 2726..2727,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 127,
        column: 18,
        span: 2727..2730,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 127,
        column: 19,
        span: 2730..2731,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 127,
        column: 21,
        span: 2731..2733,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 127,
        column: 22,
        span: 2733..2734,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 127,
        column: 23,
        span: 2734..2735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 128,
        column: 7,
        span: 2736..2742,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 128,
        column: 8,
        span: 2742..2743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 128,
        column: 12,
        span: 2743..2747,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 128,
        column: 13,
        span: 2747..2748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 128,
        column: 14,
        span: 2748..2749,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 128,
        column: 15,
        span: 2749..2750,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 128,
        column: 18,
        span: 2751..2753,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 128,
        column: 22,
        span: 2754..2757,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 128,
        column: 23,
        span: 2757..2758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 129,
        column: 2,
        span: 2776..2777,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 129,
        column: 4,
        span: 2778..2779,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 129,
        column: 6,
        span: 2780..2781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 129,
        column: 12,
        span: 2781..2787,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
        column: 13,
        span: 2787..2788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 129,
        column: 14,
        span: 2788..2789,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 15,
        span: 2789..2790,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 129,
        column: 18,
        span: 2790..2793,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 19,
        span: 2793..2794,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 129,
        column: 22,
        span: 2794..2797,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 23,
        span: 2797..2798,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 129,
        column: 24,
        span: 2798..2799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 130,
        column: 7,
        span: 2800..2806,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
        column: 8,
        span: 2806..2807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 130,
        column: 12,
        span: 2807..2811,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
        column: 13,
        span: 2811..2812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 130,
        column: 14,
        span: 2812..2813,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
        column: 15,
        span: 2813..2814,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 130,
        column: 18,
        span: 2815..2817,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 130,
        column: 22,
        span: 2818..2821,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
        column: 23,
        span: 2821..2822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 131,
        column: 2,
        span: 2840..2841,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
        column: 3,
        span: 2841..2842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 131,
        column: 4,
        span: 2842..2843,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 131,
        column: 6,
        span: 2844..2845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 131,
        column: 13,
        span: 2846..2852,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
        column: 14,
        span: 2852..2853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 131,
        column: 15,
        span: 2853..2854,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
        column: 16,
        span: 2854..2855,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 131,
        column: 19,
        span: 2855..2858,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
        column: 20,
        span: 2858..2859,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 131,
        column: 23,
        span: 2859..2862,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
        column: 24,
        span: 2862..2863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 132,
        column: 7,
        span: 2864..2870,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 132,
        column: 8,
        span: 2870..2871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 132,
        column: 9,
        span: 2871..2872,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 132,
        column: 12,
        span: 2873..2875,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 132,
        column: 15,
        span: 2875..2878,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 132,
        column: 19,
        span: 2879..2882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 132,
        column: 21,
        span: 2883..2884,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 132,
        column: 24,
        span: 2885..2887,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 132,
        column: 28,
        span: 2888..2891,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 132,
        column: 29,
        span: 2891..2892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 133,
        column: 2,
        span: 2893..2894,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 3,
        span: 2894..2895,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 133,
        column: 4,
        span: 2895..2896,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 5,
        span: 2896..2897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 133,
        column: 6,
        span: 2897..2898,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 133,
        column: 8,
        span: 2899..2900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 133,
        column: 15,
        span: 2901..2907,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
        column: 16,
        span: 2907..2908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 133,
        column: 17,
        span: 2908..2909,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 18,
        span: 2909..2910,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 133,
        column: 21,
        span: 2910..2913,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 22,
        span: 2913..2914,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 133,
        column: 25,
        span: 2914..2917,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 26,
        span: 2917..2918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 134,
        column: 7,
        span: 2919..2925,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
        column: 8,
        span: 2925..2926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 134,
        column: 9,
        span: 2926..2927,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 134,
        column: 12,
        span: 2928..2930,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 134,
        column: 15,
        span: 2930..2933,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 134,
        column: 19,
        span: 2934..2937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 134,
        column: 21,
        span: 2938..2939,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 134,
        column: 24,
        span: 2940..2942,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 134,
        column: 27,
        span: 2942..2945,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 134,
        column: 31,
        span: 2946..2949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 134,
        column: 33,
        span: 2950..2951,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 134,
        column: 36,
        span: 2952..2954,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 134,
        column: 40,
        span: 2955..2958,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
        column: 41,
        span: 2958..2959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 135,
        column: 2,
        span: 2960..2961,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 135,
        column: 3,
        span: 2961..2962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 135,
        column: 4,
        span: 2962..2963,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 135,
        column: 6,
        span: 2964..2965,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 135,
        column: 13,
        span: 2966..2972,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 135,
        column: 14,
        span: 2972..2973,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 135,
        column: 15,
        span: 2972..2974,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 135,
        column: 16,
        span: 2974..2975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 136,
        column: 7,
        span: 2976..2982,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 136,
        column: 8,
        span: 2982..2983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 136,
        column: 9,
        span: 2983..2984,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 136,
        column: 11,
        span: 2984..2986,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 136,
        column: 12,
        span: 2985..2987,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 136,
        column: 16,
        span: 2988..2991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 136,
        column: 18,
        span: 2992..2993,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 136,
        column: 20,
        span: 2993..2995,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 136,
        column: 23,
        span: 2995..2998,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 136,
        column: 24,
        span: 2998..2999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 137,
        column: 2,
        span: 3000..3001,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 137,
        column: 3,
        span: 3001..3002,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 137,
        column: 4,
        span: 3002..3003,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 137,
        column: 6,
        span: 3004..3005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 137,
        column: 13,
        span: 3006..3012,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
        column: 14,
        span: 3012..3013,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 137,
        column: 15,
        span: 3013..3014,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
        column: 16,
        span: 3013..3015,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 137,
        column: 17,
        span: 3015..3016,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
        column: 18,
        span: 3015..3017,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 137,
        column: 19,
        span: 3017..3018,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 137,
        column: 20,
        span: 3018..3019,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
        column: 22,
        span: 3019..3021,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 137,
        column: 23,
        span: 3021..3022,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
        column: 25,
        span: 3022..3024,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
        column: 26,
        span: 3024..3025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 138,
        column: 7,
        span: 3026..3032,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 8,
        span: 3032..3033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 138,
        column: 9,
        span: 3033..3034,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 138,
        column: 11,
        span: 3034..3036,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
        column: 12,
        span: 3035..3037,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 138,
        column: 16,
        span: 3038..3041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 138,
        column: 18,
        span: 3042..3043,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 138,
        column: 20,
        span: 3043..3045,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 138,
        column: 23,
        span: 3045..3048,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 24,
        span: 3048..3049,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Y",
        ),
        line: 144,
        column: 2,
        span: 3097..3098,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 144,
        column: 4,
        span: 3099..3100,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 144,
        column: 13,
        span: 3101..3109,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
        column: 15,
        span: 3110..3111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "le",
        ),
        line: 144,
        column: 17,
        span: 3111..3113,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
        column: 18,
        span: 3113..3114,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 145,
        column: 12,
        span: 3121..3126,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 145,
        column: 21,
        span: 3127..3135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 145,
        column: 23,
        span: 3136..3137,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
        column: 25,
        span: 3138..3139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 145,
        column: 26,
        span: 3139..3140,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
        column: 27,
        span: 3140..3141,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 146,
        column: 15,
        span: 3150..3156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "le",
        ),
        line: 146,
        column: 18,
        span: 3157..3159,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 19,
        span: 3159..3160,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 146,
        column: 27,
        span: 3160..3168,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 29,
        span: 3169..3170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 146,
        column: 30,
        span: 3170..3171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 31,
        span: 3171..3172,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 146,
        column: 38,
        span: 3173..3179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 146,
        column: 40,
        span: 3180..3181,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 41,
        span: 3181..3182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 146,
        column: 42,
        span: 3182..3183,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 43,
        span: 3183..3184,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 44,
        span: 3184..3185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 146,
        column: 45,
        span: 3185..3186,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 46,
        span: 3186..3187,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 146,
        column: 50,
        span: 3188..3191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 51,
        span: 3191..3192,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 147,
        column: 0,
        span: 3199..3202,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 148,
        column: 13,
        span: 3209..3215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 148,
        column: 15,
        span: 3216..3217,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 16,
        span: 3217..3218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 148,
        column: 17,
        span: 3218..3219,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
        column: 18,
        span: 3219..3220,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 149,
        column: 0,
        span: 3225..3228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 154,
        column: 2,
        span: 3259..3260,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 154,
        column: 4,
        span: 3261..3262,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 154,
        column: 13,
        span: 3263..3271,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 15,
        span: 3272..3273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 154,
        column: 16,
        span: 3273..3274,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 17,
        span: 3274..3275,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 155,
        column: 13,
        span: 3282..3288,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 155,
        column: 22,
        span: 3289..3297,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
        column: 24,
        span: 3298..3299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 155,
        column: 25,
        span: 3299..3300,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
        column: 26,
        span: 3300..3301,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 156,
        column: 18,
        span: 3317..3319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 156,
        column: 20,
        span: 3320..3321,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 156,
        column: 23,
        span: 3322..3324,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 156,
        column: 25,
        span: 3324..3326,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 156,
        column: 30,
        span: 3327..3331,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 156,
        column: 37,
        span: 3332..3338,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 156,
        column: 0,
        span: 3338..3340,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 157,
        column: 20,
        span: 3356..3360,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 157,
        column: 27,
        span: 3361..3367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 157,
        column: 29,
        span: 3368..3369,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 157,
        column: 30,
        span: 3369..3370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 157,
        column: 31,
        span: 3370..3371,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 157,
        column: 32,
        span: 3371..3372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 157,
        column: 33,
        span: 3372..3373,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 157,
        column: 34,
        span: 3373..3374,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
        column: 35,
        span: 3373..3375,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 157,
        column: 36,
        span: 3375..3376,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 157,
        column: 0,
        span: 3377..3380,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 158,
        column: 0,
        span: 3394..3397,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 159,
        column: 0,
        span: 3402..3405,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fat",
        ),
        line: 161,
        column: 4,
        span: 3407..3410,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 161,
        column: 6,
        span: 3411..3412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Y",
        ),
        line: 161,
        column: 8,
        span: 3413..3414,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
        column: 9,
        span: 3414..3415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 161,
        column: 10,
        span: 3415..3416,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
        column: 11,
        span: 3416..3417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 163,
        column: 7,
        span: 3419..3425,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 163,
        column: 8,
        span: 3425..3426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fat",
        ),
        line: 163,
        column: 11,
        span: 3426..3429,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 163,
        column: 12,
        span: 3429..3430,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 163,
        column: 13,
        span: 3429..3431,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
        column: 14,
        span: 3431..3432,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 163,
        column: 17,
        span: 3433..3435,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 163,
        column: 19,
        span: 3435..3437,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 163,
        column: 23,
        span: 3438..3441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fat",
        ),
        line: 163,
        column: 27,
        span: 3442..3445,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 163,
        column: 28,
        span: 3445..3446,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 163,
        column: 29,
        span: 3445..3447,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
        column: 30,
        span: 3447..3448,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 163,
        column: 33,
        span: 3449..3451,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        line: 163,
        column: 36,
        span: 3451..3454,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 163,
        column: 40,
        span: 3455..3458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Y",
        ),
        line: 163,
        column: 42,
        span: 3459..3460,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 163,
        column: 43,
        span: 3460..3461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 163,
        column: 44,
        span: 3461..3462,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
        column: 45,
        span: 3462..3463,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 163,
        column: 46,
        span: 3463..3464,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 163,
        column: 47,
        span: 3463..3465,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
        column: 48,
        span: 3465..3466,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 163,
        column: 50,
        span: 3466..3468,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 163,
        column: 51,
        span: 3467..3469,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 163,
        column: 52,
        span: 3469..3470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Y",
        ),
        line: 163,
        column: 53,
        span: 3470..3471,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 163,
        column: 54,
        span: 3471..3472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 163,
        column: 55,
        span: 3472..3473,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
        column: 56,
        span: 3473..3474,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 163,
        column: 57,
        span: 3474..3475,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 163,
        column: 58,
        span: 3474..3476,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
        column: 59,
        span: 3476..3477,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
        column: 60,
        span: 3477..3478,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 165,
        column: 6,
        span: 3480..3485,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 165,
        column: 15,
        span: 3486..3494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 165,
        column: 17,
        span: 3495..3496,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 19,
        span: 3497..3498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 165,
        column: 20,
        span: 3498..3499,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 21,
        span: 3499..3500,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 166,
        column: 8,
        span: 3503..3508,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 166,
        column: 17,
        span: 3509..3517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 166,
        column: 19,
        span: 3518..3519,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 21,
        span: 3520..3521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 166,
        column: 22,
        span: 3521..3522,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 166,
        column: 23,
        span: 3522..3523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 166,
        column: 24,
        span: 3523..3524,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 166,
        column: 25,
        span: 3524..3525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 166,
        column: 26,
        span: 3525..3526,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 166,
        column: 27,
        span: 3526..3527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 166,
        column: 28,
        span: 3527..3528,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 29,
        span: 3528..3529,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 167,
        column: 11,
        span: 3534..3540,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 167,
        column: 20,
        span: 3541..3549,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
        column: 22,
        span: 3550..3551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 167,
        column: 23,
        span: 3551..3552,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 167,
        column: 24,
        span: 3552..3553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 167,
        column: 25,
        span: 3553..3554,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 26,
        span: 3554..3555,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 167,
        column: 33,
        span: 3556..3562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 167,
        column: 35,
        span: 3563..3564,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 167,
        column: 36,
        span: 3564..3565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 167,
        column: 37,
        span: 3565..3566,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 167,
        column: 38,
        span: 3566..3567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 167,
        column: 39,
        span: 3567..3568,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 167,
        column: 40,
        span: 3568..3569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 167,
        column: 41,
        span: 3569..3570,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 167,
        column: 42,
        span: 3570..3571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 167,
        column: 43,
        span: 3571..3572,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 167,
        column: 44,
        span: 3572..3573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 167,
        column: 45,
        span: 3573..3574,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 167,
        column: 46,
        span: 3574..3575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 167,
        column: 47,
        span: 3575..3576,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 167,
        column: 48,
        span: 3576..3577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 167,
        column: 49,
        span: 3577..3578,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 167,
        column: 0,
        span: 3579..3582,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 168,
        column: 0,
        span: 3585..3588,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 169,
        column: 9,
        span: 3591..3597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 169,
        column: 11,
        span: 3598..3599,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 12,
        span: 3599..3600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 169,
        column: 13,
        span: 3600..3601,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
        column: 14,
        span: 3601..3602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 169,
        column: 15,
        span: 3602..3603,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 169,
        column: 16,
        span: 3603..3604,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 17,
        span: 3603..3605,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
        column: 18,
        span: 3605..3606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 169,
        column: 19,
        span: 3606..3607,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 169,
        column: 20,
        span: 3607..3608,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 21,
        span: 3607..3609,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
        column: 22,
        span: 3609..3610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 169,
        column: 23,
        span: 3610..3611,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 169,
        column: 24,
        span: 3611..3612,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 25,
        span: 3611..3613,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 26,
        span: 3613..3614,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 170,
        column: 0,
        span: 3615..3618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 172,
        column: 2,
        span: 3620..3621,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 172,
        column: 4,
        span: 3622..3623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 172,
        column: 6,
        span: 3624..3625,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
        column: 7,
        span: 3625..3626,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 172,
        column: 9,
        span: 3625..3628,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
        column: 10,
        span: 3628..3629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 173,
        column: 7,
        span: 3630..3636,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
        column: 8,
        span: 3636..3637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 173,
        column: 9,
        span: 3637..3638,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
        column: 10,
        span: 3638..3639,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 173,
        column: 11,
        span: 3638..3640,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 173,
        column: 12,
        span: 3640..3641,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 173,
        column: 15,
        span: 3641..3644,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
        column: 16,
        span: 3644..3645,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 173,
        column: 19,
        span: 3646..3648,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 173,
        column: 22,
        span: 3648..3651,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 173,
        column: 23,
        span: 3651..3652,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 173,
        column: 25,
        span: 3651..3654,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 173,
        column: 26,
        span: 3654..3655,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 173,
        column: 28,
        span: 3654..3657,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 173,
        column: 29,
        span: 3657..3658,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 173,
        column: 31,
        span: 3657..3660,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 173,
        column: 32,
        span: 3660..3661,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 173,
        column: 34,
        span: 3660..3663,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 173,
        column: 35,
        span: 3663..3664,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 173,
        column: 36,
        span: 3663..3665,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 173,
        column: 37,
        span: 3665..3666,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 173,
        column: 39,
        span: 3665..3668,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 173,
        column: 40,
        span: 3668..3669,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 173,
        column: 42,
        span: 3668..3671,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
        column: 43,
        span: 3671..3672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Y",
        ),
        line: 175,
        column: 2,
        span: 3674..3675,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 175,
        column: 3,
        span: 3675..3676,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 175,
        column: 5,
        span: 3677..3678,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 175,
        column: 6,
        span: 3678..3679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 175,
        column: 8,
        span: 3680..3681,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 175,
        column: 10,
        span: 3682..3683,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 175,
        column: 0,
        span: 3684..3687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 176,
        column: 6,
        span: 3688..3693,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 7,
        span: 3693..3694,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 176,
        column: 10,
        span: 3694..3697,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 11,
        span: 3697..3698,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 180,
        column: 9,
        span: 3729..3737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        line: 180,
        column: 17,
        span: 3738..3745,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
        column: 19,
        span: 3746..3747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 180,
        column: 20,
        span: 3747..3748,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 180,
        column: 21,
        span: 3748..3749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 180,
        column: 23,
        span: 3750..3751,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
        column: 24,
        span: 3751..3752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 181,
        column: 4,
        span: 3755..3756,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 181,
        column: 6,
        span: 3757..3758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 181,
        column: 8,
        span: 3759..3760,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 181,
        column: 11,
        span: 3761..3763,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 181,
        column: 0,
        span: 3763..3765,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 182,
        column: 5,
        span: 3768..3770,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 182,
        column: 7,
        span: 3771..3772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 182,
        column: 8,
        span: 3772..3773,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 182,
        column: 11,
        span: 3774..3776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 182,
        column: 17,
        span: 3777..3782,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 182,
        column: 18,
        span: 3782..3783,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        line: 182,
        column: 22,
        span: 3783..3787,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 182,
        column: 23,
        span: 3787..3788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 182,
        column: 24,
        span: 3788..3789,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 182,
        column: 25,
        span: 3789..3790,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 182,
        column: 26,
        span: 3790..3791,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 182,
        column: 0,
        span: 3792..3796,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 183,
        column: 11,
        span: 3801..3807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 183,
        column: 13,
        span: 3808..3809,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 183,
        column: 14,
        span: 3809..3810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 183,
        column: 15,
        span: 3810..3811,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 183,
        column: 16,
        span: 3811..3812,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 183,
        column: 17,
        span: 3812..3813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        line: 183,
        column: 25,
        span: 3814..3821,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 183,
        column: 26,
        span: 3821..3822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 183,
        column: 27,
        span: 3822..3823,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 183,
        column: 28,
        span: 3823..3824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 183,
        column: 30,
        span: 3825..3826,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 183,
        column: 31,
        span: 3826..3827,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 183,
        column: 32,
        span: 3826..3828,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 183,
        column: 33,
        span: 3828..3829,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 184,
        column: 0,
        span: 3832..3835,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 185,
        column: 0,
        span: 3836..3839,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 187,
        column: 9,
        span: 3841..3849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "equaltab",
        ),
        line: 187,
        column: 18,
        span: 3850..3858,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 187,
        column: 20,
        span: 3859..3860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 187,
        column: 22,
        span: 3860..3862,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 187,
        column: 23,
        span: 3862..3863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 187,
        column: 26,
        span: 3864..3866,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 187,
        column: 27,
        span: 3866..3867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 188,
        column: 9,
        span: 3870..3876,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 188,
        column: 10,
        span: 3876..3877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 188,
        column: 15,
        span: 3877..3882,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 188,
        column: 16,
        span: 3882..3883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        line: 188,
        column: 20,
        span: 3883..3887,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 188,
        column: 21,
        span: 3887..3888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 188,
        column: 23,
        span: 3888..3890,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
        column: 24,
        span: 3890..3891,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 188,
        column: 27,
        span: 3892..3894,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 188,
        column: 33,
        span: 3895..3900,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 188,
        column: 34,
        span: 3900..3901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        line: 188,
        column: 38,
        span: 3901..3905,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 188,
        column: 39,
        span: 3905..3906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 188,
        column: 41,
        span: 3906..3908,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
        column: 42,
        span: 3908..3909,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
        column: 43,
        span: 3909..3910,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 189,
        column: 6,
        span: 3913..3916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 189,
        column: 8,
        span: 3917..3918,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 189,
        column: 9,
        span: 3918..3919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v1",
        ),
        line: 189,
        column: 11,
        span: 3919..3921,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 189,
        column: 14,
        span: 3922..3924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ipairs",
        ),
        line: 189,
        column: 21,
        span: 3925..3931,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 189,
        column: 22,
        span: 3931..3932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 189,
        column: 24,
        span: 3932..3934,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 189,
        column: 25,
        span: 3934..3935,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 189,
        column: 0,
        span: 3936..3938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 190,
        column: 11,
        span: 3943..3949,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 12,
        span: 3949..3950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v1",
        ),
        line: 190,
        column: 14,
        span: 3950..3952,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 190,
        column: 17,
        span: 3953..3955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 190,
        column: 20,
        span: 3956..3958,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 190,
        column: 21,
        span: 3958..3959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 190,
        column: 22,
        span: 3959..3960,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 190,
        column: 23,
        span: 3960..3961,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
        column: 24,
        span: 3961..3962,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 191,
        column: 0,
        span: 3965..3968,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 192,
        column: 0,
        span: 3969..3972,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 194,
        column: 6,
        span: 3974..3979,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 194,
        column: 15,
        span: 3980..3988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 194,
        column: 20,
        span: 3989..3993,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 22,
        span: 3994..3995,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 194,
        column: 25,
        span: 3995..3998,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
        column: 26,
        span: 3998..3999,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 195,
        column: 8,
        span: 4002..4007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 195,
        column: 10,
        span: 4008..4009,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 195,
        column: 12,
        span: 4010..4011,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 195,
        column: 14,
        span: 4012..4013,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 195,
        column: 17,
        span: 4013..4016,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 195,
        column: 18,
        span: 4016..4017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 196,
        column: 4,
        span: 4020..4021,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 196,
        column: 5,
        span: 4021..4022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 196,
        column: 6,
        span: 4022..4023,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 196,
        column: 8,
        span: 4024..4025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 196,
        column: 15,
        span: 4026..4032,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 196,
        column: 16,
        span: 4032..4033,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'#'",
        ),
        line: 196,
        column: 19,
        span: 4033..4036,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 196,
        column: 20,
        span: 4036..4037,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 196,
        column: 24,
        span: 4038..4041,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 196,
        column: 25,
        span: 4041..4042,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 197,
        column: 9,
        span: 4045..4051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 197,
        column: 0,
        span: 4052..4053,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 198,
        column: 0,
        span: 4054..4057,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 200,
        column: 9,
        span: 4059..4067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 200,
        column: 11,
        span: 4068..4069,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 12,
        span: 4069..4070,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 13,
        span: 4070..4071,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 200,
        column: 20,
        span: 4072..4078,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 200,
        column: 22,
        span: 4078..4080,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 200,
        column: 23,
        span: 4080..4081,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 200,
        column: 24,
        span: 4080..4082,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 200,
        column: 25,
        span: 4082..4083,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 200,
        column: 27,
        span: 4082..4085,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 200,
        column: 28,
        span: 4085..4086,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 200,
        column: 29,
        span: 4085..4087,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 200,
        column: 0,
        span: 4088..4091,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 201,
        column: 9,
        span: 4092..4100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ret2",
        ),
        line: 201,
        column: 14,
        span: 4101..4105,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
        column: 16,
        span: 4106..4107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 201,
        column: 17,
        span: 4107..4108,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 201,
        column: 18,
        span: 4108..4109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 201,
        column: 19,
        span: 4109..4110,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
        column: 20,
        span: 4110..4111,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 201,
        column: 27,
        span: 4112..4118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 201,
        column: 29,
        span: 4119..4120,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 201,
        column: 30,
        span: 4120..4121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 201,
        column: 31,
        span: 4121..4122,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 201,
        column: 0,
        span: 4123..4126,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 203,
        column: 6,
        span: 4128..4133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 203,
        column: 8,
        span: 4134..4135,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 203,
        column: 9,
        span: 4135..4136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 203,
        column: 10,
        span: 4136..4137,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 203,
        column: 11,
        span: 4137..4138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 203,
        column: 12,
        span: 4138..4139,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 203,
        column: 13,
        span: 4139..4140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 203,
        column: 14,
        span: 4140..4141,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 203,
        column: 16,
        span: 4142..4143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        line: 203,
        column: 24,
        span: 4144..4151,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 203,
        column: 25,
        span: 4151..4152,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 203,
        column: 26,
        span: 4151..4153,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 203,
        column: 27,
        span: 4153..4154,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 203,
        column: 28,
        span: 4153..4155,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 203,
        column: 29,
        span: 4155..4156,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 203,
        column: 30,
        span: 4155..4157,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 203,
        column: 31,
        span: 4157..4158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 204,
        column: 7,
        span: 4159..4165,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 8,
        span: 4165..4166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 204,
        column: 9,
        span: 4166..4167,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 204,
        column: 11,
        span: 4167..4169,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 12,
        span: 4168..4170,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 204,
        column: 16,
        span: 4171..4174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 204,
        column: 18,
        span: 4175..4176,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 204,
        column: 20,
        span: 4176..4178,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 21,
        span: 4177..4179,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 204,
        column: 25,
        span: 4180..4183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 204,
        column: 27,
        span: 4184..4185,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 204,
        column: 29,
        span: 4185..4187,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 30,
        span: 4186..4188,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 204,
        column: 34,
        span: 4189..4192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 204,
        column: 36,
        span: 4193..4194,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 204,
        column: 38,
        span: 4194..4196,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 204,
        column: 41,
        span: 4196..4199,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 42,
        span: 4199..4200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 205,
        column: 2,
        span: 4201..4202,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 205,
        column: 4,
        span: 4203..4204,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 205,
        column: 6,
        span: 4205..4206,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 205,
        column: 7,
        span: 4205..4207,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 205,
        column: 8,
        span: 4207..4208,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 205,
        column: 9,
        span: 4207..4209,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 205,
        column: 10,
        span: 4209..4210,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 205,
        column: 11,
        span: 4209..4211,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 205,
        column: 12,
        span: 4211..4212,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 205,
        column: 13,
        span: 4211..4213,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 205,
        column: 14,
        span: 4213..4214,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 205,
        column: 19,
        span: 4214..4219,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 205,
        column: 20,
        span: 4219..4220,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 205,
        column: 22,
        span: 4219..4222,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 205,
        column: 23,
        span: 4222..4223,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        line: 205,
        column: 28,
        span: 4223..4228,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 205,
        column: 29,
        span: 4228..4229,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 205,
        column: 34,
        span: 4229..4234,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 205,
        column: 35,
        span: 4234..4235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 205,
        column: 41,
        span: 4235..4241,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 205,
        column: 42,
        span: 4241..4242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "equaltab",
        ),
        line: 206,
        column: 9,
        span: 4243..4251,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
        column: 10,
        span: 4251..4252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 206,
        column: 14,
        span: 4252..4256,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
        column: 15,
        span: 4256..4257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        line: 206,
        column: 22,
        span: 4257..4264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
        column: 23,
        span: 4264..4265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 206,
        column: 24,
        span: 4265..4266,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
        column: 25,
        span: 4266..4267,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
        column: 26,
        span: 4267..4268,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 206,
        column: 27,
        span: 4268..4269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 206,
        column: 29,
        span: 4270..4271,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
        column: 30,
        span: 4271..4272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "equaltab",
        ),
        line: 207,
        column: 9,
        span: 4273..4281,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 207,
        column: 10,
        span: 4281..4282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 207,
        column: 14,
        span: 4282..4286,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 207,
        column: 15,
        span: 4286..4287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        line: 207,
        column: 22,
        span: 4287..4294,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 207,
        column: 23,
        span: 4294..4295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 207,
        column: 24,
        span: 4295..4296,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
        column: 25,
        span: 4296..4297,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 207,
        column: 26,
        span: 4297..4298,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 207,
        column: 28,
        span: 4299..4300,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 207,
        column: 29,
        span: 4299..4301,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
        column: 30,
        span: 4301..4302,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 207,
        column: 31,
        span: 4302..4303,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 207,
        column: 33,
        span: 4304..4305,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 207,
        column: 34,
        span: 4304..4306,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 207,
        column: 35,
        span: 4306..4307,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 207,
        column: 36,
        span: 4307..4308,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 207,
        column: 37,
        span: 4307..4309,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 207,
        column: 38,
        span: 4309..4310,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
        column: 39,
        span: 4310..4311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 208,
        column: 2,
        span: 4312..4313,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 208,
        column: 3,
        span: 4313..4314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 208,
        column: 4,
        span: 4314..4315,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 208,
        column: 5,
        span: 4315..4316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 208,
        column: 6,
        span: 4316..4317,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 208,
        column: 7,
        span: 4317..4318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 208,
        column: 8,
        span: 4318..4319,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 208,
        column: 10,
        span: 4320..4321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ret2",
        ),
        line: 208,
        column: 15,
        span: 4322..4326,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 16,
        span: 4326..4327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 208,
        column: 17,
        span: 4327..4328,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 18,
        span: 4328..4329,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 19,
        span: 4329..4330,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 20,
        span: 4330..4331,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 208,
        column: 21,
        span: 4331..4332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ret2",
        ),
        line: 208,
        column: 26,
        span: 4333..4337,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 27,
        span: 4337..4338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 208,
        column: 28,
        span: 4338..4339,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 29,
        span: 4339..4340,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 30,
        span: 4340..4341,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 31,
        span: 4341..4342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 209,
        column: 7,
        span: 4343..4349,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
        column: 8,
        span: 4349..4350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 209,
        column: 9,
        span: 4350..4351,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 209,
        column: 11,
        span: 4351..4353,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 209,
        column: 12,
        span: 4352..4354,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 209,
        column: 16,
        span: 4355..4358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 209,
        column: 18,
        span: 4359..4360,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 209,
        column: 20,
        span: 4360..4362,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 209,
        column: 21,
        span: 4361..4363,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 209,
        column: 25,
        span: 4364..4367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 209,
        column: 27,
        span: 4368..4369,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 209,
        column: 29,
        span: 4369..4371,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 209,
        column: 30,
        span: 4370..4372,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 209,
        column: 34,
        span: 4373..4376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 209,
        column: 36,
        span: 4377..4378,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 209,
        column: 38,
        span: 4378..4380,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 209,
        column: 41,
        span: 4380..4383,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
        column: 42,
        span: 4383..4384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 210,
        column: 2,
        span: 4385..4386,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 210,
        column: 3,
        span: 4386..4387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 210,
        column: 4,
        span: 4387..4388,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 210,
        column: 5,
        span: 4388..4389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 210,
        column: 6,
        span: 4389..4390,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 210,
        column: 7,
        span: 4390..4391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 210,
        column: 8,
        span: 4391..4392,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 210,
        column: 10,
        span: 4393..4394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        line: 210,
        column: 18,
        span: 4395..4402,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 19,
        span: 4402..4403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 210,
        column: 23,
        span: 4403..4407,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 24,
        span: 4407..4408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ret2",
        ),
        line: 210,
        column: 28,
        span: 4408..4412,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 29,
        span: 4412..4413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 210,
        column: 30,
        span: 4413..4414,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 31,
        span: 4414..4415,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
        column: 32,
        span: 4415..4416,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
        column: 33,
        span: 4416..4417,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 210,
        column: 34,
        span: 4417..4418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ret2",
        ),
        line: 210,
        column: 39,
        span: 4419..4423,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 40,
        span: 4423..4424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 210,
        column: 41,
        span: 4424..4425,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 42,
        span: 4425..4426,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
        column: 43,
        span: 4426..4427,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
        column: 44,
        span: 4427..4428,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
        column: 45,
        span: 4428..4429,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
        column: 46,
        span: 4429..4430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 211,
        column: 7,
        span: 4431..4437,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 211,
        column: 8,
        span: 4437..4438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 211,
        column: 9,
        span: 4438..4439,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 211,
        column: 11,
        span: 4439..4441,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 211,
        column: 12,
        span: 4440..4442,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 211,
        column: 16,
        span: 4443..4446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 211,
        column: 18,
        span: 4447..4448,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 211,
        column: 20,
        span: 4448..4450,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 211,
        column: 21,
        span: 4449..4451,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 211,
        column: 25,
        span: 4452..4455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 211,
        column: 27,
        span: 4456..4457,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 211,
        column: 29,
        span: 4457..4459,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 211,
        column: 30,
        span: 4458..4460,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 211,
        column: 34,
        span: 4461..4464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 211,
        column: 36,
        span: 4465..4466,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 211,
        column: 38,
        span: 4466..4468,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 211,
        column: 41,
        span: 4468..4471,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 211,
        column: 42,
        span: 4471..4472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 212,
        column: 2,
        span: 4473..4474,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 212,
        column: 3,
        span: 4474..4475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 212,
        column: 4,
        span: 4475..4476,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 212,
        column: 5,
        span: 4476..4477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 212,
        column: 6,
        span: 4477..4478,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 212,
        column: 7,
        span: 4478..4479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 212,
        column: 8,
        span: 4479..4480,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 212,
        column: 10,
        span: 4481..4482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        line: 212,
        column: 18,
        span: 4483..4490,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 19,
        span: 4490..4491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 212,
        column: 23,
        span: 4491..4495,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 24,
        span: 4495..4496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ret2",
        ),
        line: 212,
        column: 28,
        span: 4496..4500,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 29,
        span: 4500..4501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 212,
        column: 30,
        span: 4501..4502,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 31,
        span: 4502..4503,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 32,
        span: 4503..4504,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 33,
        span: 4504..4505,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 212,
        column: 34,
        span: 4505..4506,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 36,
        span: 4507..4508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ret2",
        ),
        line: 212,
        column: 40,
        span: 4508..4512,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 41,
        span: 4512..4513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 212,
        column: 42,
        span: 4513..4514,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 43,
        span: 4514..4515,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 44,
        span: 4515..4516,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 45,
        span: 4516..4517,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 46,
        span: 4517..4518,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 47,
        span: 4518..4519,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 48,
        span: 4519..4520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 213,
        column: 7,
        span: 4521..4527,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 8,
        span: 4527..4528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 213,
        column: 9,
        span: 4528..4529,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 213,
        column: 11,
        span: 4529..4531,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 213,
        column: 12,
        span: 4530..4532,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 213,
        column: 16,
        span: 4533..4536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 213,
        column: 18,
        span: 4537..4538,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 213,
        column: 20,
        span: 4538..4540,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 213,
        column: 21,
        span: 4539..4541,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 213,
        column: 25,
        span: 4542..4545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 213,
        column: 27,
        span: 4546..4547,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 213,
        column: 29,
        span: 4547..4549,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 213,
        column: 32,
        span: 4549..4552,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 213,
        column: 36,
        span: 4553..4556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 213,
        column: 38,
        span: 4557..4558,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 213,
        column: 40,
        span: 4558..4560,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 213,
        column: 43,
        span: 4560..4563,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 44,
        span: 4563..4564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 215,
        column: 2,
        span: 4566..4567,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 215,
        column: 4,
        span: 4568..4569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ret2",
        ),
        line: 215,
        column: 9,
        span: 4570..4574,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 215,
        column: 10,
        span: 4574..4575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        line: 215,
        column: 18,
        span: 4576..4583,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 215,
        column: 19,
        span: 4583..4584,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 215,
        column: 20,
        span: 4583..4585,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 215,
        column: 21,
        span: 4585..4586,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 215,
        column: 22,
        span: 4585..4587,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 215,
        column: 23,
        span: 4587..4588,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 215,
        column: 24,
        span: 4587..4589,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 215,
        column: 25,
        span: 4589..4590,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 215,
        column: 26,
        span: 4590..4591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        line: 215,
        column: 34,
        span: 4592..4599,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 215,
        column: 35,
        span: 4599..4600,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 215,
        column: 36,
        span: 4599..4601,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 215,
        column: 37,
        span: 4601..4602,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 215,
        column: 38,
        span: 4601..4603,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 215,
        column: 39,
        span: 4603..4604,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 215,
        column: 40,
        span: 4603..4605,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 215,
        column: 41,
        span: 4605..4606,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 215,
        column: 42,
        span: 4606..4607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        line: 215,
        column: 50,
        span: 4608..4615,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 215,
        column: 51,
        span: 4615..4616,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 215,
        column: 54,
        span: 4616..4619,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 215,
        column: 55,
        span: 4619..4620,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 215,
        column: 59,
        span: 4621..4624,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 215,
        column: 60,
        span: 4624..4625,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 215,
        column: 61,
        span: 4625..4626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 216,
        column: 7,
        span: 4627..4633,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 8,
        span: 4633..4634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 216,
        column: 9,
        span: 4634..4635,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 216,
        column: 10,
        span: 4635..4636,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 216,
        column: 11,
        span: 4635..4637,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 216,
        column: 12,
        span: 4637..4638,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 216,
        column: 15,
        span: 4639..4641,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 216,
        column: 17,
        span: 4641..4643,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 216,
        column: 21,
        span: 4644..4647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 216,
        column: 23,
        span: 4648..4649,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 216,
        column: 24,
        span: 4649..4650,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 216,
        column: 25,
        span: 4649..4651,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 216,
        column: 26,
        span: 4651..4652,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 216,
        column: 29,
        span: 4653..4655,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 216,
        column: 31,
        span: 4655..4657,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 216,
        column: 35,
        span: 4658..4661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 216,
        column: 37,
        span: 4662..4663,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 216,
        column: 38,
        span: 4663..4664,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 216,
        column: 39,
        span: 4663..4665,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 216,
        column: 40,
        span: 4665..4666,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 216,
        column: 43,
        span: 4667..4669,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 216,
        column: 47,
        span: 4670..4673,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 216,
        column: 51,
        span: 4674..4677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 216,
        column: 53,
        span: 4678..4679,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 216,
        column: 54,
        span: 4679..4680,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 216,
        column: 55,
        span: 4679..4681,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 216,
        column: 56,
        span: 4681..4682,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 216,
        column: 59,
        span: 4683..4685,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 216,
        column: 63,
        span: 4686..4689,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 64,
        span: 4689..4690,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        line: 220,
        column: 7,
        span: 4737..4743,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 220,
        column: 8,
        span: 4743..4744,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 220,
        column: 9,
        span: 4744..4745,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 220,
        column: 10,
        span: 4745..4746,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 220,
        column: 11,
        span: 4746..4747,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 220,
        column: 15,
        span: 4748..4751,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 220,
        column: 16,
        span: 4751..4752,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 220,
        column: 18,
        span: 4752..4754,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 220,
        column: 19,
        span: 4754..4755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawset",
        ),
        line: 221,
        column: 7,
        span: 4756..4762,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 8,
        span: 4762..4763,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 221,
        column: 9,
        span: 4763..4764,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 221,
        column: 10,
        span: 4764..4765,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 221,
        column: 11,
        span: 4765..4766,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 221,
        column: 15,
        span: 4767..4770,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 221,
        column: 16,
        span: 4770..4771,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 221,
        column: 18,
        span: 4771..4773,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 221,
        column: 19,
        span: 4773..4774,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 221,
        column: 21,
        span: 4774..4776,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 22,
        span: 4776..4777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 222,
        column: 7,
        span: 4778..4784,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
        column: 8,
        span: 4784..4785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 222,
        column: 12,
        span: 4785..4789,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 222,
        column: 13,
        span: 4789..4790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 222,
        column: 16,
        span: 4790..4793,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
        column: 17,
        span: 4793..4794,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 222,
        column: 18,
        span: 4793..4795,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 222,
        column: 19,
        span: 4795..4796,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 222,
        column: 20,
        span: 4795..4797,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
        column: 21,
        span: 4797..4798,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 222,
        column: 24,
        span: 4799..4801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 222,
        column: 29,
        span: 4802..4806,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 222,
        column: 30,
        span: 4806..4807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 222,
        column: 33,
        span: 4807..4810,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
        column: 34,
        span: 4810..4811,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 222,
        column: 35,
        span: 4810..4812,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
        column: 36,
        span: 4812..4813,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
        column: 37,
        span: 4813..4814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 223,
        column: 6,
        span: 4815..4820,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 223,
        column: 7,
        span: 4820..4821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        line: 223,
        column: 11,
        span: 4821..4825,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 223,
        column: 12,
        span: 4825..4826,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 223,
        column: 13,
        span: 4826..4827,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 223,
        column: 15,
        span: 4826..4829,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 223,
        column: 16,
        span: 4829..4830,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 223,
        column: 17,
        span: 4829..4831,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 223,
        column: 18,
        span: 4831..4832,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 223,
        column: 19,
        span: 4831..4833,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 223,
        column: 20,
        span: 4833..4834,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 223,
        column: 21,
        span: 4833..4835,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 223,
        column: 22,
        span: 4835..4836,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "19",
                    after_decimal: "",
                },
            ),
        ),
        line: 223,
        column: 24,
        span: 4835..4838,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 223,
        column: 25,
        span: 4838..4839,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 223,
        column: 27,
        span: 4838..4841,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 223,
        column: 28,
        span: 4841..4842,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 223,
        column: 29,
        span: 4841..4843,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 223,
        column: 30,
        span: 4843..4844,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 223,
        column: 31,
        span: 4843..4845,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 223,
        column: 32,
        span: 4845..4846,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 223,
        column: 33,
        span: 4846..4847,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 223,
        column: 42,
        span: 4848..4856,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 223,
        column: 44,
        span: 4857..4858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 223,
        column: 45,
        span: 4858..4859,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 223,
        column: 46,
        span: 4859..4860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 223,
        column: 47,
        span: 4860..4861,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 223,
        column: 48,
        span: 4861..4862,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 223,
        column: 55,
        span: 4863..4869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 223,
        column: 57,
        span: 4870..4871,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 223,
        column: 58,
        span: 4871..4872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 223,
        column: 59,
        span: 4872..4873,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 223,
        column: 63,
        span: 4874..4877,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 223,
        column: 64,
        span: 4877..4878,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"extra arg\"",
        ),
        line: 223,
        column: 76,
        span: 4879..4890,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 223,
        column: 77,
        span: 4890..4891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 227,
        column: 2,
        span: 4919..4920,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 227,
        column: 4,
        span: 4921..4922,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-- a comment\\0\\0\\0\\n  x = 10 + \\n23; \\\n     local a = function () x = 'hi' end; \\\n     return '\\0'\"",
        ),
        line: 229,
        column: 18,
        span: 4923..5023,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 230,
        column: 6,
        span: 5024..5029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 230,
        column: 8,
        span: 5030..5031,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 230,
        column: 10,
        span: 5032..5033,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 230,
        column: 0,
        span: 5033..5035,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 231,
        column: 9,
        span: 5036..5044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read1",
        ),
        line: 231,
        column: 15,
        span: 5045..5050,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
        column: 17,
        span: 5051..5052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 231,
        column: 18,
        span: 5052..5053,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
        column: 19,
        span: 5053..5054,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 232,
        column: 9,
        span: 5057..5063,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 232,
        column: 18,
        span: 5064..5072,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 232,
        column: 20,
        span: 5073..5074,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 232,
        column: 21,
        span: 5074..5075,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 233,
        column: 19,
        span: 5080..5094,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 233,
        column: 20,
        span: 5094..5095,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 233,
        column: 21,
        span: 5095..5096,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 234,
        column: 6,
        span: 5101..5102,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 234,
        column: 7,
        span: 5102..5103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 234,
        column: 8,
        span: 5103..5104,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 234,
        column: 9,
        span: 5104..5105,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 234,
        column: 0,
        span: 5104..5106,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 235,
        column: 11,
        span: 5111..5117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 235,
        column: 18,
        span: 5118..5124,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 235,
        column: 19,
        span: 5124..5125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 235,
        column: 22,
        span: 5125..5128,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 235,
        column: 23,
        span: 5128..5129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 235,
        column: 24,
        span: 5129..5130,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 235,
        column: 25,
        span: 5130..5131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 235,
        column: 27,
        span: 5132..5133,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 235,
        column: 28,
        span: 5133..5134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 235,
        column: 30,
        span: 5135..5136,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 235,
        column: 31,
        span: 5136..5137,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 236,
        column: 0,
        span: 5140..5143,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 237,
        column: 0,
        span: 5144..5147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 239,
        column: 2,
        span: 5149..5150,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 239,
        column: 4,
        span: 5151..5152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 239,
        column: 11,
        span: 5153..5159,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 12,
        span: 5159..5160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 239,
        column: 16,
        span: 5160..5164,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 17,
        span: 5164..5165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read1",
        ),
        line: 239,
        column: 22,
        span: 5165..5170,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 23,
        span: 5170..5171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 239,
        column: 24,
        span: 5171..5172,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 25,
        span: 5172..5173,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 239,
        column: 26,
        span: 5173..5174,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"modname\"",
        ),
        line: 239,
        column: 36,
        span: 5175..5184,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 37,
        span: 5184..5185,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 38,
        span: 5185..5186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 240,
        column: 7,
        span: 5187..5193,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 8,
        span: 5193..5194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 240,
        column: 9,
        span: 5194..5195,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 10,
        span: 5195..5196,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 11,
        span: 5196..5197,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 240,
        column: 14,
        span: 5198..5200,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\"",
        ),
        line: 240,
        column: 19,
        span: 5201..5205,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 240,
        column: 23,
        span: 5206..5209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 240,
        column: 26,
        span: 5210..5212,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 240,
        column: 27,
        span: 5212..5213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 240,
        column: 28,
        span: 5213..5214,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 240,
        column: 31,
        span: 5215..5217,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "33",
                    after_decimal: "",
                },
            ),
        ),
        line: 240,
        column: 34,
        span: 5217..5220,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 35,
        span: 5220..5221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 241,
        column: 7,
        span: 5222..5228,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 241,
        column: 8,
        span: 5228..5229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 241,
        column: 13,
        span: 5229..5234,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 241,
        column: 14,
        span: 5234..5235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 241,
        column: 21,
        span: 5235..5242,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 241,
        column: 22,
        span: 5242..5243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 241,
        column: 23,
        span: 5243..5244,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 241,
        column: 24,
        span: 5244..5245,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 241,
        column: 25,
        span: 5245..5246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        line: 241,
        column: 31,
        span: 5246..5252,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 241,
        column: 34,
        span: 5253..5255,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"modname\"",
        ),
        line: 241,
        column: 44,
        span: 5256..5265,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 241,
        column: 45,
        span: 5265..5266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 243,
        column: 2,
        span: 5268..5269,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 243,
        column: 4,
        span: 5270..5271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 243,
        column: 11,
        span: 5272..5278,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 243,
        column: 12,
        span: 5278..5279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 243,
        column: 16,
        span: 5279..5283,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
        column: 17,
        span: 5283..5284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        line: 243,
        column: 27,
        span: 5284..5294,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
        column: 28,
        span: 5294..5295,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x = 1; return x\"",
        ),
        line: 243,
        column: 45,
        span: 5295..5312,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
        column: 46,
        span: 5312..5313,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
        column: 47,
        span: 5313..5314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 244,
        column: 2,
        span: 5315..5316,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 244,
        column: 4,
        span: 5317..5318,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 244,
        column: 0,
        span: 5318..5320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 245,
        column: 2,
        span: 5321..5322,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 245,
        column: 4,
        span: 5323..5324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 245,
        column: 11,
        span: 5325..5331,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 245,
        column: 12,
        span: 5331..5332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 245,
        column: 16,
        span: 5332..5336,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 245,
        column: 17,
        span: 5336..5337,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read1",
        ),
        line: 245,
        column: 22,
        span: 5337..5342,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 245,
        column: 23,
        span: 5342..5343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 245,
        column: 24,
        span: 5343..5344,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 245,
        column: 25,
        span: 5344..5345,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 245,
        column: 26,
        span: 5345..5346,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 245,
        column: 27,
        span: 5346..5347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 246,
        column: 7,
        span: 5348..5354,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 246,
        column: 8,
        span: 5354..5355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 246,
        column: 9,
        span: 5355..5356,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 246,
        column: 10,
        span: 5356..5357,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 246,
        column: 11,
        span: 5357..5358,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 246,
        column: 14,
        span: 5359..5361,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 246,
        column: 16,
        span: 5361..5363,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 246,
        column: 20,
        span: 5364..5367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 246,
        column: 23,
        span: 5368..5370,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 246,
        column: 24,
        span: 5370..5371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 246,
        column: 25,
        span: 5371..5372,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 246,
        column: 28,
        span: 5373..5375,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 246,
        column: 30,
        span: 5375..5377,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 246,
        column: 31,
        span: 5377..5378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 248,
        column: 2,
        span: 5380..5381,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 248,
        column: 4,
        span: 5382..5383,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 248,
        column: 0,
        span: 5383..5385,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 249,
        column: 6,
        span: 5386..5391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 249,
        column: 8,
        span: 5392..5393,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 249,
        column: 9,
        span: 5393..5394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 249,
        column: 11,
        span: 5395..5396,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 249,
        column: 13,
        span: 5397..5398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 249,
        column: 18,
        span: 5399..5403,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
        column: 19,
        span: 5403..5404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read1",
        ),
        line: 249,
        column: 24,
        span: 5404..5409,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
        column: 25,
        span: 5409..5410,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*a = 123\"",
        ),
        line: 249,
        column: 35,
        span: 5410..5420,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
        column: 36,
        span: 5420..5421,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
        column: 37,
        span: 5421..5422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 250,
        column: 7,
        span: 5423..5429,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
        column: 8,
        span: 5429..5430,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 250,
        column: 11,
        span: 5430..5433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 250,
        column: 13,
        span: 5434..5435,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 250,
        column: 17,
        span: 5436..5439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 250,
        column: 22,
        span: 5440..5444,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
        column: 23,
        span: 5444..5445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 250,
        column: 24,
        span: 5445..5446,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
        column: 25,
        span: 5446..5447,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 250,
        column: 28,
        span: 5448..5450,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 250,
        column: 37,
        span: 5451..5459,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 250,
        column: 41,
        span: 5460..5463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 250,
        column: 43,
        span: 5464..5465,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 250,
        column: 46,
        span: 5466..5468,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 250,
        column: 48,
        span: 5468..5470,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
        column: 49,
        span: 5470..5471,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 252,
        column: 2,
        span: 5473..5474,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 252,
        column: 3,
        span: 5474..5475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 252,
        column: 5,
        span: 5476..5477,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 252,
        column: 7,
        span: 5478..5479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 252,
        column: 12,
        span: 5480..5484,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 13,
        span: 5484..5485,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 252,
        column: 21,
        span: 5485..5493,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 23,
        span: 5494..5495,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 24,
        span: 5495..5496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 252,
        column: 30,
        span: 5497..5502,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 31,
        span: 5502..5503,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hhi\"",
        ),
        line: 252,
        column: 36,
        span: 5503..5508,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 37,
        span: 5508..5509,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 252,
        column: 41,
        span: 5510..5513,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 42,
        span: 5513..5514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 253,
        column: 7,
        span: 5515..5521,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 8,
        span: 5521..5522,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 253,
        column: 11,
        span: 5522..5525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 253,
        column: 13,
        span: 5526..5527,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 253,
        column: 17,
        span: 5528..5531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 253,
        column: 24,
        span: 5532..5538,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 253,
        column: 25,
        span: 5538..5539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 253,
        column: 29,
        span: 5539..5543,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 30,
        span: 5543..5544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 253,
        column: 31,
        span: 5544..5545,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 253,
        column: 32,
        span: 5545..5546,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hhi\"",
        ),
        line: 253,
        column: 38,
        span: 5547..5552,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 39,
        span: 5552..5553,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 40,
        span: 5553..5554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 256,
        column: 2,
        span: 5599..5600,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 256,
        column: 4,
        span: 5601..5602,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  return function (x)\n    return function (y)\n     return function (z)\n       return x+y+z\n     end\n   end\n  end\n]]",
        ),
        line: 264,
        column: 3,
        span: 5603..5721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 266,
        column: 2,
        span: 5723..5724,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 266,
        column: 4,
        span: 5725..5726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 266,
        column: 11,
        span: 5727..5733,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
        column: 12,
        span: 5733..5734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 266,
        column: 16,
        span: 5734..5738,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
        column: 17,
        span: 5738..5739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read1",
        ),
        line: 266,
        column: 22,
        span: 5739..5744,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
        column: 23,
        span: 5744..5745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 266,
        column: 24,
        span: 5745..5746,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
        column: 25,
        span: 5746..5747,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
        column: 26,
        span: 5747..5748,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
        column: 27,
        span: 5748..5749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 267,
        column: 7,
        span: 5750..5756,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 8,
        span: 5756..5757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 267,
        column: 9,
        span: 5757..5758,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 10,
        span: 5758..5759,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
        column: 11,
        span: 5759..5760,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 12,
        span: 5760..5761,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 267,
        column: 13,
        span: 5760..5762,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
        column: 14,
        span: 5762..5763,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 15,
        span: 5763..5764,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 267,
        column: 16,
        span: 5763..5765,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
        column: 17,
        span: 5765..5766,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 18,
        span: 5766..5767,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 267,
        column: 20,
        span: 5766..5769,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
        column: 21,
        span: 5769..5770,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 267,
        column: 24,
        span: 5771..5773,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 267,
        column: 27,
        span: 5773..5776,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
        column: 28,
        span: 5776..5777,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 271,
        column: 6,
        span: 5818..5823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 271,
        column: 8,
        span: 5824..5825,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 271,
        column: 9,
        span: 5825..5826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 271,
        column: 11,
        span: 5827..5828,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 271,
        column: 13,
        span: 5829..5830,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 271,
        column: 16,
        span: 5830..5833,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 271,
        column: 17,
        span: 5833..5834,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 271,
        column: 0,
        span: 5834..5837,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 272,
        column: 2,
        span: 5838..5839,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 272,
        column: 4,
        span: 5840..5841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        line: 272,
        column: 15,
        span: 5842..5852,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 272,
        column: 16,
        span: 5852..5853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 272,
        column: 22,
        span: 5853..5859,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 272,
        column: 23,
        span: 5859..5860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 272,
        column: 27,
        span: 5860..5864,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 272,
        column: 28,
        span: 5864..5865,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 272,
        column: 36,
        span: 5865..5873,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 272,
        column: 38,
        span: 5874..5875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 272,
        column: 39,
        span: 5875..5876,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 272,
        column: 40,
        span: 5876..5877,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 273,
        column: 5,
        span: 5880..5882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 273,
        column: 7,
        span: 5883..5884,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 273,
        column: 10,
        span: 5885..5887,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        line: 273,
        column: 16,
        span: 5888..5893,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 273,
        column: 21,
        span: 5894..5898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 273,
        column: 23,
        span: 5899..5900,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 273,
        column: 25,
        span: 5901..5902,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 273,
        column: 28,
        span: 5902..5905,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 273,
        column: 29,
        span: 5905..5906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 273,
        column: 30,
        span: 5906..5907,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 273,
        column: 31,
        span: 5907..5908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 273,
        column: 33,
        span: 5909..5910,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 273,
        column: 35,
        span: 5911..5912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 273,
        column: 37,
        span: 5913..5914,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 273,
        column: 38,
        span: 5914..5915,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 273,
        column: 39,
        span: 5914..5916,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 273,
        column: 0,
        span: 5917..5921,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 274,
        column: 9,
        span: 5924..5930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 274,
        column: 0,
        span: 5931..5932,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 275,
        column: 0,
        span: 5935..5938,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 276,
        column: 4,
        span: 5939..5942,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 276,
        column: 5,
        span: 5942..5943,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 276,
        column: 6,
        span: 5943..5944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 277,
        column: 7,
        span: 5945..5951,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 8,
        span: 5951..5952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 277,
        column: 9,
        span: 5952..5953,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 10,
        span: 5953..5954,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 11,
        span: 5954..5955,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 277,
        column: 14,
        span: 5956..5958,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 277,
        column: 18,
        span: 5959..5962,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 19,
        span: 5962..5963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 278,
        column: 7,
        span: 5964..5970,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 278,
        column: 8,
        span: 5970..5971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 278,
        column: 13,
        span: 5971..5976,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 278,
        column: 14,
        span: 5976..5977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setupvalue",
        ),
        line: 278,
        column: 24,
        span: 5977..5987,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 278,
        column: 25,
        span: 5987..5988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 278,
        column: 26,
        span: 5988..5989,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 278,
        column: 27,
        span: 5989..5990,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 278,
        column: 29,
        span: 5990..5992,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 278,
        column: 30,
        span: 5992..5993,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 278,
        column: 35,
        span: 5994..5998,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
        column: 36,
        span: 5998..5999,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 278,
        column: 39,
        span: 6000..6002,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 278,
        column: 43,
        span: 6003..6006,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
        column: 44,
        span: 6006..6007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 279,
        column: 7,
        span: 6008..6014,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 279,
        column: 8,
        span: 6014..6015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 279,
        column: 9,
        span: 6015..6016,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 279,
        column: 10,
        span: 6016..6017,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 279,
        column: 11,
        span: 6017..6018,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 279,
        column: 14,
        span: 6019..6021,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 279,
        column: 19,
        span: 6022..6026,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 279,
        column: 20,
        span: 6026..6027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 280,
        column: 7,
        span: 6028..6034,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 280,
        column: 8,
        span: 6034..6035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 280,
        column: 13,
        span: 6035..6040,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 280,
        column: 14,
        span: 6040..6041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setupvalue",
        ),
        line: 280,
        column: 24,
        span: 6041..6051,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 280,
        column: 25,
        span: 6051..6052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 280,
        column: 26,
        span: 6052..6053,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 280,
        column: 27,
        span: 6053..6054,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 280,
        column: 29,
        span: 6054..6056,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 280,
        column: 30,
        span: 6056..6057,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 280,
        column: 33,
        span: 6057..6060,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 280,
        column: 34,
        span: 6060..6061,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 280,
        column: 37,
        span: 6062..6064,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 280,
        column: 41,
        span: 6065..6068,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 280,
        column: 42,
        span: 6068..6069,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 281,
        column: 7,
        span: 6070..6076,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 281,
        column: 8,
        span: 6076..6077,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 281,
        column: 11,
        span: 6077..6080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 281,
        column: 17,
        span: 6081..6086,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 281,
        column: 18,
        span: 6086..6087,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setupvalue",
        ),
        line: 281,
        column: 28,
        span: 6087..6097,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 281,
        column: 29,
        span: 6097..6098,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 281,
        column: 30,
        span: 6098..6099,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 281,
        column: 31,
        span: 6099..6100,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 281,
        column: 33,
        span: 6100..6102,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 281,
        column: 34,
        span: 6102..6103,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 281,
        column: 37,
        span: 6103..6106,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 281,
        column: 38,
        span: 6106..6107,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 281,
        column: 39,
        span: 6107..6108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 282,
        column: 2,
        span: 6130..6131,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 282,
        column: 3,
        span: 6131..6132,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        line: 282,
        column: 8,
        span: 6132..6137,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 282,
        column: 9,
        span: 6137..6138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 283,
        column: 7,
        span: 6139..6145,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 283,
        column: 8,
        span: 6145..6146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 283,
        column: 9,
        span: 6146..6147,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 283,
        column: 10,
        span: 6147..6148,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 283,
        column: 11,
        span: 6148..6149,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 283,
        column: 14,
        span: 6150..6152,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 283,
        column: 17,
        span: 6152..6155,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 283,
        column: 18,
        span: 6155..6156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 284,
        column: 2,
        span: 6157..6158,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 284,
        column: 3,
        span: 6158..6159,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        line: 284,
        column: 8,
        span: 6159..6164,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 284,
        column: 9,
        span: 6164..6165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 285,
        column: 7,
        span: 6166..6172,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 285,
        column: 8,
        span: 6172..6173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 285,
        column: 9,
        span: 6173..6174,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 285,
        column: 10,
        span: 6174..6175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 285,
        column: 11,
        span: 6175..6176,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 285,
        column: 14,
        span: 6177..6179,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        line: 285,
        column: 17,
        span: 6179..6182,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 285,
        column: 18,
        span: 6182..6183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 289,
        column: 7,
        span: 6226..6232,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 289,
        column: 8,
        span: 6232..6233,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 289,
        column: 9,
        span: 6233..6234,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 289,
        column: 17,
        span: 6234..6242,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 289,
        column: 19,
        span: 6243..6244,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 289,
        column: 20,
        span: 6244..6245,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 289,
        column: 27,
        span: 6246..6252,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 289,
        column: 31,
        span: 6253..6256,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 289,
        column: 35,
        span: 6257..6260,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 289,
        column: 36,
        span: 6260..6261,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 289,
        column: 37,
        span: 6261..6262,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 289,
        column: 38,
        span: 6261..6263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 289,
        column: 39,
        span: 6263..6264,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 289,
        column: 42,
        span: 6265..6267,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 289,
        column: 46,
        span: 6268..6271,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 289,
        column: 47,
        span: 6271..6272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 290,
        column: 7,
        span: 6273..6279,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 290,
        column: 8,
        span: 6279..6280,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 290,
        column: 9,
        span: 6280..6281,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 290,
        column: 17,
        span: 6281..6289,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 290,
        column: 19,
        span: 6290..6291,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 290,
        column: 20,
        span: 6291..6292,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 290,
        column: 26,
        span: 6293..6298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 290,
        column: 28,
        span: 6299..6300,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 290,
        column: 29,
        span: 6300..6301,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 290,
        column: 36,
        span: 6302..6308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 290,
        column: 38,
        span: 6309..6310,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 290,
        column: 42,
        span: 6311..6314,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 290,
        column: 43,
        span: 6314..6315,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 290,
        column: 44,
        span: 6315..6316,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 290,
        column: 45,
        span: 6315..6317,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 290,
        column: 46,
        span: 6317..6318,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 290,
        column: 49,
        span: 6319..6321,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 290,
        column: 53,
        span: 6322..6325,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 290,
        column: 54,
        span: 6325..6326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 291,
        column: 7,
        span: 6327..6333,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 291,
        column: 8,
        span: 6333..6334,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 291,
        column: 9,
        span: 6334..6335,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 291,
        column: 17,
        span: 6335..6343,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 291,
        column: 19,
        span: 6344..6345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 291,
        column: 20,
        span: 6345..6346,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 291,
        column: 21,
        span: 6346..6347,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 291,
        column: 28,
        span: 6348..6354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 291,
        column: 30,
        span: 6355..6356,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 291,
        column: 34,
        span: 6357..6360,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 291,
        column: 35,
        span: 6360..6361,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 291,
        column: 36,
        span: 6361..6362,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 291,
        column: 37,
        span: 6362..6363,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 291,
        column: 40,
        span: 6364..6366,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 291,
        column: 44,
        span: 6367..6370,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 291,
        column: 45,
        span: 6370..6371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 293,
        column: 6,
        span: 6373..6378,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 293,
        column: 7,
        span: 6378..6379,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 293,
        column: 11,
        span: 6379..6383,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 293,
        column: 12,
        span: 6383..6384,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 294,
        column: 7,
        span: 6385..6391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 294,
        column: 0,
        span: 6392..6396,
    },
]
