---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.1-tests/attrib.lua
---
[
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 1,
            column: 2,
            span: 0..2,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 3,
            column: 6,
            span: 8..13,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing require\"",
        ),
        position: Position {
            line: 3,
            column: 24,
            span: 14..31,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 5,
            column: 7,
            span: 33..39,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 5,
            column: 8,
            span: 39..40,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 5,
            column: 15,
            span: 40..47,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        position: Position {
            line: 5,
            column: 23,
            span: 47..55,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 5,
            column: 26,
            span: 56..58,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 5,
            column: 33,
            span: 59..65,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 5,
            column: 34,
            span: 65..66,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 6,
            column: 7,
            span: 67..73,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 6,
            column: 8,
            span: 73..74,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 6,
            column: 15,
            span: 74..81,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"math\"",
        ),
        position: Position {
            line: 6,
            column: 21,
            span: 81..87,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 6,
            column: 24,
            span: 88..90,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 6,
            column: 29,
            span: 91..95,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 6,
            column: 30,
            span: 95..96,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 7,
            column: 7,
            span: 97..103,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 7,
            column: 8,
            span: 103..104,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 7,
            column: 15,
            span: 104..111,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        position: Position {
            line: 7,
            column: 22,
            span: 111..118,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 7,
            column: 25,
            span: 119..121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 7,
            column: 31,
            span: 122..127,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 7,
            column: 32,
            span: 127..128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 8,
            column: 7,
            span: 129..135,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 8,
            column: 8,
            span: 135..136,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 8,
            column: 15,
            span: 136..143,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"io\"",
        ),
        position: Position {
            line: 8,
            column: 19,
            span: 143..147,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 8,
            column: 22,
            span: 148..150,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 8,
            column: 25,
            span: 151..153,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 8,
            column: 26,
            span: 153..154,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 9,
            column: 7,
            span: 155..161,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 9,
            column: 8,
            span: 161..162,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 9,
            column: 15,
            span: 162..169,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"os\"",
        ),
        position: Position {
            line: 9,
            column: 19,
            span: 169..173,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 9,
            column: 22,
            span: 174..176,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 9,
            column: 25,
            span: 177..179,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 9,
            column: 26,
            span: 179..180,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 10,
            column: 7,
            span: 181..187,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 10,
            column: 8,
            span: 187..188,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 10,
            column: 15,
            span: 188..195,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        position: Position {
            line: 10,
            column: 22,
            span: 195..202,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 10,
            column: 25,
            span: 203..205,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 10,
            column: 31,
            span: 206..211,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 10,
            column: 32,
            span: 211..212,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 11,
            column: 7,
            span: 213..219,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 11,
            column: 8,
            span: 219..220,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 11,
            column: 15,
            span: 220..227,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"coroutine\"",
        ),
        position: Position {
            line: 11,
            column: 26,
            span: 227..238,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 11,
            column: 29,
            span: 239..241,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 11,
            column: 39,
            span: 242..251,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 11,
            column: 40,
            span: 251..252,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 13,
            column: 7,
            span: 254..260,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 13,
            column: 8,
            span: 260..261,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 13,
            column: 12,
            span: 261..265,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 13,
            column: 13,
            span: 265..266,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 13,
            column: 20,
            span: 266..273,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 13,
            column: 21,
            span: 273..274,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        position: Position {
            line: 13,
            column: 25,
            span: 274..278,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 13,
            column: 26,
            span: 278..279,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 13,
            column: 29,
            span: 280..282,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        position: Position {
            line: 13,
            column: 38,
            span: 283..291,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 13,
            column: 39,
            span: 291..292,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 14,
            column: 7,
            span: 293..299,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 14,
            column: 8,
            span: 299..300,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 14,
            column: 12,
            span: 300..304,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 14,
            column: 13,
            span: 304..305,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 14,
            column: 20,
            span: 305..312,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 14,
            column: 21,
            span: 312..313,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cpath",
        ),
        position: Position {
            line: 14,
            column: 26,
            span: 313..318,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 14,
            column: 27,
            span: 318..319,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 14,
            column: 30,
            span: 320..322,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        position: Position {
            line: 14,
            column: 39,
            span: 323..331,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 14,
            column: 40,
            span: 331..332,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 15,
            column: 7,
            span: 333..339,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 15,
            column: 8,
            span: 339..340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 15,
            column: 12,
            span: 340..344,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 15,
            column: 13,
            span: 344..345,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 15,
            column: 20,
            span: 345..352,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 15,
            column: 21,
            span: 352..353,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loaded",
        ),
        position: Position {
            line: 15,
            column: 27,
            span: 353..359,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 15,
            column: 28,
            span: 359..360,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 15,
            column: 31,
            span: 361..363,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        position: Position {
            line: 15,
            column: 39,
            span: 364..371,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 15,
            column: 40,
            span: 371..372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 16,
            column: 7,
            span: 373..379,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 16,
            column: 8,
            span: 379..380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 16,
            column: 12,
            span: 380..384,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 16,
            column: 13,
            span: 384..385,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 16,
            column: 20,
            span: 385..392,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 16,
            column: 21,
            span: 392..393,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "preload",
        ),
        position: Position {
            line: 16,
            column: 28,
            span: 393..400,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 16,
            column: 29,
            span: 400..401,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 16,
            column: 32,
            span: 402..404,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        position: Position {
            line: 16,
            column: 40,
            span: 405..412,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 16,
            column: 41,
            span: 412..413,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 19,
            column: 6,
            span: 416..421,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DIR",
        ),
        position: Position {
            line: 19,
            column: 10,
            span: 422..425,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 19,
            column: 12,
            span: 426..427,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"libs/\"",
        ),
        position: Position {
            line: 19,
            column: 20,
            span: 428..435,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 21,
            column: 6,
            span: 437..442,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 21,
            column: 15,
            span: 443..451,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "createfiles",
        ),
        position: Position {
            line: 21,
            column: 27,
            span: 452..463,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 21,
            column: 29,
            span: 464..465,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        position: Position {
            line: 21,
            column: 34,
            span: 465..470,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 21,
            column: 35,
            span: 470..471,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "preextras",
        ),
        position: Position {
            line: 21,
            column: 45,
            span: 472..481,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 21,
            column: 46,
            span: 481..482,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "posextras",
        ),
        position: Position {
            line: 21,
            column: 56,
            span: 483..492,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 21,
            column: 57,
            span: 492..493,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 22,
            column: 6,
            span: 496..499,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 22,
            column: 8,
            span: 500..501,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 22,
            column: 9,
            span: 501..502,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 22,
            column: 10,
            span: 502..503,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 22,
            column: 13,
            span: 504..506,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        position: Position {
            line: 22,
            column: 19,
            span: 507..512,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 22,
            column: 20,
            span: 512..513,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        position: Position {
            line: 22,
            column: 25,
            span: 513..518,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 22,
            column: 26,
            span: 518..519,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 22,
            column: 0,
            span: 520..522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 23,
            column: 7,
            span: 527..529,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 23,
            column: 8,
            span: 529..530,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 23,
            column: 14,
            span: 530..536,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 23,
            column: 15,
            span: 536..537,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DIR",
        ),
        position: Position {
            line: 23,
            column: 18,
            span: 537..540,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 23,
            column: 20,
            span: 540..542,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 23,
            column: 21,
            span: 542..543,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 23,
            column: 22,
            span: 543..544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 24,
            column: 7,
            span: 549..551,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 24,
            column: 8,
            span: 551..552,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 24,
            column: 13,
            span: 552..557,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 24,
            column: 14,
            span: 557..558,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 24,
            column: 20,
            span: 558..564,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 24,
            column: 21,
            span: 564..565,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 24,
            column: 27,
            span: 565..571,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 24,
            column: 28,
            span: 571..572,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "preextras",
        ),
        position: Position {
            line: 24,
            column: 37,
            span: 572..581,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 24,
            column: 38,
            span: 581..582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 24,
            column: 40,
            span: 583..584,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 24,
            column: 41,
            span: 584..585,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 24,
            column: 42,
            span: 585..586,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 25,
            column: 7,
            span: 591..593,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 25,
            column: 8,
            span: 593..594,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 25,
            column: 13,
            span: 594..599,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 25,
            column: 14,
            span: 599..600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 25,
            column: 15,
            span: 600..601,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 25,
            column: 16,
            span: 601..602,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 26,
            column: 7,
            span: 607..609,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 26,
            column: 8,
            span: 609..610,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 26,
            column: 13,
            span: 610..615,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 26,
            column: 14,
            span: 615..616,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 26,
            column: 20,
            span: 616..622,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 26,
            column: 21,
            span: 622..623,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 26,
            column: 27,
            span: 623..629,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 26,
            column: 28,
            span: 629..630,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "posextras",
        ),
        position: Position {
            line: 26,
            column: 37,
            span: 630..639,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 26,
            column: 38,
            span: 639..640,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 26,
            column: 40,
            span: 641..642,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 26,
            column: 41,
            span: 642..643,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 26,
            column: 42,
            span: 643..644,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 27,
            column: 7,
            span: 649..651,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 27,
            column: 8,
            span: 651..652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 27,
            column: 13,
            span: 652..657,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 27,
            column: 14,
            span: 657..658,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 27,
            column: 16,
            span: 658..660,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 27,
            column: 17,
            span: 660..661,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 27,
            column: 23,
            span: 661..667,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 27,
            column: 24,
            span: 667..668,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 27,
            column: 25,
            span: 668..669,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 27,
            column: 26,
            span: 669..670,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 28,
            column: 0,
            span: 673..676,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 29,
            column: 0,
            span: 677..680,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 31,
            column: 9,
            span: 682..690,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "removefiles",
        ),
        position: Position {
            line: 31,
            column: 21,
            span: 691..702,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 31,
            column: 23,
            span: 703..704,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        position: Position {
            line: 31,
            column: 28,
            span: 704..709,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 31,
            column: 29,
            span: 709..710,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 32,
            column: 6,
            span: 713..716,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 32,
            column: 8,
            span: 717..718,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 32,
            column: 11,
            span: 719..721,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        position: Position {
            line: 32,
            column: 17,
            span: 722..727,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 32,
            column: 18,
            span: 727..728,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        position: Position {
            line: 32,
            column: 23,
            span: 728..733,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 32,
            column: 24,
            span: 733..734,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 32,
            column: 0,
            span: 735..737,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 33,
            column: 7,
            span: 742..744,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 33,
            column: 8,
            span: 744..745,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 33,
            column: 14,
            span: 745..751,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 33,
            column: 15,
            span: 751..752,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DIR",
        ),
        position: Position {
            line: 33,
            column: 18,
            span: 752..755,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 33,
            column: 20,
            span: 755..757,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 33,
            column: 21,
            span: 757..758,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 33,
            column: 22,
            span: 758..759,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 34,
            column: 0,
            span: 762..765,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 35,
            column: 0,
            span: 766..769,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 37,
            column: 6,
            span: 771..776,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        position: Position {
            line: 37,
            column: 12,
            span: 777..782,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 37,
            column: 14,
            span: 783..784,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 37,
            column: 16,
            span: 785..786,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 38,
            column: 4,
            span: 789..790,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A.lua\"",
        ),
        position: Position {
            line: 38,
            column: 11,
            span: 790..797,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 38,
            column: 12,
            span: 797..798,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 38,
            column: 14,
            span: 799..800,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 38,
            column: 17,
            span: 801..803,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 38,
            column: 18,
            span: 803..804,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 39,
            column: 4,
            span: 807..808,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"B.lua\"",
        ),
        position: Position {
            line: 39,
            column: 11,
            span: 808..815,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 39,
            column: 12,
            span: 815..816,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 39,
            column: 14,
            span: 817..818,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"assert(...=='B');require 'A'\"",
        ),
        position: Position {
            line: 39,
            column: 45,
            span: 819..849,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 39,
            column: 46,
            span: 849..850,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 40,
            column: 4,
            span: 853..854,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A.lc\"",
        ),
        position: Position {
            line: 40,
            column: 10,
            span: 854..860,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 40,
            column: 11,
            span: 860..861,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 40,
            column: 13,
            span: 862..863,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 40,
            column: 16,
            span: 864..866,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 40,
            column: 17,
            span: 866..867,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 41,
            column: 4,
            span: 870..871,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A\"",
        ),
        position: Position {
            line: 41,
            column: 7,
            span: 871..874,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 41,
            column: 8,
            span: 874..875,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 41,
            column: 10,
            span: 876..877,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 41,
            column: 13,
            span: 878..880,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 41,
            column: 14,
            span: 880..881,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 42,
            column: 4,
            span: 884..885,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        position: Position {
            line: 42,
            column: 7,
            span: 885..888,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 42,
            column: 8,
            span: 888..889,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 42,
            column: 10,
            span: 890..891,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 42,
            column: 13,
            span: 892..894,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 42,
            column: 14,
            span: 894..895,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 43,
            column: 4,
            span: 898..899,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XXxX\"",
        ),
        position: Position {
            line: 43,
            column: 10,
            span: 899..905,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 43,
            column: 11,
            span: 905..906,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 43,
            column: 13,
            span: 907..908,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 43,
            column: 16,
            span: 909..911,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 43,
            column: 17,
            span: 911..912,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 44,
            column: 4,
            span: 915..916,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C.lua\"",
        ),
        position: Position {
            line: 44,
            column: 11,
            span: 916..923,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 44,
            column: 12,
            span: 923..924,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 44,
            column: 14,
            span: 925..926,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"package.loaded[...] = 25; require'C'\"",
        ),
        position: Position {
            line: 44,
            column: 53,
            span: 927..965,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 45,
            column: 2,
            span: 966..967,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        position: Position {
            line: 47,
            column: 3,
            span: 969..971,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 47,
            column: 5,
            span: 972..973,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 47,
            column: 0,
            span: 974..977,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 48,
            column: 6,
            span: 978..983,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extras",
        ),
        position: Position {
            line: 48,
            column: 13,
            span: 984..990,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 48,
            column: 15,
            span: 991..992,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nNAME = '%s'\nREQUIRED = ...\nreturn AA]]",
        ),
        position: Position {
            line: 51,
            column: 12,
            span: 993..1034,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "createfiles",
        ),
        position: Position {
            line: 53,
            column: 12,
            span: 1036..1047,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 53,
            column: 13,
            span: 1047..1048,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        position: Position {
            line: 53,
            column: 18,
            span: 1048..1053,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 53,
            column: 19,
            span: 1053..1054,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 53,
            column: 22,
            span: 1055..1057,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 53,
            column: 23,
            span: 1057..1058,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extras",
        ),
        position: Position {
            line: 53,
            column: 30,
            span: 1059..1065,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 53,
            column: 31,
            span: 1065..1066,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 56,
            column: 6,
            span: 1069..1074,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldpath",
        ),
        position: Position {
            line: 56,
            column: 14,
            span: 1075..1082,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 56,
            column: 16,
            span: 1083..1084,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 56,
            column: 24,
            span: 1085..1092,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 56,
            column: 25,
            span: 1092..1093,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        position: Position {
            line: 56,
            column: 0,
            span: 1093..1097,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 58,
            column: 8,
            span: 1099..1106,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 58,
            column: 9,
            span: 1106..1107,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        position: Position {
            line: 58,
            column: 13,
            span: 1107..1111,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 58,
            column: 15,
            span: 1112..1113,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 58,
            column: 22,
            span: 1114..1120,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 58,
            column: 23,
            span: 1120..1121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 58,
            column: 27,
            span: 1121..1125,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 58,
            column: 28,
            span: 1125..1126,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"D/?.lua;D/?.lc;D/?;D/??x?;D/L\"",
        ),
        position: Position {
            line: 58,
            column: 59,
            span: 1126..1157,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 60,
            span: 1157..1158,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"D/\"",
        ),
        position: Position {
            line: 58,
            column: 65,
            span: 1159..1163,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 66,
            span: 1163..1164,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DIR",
        ),
        position: Position {
            line: 58,
            column: 70,
            span: 1165..1168,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 58,
            column: 71,
            span: 1168..1169,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 60,
            column: 6,
            span: 1171..1176,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "try",
        ),
        position: Position {
            line: 60,
            column: 10,
            span: 1177..1180,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 60,
            column: 12,
            span: 1181..1182,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 60,
            column: 21,
            span: 1183..1191,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 60,
            column: 23,
            span: 1192..1193,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 60,
            column: 24,
            span: 1193..1194,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 60,
            column: 25,
            span: 1194..1195,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 60,
            column: 27,
            span: 1196..1197,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 60,
            column: 28,
            span: 1197..1198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 60,
            column: 30,
            span: 1199..1200,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 60,
            column: 31,
            span: 1200..1201,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NAME",
        ),
        position: Position {
            line: 61,
            column: 7,
            span: 1204..1208,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 61,
            column: 9,
            span: 1209..1210,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 61,
            column: 0,
            span: 1211..1214,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 62,
            column: 8,
            span: 1217..1222,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rr",
        ),
        position: Position {
            line: 62,
            column: 11,
            span: 1223..1225,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 62,
            column: 13,
            span: 1226..1227,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 62,
            column: 21,
            span: 1228..1235,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 62,
            column: 22,
            span: 1235..1236,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 62,
            column: 23,
            span: 1236..1237,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 62,
            column: 24,
            span: 1237..1238,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 63,
            column: 9,
            span: 1241..1247,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 63,
            column: 10,
            span: 1247..1248,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NAME",
        ),
        position: Position {
            line: 63,
            column: 14,
            span: 1248..1252,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 63,
            column: 17,
            span: 1253..1255,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 63,
            column: 19,
            span: 1256..1257,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 63,
            column: 20,
            span: 1257..1258,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 64,
            column: 9,
            span: 1261..1267,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 64,
            column: 10,
            span: 1267..1268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "REQUIRED",
        ),
        position: Position {
            line: 64,
            column: 18,
            span: 1268..1276,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 64,
            column: 21,
            span: 1277..1279,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 64,
            column: 23,
            span: 1280..1281,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 64,
            column: 24,
            span: 1281..1282,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 65,
            column: 9,
            span: 1285..1291,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 65,
            column: 10,
            span: 1291..1292,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rr",
        ),
        position: Position {
            line: 65,
            column: 12,
            span: 1292..1294,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 65,
            column: 15,
            span: 1295..1297,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 65,
            column: 17,
            span: 1298..1299,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 65,
            column: 18,
            span: 1299..1300,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 66,
            column: 0,
            span: 1301..1304,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 68,
            column: 7,
            span: 1306..1312,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 68,
            column: 8,
            span: 1312..1313,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 68,
            column: 15,
            span: 1313..1320,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C\"",
        ),
        position: Position {
            line: 68,
            column: 18,
            span: 1320..1323,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 68,
            column: 21,
            span: 1324..1326,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "25",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 68,
            column: 24,
            span: 1326..1329,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 68,
            column: 25,
            span: 1329..1330,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 69,
            column: 7,
            span: 1331..1337,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 69,
            column: 8,
            span: 1337..1338,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 69,
            column: 15,
            span: 1338..1345,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C\"",
        ),
        position: Position {
            line: 69,
            column: 18,
            span: 1345..1348,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 69,
            column: 21,
            span: 1349..1351,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "25",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 69,
            column: 24,
            span: 1351..1354,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 69,
            column: 25,
            span: 1354..1355,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        position: Position {
            line: 70,
            column: 3,
            span: 1356..1358,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 70,
            column: 5,
            span: 1359..1360,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 70,
            column: 0,
            span: 1361..1364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "try",
        ),
        position: Position {
            line: 71,
            column: 4,
            span: 1365..1368,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 71,
            column: 5,
            span: 1368..1369,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'B'",
        ),
        position: Position {
            line: 71,
            column: 8,
            span: 1369..1372,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 71,
            column: 9,
            span: 1372..1373,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'B.lua'",
        ),
        position: Position {
            line: 71,
            column: 17,
            span: 1374..1381,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 71,
            column: 18,
            span: 1381..1382,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 71,
            column: 23,
            span: 1383..1387,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 71,
            column: 24,
            span: 1387..1388,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 72,
            column: 7,
            span: 1389..1395,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 72,
            column: 8,
            span: 1395..1396,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 72,
            column: 15,
            span: 1396..1403,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 72,
            column: 16,
            span: 1403..1404,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loaded",
        ),
        position: Position {
            line: 72,
            column: 22,
            span: 1404..1410,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 72,
            column: 23,
            span: 1410..1411,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 72,
            column: 24,
            span: 1411..1412,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 72,
            column: 25,
            span: 1412..1413,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 73,
            column: 7,
            span: 1414..1420,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 73,
            column: 8,
            span: 1420..1421,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 73,
            column: 15,
            span: 1421..1428,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"B\"",
        ),
        position: Position {
            line: 73,
            column: 18,
            span: 1428..1431,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 73,
            column: 21,
            span: 1432..1434,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 73,
            column: 26,
            span: 1435..1439,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 73,
            column: 27,
            span: 1439..1440,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 74,
            column: 7,
            span: 1441..1447,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 74,
            column: 8,
            span: 1447..1448,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 74,
            column: 15,
            span: 1448..1455,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 74,
            column: 16,
            span: 1455..1456,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loaded",
        ),
        position: Position {
            line: 74,
            column: 22,
            span: 1456..1462,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 74,
            column: 23,
            span: 1462..1463,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 74,
            column: 24,
            span: 1463..1464,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 74,
            column: 25,
            span: 1464..1465,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 75,
            column: 8,
            span: 1466..1473,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 75,
            column: 9,
            span: 1473..1474,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loaded",
        ),
        position: Position {
            line: 75,
            column: 15,
            span: 1474..1480,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 75,
            column: 16,
            span: 1480..1481,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 75,
            column: 17,
            span: 1481..1482,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 75,
            column: 19,
            span: 1483..1484,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 75,
            column: 0,
            span: 1485..1488,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "try",
        ),
        position: Position {
            line: 76,
            column: 4,
            span: 1489..1492,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 76,
            column: 5,
            span: 1492..1493,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'B'",
        ),
        position: Position {
            line: 76,
            column: 8,
            span: 1493..1496,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 9,
            span: 1496..1497,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 76,
            column: 13,
            span: 1498..1501,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 14,
            span: 1501..1502,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 76,
            column: 19,
            span: 1503..1507,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 76,
            column: 20,
            span: 1507..1508,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "try",
        ),
        position: Position {
            line: 77,
            column: 4,
            span: 1540..1543,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 77,
            column: 5,
            span: 1543..1544,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'A'",
        ),
        position: Position {
            line: 77,
            column: 8,
            span: 1544..1547,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 9,
            span: 1547..1548,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'A.lua'",
        ),
        position: Position {
            line: 77,
            column: 17,
            span: 1549..1556,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 18,
            span: 1556..1557,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 77,
            column: 23,
            span: 1558..1562,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 77,
            column: 24,
            span: 1562..1563,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 78,
            column: 8,
            span: 1564..1571,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 78,
            column: 9,
            span: 1571..1572,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loaded",
        ),
        position: Position {
            line: 78,
            column: 15,
            span: 1572..1578,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 78,
            column: 16,
            span: 1578..1579,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 78,
            column: 17,
            span: 1579..1580,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 78,
            column: 19,
            span: 1581..1582,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 78,
            column: 0,
            span: 1583..1586,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 79,
            column: 3,
            span: 1587..1589,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 79,
            column: 4,
            span: 1589..1590,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 79,
            column: 10,
            span: 1590..1596,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 79,
            column: 11,
            span: 1596..1597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DIR",
        ),
        position: Position {
            line: 79,
            column: 14,
            span: 1597..1600,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 79,
            column: 16,
            span: 1600..1602,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'A.lua'",
        ),
        position: Position {
            line: 79,
            column: 23,
            span: 1602..1609,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 79,
            column: 24,
            span: 1609..1610,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        position: Position {
            line: 80,
            column: 3,
            span: 1611..1613,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 80,
            column: 5,
            span: 1614..1615,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 80,
            column: 7,
            span: 1616..1617,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 80,
            column: 8,
            span: 1617..1618,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "try",
        ),
        position: Position {
            line: 81,
            column: 4,
            span: 1619..1622,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 81,
            column: 5,
            span: 1622..1623,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'A'",
        ),
        position: Position {
            line: 81,
            column: 8,
            span: 1623..1626,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 81,
            column: 9,
            span: 1626..1627,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'A.lc'",
        ),
        position: Position {
            line: 81,
            column: 16,
            span: 1628..1634,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 81,
            column: 17,
            span: 1634..1635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        position: Position {
            line: 81,
            column: 20,
            span: 1636..1638,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 81,
            column: 21,
            span: 1638..1639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 82,
            column: 7,
            span: 1672..1678,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 82,
            column: 8,
            span: 1678..1679,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 82,
            column: 15,
            span: 1679..1686,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 82,
            column: 16,
            span: 1686..1687,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A\"",
        ),
        position: Position {
            line: 82,
            column: 19,
            span: 1687..1690,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 82,
            column: 20,
            span: 1690..1691,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 82,
            column: 23,
            span: 1692..1694,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        position: Position {
            line: 82,
            column: 26,
            span: 1695..1697,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 82,
            column: 27,
            span: 1697..1698,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        position: Position {
            line: 83,
            column: 3,
            span: 1699..1701,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 83,
            column: 5,
            span: 1702..1703,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 83,
            column: 0,
            span: 1704..1709,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "try",
        ),
        position: Position {
            line: 84,
            column: 4,
            span: 1710..1713,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 84,
            column: 5,
            span: 1713..1714,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'K'",
        ),
        position: Position {
            line: 84,
            column: 8,
            span: 1714..1717,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 84,
            column: 9,
            span: 1717..1718,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'L'",
        ),
        position: Position {
            line: 84,
            column: 13,
            span: 1719..1722,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 84,
            column: 14,
            span: 1722..1723,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 84,
            column: 20,
            span: 1724..1729,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 84,
            column: 21,
            span: 1729..1730,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "try",
        ),
        position: Position {
            line: 85,
            column: 4,
            span: 1753..1756,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 85,
            column: 5,
            span: 1756..1757,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'K'",
        ),
        position: Position {
            line: 85,
            column: 8,
            span: 1757..1760,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 85,
            column: 9,
            span: 1760..1761,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'L'",
        ),
        position: Position {
            line: 85,
            column: 13,
            span: 1762..1765,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 85,
            column: 14,
            span: 1765..1766,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 85,
            column: 20,
            span: 1767..1772,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 85,
            column: 21,
            span: 1772..1773,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 86,
            column: 7,
            span: 1815..1821,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 86,
            column: 8,
            span: 1821..1822,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        position: Position {
            line: 86,
            column: 14,
            span: 1822..1828,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 86,
            column: 15,
            span: 1828..1829,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 86,
            column: 17,
            span: 1829..1831,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 86,
            column: 18,
            span: 1831..1832,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"_REQUIREDNAME\"",
        ),
        position: Position {
            line: 86,
            column: 34,
            span: 1833..1848,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 86,
            column: 35,
            span: 1848..1849,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 86,
            column: 38,
            span: 1850..1852,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 86,
            column: 42,
            span: 1853..1856,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 86,
            column: 43,
            span: 1856..1857,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        position: Position {
            line: 88,
            column: 3,
            span: 1859..1861,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 88,
            column: 5,
            span: 1862..1863,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 88,
            column: 9,
            span: 1864..1867,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "try",
        ),
        position: Position {
            line: 89,
            column: 4,
            span: 1868..1871,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 89,
            column: 5,
            span: 1871..1872,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X\"",
        ),
        position: Position {
            line: 89,
            column: 8,
            span: 1872..1875,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 89,
            column: 9,
            span: 1875..1876,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XXxX\"",
        ),
        position: Position {
            line: 89,
            column: 16,
            span: 1877..1883,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 89,
            column: 17,
            span: 1883..1884,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        position: Position {
            line: 89,
            column: 20,
            span: 1885..1887,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 89,
            column: 21,
            span: 1887..1888,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "removefiles",
        ),
        position: Position {
            line: 92,
            column: 12,
            span: 1891..1902,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 92,
            column: 13,
            span: 1902..1903,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        position: Position {
            line: 92,
            column: 18,
            span: 1903..1908,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 92,
            column: 19,
            span: 1908..1909,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 97,
            column: 8,
            span: 1948..1955,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 97,
            column: 9,
            span: 1955..1956,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        position: Position {
            line: 97,
            column: 13,
            span: 1956..1960,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 97,
            column: 15,
            span: 1961..1962,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 97,
            column: 22,
            span: 1963..1969,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 97,
            column: 23,
            span: 1969..1970,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 97,
            column: 27,
            span: 1970..1974,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 97,
            column: 28,
            span: 1974..1975,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"D/?.lua;D/?/init.lua\"",
        ),
        position: Position {
            line: 97,
            column: 50,
            span: 1975..1997,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 97,
            column: 51,
            span: 1997..1998,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"D/\"",
        ),
        position: Position {
            line: 97,
            column: 56,
            span: 1999..2003,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 97,
            column: 57,
            span: 2003..2004,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DIR",
        ),
        position: Position {
            line: 97,
            column: 61,
            span: 2005..2008,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 97,
            column: 62,
            span: 2008..2009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        position: Position {
            line: 99,
            column: 6,
            span: 2011..2016,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 99,
            column: 8,
            span: 2017..2018,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 99,
            column: 10,
            span: 2019..2020,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 100,
            column: 4,
            span: 2023..2024,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1/init.lua\"",
        ),
        position: Position {
            line: 100,
            column: 17,
            span: 2024..2037,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 100,
            column: 18,
            span: 2037..2038,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 100,
            column: 20,
            span: 2039..2040,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AA = 10\"",
        ),
        position: Position {
            line: 100,
            column: 30,
            span: 2041..2050,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 100,
            column: 31,
            span: 2050..2051,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 101,
            column: 4,
            span: 2054..2055,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1/xuxu.lua\"",
        ),
        position: Position {
            line: 101,
            column: 17,
            span: 2055..2068,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 101,
            column: 18,
            span: 2068..2069,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 101,
            column: 20,
            span: 2070..2071,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AA = 20\"",
        ),
        position: Position {
            line: 101,
            column: 30,
            span: 2072..2081,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 101,
            column: 31,
            span: 2081..2082,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 102,
            column: 2,
            span: 2083..2084,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "createfiles",
        ),
        position: Position {
            line: 104,
            column: 12,
            span: 2086..2097,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 104,
            column: 13,
            span: 2097..2098,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        position: Position {
            line: 104,
            column: 18,
            span: 2098..2103,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 104,
            column: 19,
            span: 2103..2104,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"module(..., package.seeall)\\n\"",
        ),
        position: Position {
            line: 104,
            column: 51,
            span: 2105..2136,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 104,
            column: 52,
            span: 2136..2137,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 104,
            column: 55,
            span: 2138..2140,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 104,
            column: 56,
            span: 2140..2141,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        position: Position {
            line: 105,
            column: 3,
            span: 2142..2144,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 105,
            column: 5,
            span: 2145..2146,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 105,
            column: 0,
            span: 2146..2148,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 107,
            column: 6,
            span: 2150..2155,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 107,
            column: 8,
            span: 2156..2157,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 107,
            column: 10,
            span: 2158..2159,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 107,
            column: 17,
            span: 2160..2166,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 107,
            column: 18,
            span: 2166..2167,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 107,
            column: 25,
            span: 2167..2174,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1\"",
        ),
        position: Position {
            line: 107,
            column: 29,
            span: 2174..2178,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 107,
            column: 30,
            span: 2178..2179,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 108,
            column: 7,
            span: 2180..2186,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 108,
            column: 8,
            span: 2186..2187,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 108,
            column: 9,
            span: 2187..2188,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 108,
            column: 12,
            span: 2189..2191,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "P1",
        ),
        position: Position {
            line: 108,
            column: 15,
            span: 2192..2194,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 108,
            column: 19,
            span: 2195..2198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 108,
            column: 21,
            span: 2199..2200,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 108,
            column: 22,
            span: 2200..2201,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_NAME",
        ),
        position: Position {
            line: 108,
            column: 27,
            span: 2201..2206,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 108,
            column: 30,
            span: 2207..2209,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1\"",
        ),
        position: Position {
            line: 108,
            column: 35,
            span: 2210..2214,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 108,
            column: 39,
            span: 2215..2218,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        position: Position {
            line: 108,
            column: 42,
            span: 2219..2221,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 108,
            column: 45,
            span: 2222..2224,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 108,
            column: 47,
            span: 2224..2226,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 108,
            column: 51,
            span: 2227..2230,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 108,
            column: 53,
            span: 2231..2232,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 108,
            column: 54,
            span: 2232..2233,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        position: Position {
            line: 108,
            column: 56,
            span: 2233..2235,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 108,
            column: 59,
            span: 2236..2238,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 108,
            column: 62,
            span: 2238..2241,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 108,
            column: 63,
            span: 2241..2242,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 109,
            column: 7,
            span: 2243..2249,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 109,
            column: 8,
            span: 2249..2250,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 109,
            column: 15,
            span: 2250..2257,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1\"",
        ),
        position: Position {
            line: 109,
            column: 19,
            span: 2257..2261,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 109,
            column: 22,
            span: 2262..2264,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "P1",
        ),
        position: Position {
            line: 109,
            column: 25,
            span: 2265..2267,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 109,
            column: 29,
            span: 2268..2271,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "P1",
        ),
        position: Position {
            line: 109,
            column: 32,
            span: 2272..2274,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 109,
            column: 35,
            span: 2275..2277,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 109,
            column: 37,
            span: 2278..2279,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 109,
            column: 38,
            span: 2279..2280,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 110,
            column: 7,
            span: 2281..2287,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 110,
            column: 8,
            span: 2287..2288,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 110,
            column: 15,
            span: 2288..2295,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1\"",
        ),
        position: Position {
            line: 110,
            column: 19,
            span: 2295..2299,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 110,
            column: 22,
            span: 2300..2302,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "P1",
        ),
        position: Position {
            line: 110,
            column: 25,
            span: 2303..2305,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 110,
            column: 26,
            span: 2305..2306,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 111,
            column: 7,
            span: 2307..2313,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 111,
            column: 8,
            span: 2313..2314,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "P1",
        ),
        position: Position {
            line: 111,
            column: 10,
            span: 2314..2316,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 111,
            column: 11,
            span: 2316..2317,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_PACKAGE",
        ),
        position: Position {
            line: 111,
            column: 19,
            span: 2317..2325,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 111,
            column: 22,
            span: 2326..2328,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 111,
            column: 25,
            span: 2329..2331,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 111,
            column: 26,
            span: 2331..2332,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 113,
            column: 6,
            span: 2334..2339,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 113,
            column: 8,
            span: 2340..2341,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 113,
            column: 10,
            span: 2342..2343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 113,
            column: 17,
            span: 2344..2350,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 113,
            column: 18,
            span: 2350..2351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 113,
            column: 25,
            span: 2351..2358,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1.xuxu\"",
        ),
        position: Position {
            line: 113,
            column: 34,
            span: 2358..2367,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 113,
            column: 35,
            span: 2367..2368,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 114,
            column: 7,
            span: 2369..2375,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 114,
            column: 8,
            span: 2375..2376,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 114,
            column: 9,
            span: 2376..2377,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 114,
            column: 12,
            span: 2378..2380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "P1",
        ),
        position: Position {
            line: 114,
            column: 15,
            span: 2381..2383,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 114,
            column: 16,
            span: 2383..2384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu",
        ),
        position: Position {
            line: 114,
            column: 20,
            span: 2384..2388,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 114,
            column: 24,
            span: 2389..2392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 114,
            column: 26,
            span: 2393..2394,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 114,
            column: 27,
            span: 2394..2395,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_NAME",
        ),
        position: Position {
            line: 114,
            column: 32,
            span: 2395..2400,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 114,
            column: 35,
            span: 2401..2403,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1.xuxu\"",
        ),
        position: Position {
            line: 114,
            column: 45,
            span: 2404..2413,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 114,
            column: 49,
            span: 2414..2417,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        position: Position {
            line: 114,
            column: 52,
            span: 2418..2420,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 114,
            column: 55,
            span: 2421..2423,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 114,
            column: 57,
            span: 2423..2425,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 114,
            column: 61,
            span: 2426..2429,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 114,
            column: 63,
            span: 2430..2431,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 114,
            column: 64,
            span: 2431..2432,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        position: Position {
            line: 114,
            column: 66,
            span: 2432..2434,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 114,
            column: 69,
            span: 2435..2437,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 114,
            column: 72,
            span: 2437..2440,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 114,
            column: 73,
            span: 2440..2441,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 115,
            column: 7,
            span: 2442..2448,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 115,
            column: 8,
            span: 2448..2449,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 115,
            column: 15,
            span: 2449..2456,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1.xuxu\"",
        ),
        position: Position {
            line: 115,
            column: 24,
            span: 2456..2465,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 115,
            column: 27,
            span: 2466..2468,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "P1",
        ),
        position: Position {
            line: 115,
            column: 30,
            span: 2469..2471,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 115,
            column: 31,
            span: 2471..2472,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu",
        ),
        position: Position {
            line: 115,
            column: 35,
            span: 2472..2476,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 115,
            column: 39,
            span: 2477..2480,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "P1",
        ),
        position: Position {
            line: 115,
            column: 42,
            span: 2481..2483,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 115,
            column: 43,
            span: 2483..2484,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu",
        ),
        position: Position {
            line: 115,
            column: 47,
            span: 2484..2488,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 115,
            column: 50,
            span: 2489..2491,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 115,
            column: 52,
            span: 2492..2493,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 115,
            column: 53,
            span: 2493..2494,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 116,
            column: 7,
            span: 2495..2501,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 116,
            column: 8,
            span: 2501..2502,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 116,
            column: 15,
            span: 2502..2509,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1.xuxu\"",
        ),
        position: Position {
            line: 116,
            column: 24,
            span: 2509..2518,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 116,
            column: 27,
            span: 2519..2521,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "P1",
        ),
        position: Position {
            line: 116,
            column: 30,
            span: 2522..2524,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 116,
            column: 31,
            span: 2524..2525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu",
        ),
        position: Position {
            line: 116,
            column: 35,
            span: 2525..2529,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 116,
            column: 36,
            span: 2529..2530,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 117,
            column: 7,
            span: 2531..2537,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 117,
            column: 8,
            span: 2537..2538,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 117,
            column: 15,
            span: 2538..2545,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1\"",
        ),
        position: Position {
            line: 117,
            column: 19,
            span: 2545..2549,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 117,
            column: 22,
            span: 2550..2552,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "P1",
        ),
        position: Position {
            line: 117,
            column: 25,
            span: 2553..2555,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 117,
            column: 26,
            span: 2555..2556,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 118,
            column: 7,
            span: 2557..2563,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 118,
            column: 8,
            span: 2563..2564,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "P1",
        ),
        position: Position {
            line: 118,
            column: 10,
            span: 2564..2566,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 118,
            column: 11,
            span: 2566..2567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu",
        ),
        position: Position {
            line: 118,
            column: 15,
            span: 2567..2571,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 118,
            column: 16,
            span: 2571..2572,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_PACKAGE",
        ),
        position: Position {
            line: 118,
            column: 24,
            span: 2572..2580,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 118,
            column: 27,
            span: 2581..2583,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1.\"",
        ),
        position: Position {
            line: 118,
            column: 33,
            span: 2584..2589,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 118,
            column: 34,
            span: 2589..2590,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 119,
            column: 7,
            span: 2591..2597,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 119,
            column: 8,
            span: 2597..2598,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "P1",
        ),
        position: Position {
            line: 119,
            column: 10,
            span: 2598..2600,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 119,
            column: 11,
            span: 2600..2601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        position: Position {
            line: 119,
            column: 13,
            span: 2601..2603,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 119,
            column: 16,
            span: 2604..2606,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 119,
            column: 19,
            span: 2606..2609,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 119,
            column: 23,
            span: 2610..2613,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "P1",
        ),
        position: Position {
            line: 119,
            column: 26,
            span: 2614..2616,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 119,
            column: 27,
            span: 2616..2617,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_PACKAGE",
        ),
        position: Position {
            line: 119,
            column: 35,
            span: 2617..2625,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 119,
            column: 38,
            span: 2626..2628,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 119,
            column: 41,
            span: 2629..2631,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 119,
            column: 42,
            span: 2631..2632,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 120,
            column: 7,
            span: 2633..2639,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 120,
            column: 8,
            span: 2639..2640,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "P1",
        ),
        position: Position {
            line: 120,
            column: 10,
            span: 2640..2642,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 120,
            column: 11,
            span: 2642..2643,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 120,
            column: 13,
            span: 2643..2645,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 120,
            column: 16,
            span: 2646..2648,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 120,
            column: 19,
            span: 2649..2651,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 120,
            column: 23,
            span: 2652..2655,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "P1",
        ),
        position: Position {
            line: 120,
            column: 26,
            span: 2656..2658,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 120,
            column: 27,
            span: 2658..2659,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu",
        ),
        position: Position {
            line: 120,
            column: 31,
            span: 2659..2663,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 120,
            column: 32,
            span: 2663..2664,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 120,
            column: 34,
            span: 2664..2666,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 120,
            column: 37,
            span: 2667..2669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 120,
            column: 40,
            span: 2670..2672,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 120,
            column: 41,
            span: 2672..2673,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "removefiles",
        ),
        position: Position {
            line: 124,
            column: 12,
            span: 2677..2688,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 124,
            column: 13,
            span: 2688..2689,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        position: Position {
            line: 124,
            column: 18,
            span: 2689..2694,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 124,
            column: 19,
            span: 2694..2695,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 127,
            column: 8,
            span: 2698..2705,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 127,
            column: 9,
            span: 2705..2706,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        position: Position {
            line: 127,
            column: 13,
            span: 2706..2710,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 127,
            column: 15,
            span: 2711..2712,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 127,
            column: 18,
            span: 2713..2715,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 128,
            column: 7,
            span: 2716..2722,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 128,
            column: 8,
            span: 2722..2723,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 128,
            column: 11,
            span: 2723..2726,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 128,
            column: 17,
            span: 2727..2732,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 128,
            column: 18,
            span: 2732..2733,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 128,
            column: 25,
            span: 2733..2740,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 128,
            column: 26,
            span: 2740..2741,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file_does_not_exist\"",
        ),
        position: Position {
            line: 128,
            column: 48,
            span: 2742..2763,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 128,
            column: 49,
            span: 2763..2764,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 128,
            column: 50,
            span: 2764..2765,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 129,
            column: 8,
            span: 2766..2773,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 129,
            column: 9,
            span: 2773..2774,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        position: Position {
            line: 129,
            column: 13,
            span: 2774..2778,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 129,
            column: 15,
            span: 2779..2780,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"??\\0?\"",
        ),
        position: Position {
            line: 129,
            column: 23,
            span: 2781..2788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 130,
            column: 7,
            span: 2789..2795,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 130,
            column: 8,
            span: 2795..2796,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 130,
            column: 11,
            span: 2796..2799,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 130,
            column: 17,
            span: 2800..2805,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 130,
            column: 18,
            span: 2805..2806,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 130,
            column: 25,
            span: 2806..2813,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 130,
            column: 26,
            span: 2813..2814,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file_does_not_exist1\"",
        ),
        position: Position {
            line: 130,
            column: 49,
            span: 2815..2837,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 130,
            column: 50,
            span: 2837..2838,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 130,
            column: 51,
            span: 2838..2839,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 132,
            column: 8,
            span: 2841..2848,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 132,
            column: 9,
            span: 2848..2849,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        position: Position {
            line: 132,
            column: 13,
            span: 2849..2853,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 132,
            column: 15,
            span: 2854..2855,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldpath",
        ),
        position: Position {
            line: 132,
            column: 0,
            span: 2856..2863,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 135,
            column: 6,
            span: 2898..2903,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fname",
        ),
        position: Position {
            line: 135,
            column: 12,
            span: 2904..2909,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 135,
            column: 14,
            span: 2910..2911,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file_does_not_exist2\"",
        ),
        position: Position {
            line: 135,
            column: 37,
            span: 2912..2934,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 136,
            column: 6,
            span: 2935..2940,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 136,
            column: 8,
            span: 2941..2942,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 136,
            column: 9,
            span: 2942..2943,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 136,
            column: 13,
            span: 2944..2947,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 136,
            column: 15,
            span: 2948..2949,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 136,
            column: 21,
            span: 2950..2955,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 136,
            column: 22,
            span: 2955..2956,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 136,
            column: 29,
            span: 2956..2963,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 136,
            column: 30,
            span: 2963..2964,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fname",
        ),
        position: Position {
            line: 136,
            column: 36,
            span: 2965..2970,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 136,
            column: 37,
            span: 2970..2971,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 137,
            column: 4,
            span: 2972..2975,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 137,
            column: 6,
            span: 2976..2977,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 137,
            column: 9,
            span: 2978..2980,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 137,
            column: 16,
            span: 2981..2987,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 137,
            column: 17,
            span: 2987..2988,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        position: Position {
            line: 137,
            column: 23,
            span: 2988..2994,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 137,
            column: 24,
            span: 2994..2995,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 137,
            column: 31,
            span: 2995..3002,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 137,
            column: 32,
            span: 3002..3003,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        position: Position {
            line: 137,
            column: 36,
            span: 3003..3007,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 137,
            column: 38,
            span: 3007..3009,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        position: Position {
            line: 137,
            column: 41,
            span: 3009..3012,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 137,
            column: 43,
            span: 3012..3014,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 137,
            column: 50,
            span: 3014..3021,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 137,
            column: 51,
            span: 3021..3022,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cpath",
        ),
        position: Position {
            line: 137,
            column: 56,
            span: 3022..3027,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 137,
            column: 57,
            span: 3027..3028,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[^;]+\"",
        ),
        position: Position {
            line: 137,
            column: 65,
            span: 3029..3036,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 137,
            column: 66,
            span: 3036..3037,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 137,
            column: 0,
            span: 3038..3040,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 138,
            column: 4,
            span: 3043..3044,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 138,
            column: 6,
            span: 3045..3046,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 138,
            column: 13,
            span: 3047..3053,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 138,
            column: 14,
            span: 3053..3054,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 138,
            column: 18,
            span: 3054..3058,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 138,
            column: 19,
            span: 3058..3059,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 138,
            column: 20,
            span: 3059..3060,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 138,
            column: 21,
            span: 3060..3061,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?\"",
        ),
        position: Position {
            line: 138,
            column: 25,
            span: 3062..3065,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 138,
            column: 26,
            span: 3065..3066,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fname",
        ),
        position: Position {
            line: 138,
            column: 32,
            span: 3067..3072,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 138,
            column: 33,
            span: 3072..3073,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 139,
            column: 9,
            span: 3076..3082,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 139,
            column: 10,
            span: 3082..3083,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 139,
            column: 16,
            span: 3083..3089,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 139,
            column: 17,
            span: 3089..3090,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 139,
            column: 21,
            span: 3090..3094,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 139,
            column: 22,
            span: 3094..3095,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 139,
            column: 25,
            span: 3095..3098,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 139,
            column: 26,
            span: 3098..3099,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 139,
            column: 28,
            span: 3100..3101,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 139,
            column: 29,
            span: 3101..3102,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 139,
            column: 31,
            span: 3102..3104,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 139,
            column: 32,
            span: 3104..3105,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 139,
            column: 37,
            span: 3106..3110,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 139,
            column: 38,
            span: 3110..3111,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 139,
            column: 39,
            span: 3111..3112,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 140,
            column: 0,
            span: 3113..3116,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 143,
            column: 6,
            span: 3119..3124,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 143,
            column: 15,
            span: 3125..3133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "import",
        ),
        position: Position {
            line: 143,
            column: 22,
            span: 3134..3140,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 143,
            column: 23,
            span: 3140..3141,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 143,
            column: 26,
            span: 3141..3144,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 143,
            column: 27,
            span: 3144..3145,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 144,
            column: 8,
            span: 3148..3153,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 144,
            column: 10,
            span: 3154..3155,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 144,
            column: 12,
            span: 3156..3157,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 144,
            column: 14,
            span: 3158..3159,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 144,
            column: 17,
            span: 3159..3162,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 144,
            column: 18,
            span: 3162..3163,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 145,
            column: 9,
            span: 3166..3172,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 145,
            column: 18,
            span: 3173..3181,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 145,
            column: 20,
            span: 3182..3183,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 145,
            column: 21,
            span: 3183..3184,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 145,
            column: 22,
            span: 3184..3185,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 146,
            column: 8,
            span: 3190..3193,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 146,
            column: 10,
            span: 3194..3195,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 146,
            column: 11,
            span: 3195..3196,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 146,
            column: 12,
            span: 3195..3197,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 146,
            column: 13,
            span: 3197..3198,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 146,
            column: 15,
            span: 3199..3200,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 146,
            column: 16,
            span: 3200..3201,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 146,
            column: 19,
            span: 3202..3204,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 146,
            column: 21,
            span: 3205..3206,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 146,
            column: 22,
            span: 3206..3207,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 146,
            column: 23,
            span: 3207..3208,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 146,
            column: 24,
            span: 3208..3209,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 146,
            column: 25,
            span: 3209..3210,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 146,
            column: 26,
            span: 3210..3211,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 146,
            column: 27,
            span: 3211..3212,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 146,
            column: 29,
            span: 3213..3214,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 146,
            column: 32,
            span: 3215..3217,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 146,
            column: 33,
            span: 3217..3218,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 146,
            column: 34,
            span: 3218..3219,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 146,
            column: 35,
            span: 3219..3220,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 146,
            column: 36,
            span: 3220..3221,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 146,
            column: 37,
            span: 3221..3222,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 146,
            column: 38,
            span: 3222..3223,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 146,
            column: 0,
            span: 3224..3227,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 147,
            column: 0,
            span: 3230..3233,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 148,
            column: 0,
            span: 3234..3237,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 150,
            column: 6,
            span: 3239..3244,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 150,
            column: 13,
            span: 3245..3251,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 150,
            column: 14,
            span: 3251..3252,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "module",
        ),
        position: Position {
            line: 150,
            column: 21,
            span: 3253..3259,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 150,
            column: 22,
            span: 3259..3260,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 150,
            column: 30,
            span: 3261..3268,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 150,
            column: 32,
            span: 3269..3270,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 150,
            column: 39,
            span: 3271..3277,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 150,
            column: 40,
            span: 3277..3278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "module",
        ),
        position: Position {
            line: 150,
            column: 47,
            span: 3279..3285,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 150,
            column: 48,
            span: 3285..3286,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 150,
            column: 0,
            span: 3287..3294,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 151,
            column: 2,
            span: 3295..3296,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 151,
            column: 4,
            span: 3297..3298,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 151,
            column: 8,
            span: 3299..3302,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 151,
            column: 9,
            span: 3302..3303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 151,
            column: 11,
            span: 3304..3305,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 151,
            column: 13,
            span: 3306..3307,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 151,
            column: 15,
            span: 3307..3309,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 151,
            column: 16,
            span: 3309..3310,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 151,
            column: 23,
            span: 3311..3317,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 151,
            column: 24,
            span: 3317..3318,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 151,
            column: 26,
            span: 3318..3320,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 151,
            column: 27,
            span: 3320..3321,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 151,
            column: 28,
            span: 3321..3322,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 151,
            column: 31,
            span: 3323..3325,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 151,
            column: 33,
            span: 3325..3327,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 151,
            column: 34,
            span: 3327..3328,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "module",
        ),
        position: Position {
            line: 152,
            column: 7,
            span: 3364..3370,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X\"",
        ),
        position: Position {
            line: 152,
            column: 10,
            span: 3370..3373,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 152,
            column: 11,
            span: 3373..3374,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 152,
            column: 13,
            span: 3375..3376,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 152,
            column: 15,
            span: 3377..3378,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 152,
            column: 17,
            span: 3378..3380,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 152,
            column: 18,
            span: 3380..3381,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 152,
            column: 25,
            span: 3382..3388,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 152,
            column: 26,
            span: 3388..3389,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_M",
        ),
        position: Position {
            line: 152,
            column: 28,
            span: 3389..3391,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 152,
            column: 29,
            span: 3391..3392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 152,
            column: 30,
            span: 3392..3393,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 152,
            column: 33,
            span: 3394..3396,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 152,
            column: 35,
            span: 3396..3398,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 152,
            column: 36,
            span: 3398..3399,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "module",
        ),
        position: Position {
            line: 153,
            column: 7,
            span: 3400..3406,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X.a.b.c\"",
        ),
        position: Position {
            line: 153,
            column: 16,
            span: 3406..3415,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 153,
            column: 17,
            span: 3415..3416,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 153,
            column: 19,
            span: 3417..3418,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 153,
            column: 21,
            span: 3419..3420,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 153,
            column: 23,
            span: 3420..3422,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 153,
            column: 24,
            span: 3422..3423,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 153,
            column: 31,
            span: 3424..3430,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 153,
            column: 32,
            span: 3430..3431,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_M",
        ),
        position: Position {
            line: 153,
            column: 34,
            span: 3431..3433,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 153,
            column: 35,
            span: 3433..3434,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 153,
            column: 36,
            span: 3434..3435,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 153,
            column: 39,
            span: 3436..3438,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 153,
            column: 41,
            span: 3438..3440,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 153,
            column: 42,
            span: 3440..3441,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "module",
        ),
        position: Position {
            line: 154,
            column: 7,
            span: 3442..3448,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 154,
            column: 8,
            span: 3448..3449,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X.a.b\"",
        ),
        position: Position {
            line: 154,
            column: 15,
            span: 3449..3456,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 154,
            column: 16,
            span: 3456..3457,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 154,
            column: 24,
            span: 3458..3465,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 154,
            column: 25,
            span: 3465..3466,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seeall",
        ),
        position: Position {
            line: 154,
            column: 31,
            span: 3466..3472,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 154,
            column: 32,
            span: 3472..3473,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 154,
            column: 33,
            span: 3473..3474,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 154,
            column: 35,
            span: 3475..3476,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 154,
            column: 37,
            span: 3477..3478,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 154,
            column: 0,
            span: 3478..3480,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 155,
            column: 7,
            span: 3481..3487,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 155,
            column: 8,
            span: 3487..3488,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 155,
            column: 9,
            span: 3488..3489,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 155,
            column: 10,
            span: 3489..3490,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_NAME",
        ),
        position: Position {
            line: 155,
            column: 15,
            span: 3490..3495,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 155,
            column: 18,
            span: 3496..3498,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X\"",
        ),
        position: Position {
            line: 155,
            column: 22,
            span: 3499..3502,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 155,
            column: 26,
            span: 3503..3506,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 155,
            column: 28,
            span: 3507..3508,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 155,
            column: 29,
            span: 3508..3509,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 155,
            column: 30,
            span: 3509..3510,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 155,
            column: 31,
            span: 3510..3511,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 155,
            column: 32,
            span: 3511..3512,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 155,
            column: 33,
            span: 3512..3513,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 155,
            column: 34,
            span: 3513..3514,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 155,
            column: 35,
            span: 3514..3515,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_NAME",
        ),
        position: Position {
            line: 155,
            column: 40,
            span: 3515..3520,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 155,
            column: 43,
            span: 3521..3523,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X.a.b.c\"",
        ),
        position: Position {
            line: 155,
            column: 53,
            span: 3524..3533,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 155,
            column: 57,
            span: 3534..3537,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 155,
            column: 59,
            span: 3538..3539,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 155,
            column: 60,
            span: 3539..3540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 155,
            column: 61,
            span: 3540..3541,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 155,
            column: 62,
            span: 3541..3542,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 155,
            column: 63,
            span: 3542..3543,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 155,
            column: 64,
            span: 3543..3544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_NAME",
        ),
        position: Position {
            line: 155,
            column: 69,
            span: 3544..3549,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 155,
            column: 72,
            span: 3550..3552,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X.a.b\"",
        ),
        position: Position {
            line: 155,
            column: 80,
            span: 3553..3560,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 155,
            column: 81,
            span: 3560..3561,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 156,
            column: 7,
            span: 3562..3568,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 156,
            column: 8,
            span: 3568..3569,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 156,
            column: 9,
            span: 3569..3570,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 156,
            column: 10,
            span: 3570..3571,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_M",
        ),
        position: Position {
            line: 156,
            column: 12,
            span: 3571..3573,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 156,
            column: 15,
            span: 3574..3576,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 156,
            column: 17,
            span: 3577..3578,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 156,
            column: 21,
            span: 3579..3582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 156,
            column: 23,
            span: 3583..3584,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 156,
            column: 24,
            span: 3584..3585,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 156,
            column: 25,
            span: 3585..3586,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 156,
            column: 26,
            span: 3586..3587,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 156,
            column: 27,
            span: 3587..3588,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 156,
            column: 28,
            span: 3588..3589,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 156,
            column: 29,
            span: 3589..3590,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 156,
            column: 30,
            span: 3590..3591,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_M",
        ),
        position: Position {
            line: 156,
            column: 32,
            span: 3591..3593,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 156,
            column: 35,
            span: 3594..3596,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 156,
            column: 37,
            span: 3597..3598,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 156,
            column: 38,
            span: 3598..3599,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 156,
            column: 39,
            span: 3599..3600,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 156,
            column: 40,
            span: 3600..3601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 156,
            column: 41,
            span: 3601..3602,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 156,
            column: 42,
            span: 3602..3603,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 156,
            column: 43,
            span: 3603..3604,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 156,
            column: 47,
            span: 3605..3608,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 156,
            column: 49,
            span: 3609..3610,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 156,
            column: 50,
            span: 3610..3611,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 156,
            column: 51,
            span: 3611..3612,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 156,
            column: 52,
            span: 3612..3613,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 156,
            column: 53,
            span: 3613..3614,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 156,
            column: 54,
            span: 3614..3615,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_M",
        ),
        position: Position {
            line: 156,
            column: 56,
            span: 3615..3617,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 156,
            column: 59,
            span: 3618..3620,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 156,
            column: 61,
            span: 3621..3622,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 156,
            column: 62,
            span: 3622..3623,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 156,
            column: 63,
            span: 3623..3624,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 156,
            column: 64,
            span: 3624..3625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 156,
            column: 65,
            span: 3625..3626,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 156,
            column: 66,
            span: 3626..3627,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 157,
            column: 7,
            span: 3628..3634,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 157,
            column: 8,
            span: 3634..3635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 157,
            column: 9,
            span: 3635..3636,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 157,
            column: 10,
            span: 3636..3637,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 157,
            column: 11,
            span: 3637..3638,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 157,
            column: 14,
            span: 3639..3641,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 157,
            column: 16,
            span: 3641..3643,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 157,
            column: 20,
            span: 3644..3647,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 157,
            column: 22,
            span: 3648..3649,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 157,
            column: 23,
            span: 3649..3650,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 157,
            column: 24,
            span: 3650..3651,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 157,
            column: 25,
            span: 3651..3652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 157,
            column: 26,
            span: 3652..3653,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 157,
            column: 27,
            span: 3653..3654,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 157,
            column: 28,
            span: 3654..3655,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 157,
            column: 29,
            span: 3655..3656,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 157,
            column: 30,
            span: 3656..3657,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 157,
            column: 33,
            span: 3658..3660,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 157,
            column: 35,
            span: 3660..3662,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 157,
            column: 39,
            span: 3663..3666,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 157,
            column: 41,
            span: 3667..3668,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 157,
            column: 42,
            span: 3668..3669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 157,
            column: 43,
            span: 3669..3670,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 157,
            column: 44,
            span: 3670..3671,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 157,
            column: 45,
            span: 3671..3672,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 157,
            column: 46,
            span: 3672..3673,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 157,
            column: 47,
            span: 3673..3674,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 157,
            column: 50,
            span: 3675..3677,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 157,
            column: 52,
            span: 3677..3679,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 157,
            column: 53,
            span: 3679..3680,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 158,
            column: 7,
            span: 3681..3687,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 158,
            column: 8,
            span: 3687..3688,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 158,
            column: 9,
            span: 3688..3689,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 158,
            column: 10,
            span: 3689..3690,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_PACKAGE",
        ),
        position: Position {
            line: 158,
            column: 18,
            span: 3690..3698,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 158,
            column: 21,
            span: 3699..3701,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 158,
            column: 24,
            span: 3702..3704,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 158,
            column: 28,
            span: 3705..3708,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 158,
            column: 30,
            span: 3709..3710,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 158,
            column: 31,
            span: 3710..3711,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 158,
            column: 32,
            span: 3711..3712,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 158,
            column: 33,
            span: 3712..3713,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 158,
            column: 34,
            span: 3713..3714,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 158,
            column: 35,
            span: 3714..3715,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 158,
            column: 36,
            span: 3715..3716,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 158,
            column: 37,
            span: 3716..3717,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_PACKAGE",
        ),
        position: Position {
            line: 158,
            column: 45,
            span: 3717..3725,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 158,
            column: 48,
            span: 3726..3728,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X.a.b.\"",
        ),
        position: Position {
            line: 158,
            column: 57,
            span: 3729..3737,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 158,
            column: 0,
            span: 3738..3741,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 159,
            column: 9,
            span: 3749..3750,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 159,
            column: 10,
            span: 3750..3751,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 159,
            column: 11,
            span: 3751..3752,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 159,
            column: 12,
            span: 3752..3753,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 159,
            column: 13,
            span: 3753..3754,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 159,
            column: 14,
            span: 3754..3755,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_PACKAGE",
        ),
        position: Position {
            line: 159,
            column: 22,
            span: 3755..3763,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 159,
            column: 25,
            span: 3764..3766,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X.a.\"",
        ),
        position: Position {
            line: 159,
            column: 32,
            span: 3767..3773,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 159,
            column: 33,
            span: 3773..3774,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 160,
            column: 7,
            span: 3775..3781,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 160,
            column: 8,
            span: 3781..3782,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_PACKAGE",
        ),
        position: Position {
            line: 160,
            column: 16,
            span: 3782..3790,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 160,
            column: 18,
            span: 3790..3792,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c\"",
        ),
        position: Position {
            line: 160,
            column: 21,
            span: 3792..3795,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 160,
            column: 24,
            span: 3796..3798,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X.a.c\"",
        ),
        position: Position {
            line: 160,
            column: 32,
            span: 3799..3806,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 160,
            column: 33,
            span: 3806..3807,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 161,
            column: 7,
            span: 3808..3814,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 161,
            column: 8,
            span: 3814..3815,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 161,
            column: 9,
            span: 3815..3816,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 161,
            column: 10,
            span: 3816..3817,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 161,
            column: 11,
            span: 3817..3818,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 161,
            column: 12,
            span: 3818..3819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_NAME",
        ),
        position: Position {
            line: 161,
            column: 17,
            span: 3819..3824,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 161,
            column: 20,
            span: 3825..3827,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 161,
            column: 24,
            span: 3828..3831,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 161,
            column: 28,
            span: 3832..3835,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 161,
            column: 30,
            span: 3836..3837,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 161,
            column: 31,
            span: 3837..3838,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 161,
            column: 32,
            span: 3838..3839,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 161,
            column: 33,
            span: 3839..3840,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_M",
        ),
        position: Position {
            line: 161,
            column: 35,
            span: 3840..3842,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 161,
            column: 38,
            span: 3843..3845,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 161,
            column: 42,
            span: 3846..3849,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 161,
            column: 43,
            span: 3849..3850,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "module",
        ),
        position: Position {
            line: 162,
            column: 7,
            span: 3851..3857,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 162,
            column: 8,
            span: 3857..3858,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X.a\"",
        ),
        position: Position {
            line: 162,
            column: 13,
            span: 3858..3863,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 162,
            column: 14,
            span: 3863..3864,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "import",
        ),
        position: Position {
            line: 162,
            column: 21,
            span: 3865..3871,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 162,
            column: 22,
            span: 3871..3872,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X\"",
        ),
        position: Position {
            line: 162,
            column: 25,
            span: 3872..3875,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 162,
            column: 26,
            span: 3875..3876,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 162,
            column: 27,
            span: 3876..3877,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 162,
            column: 29,
            span: 3878..3879,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 162,
            column: 31,
            span: 3880..3881,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 162,
            column: 33,
            span: 3882..3883,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 162,
            column: 0,
            span: 3883..3885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 163,
            column: 7,
            span: 3886..3892,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 163,
            column: 8,
            span: 3892..3893,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 163,
            column: 9,
            span: 3893..3894,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 163,
            column: 10,
            span: 3894..3895,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 163,
            column: 11,
            span: 3895..3896,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 163,
            column: 12,
            span: 3896..3897,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_NAME",
        ),
        position: Position {
            line: 163,
            column: 17,
            span: 3897..3902,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 163,
            column: 20,
            span: 3903..3905,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X.a\"",
        ),
        position: Position {
            line: 163,
            column: 26,
            span: 3906..3911,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 163,
            column: 30,
            span: 3912..3915,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 163,
            column: 32,
            span: 3916..3917,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 163,
            column: 33,
            span: 3917..3918,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 163,
            column: 34,
            span: 3918..3919,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 163,
            column: 35,
            span: 3919..3920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 163,
            column: 36,
            span: 3920..3921,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 163,
            column: 39,
            span: 3922..3924,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 163,
            column: 41,
            span: 3924..3926,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 163,
            column: 45,
            span: 3927..3930,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 163,
            column: 47,
            span: 3931..3932,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 163,
            column: 48,
            span: 3932..3933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 163,
            column: 49,
            span: 3933..3934,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 163,
            column: 50,
            span: 3934..3935,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_M",
        ),
        position: Position {
            line: 163,
            column: 52,
            span: 3935..3937,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 163,
            column: 55,
            span: 3938..3940,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 163,
            column: 57,
            span: 3941..3942,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 163,
            column: 58,
            span: 3942..3943,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 163,
            column: 59,
            span: 3943..3944,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 163,
            column: 60,
            span: 3944..3945,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "module",
        ),
        position: Position {
            line: 164,
            column: 7,
            span: 3946..3952,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 164,
            column: 8,
            span: 3952..3953,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X.a.b\"",
        ),
        position: Position {
            line: 164,
            column: 15,
            span: 3953..3960,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 164,
            column: 16,
            span: 3960..3961,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 164,
            column: 24,
            span: 3962..3969,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 164,
            column: 25,
            span: 3969..3970,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seeall",
        ),
        position: Position {
            line: 164,
            column: 31,
            span: 3970..3976,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 164,
            column: 32,
            span: 3976..3977,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 164,
            column: 33,
            span: 3977..3978,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 164,
            column: 40,
            span: 3979..3985,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 164,
            column: 41,
            span: 3985..3986,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 164,
            column: 42,
            span: 3986..3987,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 164,
            column: 45,
            span: 3988..3990,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 164,
            column: 47,
            span: 3990..3992,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 164,
            column: 48,
            span: 3992..3993,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 164,
            column: 49,
            span: 3993..3994,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 164,
            column: 51,
            span: 3995..3996,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 164,
            column: 53,
            span: 3997..3998,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 164,
            column: 0,
            span: 3998..4000,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 165,
            column: 7,
            span: 4001..4007,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 165,
            column: 8,
            span: 4007..4008,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_NAME",
        ),
        position: Position {
            line: 165,
            column: 13,
            span: 4008..4013,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 165,
            column: 16,
            span: 4014..4016,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X.a.b\"",
        ),
        position: Position {
            line: 165,
            column: 24,
            span: 4017..4024,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 165,
            column: 28,
            span: 4025..4028,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 165,
            column: 30,
            span: 4029..4030,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 165,
            column: 31,
            span: 4030..4031,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 165,
            column: 32,
            span: 4031..4032,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 165,
            column: 33,
            span: 4032..4033,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 165,
            column: 34,
            span: 4033..4034,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 165,
            column: 35,
            span: 4034..4035,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 165,
            column: 36,
            span: 4035..4036,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 165,
            column: 39,
            span: 4037..4039,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 165,
            column: 41,
            span: 4039..4041,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 165,
            column: 42,
            span: 4041..4042,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 167,
            column: 7,
            span: 4044..4050,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 167,
            column: 8,
            span: 4050..4051,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 167,
            column: 9,
            span: 4051..4052,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 167,
            column: 10,
            span: 4052..4053,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 167,
            column: 12,
            span: 4053..4055,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 167,
            column: 15,
            span: 4056..4058,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 167,
            column: 19,
            span: 4059..4062,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 167,
            column: 23,
            span: 4063..4066,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 167,
            column: 25,
            span: 4067..4068,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 167,
            column: 26,
            span: 4068..4069,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 167,
            column: 27,
            span: 4069..4070,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 167,
            column: 28,
            span: 4070..4071,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 167,
            column: 30,
            span: 4071..4073,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 167,
            column: 33,
            span: 4074..4076,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 167,
            column: 37,
            span: 4077..4080,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 167,
            column: 41,
            span: 4081..4084,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 167,
            column: 43,
            span: 4085..4086,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 167,
            column: 44,
            span: 4086..4087,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 167,
            column: 45,
            span: 4087..4088,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 167,
            column: 46,
            span: 4088..4089,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 167,
            column: 47,
            span: 4089..4090,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 167,
            column: 48,
            span: 4090..4091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 167,
            column: 50,
            span: 4091..4093,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 167,
            column: 53,
            span: 4094..4096,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 167,
            column: 56,
            span: 4097..4099,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 167,
            column: 60,
            span: 4100..4103,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 167,
            column: 62,
            span: 4104..4105,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 167,
            column: 63,
            span: 4105..4106,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 167,
            column: 64,
            span: 4106..4107,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 167,
            column: 65,
            span: 4107..4108,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 167,
            column: 66,
            span: 4108..4109,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 167,
            column: 67,
            span: 4109..4110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 167,
            column: 68,
            span: 4110..4111,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 167,
            column: 69,
            span: 4111..4112,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 167,
            column: 71,
            span: 4112..4114,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 167,
            column: 74,
            span: 4115..4117,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 167,
            column: 78,
            span: 4118..4121,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 167,
            column: 79,
            span: 4121..4122,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setfenv",
        ),
        position: Position {
            line: 169,
            column: 8,
            span: 4124..4131,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 169,
            column: 9,
            span: 4131..4132,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 169,
            column: 10,
            span: 4131..4133,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 169,
            column: 11,
            span: 4133..4134,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 169,
            column: 14,
            span: 4135..4137,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 169,
            column: 15,
            span: 4137..4138,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 170,
            column: 7,
            span: 4139..4145,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 170,
            column: 8,
            span: 4145..4146,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 170,
            column: 9,
            span: 4146..4147,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 170,
            column: 12,
            span: 4148..4150,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 170,
            column: 14,
            span: 4150..4152,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 170,
            column: 15,
            span: 4152..4153,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 172,
            column: 7,
            span: 4155..4161,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 172,
            column: 8,
            span: 4161..4162,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 172,
            column: 11,
            span: 4162..4165,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 172,
            column: 17,
            span: 4166..4171,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 172,
            column: 18,
            span: 4171..4172,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "module",
        ),
        position: Position {
            line: 172,
            column: 24,
            span: 4172..4178,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 172,
            column: 25,
            span: 4178..4179,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 172,
            column: 29,
            span: 4180..4183,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 172,
            column: 30,
            span: 4183..4184,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 172,
            column: 31,
            span: 4184..4185,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 173,
            column: 7,
            span: 4186..4192,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 173,
            column: 8,
            span: 4192..4193,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 173,
            column: 11,
            span: 4193..4196,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 173,
            column: 17,
            span: 4197..4202,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 173,
            column: 18,
            span: 4202..4203,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "module",
        ),
        position: Position {
            line: 173,
            column: 24,
            span: 4203..4209,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 173,
            column: 25,
            span: 4209..4210,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"math.sin\"",
        ),
        position: Position {
            line: 173,
            column: 36,
            span: 4211..4221,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 173,
            column: 37,
            span: 4221..4222,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 173,
            column: 38,
            span: 4222..4223,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 179,
            column: 6,
            span: 4251..4256,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 179,
            column: 8,
            span: 4257..4258,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 179,
            column: 10,
            span: 4259..4260,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 179,
            column: 13,
            span: 4261..4263,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 182,
            column: 6,
            span: 4370..4375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 182,
            column: 8,
            span: 4376..4377,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 182,
            column: 9,
            span: 4377..4378,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 182,
            column: 13,
            span: 4379..4382,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 182,
            column: 14,
            span: 4382..4383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "when",
        ),
        position: Position {
            line: 182,
            column: 19,
            span: 4384..4388,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 182,
            column: 21,
            span: 4389..4390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 182,
            column: 29,
            span: 4391..4398,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 182,
            column: 30,
            span: 4398..4399,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        position: Position {
            line: 182,
            column: 37,
            span: 4399..4406,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 182,
            column: 38,
            span: 4406..4407,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"libs/lib1.so\"",
        ),
        position: Position {
            line: 182,
            column: 52,
            span: 4407..4421,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 182,
            column: 53,
            span: 4421..4422,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 182,
            column: 55,
            span: 4423..4424,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 182,
            column: 57,
            span: 4424..4426,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"luaopen_lib1\"",
        ),
        position: Position {
            line: 182,
            column: 71,
            span: 4426..4440,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 182,
            column: 72,
            span: 4440..4441,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 183,
            column: 3,
            span: 4442..4444,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 183,
            column: 7,
            span: 4445..4448,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 183,
            column: 9,
            span: 4449..4450,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 183,
            column: 0,
            span: 4451..4455,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 184,
            column: 4,
            span: 4458..4459,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        position: Position {
            line: 184,
            column: 11,
            span: 4459..4466,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 184,
            column: 14,
            span: 4467..4469,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 184,
            column: 20,
            span: 4470..4475,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 184,
            column: 21,
            span: 4475..4476,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 184,
            column: 22,
            span: 4476..4477,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\a\\n >>> cannot load dynamic library <<<\\n\\a'",
        ),
        position: Position {
            line: 184,
            column: 68,
            span: 4477..4523,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 184,
            column: 69,
            span: 4523..4524,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 185,
            column: 8,
            span: 4527..4532,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 185,
            column: 9,
            span: 4532..4533,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 185,
            column: 12,
            span: 4533..4536,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 185,
            column: 13,
            span: 4536..4537,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "when",
        ),
        position: Position {
            line: 185,
            column: 18,
            span: 4538..4542,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 185,
            column: 19,
            span: 4542..4543,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 186,
            column: 0,
            span: 4544..4548,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 187,
            column: 4,
            span: 4551..4552,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 187,
            column: 5,
            span: 4552..4553,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 187,
            column: 6,
            span: 4553..4554,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 188,
            column: 9,
            span: 4575..4581,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 188,
            column: 10,
            span: 4581..4582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 188,
            column: 17,
            span: 4582..4589,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 188,
            column: 18,
            span: 4589..4590,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib1\"",
        ),
        position: Position {
            line: 188,
            column: 24,
            span: 4590..4596,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 188,
            column: 25,
            span: 4596..4597,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 188,
            column: 28,
            span: 4598..4600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lib1",
        ),
        position: Position {
            line: 188,
            column: 33,
            span: 4601..4605,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 188,
            column: 34,
            span: 4605..4606,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 189,
            column: 17,
            span: 4609..4623,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 189,
            column: 18,
            span: 4623..4624,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 189,
            column: 19,
            span: 4624..4625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 190,
            column: 9,
            span: 4628..4634,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 190,
            column: 10,
            span: 4634..4635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lib1",
        ),
        position: Position {
            line: 190,
            column: 14,
            span: 4635..4639,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 190,
            column: 15,
            span: 4639..4640,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "id",
        ),
        position: Position {
            line: 190,
            column: 17,
            span: 4640..4642,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 190,
            column: 18,
            span: 4642..4643,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 190,
            column: 21,
            span: 4643..4646,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 190,
            column: 22,
            span: 4646..4647,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 190,
            column: 25,
            span: 4648..4650,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 190,
            column: 29,
            span: 4651..4654,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 190,
            column: 30,
            span: 4654..4655,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 191,
            column: 4,
            span: 4658..4659,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 191,
            column: 6,
            span: 4660..4661,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 191,
            column: 13,
            span: 4662..4668,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 191,
            column: 14,
            span: 4668..4669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 191,
            column: 21,
            span: 4669..4676,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 191,
            column: 22,
            span: 4676..4677,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        position: Position {
            line: 191,
            column: 29,
            span: 4677..4684,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 191,
            column: 30,
            span: 4684..4685,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"libs/lib1.so\"",
        ),
        position: Position {
            line: 191,
            column: 44,
            span: 4685..4699,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 191,
            column: 45,
            span: 4699..4700,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 191,
            column: 47,
            span: 4701..4702,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 191,
            column: 49,
            span: 4702..4704,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"anotherfunc\"",
        ),
        position: Position {
            line: 191,
            column: 62,
            span: 4704..4717,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 191,
            column: 63,
            span: 4717..4718,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 191,
            column: 64,
            span: 4718..4719,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 192,
            column: 9,
            span: 4722..4728,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 192,
            column: 10,
            span: 4728..4729,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 192,
            column: 11,
            span: 4729..4730,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 192,
            column: 12,
            span: 4730..4731,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 192,
            column: 14,
            span: 4730..4733,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 192,
            column: 15,
            span: 4733..4734,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 192,
            column: 18,
            span: 4734..4737,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 192,
            column: 19,
            span: 4737..4738,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 192,
            column: 22,
            span: 4739..4741,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1020\\n\"",
        ),
        position: Position {
            line: 192,
            column: 31,
            span: 4742..4750,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 192,
            column: 32,
            span: 4750..4751,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 193,
            column: 4,
            span: 4754..4755,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 193,
            column: 5,
            span: 4755..4756,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 193,
            column: 9,
            span: 4757..4760,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 193,
            column: 10,
            span: 4760..4761,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "when",
        ),
        position: Position {
            line: 193,
            column: 15,
            span: 4762..4766,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 193,
            column: 17,
            span: 4767..4768,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 193,
            column: 25,
            span: 4769..4776,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 193,
            column: 26,
            span: 4776..4777,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        position: Position {
            line: 193,
            column: 33,
            span: 4777..4784,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 193,
            column: 34,
            span: 4784..4785,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"libs/lib1.so\"",
        ),
        position: Position {
            line: 193,
            column: 48,
            span: 4785..4799,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 193,
            column: 49,
            span: 4799..4800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 193,
            column: 51,
            span: 4801..4802,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 193,
            column: 53,
            span: 4802..4804,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        position: Position {
            line: 193,
            column: 59,
            span: 4804..4810,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 193,
            column: 60,
            span: 4810..4811,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 194,
            column: 9,
            span: 4814..4820,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 194,
            column: 10,
            span: 4820..4821,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 194,
            column: 13,
            span: 4821..4824,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 194,
            column: 15,
            span: 4825..4826,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 194,
            column: 19,
            span: 4827..4830,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 194,
            column: 24,
            span: 4831..4835,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 194,
            column: 25,
            span: 4835..4836,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 194,
            column: 28,
            span: 4836..4839,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 194,
            column: 29,
            span: 4839..4840,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 194,
            column: 32,
            span: 4841..4843,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        position: Position {
            line: 194,
            column: 41,
            span: 4844..4852,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 194,
            column: 45,
            span: 4853..4856,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "when",
        ),
        position: Position {
            line: 194,
            column: 50,
            span: 4857..4861,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 194,
            column: 53,
            span: 4862..4864,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"init\"",
        ),
        position: Position {
            line: 194,
            column: 60,
            span: 4865..4871,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 194,
            column: 61,
            span: 4871..4872,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 195,
            column: 10,
            span: 4875..4882,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 195,
            column: 11,
            span: 4882..4883,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cpath",
        ),
        position: Position {
            line: 195,
            column: 16,
            span: 4883..4888,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 195,
            column: 18,
            span: 4889..4890,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"libs/?.so\"",
        ),
        position: Position {
            line: 195,
            column: 30,
            span: 4891..4902,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 196,
            column: 10,
            span: 4905..4912,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib2\"",
        ),
        position: Position {
            line: 196,
            column: 16,
            span: 4912..4918,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 197,
            column: 9,
            span: 4921..4927,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 197,
            column: 10,
            span: 4927..4928,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lib2",
        ),
        position: Position {
            line: 197,
            column: 14,
            span: 4928..4932,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 197,
            column: 15,
            span: 4932..4933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "id",
        ),
        position: Position {
            line: 197,
            column: 17,
            span: 4933..4935,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 197,
            column: 18,
            span: 4935..4936,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 197,
            column: 21,
            span: 4936..4939,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 197,
            column: 22,
            span: 4939..4940,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 197,
            column: 25,
            span: 4941..4943,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 197,
            column: 29,
            span: 4944..4947,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 197,
            column: 30,
            span: 4947..4948,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 198,
            column: 8,
            span: 4951..4956,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fs",
        ),
        position: Position {
            line: 198,
            column: 11,
            span: 4957..4959,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 198,
            column: 13,
            span: 4960..4961,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 198,
            column: 21,
            span: 4962..4969,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib1.sub\"",
        ),
        position: Position {
            line: 198,
            column: 31,
            span: 4969..4979,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 199,
            column: 9,
            span: 4982..4988,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 199,
            column: 10,
            span: 4988..4989,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fs",
        ),
        position: Position {
            line: 199,
            column: 12,
            span: 4989..4991,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 199,
            column: 15,
            span: 4992..4994,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lib1",
        ),
        position: Position {
            line: 199,
            column: 20,
            span: 4995..4999,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 199,
            column: 21,
            span: 4999..5000,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        position: Position {
            line: 199,
            column: 24,
            span: 5000..5003,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 199,
            column: 28,
            span: 5004..5007,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        position: Position {
            line: 199,
            column: 33,
            span: 5008..5012,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 199,
            column: 34,
            span: 5012..5013,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lib1",
        ),
        position: Position {
            line: 199,
            column: 38,
            span: 5013..5017,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 199,
            column: 39,
            span: 5017..5018,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        position: Position {
            line: 199,
            column: 42,
            span: 5018..5021,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 199,
            column: 43,
            span: 5021..5022,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 199,
            column: 46,
            span: 5023..5025,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 199,
            column: 50,
            span: 5026..5029,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 199,
            column: 51,
            span: 5029..5030,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "module",
        ),
        position: Position {
            line: 200,
            column: 9,
            span: 5033..5039,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 200,
            column: 10,
            span: 5039..5040,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib2\"",
        ),
        position: Position {
            line: 200,
            column: 16,
            span: 5040..5046,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 200,
            column: 17,
            span: 5046..5047,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 200,
            column: 25,
            span: 5048..5055,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 200,
            column: 26,
            span: 5055..5056,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seeall",
        ),
        position: Position {
            line: 200,
            column: 32,
            span: 5056..5062,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 200,
            column: 33,
            span: 5062..5063,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 201,
            column: 4,
            span: 5066..5067,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 201,
            column: 6,
            span: 5068..5069,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 201,
            column: 14,
            span: 5070..5077,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-lib2\"",
        ),
        position: Position {
            line: 201,
            column: 21,
            span: 5077..5084,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 202,
            column: 9,
            span: 5087..5093,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 202,
            column: 10,
            span: 5093..5094,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 202,
            column: 11,
            span: 5094..5095,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 202,
            column: 12,
            span: 5095..5096,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "id",
        ),
        position: Position {
            line: 202,
            column: 14,
            span: 5096..5098,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 202,
            column: 15,
            span: 5098..5099,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 202,
            column: 18,
            span: 5099..5102,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 202,
            column: 19,
            span: 5102..5103,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 202,
            column: 22,
            span: 5104..5106,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 202,
            column: 26,
            span: 5107..5110,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 202,
            column: 30,
            span: 5111..5114,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_M",
        ),
        position: Position {
            line: 202,
            column: 33,
            span: 5115..5117,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 202,
            column: 36,
            span: 5118..5120,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 202,
            column: 38,
            span: 5121..5122,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 202,
            column: 42,
            span: 5123..5126,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_NAME",
        ),
        position: Position {
            line: 202,
            column: 48,
            span: 5127..5132,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 202,
            column: 51,
            span: 5133..5135,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib2\"",
        ),
        position: Position {
            line: 202,
            column: 58,
            span: 5136..5142,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 202,
            column: 59,
            span: 5142..5143,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "module",
        ),
        position: Position {
            line: 203,
            column: 9,
            span: 5146..5152,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 203,
            column: 10,
            span: 5152..5153,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib1.sub\"",
        ),
        position: Position {
            line: 203,
            column: 20,
            span: 5153..5163,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 203,
            column: 21,
            span: 5163..5164,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 203,
            column: 29,
            span: 5165..5172,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 203,
            column: 30,
            span: 5172..5173,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seeall",
        ),
        position: Position {
            line: 203,
            column: 36,
            span: 5173..5179,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 203,
            column: 37,
            span: 5179..5180,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 204,
            column: 9,
            span: 5183..5189,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 204,
            column: 10,
            span: 5189..5190,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_M",
        ),
        position: Position {
            line: 204,
            column: 12,
            span: 5190..5192,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 204,
            column: 15,
            span: 5193..5195,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fs",
        ),
        position: Position {
            line: 204,
            column: 18,
            span: 5196..5198,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 204,
            column: 19,
            span: 5198..5199,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setfenv",
        ),
        position: Position {
            line: 205,
            column: 10,
            span: 5202..5209,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 205,
            column: 11,
            span: 5209..5210,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 205,
            column: 12,
            span: 5209..5211,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 205,
            column: 13,
            span: 5211..5212,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 205,
            column: 16,
            span: 5213..5215,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 205,
            column: 17,
            span: 5215..5216,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 207,
            column: 0,
            span: 5219..5222,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 208,
            column: 2,
            span: 5223..5224,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 208,
            column: 3,
            span: 5224..5225,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 208,
            column: 7,
            span: 5226..5229,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 208,
            column: 8,
            span: 5229..5230,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "when",
        ),
        position: Position {
            line: 208,
            column: 13,
            span: 5231..5235,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 208,
            column: 15,
            span: 5236..5237,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 208,
            column: 23,
            span: 5238..5245,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 208,
            column: 24,
            span: 5245..5246,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        position: Position {
            line: 208,
            column: 31,
            span: 5246..5253,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 208,
            column: 32,
            span: 5253..5254,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"donotexist\"",
        ),
        position: Position {
            line: 208,
            column: 44,
            span: 5254..5266,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 208,
            column: 45,
            span: 5266..5267,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 208,
            column: 47,
            span: 5268..5269,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 208,
            column: 49,
            span: 5269..5271,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        position: Position {
            line: 208,
            column: 55,
            span: 5271..5277,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 208,
            column: 56,
            span: 5277..5278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 209,
            column: 7,
            span: 5279..5285,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 209,
            column: 8,
            span: 5285..5286,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 209,
            column: 11,
            span: 5286..5289,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 209,
            column: 13,
            span: 5290..5291,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 209,
            column: 17,
            span: 5292..5295,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 209,
            column: 22,
            span: 5296..5300,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 209,
            column: 23,
            span: 5300..5301,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 209,
            column: 26,
            span: 5301..5304,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 209,
            column: 27,
            span: 5304..5305,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 209,
            column: 30,
            span: 5306..5308,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        position: Position {
            line: 209,
            column: 39,
            span: 5309..5317,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 209,
            column: 43,
            span: 5318..5321,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 209,
            column: 45,
            span: 5322..5323,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "when",
        ),
        position: Position {
            line: 209,
            column: 49,
            span: 5323..5327,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 209,
            column: 52,
            span: 5328..5330,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"open\"",
        ),
        position: Position {
            line: 209,
            column: 59,
            span: 5331..5337,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 209,
            column: 62,
            span: 5338..5340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "when",
        ),
        position: Position {
            line: 209,
            column: 67,
            span: 5341..5345,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 209,
            column: 70,
            span: 5346..5348,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"absent\"",
        ),
        position: Position {
            line: 209,
            column: 79,
            span: 5349..5357,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 209,
            column: 80,
            span: 5357..5358,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 209,
            column: 81,
            span: 5358..5359,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 214,
            column: 0,
            span: 5382..5384,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 215,
            column: 8,
            span: 5387..5392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 215,
            column: 10,
            span: 5393..5394,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 215,
            column: 12,
            span: 5395..5396,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 215,
            column: 0,
            span: 5397..5404,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 216,
            column: 10,
            span: 5407..5414,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 216,
            column: 12,
            span: 5415..5416,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 216,
            column: 14,
            span: 5417..5418,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 216,
            column: 15,
            span: 5418..5419,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 217,
            column: 4,
            span: 5422..5423,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 217,
            column: 5,
            span: 5423..5424,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "preload",
        ),
        position: Position {
            line: 217,
            column: 12,
            span: 5424..5431,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 217,
            column: 13,
            span: 5431..5432,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pl",
        ),
        position: Position {
            line: 217,
            column: 15,
            span: 5432..5434,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 217,
            column: 17,
            span: 5435..5436,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 217,
            column: 26,
            span: 5437..5445,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 217,
            column: 28,
            span: 5446..5447,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 217,
            column: 31,
            span: 5447..5450,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 217,
            column: 32,
            span: 5450..5451,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "module",
        ),
        position: Position {
            line: 218,
            column: 11,
            span: 5456..5462,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 218,
            column: 12,
            span: 5462..5463,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 218,
            column: 15,
            span: 5463..5466,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 218,
            column: 16,
            span: 5466..5467,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 219,
            column: 13,
            span: 5472..5480,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu",
        ),
        position: Position {
            line: 219,
            column: 18,
            span: 5481..5485,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 219,
            column: 20,
            span: 5486..5487,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 219,
            column: 21,
            span: 5487..5488,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 219,
            column: 22,
            span: 5488..5489,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 219,
            column: 29,
            span: 5490..5496,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 219,
            column: 31,
            span: 5497..5498,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 219,
            column: 32,
            span: 5498..5499,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 219,
            column: 34,
            span: 5498..5501,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 219,
            column: 0,
            span: 5502..5505,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 220,
            column: 0,
            span: 5508..5511,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 222,
            column: 10,
            span: 5515..5522,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pl\"",
        ),
        position: Position {
            line: 222,
            column: 14,
            span: 5522..5526,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 223,
            column: 9,
            span: 5529..5535,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 223,
            column: 10,
            span: 5535..5536,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 223,
            column: 17,
            span: 5536..5543,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pl\"",
        ),
        position: Position {
            line: 223,
            column: 21,
            span: 5543..5547,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 223,
            column: 24,
            span: 5548..5550,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pl",
        ),
        position: Position {
            line: 223,
            column: 27,
            span: 5551..5553,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 223,
            column: 28,
            span: 5553..5554,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 224,
            column: 9,
            span: 5557..5563,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 224,
            column: 10,
            span: 5563..5564,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pl",
        ),
        position: Position {
            line: 224,
            column: 12,
            span: 5564..5566,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 224,
            column: 13,
            span: 5566..5567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu",
        ),
        position: Position {
            line: 224,
            column: 17,
            span: 5567..5571,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 224,
            column: 18,
            span: 5571..5572,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 224,
            column: 20,
            span: 5571..5574,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 224,
            column: 21,
            span: 5574..5575,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 224,
            column: 24,
            span: 5576..5578,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 224,
            column: 27,
            span: 5578..5581,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 224,
            column: 28,
            span: 5581..5582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 226,
            column: 10,
            span: 5586..5593,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 226,
            column: 12,
            span: 5594..5595,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 226,
            column: 0,
            span: 5596..5597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 227,
            column: 9,
            span: 5600..5606,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 227,
            column: 10,
            span: 5606..5607,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 227,
            column: 14,
            span: 5607..5611,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 227,
            column: 15,
            span: 5611..5612,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 227,
            column: 22,
            span: 5612..5619,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 227,
            column: 23,
            span: 5619..5620,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        position: Position {
            line: 227,
            column: 27,
            span: 5620..5624,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 227,
            column: 28,
            span: 5624..5625,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 227,
            column: 31,
            span: 5626..5628,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        position: Position {
            line: 227,
            column: 40,
            span: 5629..5637,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 227,
            column: 41,
            span: 5637..5638,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 228,
            column: 0,
            span: 5639..5642,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 232,
            column: 4,
            span: 5646..5649,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 234,
            column: 6,
            span: 5656..5661,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 234,
            column: 7,
            span: 5661..5662,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 234,
            column: 10,
            span: 5662..5665,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 234,
            column: 11,
            span: 5665..5666,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 236,
            column: 6,
            span: 5668..5673,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 236,
            column: 7,
            span: 5673..5674,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing assignments, logical operators, and constructors\"",
        ),
        position: Position {
            line: 236,
            column: 65,
            span: 5674..5732,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 236,
            column: 66,
            span: 5732..5733,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 238,
            column: 6,
            span: 5735..5740,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 238,
            column: 10,
            span: 5741..5744,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 238,
            column: 11,
            span: 5744..5745,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res2",
        ),
        position: Position {
            line: 238,
            column: 16,
            span: 5746..5750,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 238,
            column: 18,
            span: 5751..5752,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "27",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 238,
            column: 0,
            span: 5752..5755,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 240,
            column: 2,
            span: 5757..5758,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 240,
            column: 3,
            span: 5758..5759,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 240,
            column: 5,
            span: 5760..5761,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 240,
            column: 7,
            span: 5762..5763,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 240,
            column: 9,
            span: 5763..5765,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 240,
            column: 10,
            span: 5765..5766,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 240,
            column: 12,
            span: 5766..5768,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 240,
            column: 13,
            span: 5768..5769,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 240,
            column: 0,
            span: 5768..5770,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 241,
            column: 7,
            span: 5771..5777,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 241,
            column: 8,
            span: 5777..5778,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 241,
            column: 9,
            span: 5778..5779,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 241,
            column: 11,
            span: 5779..5781,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 241,
            column: 12,
            span: 5780..5782,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 241,
            column: 16,
            span: 5783..5786,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 241,
            column: 18,
            span: 5787..5788,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 241,
            column: 20,
            span: 5788..5790,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 241,
            column: 21,
            span: 5789..5791,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 241,
            column: 22,
            span: 5791..5792,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 242,
            column: 2,
            span: 5793..5794,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 242,
            column: 3,
            span: 5794..5795,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 242,
            column: 4,
            span: 5795..5796,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 242,
            column: 5,
            span: 5796..5797,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 243,
            column: 9,
            span: 5798..5806,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 243,
            column: 11,
            span: 5807..5808,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 243,
            column: 12,
            span: 5808..5809,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 243,
            column: 13,
            span: 5809..5810,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 243,
            column: 20,
            span: 5811..5817,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 243,
            column: 23,
            span: 5817..5820,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 243,
            column: 24,
            span: 5820..5821,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 243,
            column: 27,
            span: 5821..5824,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 243,
            column: 28,
            span: 5824..5825,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 243,
            column: 31,
            span: 5825..5828,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 243,
            column: 0,
            span: 5829..5832,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 244,
            column: 2,
            span: 5833..5834,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 244,
            column: 3,
            span: 5834..5835,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 244,
            column: 4,
            span: 5835..5836,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 244,
            column: 5,
            span: 5836..5837,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 244,
            column: 7,
            span: 5838..5839,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 244,
            column: 8,
            span: 5839..5840,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 244,
            column: 10,
            span: 5841..5842,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 244,
            column: 11,
            span: 5842..5843,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 244,
            column: 12,
            span: 5842..5844,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 244,
            column: 13,
            span: 5844..5845,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 244,
            column: 15,
            span: 5846..5847,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 244,
            column: 17,
            span: 5847..5849,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 244,
            column: 18,
            span: 5849..5850,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 244,
            column: 20,
            span: 5850..5852,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 244,
            column: 21,
            span: 5852..5853,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 244,
            column: 23,
            span: 5854..5855,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 244,
            column: 24,
            span: 5855..5856,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 244,
            column: 25,
            span: 5856..5857,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 245,
            column: 7,
            span: 5858..5864,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 245,
            column: 8,
            span: 5864..5865,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 245,
            column: 9,
            span: 5865..5866,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 245,
            column: 10,
            span: 5866..5867,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 245,
            column: 11,
            span: 5867..5868,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 245,
            column: 13,
            span: 5868..5870,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 245,
            column: 14,
            span: 5869..5871,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 245,
            column: 18,
            span: 5872..5875,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 245,
            column: 20,
            span: 5876..5877,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 245,
            column: 22,
            span: 5877..5879,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 245,
            column: 23,
            span: 5878..5880,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 245,
            column: 27,
            span: 5881..5884,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 245,
            column: 29,
            span: 5885..5886,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 245,
            column: 30,
            span: 5886..5887,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 245,
            column: 31,
            span: 5886..5888,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 245,
            column: 32,
            span: 5888..5889,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 245,
            column: 34,
            span: 5889..5891,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 245,
            column: 36,
            span: 5890..5893,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 245,
            column: 37,
            span: 5893..5894,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 246,
            column: 2,
            span: 5895..5896,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 246,
            column: 3,
            span: 5896..5897,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 246,
            column: 4,
            span: 5897..5898,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 246,
            column: 5,
            span: 5898..5899,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 246,
            column: 6,
            span: 5899..5900,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 246,
            column: 7,
            span: 5900..5901,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 246,
            column: 8,
            span: 5901..5902,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 246,
            column: 10,
            span: 5903..5904,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 246,
            column: 11,
            span: 5904..5905,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 246,
            column: 13,
            span: 5906..5907,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 246,
            column: 14,
            span: 5907..5908,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 246,
            column: 15,
            span: 5908..5909,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 246,
            column: 16,
            span: 5909..5910,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 246,
            column: 17,
            span: 5910..5911,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 246,
            column: 18,
            span: 5911..5912,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 246,
            column: 19,
            span: 5911..5913,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 246,
            column: 20,
            span: 5913..5914,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 246,
            column: 22,
            span: 5915..5916,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 246,
            column: 24,
            span: 5917..5918,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 246,
            column: 25,
            span: 5918..5919,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 246,
            column: 26,
            span: 5919..5920,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 246,
            column: 27,
            span: 5920..5921,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 246,
            column: 29,
            span: 5922..5923,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 246,
            column: 30,
            span: 5923..5924,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        position: Position {
            line: 246,
            column: 34,
            span: 5925..5928,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 247,
            column: 7,
            span: 5929..5935,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 247,
            column: 8,
            span: 5935..5936,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 247,
            column: 9,
            span: 5936..5937,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 247,
            column: 10,
            span: 5937..5938,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 247,
            column: 12,
            span: 5937..5940,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 247,
            column: 13,
            span: 5940..5941,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 247,
            column: 16,
            span: 5942..5944,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 247,
            column: 19,
            span: 5944..5947,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 247,
            column: 23,
            span: 5948..5951,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 247,
            column: 25,
            span: 5952..5953,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 247,
            column: 28,
            span: 5954..5956,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 247,
            column: 30,
            span: 5957..5958,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 247,
            column: 34,
            span: 5959..5962,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 247,
            column: 36,
            span: 5963..5964,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 247,
            column: 37,
            span: 5964..5965,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 247,
            column: 39,
            span: 5964..5967,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 247,
            column: 40,
            span: 5967..5968,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 247,
            column: 43,
            span: 5969..5971,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        position: Position {
            line: 247,
            column: 47,
            span: 5972..5975,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 247,
            column: 48,
            span: 5975..5976,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 249,
            column: 0,
            span: 5978..5980,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 250,
            column: 8,
            span: 5983..5988,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 250,
            column: 10,
            span: 5989..5990,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 250,
            column: 12,
            span: 5991..5992,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 250,
            column: 21,
            span: 5993..6001,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 250,
            column: 23,
            span: 6002..6003,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 250,
            column: 24,
            span: 6003..6004,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 250,
            column: 25,
            span: 6004..6005,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 250,
            column: 31,
            span: 6006..6011,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 250,
            column: 33,
            span: 6012..6013,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 250,
            column: 35,
            span: 6014..6015,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 250,
            column: 37,
            span: 6016..6017,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 250,
            column: 38,
            span: 6017..6018,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 250,
            column: 39,
            span: 6018..6019,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 250,
            column: 43,
            span: 6020..6023,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 250,
            column: 45,
            span: 6024..6025,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 250,
            column: 46,
            span: 6025..6026,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 250,
            column: 47,
            span: 6025..6027,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 250,
            column: 48,
            span: 6027..6028,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 250,
            column: 49,
            span: 6028..6029,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 250,
            column: 52,
            span: 6030..6032,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 250,
            column: 54,
            span: 6033..6034,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 250,
            column: 55,
            span: 6034..6035,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 250,
            column: 56,
            span: 6035..6036,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 250,
            column: 57,
            span: 6036..6037,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 250,
            column: 58,
            span: 6037..6038,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 250,
            column: 59,
            span: 6038..6039,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 250,
            column: 63,
            span: 6040..6043,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 250,
            column: 64,
            span: 6043..6044,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 251,
            column: 32,
            span: 6070..6076,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 251,
            column: 39,
            span: 6077..6083,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 251,
            column: 40,
            span: 6083..6084,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 251,
            column: 41,
            span: 6084..6085,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 251,
            column: 42,
            span: 6085..6086,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 251,
            column: 46,
            span: 6087..6090,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 251,
            column: 47,
            span: 6090..6091,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 252,
            column: 8,
            span: 6094..6099,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 252,
            column: 10,
            span: 6100..6101,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 252,
            column: 11,
            span: 6101..6102,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 252,
            column: 12,
            span: 6102..6103,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 252,
            column: 13,
            span: 6103..6104,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 252,
            column: 0,
            span: 6104..6105,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 253,
            column: 4,
            span: 6108..6109,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 253,
            column: 5,
            span: 6109..6110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 253,
            column: 6,
            span: 6110..6111,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 253,
            column: 8,
            span: 6112..6113,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 253,
            column: 10,
            span: 6113..6115,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 253,
            column: 11,
            span: 6115..6116,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 253,
            column: 13,
            span: 6117..6118,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 253,
            column: 14,
            span: 6118..6119,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 253,
            column: 15,
            span: 6118..6120,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 253,
            column: 16,
            span: 6120..6121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 254,
            column: 9,
            span: 6124..6130,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 254,
            column: 10,
            span: 6130..6131,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 254,
            column: 11,
            span: 6131..6132,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 254,
            column: 14,
            span: 6133..6135,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 254,
            column: 16,
            span: 6135..6137,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 254,
            column: 20,
            span: 6138..6141,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 254,
            column: 22,
            span: 6142..6143,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 254,
            column: 25,
            span: 6144..6146,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 254,
            column: 27,
            span: 6146..6148,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 254,
            column: 28,
            span: 6148..6149,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 255,
            column: 4,
            span: 6152..6153,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 255,
            column: 5,
            span: 6153..6154,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 255,
            column: 6,
            span: 6154..6155,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 255,
            column: 8,
            span: 6156..6157,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 255,
            column: 10,
            span: 6157..6159,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 255,
            column: 11,
            span: 6159..6160,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 255,
            column: 13,
            span: 6161..6162,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 255,
            column: 14,
            span: 6162..6163,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 255,
            column: 15,
            span: 6162..6164,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 255,
            column: 16,
            span: 6164..6165,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 256,
            column: 9,
            span: 6168..6174,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 256,
            column: 10,
            span: 6174..6175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 256,
            column: 11,
            span: 6175..6176,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 256,
            column: 14,
            span: 6177..6179,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 256,
            column: 16,
            span: 6179..6181,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 256,
            column: 20,
            span: 6182..6185,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 256,
            column: 22,
            span: 6186..6187,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 256,
            column: 25,
            span: 6188..6190,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 256,
            column: 27,
            span: 6190..6192,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 256,
            column: 28,
            span: 6192..6193,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 257,
            column: 4,
            span: 6196..6197,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 257,
            column: 5,
            span: 6197..6198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 257,
            column: 6,
            span: 6198..6199,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 257,
            column: 7,
            span: 6199..6200,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 257,
            column: 8,
            span: 6200..6201,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 257,
            column: 10,
            span: 6202..6203,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 257,
            column: 12,
            span: 6203..6205,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 257,
            column: 13,
            span: 6205..6206,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 257,
            column: 14,
            span: 6205..6207,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 257,
            column: 15,
            span: 6207..6208,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 257,
            column: 16,
            span: 6208..6209,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 257,
            column: 17,
            span: 6209..6210,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 257,
            column: 18,
            span: 6209..6211,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 257,
            column: 19,
            span: 6211..6212,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 258,
            column: 9,
            span: 6215..6221,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 258,
            column: 10,
            span: 6221..6222,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 258,
            column: 11,
            span: 6222..6223,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 258,
            column: 13,
            span: 6223..6225,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 258,
            column: 14,
            span: 6224..6226,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 258,
            column: 18,
            span: 6227..6230,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 258,
            column: 20,
            span: 6231..6232,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 258,
            column: 22,
            span: 6232..6234,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 258,
            column: 23,
            span: 6233..6235,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 258,
            column: 27,
            span: 6236..6239,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 258,
            column: 29,
            span: 6240..6241,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 258,
            column: 31,
            span: 6241..6243,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 258,
            column: 32,
            span: 6242..6244,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 258,
            column: 33,
            span: 6244..6245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 259,
            column: 4,
            span: 6248..6249,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 259,
            column: 5,
            span: 6249..6250,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 259,
            column: 6,
            span: 6250..6251,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 259,
            column: 7,
            span: 6251..6252,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 259,
            column: 8,
            span: 6252..6253,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 259,
            column: 10,
            span: 6254..6255,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 259,
            column: 12,
            span: 6255..6257,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 259,
            column: 13,
            span: 6257..6258,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 259,
            column: 14,
            span: 6257..6259,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 259,
            column: 15,
            span: 6259..6260,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 259,
            column: 16,
            span: 6260..6261,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 259,
            column: 17,
            span: 6261..6262,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 259,
            column: 18,
            span: 6261..6263,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 259,
            column: 19,
            span: 6263..6264,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 260,
            column: 9,
            span: 6267..6273,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 260,
            column: 10,
            span: 6273..6274,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 260,
            column: 11,
            span: 6274..6275,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 260,
            column: 13,
            span: 6275..6277,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 260,
            column: 14,
            span: 6276..6278,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 260,
            column: 18,
            span: 6279..6282,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 260,
            column: 20,
            span: 6283..6284,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 260,
            column: 22,
            span: 6284..6286,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 260,
            column: 23,
            span: 6285..6287,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 260,
            column: 27,
            span: 6288..6291,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 260,
            column: 29,
            span: 6292..6293,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 260,
            column: 31,
            span: 6293..6295,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 260,
            column: 34,
            span: 6295..6298,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 260,
            column: 35,
            span: 6298..6299,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 261,
            column: 0,
            span: 6300..6303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 264,
            column: 2,
            span: 6306..6307,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 264,
            column: 3,
            span: 6307..6308,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 264,
            column: 5,
            span: 6309..6310,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 264,
            column: 6,
            span: 6310..6311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 264,
            column: 8,
            span: 6312..6313,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 264,
            column: 9,
            span: 6313..6314,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 264,
            column: 11,
            span: 6315..6316,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 264,
            column: 13,
            span: 6317..6318,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 264,
            column: 15,
            span: 6318..6320,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 264,
            column: 19,
            span: 6321..6324,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 264,
            column: 23,
            span: 6325..6328,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 264,
            column: 24,
            span: 6328..6329,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 264,
            column: 26,
            span: 6329..6331,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 264,
            column: 29,
            span: 6332..6334,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 264,
            column: 33,
            span: 6335..6338,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 264,
            column: 34,
            span: 6338..6339,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 264,
            column: 36,
            span: 6340..6341,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 264,
            column: 37,
            span: 6340..6342,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 264,
            column: 41,
            span: 6343..6346,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 264,
            column: 43,
            span: 6347..6348,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 264,
            column: 46,
            span: 6348..6351,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 264,
            column: 49,
            span: 6352..6354,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 264,
            column: 51,
            span: 6354..6356,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 264,
            column: 52,
            span: 6356..6357,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 264,
            column: 53,
            span: 6357..6358,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 264,
            column: 54,
            span: 6358..6359,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 264,
            column: 0,
            span: 6359..6361,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 265,
            column: 7,
            span: 6362..6368,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 265,
            column: 8,
            span: 6368..6369,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 265,
            column: 11,
            span: 6369..6372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 265,
            column: 13,
            span: 6373..6374,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 265,
            column: 17,
            span: 6375..6378,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 265,
            column: 19,
            span: 6379..6380,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 265,
            column: 23,
            span: 6381..6384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 265,
            column: 25,
            span: 6385..6386,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 265,
            column: 29,
            span: 6387..6390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 265,
            column: 31,
            span: 6391..6392,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 265,
            column: 33,
            span: 6392..6394,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 265,
            column: 34,
            span: 6393..6395,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 265,
            column: 35,
            span: 6395..6396,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 267,
            column: 2,
            span: 6398..6399,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 267,
            column: 4,
            span: 6400..6401,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 267,
            column: 0,
            span: 6401..6404,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 268,
            column: 2,
            span: 6405..6406,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 268,
            column: 3,
            span: 6406..6407,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 268,
            column: 5,
            span: 6408..6409,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 268,
            column: 6,
            span: 6409..6410,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 268,
            column: 8,
            span: 6411..6412,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 268,
            column: 9,
            span: 6412..6413,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 268,
            column: 11,
            span: 6414..6415,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 268,
            column: 13,
            span: 6416..6417,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 268,
            column: 15,
            span: 6418..6419,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 268,
            column: 16,
            span: 6419..6420,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 268,
            column: 17,
            span: 6420..6421,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 269,
            column: 7,
            span: 6422..6428,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 269,
            column: 8,
            span: 6428..6429,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 269,
            column: 9,
            span: 6429..6430,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 269,
            column: 11,
            span: 6430..6432,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 269,
            column: 13,
            span: 6431..6434,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 269,
            column: 17,
            span: 6435..6438,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 269,
            column: 19,
            span: 6439..6440,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 269,
            column: 21,
            span: 6440..6442,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 269,
            column: 23,
            span: 6441..6444,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 269,
            column: 27,
            span: 6445..6448,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 269,
            column: 29,
            span: 6449..6450,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 269,
            column: 31,
            span: 6450..6452,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 269,
            column: 33,
            span: 6451..6454,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 269,
            column: 37,
            span: 6455..6458,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 269,
            column: 39,
            span: 6459..6460,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 269,
            column: 41,
            span: 6460..6462,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 269,
            column: 44,
            span: 6462..6465,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 269,
            column: 45,
            span: 6465..6466,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 270,
            column: 2,
            span: 6467..6468,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 270,
            column: 3,
            span: 6468..6469,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 270,
            column: 4,
            span: 6469..6470,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 270,
            column: 6,
            span: 6471..6472,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 270,
            column: 8,
            span: 6473..6474,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 270,
            column: 9,
            span: 6474..6475,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 270,
            column: 10,
            span: 6475..6476,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 270,
            column: 11,
            span: 6476..6477,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 270,
            column: 13,
            span: 6477..6479,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 270,
            column: 14,
            span: 6479..6480,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 270,
            column: 16,
            span: 6480..6482,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 270,
            column: 17,
            span: 6482..6483,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 270,
            column: 19,
            span: 6483..6485,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 270,
            column: 20,
            span: 6485..6486,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 270,
            column: 22,
            span: 6487..6488,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 270,
            column: 23,
            span: 6488..6489,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 270,
            column: 24,
            span: 6489..6490,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 271,
            column: 7,
            span: 6491..6497,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 271,
            column: 8,
            span: 6497..6498,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 271,
            column: 9,
            span: 6498..6499,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 271,
            column: 11,
            span: 6499..6501,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 271,
            column: 13,
            span: 6500..6503,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 271,
            column: 17,
            span: 6504..6507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 271,
            column: 19,
            span: 6508..6509,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 271,
            column: 21,
            span: 6509..6511,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 271,
            column: 22,
            span: 6510..6512,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 271,
            column: 23,
            span: 6512..6513,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 273,
            column: 7,
            span: 6515..6521,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 273,
            column: 8,
            span: 6521..6522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 273,
            column: 9,
            span: 6522..6523,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 273,
            column: 10,
            span: 6523..6524,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 273,
            column: 11,
            span: 6524..6525,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 273,
            column: 14,
            span: 6526..6528,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 273,
            column: 20,
            span: 6529..6534,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 273,
            column: 24,
            span: 6535..6538,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 273,
            column: 26,
            span: 6539..6540,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 273,
            column: 27,
            span: 6540..6541,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 273,
            column: 28,
            span: 6541..6542,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 273,
            column: 31,
            span: 6543..6545,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 273,
            column: 36,
            span: 6546..6550,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 273,
            column: 37,
            span: 6550..6551,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 274,
            column: 7,
            span: 6552..6558,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 274,
            column: 8,
            span: 6558..6559,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 274,
            column: 9,
            span: 6559..6560,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 274,
            column: 11,
            span: 6559..6562,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 274,
            column: 15,
            span: 6563..6566,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 274,
            column: 17,
            span: 6566..6568,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 274,
            column: 18,
            span: 6568..6569,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 274,
            column: 21,
            span: 6570..6572,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 274,
            column: 23,
            span: 6572..6574,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 274,
            column: 24,
            span: 6574..6575,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 275,
            column: 7,
            span: 6576..6582,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 275,
            column: 8,
            span: 6582..6583,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 275,
            column: 9,
            span: 6583..6584,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 275,
            column: 11,
            span: 6583..6586,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 275,
            column: 14,
            span: 6587..6589,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 275,
            column: 16,
            span: 6589..6591,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 275,
            column: 17,
            span: 6591..6592,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 275,
            column: 20,
            span: 6593..6595,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 275,
            column: 23,
            span: 6595..6598,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 275,
            column: 24,
            span: 6598..6599,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 276,
            column: 7,
            span: 6600..6606,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 276,
            column: 8,
            span: 6606..6607,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 276,
            column: 9,
            span: 6607..6608,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 276,
            column: 11,
            span: 6607..6610,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 276,
            column: 14,
            span: 6611..6613,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 276,
            column: 21,
            span: 6614..6620,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 276,
            column: 22,
            span: 6620..6621,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 276,
            column: 25,
            span: 6621..6624,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 276,
            column: 26,
            span: 6624..6625,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 276,
            column: 27,
            span: 6625..6626,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 276,
            column: 30,
            span: 6627..6629,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 276,
            column: 33,
            span: 6629..6632,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 276,
            column: 34,
            span: 6632..6633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 277,
            column: 7,
            span: 6634..6640,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 277,
            column: 8,
            span: 6640..6641,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 277,
            column: 11,
            span: 6641..6644,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 277,
            column: 13,
            span: 6645..6646,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 277,
            column: 16,
            span: 6646..6649,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 277,
            column: 20,
            span: 6650..6653,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 277,
            column: 27,
            span: 6654..6660,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 277,
            column: 28,
            span: 6660..6661,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 277,
            column: 31,
            span: 6661..6664,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 277,
            column: 32,
            span: 6664..6665,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 277,
            column: 33,
            span: 6665..6666,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 277,
            column: 34,
            span: 6666..6667,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 278,
            column: 7,
            span: 6668..6674,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 278,
            column: 8,
            span: 6674..6675,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 278,
            column: 9,
            span: 6675..6676,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 278,
            column: 12,
            span: 6676..6679,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 278,
            column: 15,
            span: 6680..6682,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 278,
            column: 21,
            span: 6683..6688,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 278,
            column: 22,
            span: 6688..6689,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 278,
            column: 25,
            span: 6690..6692,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 278,
            column: 31,
            span: 6693..6698,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 278,
            column: 32,
            span: 6698..6699,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 279,
            column: 7,
            span: 6700..6706,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 279,
            column: 8,
            span: 6706..6707,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 279,
            column: 9,
            span: 6707..6708,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 279,
            column: 12,
            span: 6708..6711,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 279,
            column: 16,
            span: 6712..6715,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 279,
            column: 19,
            span: 6715..6718,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 279,
            column: 20,
            span: 6718..6719,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 279,
            column: 23,
            span: 6720..6722,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 279,
            column: 27,
            span: 6723..6726,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 279,
            column: 28,
            span: 6726..6727,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 280,
            column: 7,
            span: 6728..6734,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 280,
            column: 8,
            span: 6734..6735,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 280,
            column: 9,
            span: 6735..6736,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 280,
            column: 14,
            span: 6736..6741,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 280,
            column: 18,
            span: 6742..6745,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 280,
            column: 21,
            span: 6745..6748,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 280,
            column: 22,
            span: 6748..6749,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 280,
            column: 25,
            span: 6750..6752,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 280,
            column: 31,
            span: 6753..6758,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 280,
            column: 32,
            span: 6758..6759,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 281,
            column: 7,
            span: 6760..6766,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 281,
            column: 8,
            span: 6766..6767,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 281,
            column: 9,
            span: 6767..6768,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 281,
            column: 13,
            span: 6768..6772,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 281,
            column: 16,
            span: 6773..6775,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 281,
            column: 19,
            span: 6775..6778,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 281,
            column: 20,
            span: 6778..6779,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 281,
            column: 23,
            span: 6780..6782,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 281,
            column: 28,
            span: 6783..6787,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 281,
            column: 29,
            span: 6787..6788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 282,
            column: 7,
            span: 6789..6795,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 282,
            column: 8,
            span: 6795..6796,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 282,
            column: 9,
            span: 6796..6797,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 282,
            column: 14,
            span: 6797..6802,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 282,
            column: 17,
            span: 6803..6805,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 282,
            column: 20,
            span: 6805..6808,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 282,
            column: 21,
            span: 6808..6809,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 282,
            column: 24,
            span: 6810..6812,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 282,
            column: 27,
            span: 6812..6815,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 282,
            column: 28,
            span: 6815..6816,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 283,
            column: 7,
            span: 6817..6823,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 283,
            column: 8,
            span: 6823..6824,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 283,
            column: 13,
            span: 6824..6829,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 283,
            column: 16,
            span: 6830..6832,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 283,
            column: 20,
            span: 6833..6836,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 283,
            column: 21,
            span: 6836..6837,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 284,
            column: 7,
            span: 6838..6844,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 284,
            column: 8,
            span: 6844..6845,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 284,
            column: 11,
            span: 6845..6848,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 284,
            column: 14,
            span: 6849..6851,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 284,
            column: 20,
            span: 6852..6857,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 284,
            column: 21,
            span: 6857..6858,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 285,
            column: 7,
            span: 6859..6865,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 285,
            column: 8,
            span: 6865..6866,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 285,
            column: 11,
            span: 6866..6869,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 285,
            column: 15,
            span: 6870..6873,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 285,
            column: 18,
            span: 6874..6876,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 285,
            column: 23,
            span: 6877..6881,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 285,
            column: 24,
            span: 6881..6882,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 286,
            column: 7,
            span: 6883..6889,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 286,
            column: 8,
            span: 6889..6890,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 286,
            column: 11,
            span: 6890..6893,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 286,
            column: 15,
            span: 6894..6897,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 286,
            column: 19,
            span: 6898..6901,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 286,
            column: 22,
            span: 6902..6904,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 286,
            column: 28,
            span: 6905..6910,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 286,
            column: 29,
            span: 6910..6911,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 287,
            column: 7,
            span: 6912..6918,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 287,
            column: 8,
            span: 6918..6919,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 287,
            column: 11,
            span: 6919..6922,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 287,
            column: 15,
            span: 6923..6926,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 287,
            column: 17,
            span: 6926..6928,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 287,
            column: 20,
            span: 6929..6931,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 287,
            column: 25,
            span: 6932..6936,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 287,
            column: 26,
            span: 6936..6937,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 288,
            column: 7,
            span: 6938..6944,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 288,
            column: 8,
            span: 6944..6945,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 288,
            column: 11,
            span: 6945..6948,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 288,
            column: 15,
            span: 6949..6952,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 288,
            column: 17,
            span: 6953..6954,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 288,
            column: 20,
            span: 6955..6957,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 288,
            column: 25,
            span: 6958..6962,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 288,
            column: 26,
            span: 6962..6963,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 289,
            column: 7,
            span: 6964..6970,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 289,
            column: 8,
            span: 6970..6971,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 289,
            column: 11,
            span: 6971..6974,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 289,
            column: 15,
            span: 6975..6978,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 289,
            column: 17,
            span: 6979..6980,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 289,
            column: 18,
            span: 6979..6981,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 289,
            column: 21,
            span: 6982..6984,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 289,
            column: 25,
            span: 6985..6988,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 289,
            column: 26,
            span: 6988..6989,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 289,
            column: 29,
            span: 6990..6992,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 289,
            column: 34,
            span: 6993..6997,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 289,
            column: 35,
            span: 6997..6998,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 290,
            column: 7,
            span: 6999..7005,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 290,
            column: 8,
            span: 7005..7006,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 290,
            column: 11,
            span: 7006..7009,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 290,
            column: 15,
            span: 7010..7013,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 290,
            column: 17,
            span: 7014..7015,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 290,
            column: 20,
            span: 7015..7018,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 290,
            column: 24,
            span: 7019..7022,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "56",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 290,
            column: 27,
            span: 7022..7025,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 290,
            column: 28,
            span: 7025..7026,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 290,
            column: 31,
            span: 7027..7029,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 290,
            column: 37,
            span: 7030..7035,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 290,
            column: 38,
            span: 7035..7036,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 291,
            column: 7,
            span: 7037..7043,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 291,
            column: 8,
            span: 7043..7044,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 291,
            column: 11,
            span: 7044..7047,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 291,
            column: 15,
            span: 7048..7051,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 291,
            column: 17,
            span: 7052..7053,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 291,
            column: 20,
            span: 7053..7056,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 291,
            column: 24,
            span: 7057..7060,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 291,
            column: 29,
            span: 7061..7065,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 291,
            column: 30,
            span: 7065..7066,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 291,
            column: 33,
            span: 7067..7069,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 291,
            column: 39,
            span: 7070..7075,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 291,
            column: 40,
            span: 7075..7076,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 292,
            column: 6,
            span: 7077..7082,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 292,
            column: 7,
            span: 7082..7083,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 292,
            column: 10,
            span: 7083..7086,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 292,
            column: 11,
            span: 7086..7087,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 294,
            column: 2,
            span: 7089..7090,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 294,
            column: 4,
            span: 7091..7092,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 294,
            column: 6,
            span: 7093..7094,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 294,
            column: 7,
            span: 7094..7095,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 295,
            column: 2,
            span: 7096..7097,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 295,
            column: 3,
            span: 7097..7098,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 295,
            column: 7,
            span: 7098..7102,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 295,
            column: 8,
            span: 7102..7103,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 295,
            column: 10,
            span: 7104..7105,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 295,
            column: 0,
            span: 7105..7108,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 296,
            column: 2,
            span: 7109..7110,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 296,
            column: 3,
            span: 7110..7111,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 296,
            column: 8,
            span: 7111..7116,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 296,
            column: 9,
            span: 7116..7117,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 296,
            column: 11,
            span: 7118..7119,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 296,
            column: 0,
            span: 7119..7122,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 297,
            column: 7,
            span: 7123..7129,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 297,
            column: 8,
            span: 7129..7130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 297,
            column: 9,
            span: 7130..7131,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 297,
            column: 10,
            span: 7131..7132,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 297,
            column: 11,
            span: 7131..7133,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 297,
            column: 12,
            span: 7133..7134,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 297,
            column: 13,
            span: 7133..7135,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 297,
            column: 14,
            span: 7135..7136,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 297,
            column: 17,
            span: 7137..7139,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 297,
            column: 20,
            span: 7139..7142,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 297,
            column: 24,
            span: 7143..7146,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 297,
            column: 26,
            span: 7147..7148,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 297,
            column: 27,
            span: 7148..7149,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 297,
            column: 28,
            span: 7148..7150,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 297,
            column: 29,
            span: 7150..7151,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 297,
            column: 30,
            span: 7150..7152,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 297,
            column: 31,
            span: 7152..7153,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 297,
            column: 34,
            span: 7154..7156,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 297,
            column: 37,
            span: 7156..7159,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 297,
            column: 38,
            span: 7159..7160,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 299,
            column: 9,
            span: 7162..7170,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 299,
            column: 11,
            span: 7171..7172,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 299,
            column: 12,
            span: 7172..7173,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 299,
            column: 13,
            span: 7173..7174,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 299,
            column: 14,
            span: 7174..7175,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 299,
            column: 21,
            span: 7176..7182,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 299,
            column: 23,
            span: 7183..7184,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 299,
            column: 0,
            span: 7185..7188,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 301,
            column: 6,
            span: 7190..7195,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 301,
            column: 8,
            span: 7196..7197,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 301,
            column: 10,
            span: 7198..7199,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 301,
            column: 12,
            span: 7200..7201,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 301,
            column: 13,
            span: 7201..7202,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 302,
            column: 4,
            span: 7203..7206,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 302,
            column: 6,
            span: 7207..7208,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 302,
            column: 7,
            span: 7208..7209,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 302,
            column: 11,
            span: 7208..7213,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 302,
            column: 12,
            span: 7213..7214,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 302,
            column: 13,
            span: 7214..7215,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 302,
            column: 17,
            span: 7214..7219,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 302,
            column: 18,
            span: 7219..7220,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 302,
            column: 19,
            span: 7220..7221,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 302,
            column: 20,
            span: 7220..7222,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 302,
            column: 23,
            span: 7223..7225,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 302,
            column: 25,
            span: 7226..7227,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 302,
            column: 26,
            span: 7227..7228,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 302,
            column: 27,
            span: 7228..7229,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 302,
            column: 28,
            span: 7229..7230,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 302,
            column: 30,
            span: 7231..7232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 302,
            column: 32,
            span: 7233..7234,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 302,
            column: 33,
            span: 7234..7235,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 302,
            column: 0,
            span: 7236..7239,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 303,
            column: 2,
            span: 7240..7241,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 303,
            column: 3,
            span: 7241..7242,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        position: Position {
            line: 303,
            column: 8,
            span: 7241..7247,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 303,
            column: 9,
            span: 7247..7248,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 303,
            column: 11,
            span: 7249..7250,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 303,
            column: 17,
            span: 7251..7256,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 303,
            column: 18,
            span: 7256..7257,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 303,
            column: 20,
            span: 7258..7259,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 303,
            column: 21,
            span: 7259..7260,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 303,
            column: 25,
            span: 7260..7264,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 303,
            column: 26,
            span: 7264..7265,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 303,
            column: 28,
            span: 7266..7267,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 303,
            column: 31,
            span: 7267..7270,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 303,
            column: 32,
            span: 7270..7271,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 303,
            column: 34,
            span: 7272..7273,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 303,
            column: 35,
            span: 7273..7274,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 303,
            column: 40,
            span: 7274..7279,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 303,
            column: 41,
            span: 7279..7280,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 303,
            column: 43,
            span: 7281..7282,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 303,
            column: 0,
            span: 7282..7285,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 304,
            column: 7,
            span: 7286..7292,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 304,
            column: 8,
            span: 7292..7293,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 304,
            column: 9,
            span: 7293..7294,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 304,
            column: 10,
            span: 7294..7295,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        position: Position {
            line: 304,
            column: 15,
            span: 7294..7300,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 304,
            column: 16,
            span: 7300..7301,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 304,
            column: 19,
            span: 7302..7304,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        position: Position {
            line: 304,
            column: 25,
            span: 7305..7310,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 304,
            column: 29,
            span: 7311..7314,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 304,
            column: 31,
            span: 7315..7316,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 304,
            column: 32,
            span: 7316..7317,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 304,
            column: 35,
            span: 7317..7320,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 304,
            column: 37,
            span: 7320..7322,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 304,
            column: 38,
            span: 7322..7323,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 304,
            column: 41,
            span: 7324..7326,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 304,
            column: 44,
            span: 7326..7329,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 304,
            column: 48,
            span: 7330..7333,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 304,
            column: 50,
            span: 7334..7335,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 304,
            column: 51,
            span: 7335..7336,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 304,
            column: 53,
            span: 7335..7338,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 304,
            column: 54,
            span: 7338..7339,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 304,
            column: 56,
            span: 7338..7341,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 304,
            column: 57,
            span: 7341..7342,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 304,
            column: 60,
            span: 7343..7345,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 304,
            column: 63,
            span: 7345..7348,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 304,
            column: 64,
            span: 7348..7349,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 305,
            column: 4,
            span: 7350..7353,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 305,
            column: 6,
            span: 7354..7355,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 305,
            column: 7,
            span: 7355..7356,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 305,
            column: 11,
            span: 7355..7360,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 305,
            column: 12,
            span: 7360..7361,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 305,
            column: 13,
            span: 7361..7362,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 305,
            column: 17,
            span: 7361..7366,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 305,
            column: 18,
            span: 7366..7367,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 305,
            column: 19,
            span: 7367..7368,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 305,
            column: 20,
            span: 7367..7369,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 305,
            column: 23,
            span: 7370..7372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 305,
            column: 30,
            span: 7373..7379,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 305,
            column: 31,
            span: 7379..7380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 305,
            column: 32,
            span: 7380..7381,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 305,
            column: 33,
            span: 7381..7382,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 305,
            column: 34,
            span: 7382..7383,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 305,
            column: 35,
            span: 7383..7384,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 305,
            column: 38,
            span: 7385..7387,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 305,
            column: 40,
            span: 7388..7389,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 305,
            column: 41,
            span: 7389..7390,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 305,
            column: 42,
            span: 7390..7391,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 305,
            column: 0,
            span: 7392..7395,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 306,
            column: 2,
            span: 7396..7397,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 306,
            column: 3,
            span: 7397..7398,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 306,
            column: 8,
            span: 7398..7403,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 306,
            column: 9,
            span: 7403..7404,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 306,
            column: 11,
            span: 7405..7406,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 306,
            column: 0,
            span: 7407..7413,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 307,
            column: 2,
            span: 7414..7415,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 307,
            column: 3,
            span: 7415..7416,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 307,
            column: 4,
            span: 7416..7417,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 307,
            column: 5,
            span: 7417..7418,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 307,
            column: 7,
            span: 7419..7420,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 307,
            column: 0,
            span: 7421..7426,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 308,
            column: 2,
            span: 7427..7428,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 308,
            column: 3,
            span: 7428..7429,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 308,
            column: 4,
            span: 7429..7430,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 308,
            column: 5,
            span: 7430..7431,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 308,
            column: 7,
            span: 7432..7433,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 308,
            column: 0,
            span: 7434..7435,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 309,
            column: 7,
            span: 7436..7442,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 309,
            column: 8,
            span: 7442..7443,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 309,
            column: 9,
            span: 7443..7444,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 309,
            column: 10,
            span: 7444..7445,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 309,
            column: 11,
            span: 7445..7446,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 309,
            column: 12,
            span: 7446..7447,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 309,
            column: 13,
            span: 7447..7448,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 309,
            column: 14,
            span: 7448..7449,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 309,
            column: 15,
            span: 7449..7450,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 309,
            column: 16,
            span: 7450..7451,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 309,
            column: 17,
            span: 7451..7452,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 309,
            column: 18,
            span: 7452..7453,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 309,
            column: 19,
            span: 7453..7454,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 309,
            column: 20,
            span: 7454..7455,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 309,
            column: 21,
            span: 7455..7456,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 309,
            column: 22,
            span: 7456..7457,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 309,
            column: 27,
            span: 7457..7462,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 309,
            column: 28,
            span: 7462..7463,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 309,
            column: 31,
            span: 7464..7466,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 309,
            column: 38,
            span: 7467..7473,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 309,
            column: 39,
            span: 7473..7474,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 310,
            column: 2,
            span: 7475..7476,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 310,
            column: 3,
            span: 7476..7477,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 310,
            column: 8,
            span: 7477..7482,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 310,
            column: 9,
            span: 7482..7483,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 310,
            column: 10,
            span: 7483..7484,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 310,
            column: 11,
            span: 7484..7485,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 310,
            column: 12,
            span: 7485..7486,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 310,
            column: 13,
            span: 7486..7487,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 310,
            column: 14,
            span: 7487..7488,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 310,
            column: 15,
            span: 7488..7489,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 310,
            column: 16,
            span: 7489..7490,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 310,
            column: 17,
            span: 7490..7491,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 310,
            column: 20,
            span: 7492..7494,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 310,
            column: 22,
            span: 7495..7496,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 310,
            column: 23,
            span: 7496..7497,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 310,
            column: 28,
            span: 7497..7502,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 310,
            column: 29,
            span: 7502..7503,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 310,
            column: 30,
            span: 7503..7504,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 311,
            column: 2,
            span: 7505..7506,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 311,
            column: 4,
            span: 7507..7508,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 311,
            column: 0,
            span: 7509..7512,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 313,
            column: 2,
            span: 7514..7515,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 313,
            column: 4,
            span: 7516..7517,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 313,
            column: 6,
            span: 7518..7519,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 313,
            column: 8,
            span: 7518..7521,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 313,
            column: 9,
            span: 7521..7522,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 313,
            column: 10,
            span: 7521..7523,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 313,
            column: 11,
            span: 7523..7524,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 313,
            column: 12,
            span: 7523..7525,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 313,
            column: 13,
            span: 7525..7526,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 313,
            column: 14,
            span: 7525..7527,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 313,
            column: 15,
            span: 7527..7528,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 313,
            column: 16,
            span: 7527..7529,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 313,
            column: 17,
            span: 7529..7530,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 313,
            column: 18,
            span: 7529..7531,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 313,
            column: 19,
            span: 7531..7532,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 313,
            column: 20,
            span: 7531..7533,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 313,
            column: 21,
            span: 7533..7534,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 313,
            column: 22,
            span: 7533..7535,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 313,
            column: 23,
            span: 7535..7536,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 313,
            column: 24,
            span: 7535..7537,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 313,
            column: 25,
            span: 7537..7538,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 313,
            column: 27,
            span: 7539..7540,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 313,
            column: 28,
            span: 7540..7541,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 313,
            column: 29,
            span: 7540..7542,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 313,
            column: 30,
            span: 7542..7543,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 313,
            column: 31,
            span: 7543..7544,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 313,
            column: 34,
            span: 7544..7547,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 313,
            column: 35,
            span: 7547..7548,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 313,
            column: 37,
            span: 7549..7550,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 313,
            column: 38,
            span: 7550..7551,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 313,
            column: 39,
            span: 7551..7552,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 313,
            column: 40,
            span: 7552..7553,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 313,
            column: 45,
            span: 7553..7558,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 313,
            column: 46,
            span: 7558..7559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 313,
            column: 48,
            span: 7560..7561,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 313,
            column: 49,
            span: 7561..7562,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 313,
            column: 52,
            span: 7562..7565,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 313,
            column: 53,
            span: 7565..7566,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 313,
            column: 55,
            span: 7567..7568,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 313,
            column: 56,
            span: 7568..7569,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ab'",
        ),
        position: Position {
            line: 313,
            column: 60,
            span: 7569..7573,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 313,
            column: 61,
            span: 7573..7574,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 314,
            column: 2,
            span: 7575..7576,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 314,
            column: 3,
            span: 7576..7577,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 314,
            column: 5,
            span: 7578..7579,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 314,
            column: 6,
            span: 7579..7580,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 314,
            column: 7,
            span: 7580..7581,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 314,
            column: 8,
            span: 7581..7582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 314,
            column: 10,
            span: 7583..7584,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 314,
            column: 11,
            span: 7584..7585,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 314,
            column: 12,
            span: 7585..7586,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 314,
            column: 14,
            span: 7587..7588,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 314,
            column: 16,
            span: 7589..7590,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 314,
            column: 17,
            span: 7590..7591,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 314,
            column: 19,
            span: 7592..7593,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 314,
            column: 20,
            span: 7593..7594,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 314,
            column: 21,
            span: 7594..7595,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 314,
            column: 22,
            span: 7594..7596,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 314,
            column: 23,
            span: 7596..7597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 315,
            column: 7,
            span: 7598..7604,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 315,
            column: 8,
            span: 7604..7605,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 315,
            column: 9,
            span: 7605..7606,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 315,
            column: 10,
            span: 7606..7607,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 315,
            column: 11,
            span: 7606..7608,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 315,
            column: 12,
            span: 7608..7609,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 315,
            column: 14,
            span: 7609..7611,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 315,
            column: 16,
            span: 7610..7613,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 315,
            column: 20,
            span: 7614..7617,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 315,
            column: 22,
            span: 7618..7619,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 315,
            column: 23,
            span: 7619..7620,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 315,
            column: 24,
            span: 7620..7621,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 315,
            column: 25,
            span: 7620..7622,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 315,
            column: 26,
            span: 7622..7623,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 315,
            column: 28,
            span: 7623..7625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 315,
            column: 29,
            span: 7625..7626,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 315,
            column: 30,
            span: 7626..7627,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 315,
            column: 31,
            span: 7627..7628,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 315,
            column: 35,
            span: 7629..7632,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 315,
            column: 37,
            span: 7633..7634,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 315,
            column: 38,
            span: 7634..7635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 315,
            column: 39,
            span: 7635..7636,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 315,
            column: 40,
            span: 7636..7637,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 315,
            column: 42,
            span: 7637..7639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 315,
            column: 47,
            span: 7639..7644,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 315,
            column: 51,
            span: 7645..7648,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 315,
            column: 53,
            span: 7649..7650,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 315,
            column: 54,
            span: 7650..7651,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 315,
            column: 55,
            span: 7651..7652,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 315,
            column: 57,
            span: 7652..7654,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 315,
            column: 60,
            span: 7654..7657,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 315,
            column: 64,
            span: 7658..7661,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 315,
            column: 68,
            span: 7662..7665,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 315,
            column: 70,
            span: 7666..7667,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 315,
            column: 71,
            span: 7667..7668,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 315,
            column: 72,
            span: 7668..7669,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 315,
            column: 73,
            span: 7669..7670,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 316,
            column: 2,
            span: 7671..7672,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 316,
            column: 3,
            span: 7672..7673,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 316,
            column: 4,
            span: 7672..7674,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 316,
            column: 5,
            span: 7674..7675,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 316,
            column: 6,
            span: 7675..7676,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 316,
            column: 8,
            span: 7677..7678,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 316,
            column: 9,
            span: 7678..7679,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 316,
            column: 10,
            span: 7679..7680,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 316,
            column: 11,
            span: 7680..7681,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 316,
            column: 12,
            span: 7681..7682,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 316,
            column: 13,
            span: 7681..7683,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 316,
            column: 14,
            span: 7683..7684,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 316,
            column: 15,
            span: 7684..7685,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 316,
            column: 17,
            span: 7686..7687,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 316,
            column: 18,
            span: 7687..7688,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 316,
            column: 20,
            span: 7689..7690,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 316,
            column: 22,
            span: 7691..7692,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 316,
            column: 24,
            span: 7693..7694,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 316,
            column: 25,
            span: 7694..7695,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        position: Position {
            line: 316,
            column: 30,
            span: 7695..7700,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 316,
            column: 31,
            span: 7700..7701,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 316,
            column: 32,
            span: 7701..7702,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 316,
            column: 38,
            span: 7702..7708,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 316,
            column: 39,
            span: 7708..7709,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 316,
            column: 40,
            span: 7709..7710,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 316,
            column: 43,
            span: 7710..7713,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 316,
            column: 44,
            span: 7713..7714,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 316,
            column: 46,
            span: 7715..7716,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 316,
            column: 47,
            span: 7716..7717,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 316,
            column: 48,
            span: 7716..7718,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 316,
            column: 49,
            span: 7718..7719,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 316,
            column: 50,
            span: 7719..7720,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 316,
            column: 52,
            span: 7721..7722,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 316,
            column: 53,
            span: 7722..7723,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 316,
            column: 54,
            span: 7723..7724,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 316,
            column: 55,
            span: 7724..7725,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 316,
            column: 56,
            span: 7725..7726,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 316,
            column: 58,
            span: 7726..7728,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 316,
            column: 59,
            span: 7728..7729,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 316,
            column: 62,
            span: 7729..7732,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 316,
            column: 63,
            span: 7732..7733,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 316,
            column: 66,
            span: 7733..7736,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 316,
            column: 67,
            span: 7736..7737,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 316,
            column: 69,
            span: 7738..7739,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 316,
            column: 70,
            span: 7739..7740,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 316,
            column: 71,
            span: 7740..7741,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 316,
            column: 72,
            span: 7741..7742,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 316,
            column: 73,
            span: 7742..7743,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 316,
            column: 0,
            span: 7743..7745,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 317,
            column: 2,
            span: 7746..7747,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 317,
            column: 3,
            span: 7747..7748,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 317,
            column: 4,
            span: 7747..7749,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 317,
            column: 5,
            span: 7749..7750,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 317,
            column: 6,
            span: 7750..7751,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "alo",
        ),
        position: Position {
            line: 317,
            column: 9,
            span: 7751..7754,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 317,
            column: 10,
            span: 7754..7755,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 317,
            column: 11,
            span: 7755..7756,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 317,
            column: 12,
            span: 7756..7757,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 317,
            column: 13,
            span: 7756..7758,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 317,
            column: 14,
            span: 7758..7759,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 317,
            column: 16,
            span: 7759..7761,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 317,
            column: 18,
            span: 7760..7763,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 317,
            column: 22,
            span: 7764..7767,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 317,
            column: 24,
            span: 7768..7769,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 317,
            column: 26,
            span: 7769..7771,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 317,
            column: 28,
            span: 7770..7773,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 317,
            column: 32,
            span: 7774..7777,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 317,
            column: 34,
            span: 7778..7779,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 317,
            column: 36,
            span: 7779..7781,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 317,
            column: 41,
            span: 7781..7786,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 317,
            column: 42,
            span: 7786..7787,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 319,
            column: 2,
            span: 7789..7790,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 319,
            column: 3,
            span: 7790..7791,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 319,
            column: 4,
            span: 7790..7792,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 319,
            column: 5,
            span: 7792..7793,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 319,
            column: 7,
            span: 7792..7795,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 319,
            column: 8,
            span: 7795..7796,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 319,
            column: 10,
            span: 7797..7798,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 319,
            column: 13,
            span: 7798..7801,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 319,
            column: 14,
            span: 7801..7802,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 319,
            column: 16,
            span: 7803..7804,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 319,
            column: 17,
            span: 7804..7805,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 319,
            column: 18,
            span: 7804..7806,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 319,
            column: 19,
            span: 7806..7807,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 319,
            column: 21,
            span: 7806..7809,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 319,
            column: 22,
            span: 7809..7810,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 319,
            column: 23,
            span: 7809..7811,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 319,
            column: 24,
            span: 7811..7812,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 319,
            column: 26,
            span: 7813..7814,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 319,
            column: 29,
            span: 7814..7817,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 319,
            column: 30,
            span: 7817..7818,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 319,
            column: 32,
            span: 7819..7820,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 319,
            column: 33,
            span: 7820..7821,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 319,
            column: 34,
            span: 7821..7822,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 319,
            column: 35,
            span: 7821..7823,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 319,
            column: 36,
            span: 7823..7824,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 319,
            column: 38,
            span: 7823..7826,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 319,
            column: 39,
            span: 7826..7827,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 319,
            column: 41,
            span: 7828..7829,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 319,
            column: 44,
            span: 7829..7832,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 319,
            column: 45,
            span: 7832..7833,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 320,
            column: 2,
            span: 7834..7835,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 320,
            column: 3,
            span: 7835..7836,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 320,
            column: 4,
            span: 7835..7837,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 320,
            column: 5,
            span: 7837..7838,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 320,
            column: 7,
            span: 7837..7840,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 320,
            column: 8,
            span: 7840..7841,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 320,
            column: 10,
            span: 7842..7843,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 320,
            column: 13,
            span: 7843..7846,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 320,
            column: 14,
            span: 7846..7847,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 320,
            column: 16,
            span: 7848..7849,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 320,
            column: 17,
            span: 7849..7850,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 320,
            column: 18,
            span: 7850..7851,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 320,
            column: 19,
            span: 7850..7852,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 320,
            column: 20,
            span: 7852..7853,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 320,
            column: 22,
            span: 7852..7855,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 320,
            column: 23,
            span: 7855..7856,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 320,
            column: 25,
            span: 7857..7858,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 320,
            column: 28,
            span: 7858..7861,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 320,
            column: 29,
            span: 7861..7862,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 320,
            column: 31,
            span: 7863..7864,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 320,
            column: 32,
            span: 7864..7865,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 320,
            column: 33,
            span: 7864..7866,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 320,
            column: 34,
            span: 7866..7867,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 320,
            column: 36,
            span: 7866..7869,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 320,
            column: 37,
            span: 7869..7870,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 320,
            column: 38,
            span: 7869..7871,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 320,
            column: 39,
            span: 7871..7872,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 320,
            column: 41,
            span: 7873..7874,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 320,
            column: 44,
            span: 7874..7877,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 320,
            column: 45,
            span: 7877..7878,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 320,
            column: 47,
            span: 7879..7880,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 320,
            column: 48,
            span: 7880..7881,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 320,
            column: 50,
            span: 7880..7883,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 320,
            column: 51,
            span: 7883..7884,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "33",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 320,
            column: 53,
            span: 7883..7886,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 320,
            column: 54,
            span: 7886..7887,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 320,
            column: 56,
            span: 7888..7889,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 320,
            column: 59,
            span: 7889..7892,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 320,
            column: 60,
            span: 7892..7893,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 322,
            column: 7,
            span: 7895..7901,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 322,
            column: 8,
            span: 7901..7902,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 322,
            column: 9,
            span: 7902..7903,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 322,
            column: 10,
            span: 7903..7904,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 322,
            column: 11,
            span: 7903..7905,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 322,
            column: 12,
            span: 7905..7906,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 322,
            column: 14,
            span: 7905..7908,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 322,
            column: 15,
            span: 7908..7909,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 322,
            column: 18,
            span: 7910..7912,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 322,
            column: 21,
            span: 7912..7915,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 322,
            column: 25,
            span: 7916..7919,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 322,
            column: 27,
            span: 7920..7921,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 322,
            column: 28,
            span: 7921..7922,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 322,
            column: 29,
            span: 7921..7923,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 322,
            column: 30,
            span: 7923..7924,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 322,
            column: 32,
            span: 7923..7926,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 322,
            column: 33,
            span: 7926..7927,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 322,
            column: 34,
            span: 7926..7928,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 322,
            column: 35,
            span: 7928..7929,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 322,
            column: 38,
            span: 7930..7932,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 322,
            column: 41,
            span: 7932..7935,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 322,
            column: 45,
            span: 7936..7939,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 322,
            column: 47,
            span: 7940..7941,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 322,
            column: 48,
            span: 7941..7942,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 322,
            column: 49,
            span: 7942..7943,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 322,
            column: 50,
            span: 7942..7944,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 322,
            column: 51,
            span: 7944..7945,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 322,
            column: 53,
            span: 7944..7947,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 322,
            column: 54,
            span: 7947..7948,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 322,
            column: 57,
            span: 7949..7951,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 322,
            column: 60,
            span: 7951..7954,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 322,
            column: 0,
            span: 7955..7958,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 323,
            column: 9,
            span: 7966..7967,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 323,
            column: 10,
            span: 7967..7968,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 323,
            column: 11,
            span: 7967..7969,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 323,
            column: 12,
            span: 7969..7970,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 323,
            column: 14,
            span: 7969..7972,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 323,
            column: 15,
            span: 7972..7973,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 323,
            column: 18,
            span: 7974..7976,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 323,
            column: 21,
            span: 7976..7979,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 323,
            column: 25,
            span: 7980..7983,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 323,
            column: 27,
            span: 7984..7985,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 323,
            column: 28,
            span: 7985..7986,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 323,
            column: 29,
            span: 7986..7987,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 323,
            column: 30,
            span: 7986..7988,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 323,
            column: 31,
            span: 7988..7989,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 323,
            column: 33,
            span: 7988..7991,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 323,
            column: 34,
            span: 7991..7992,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 323,
            column: 37,
            span: 7993..7995,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 323,
            column: 40,
            span: 7995..7998,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 323,
            column: 44,
            span: 7999..8002,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 323,
            column: 46,
            span: 8003..8004,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 323,
            column: 47,
            span: 8004..8005,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 323,
            column: 48,
            span: 8004..8006,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 323,
            column: 49,
            span: 8006..8007,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 323,
            column: 51,
            span: 8006..8009,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 323,
            column: 52,
            span: 8009..8010,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 323,
            column: 53,
            span: 8009..8011,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 323,
            column: 54,
            span: 8011..8012,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 323,
            column: 57,
            span: 8013..8015,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 323,
            column: 60,
            span: 8015..8018,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 323,
            column: 0,
            span: 8019..8022,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 324,
            column: 9,
            span: 8030..8031,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 324,
            column: 10,
            span: 8031..8032,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 324,
            column: 12,
            span: 8031..8034,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 324,
            column: 13,
            span: 8034..8035,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "33",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 324,
            column: 15,
            span: 8034..8037,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 324,
            column: 16,
            span: 8037..8038,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 324,
            column: 19,
            span: 8039..8041,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 324,
            column: 22,
            span: 8041..8044,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 324,
            column: 23,
            span: 8044..8045,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 326,
            column: 2,
            span: 8047..8048,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 326,
            column: 4,
            span: 8049..8050,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 326,
            column: 0,
            span: 8051..8054,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 329,
            column: 0,
            span: 8057..8059,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 330,
            column: 8,
            span: 8062..8067,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 330,
            column: 10,
            span: 8068..8069,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 330,
            column: 11,
            span: 8069..8070,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 330,
            column: 12,
            span: 8070..8071,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 330,
            column: 13,
            span: 8071..8072,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 330,
            column: 14,
            span: 8072..8073,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 330,
            column: 15,
            span: 8073..8074,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 330,
            column: 0,
            span: 8074..8075,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 331,
            column: 4,
            span: 8078..8079,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 331,
            column: 6,
            span: 8080..8081,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 331,
            column: 8,
            span: 8082..8083,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 331,
            column: 11,
            span: 8083..8086,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 331,
            column: 12,
            span: 8086..8087,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        position: Position {
            line: 331,
            column: 16,
            span: 8088..8091,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 331,
            column: 17,
            span: 8091..8092,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 331,
            column: 18,
            span: 8092..8093,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 331,
            column: 20,
            span: 8094..8095,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 331,
            column: 21,
            span: 8095..8096,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 331,
            column: 22,
            span: 8095..8097,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 331,
            column: 23,
            span: 8097..8098,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 331,
            column: 25,
            span: 8099..8100,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 331,
            column: 26,
            span: 8100..8101,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 331,
            column: 27,
            span: 8100..8102,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 331,
            column: 28,
            span: 8102..8103,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 331,
            column: 30,
            span: 8104..8105,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 331,
            column: 31,
            span: 8105..8106,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 331,
            column: 0,
            span: 8106..8107,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 332,
            column: 4,
            span: 8110..8111,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 332,
            column: 5,
            span: 8111..8112,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 332,
            column: 7,
            span: 8113..8114,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 332,
            column: 8,
            span: 8114..8115,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 332,
            column: 9,
            span: 8115..8116,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 332,
            column: 10,
            span: 8116..8117,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 332,
            column: 11,
            span: 8117..8118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 332,
            column: 13,
            span: 8119..8120,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 332,
            column: 14,
            span: 8120..8121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 332,
            column: 16,
            span: 8122..8123,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 332,
            column: 17,
            span: 8123..8124,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 332,
            column: 19,
            span: 8125..8126,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 332,
            column: 20,
            span: 8126..8127,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 332,
            column: 21,
            span: 8127..8128,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 332,
            column: 22,
            span: 8128..8129,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 332,
            column: 23,
            span: 8129..8130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 332,
            column: 25,
            span: 8131..8132,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 332,
            column: 26,
            span: 8132..8133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 332,
            column: 27,
            span: 8133..8134,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 332,
            column: 28,
            span: 8134..8135,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 332,
            column: 29,
            span: 8135..8136,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 332,
            column: 30,
            span: 8136..8137,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 332,
            column: 32,
            span: 8138..8139,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 332,
            column: 34,
            span: 8140..8141,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 332,
            column: 35,
            span: 8141..8142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 332,
            column: 37,
            span: 8143..8144,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 332,
            column: 38,
            span: 8144..8145,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 332,
            column: 40,
            span: 8146..8147,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 332,
            column: 41,
            span: 8147..8148,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 332,
            column: 43,
            span: 8149..8150,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 332,
            column: 44,
            span: 8150..8151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 332,
            column: 46,
            span: 8152..8153,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 332,
            column: 47,
            span: 8153..8154,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 332,
            column: 0,
            span: 8155..8156,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 333,
            column: 9,
            span: 8159..8165,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 333,
            column: 10,
            span: 8165..8166,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 333,
            column: 11,
            span: 8166..8167,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 333,
            column: 14,
            span: 8168..8170,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 333,
            column: 16,
            span: 8170..8172,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 333,
            column: 20,
            span: 8173..8176,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 333,
            column: 22,
            span: 8177..8178,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 333,
            column: 23,
            span: 8178..8179,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 333,
            column: 24,
            span: 8178..8180,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 333,
            column: 25,
            span: 8180..8181,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 333,
            column: 28,
            span: 8182..8184,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 333,
            column: 30,
            span: 8184..8186,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 333,
            column: 34,
            span: 8187..8190,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 333,
            column: 36,
            span: 8191..8192,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 333,
            column: 39,
            span: 8193..8195,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 333,
            column: 41,
            span: 8195..8197,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 333,
            column: 45,
            span: 8198..8201,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 333,
            column: 47,
            span: 8202..8203,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 333,
            column: 50,
            span: 8204..8206,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 333,
            column: 52,
            span: 8207..8208,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 333,
            column: 56,
            span: 8209..8212,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 333,
            column: 58,
            span: 8213..8214,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 333,
            column: 59,
            span: 8214..8215,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 333,
            column: 60,
            span: 8214..8216,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 333,
            column: 61,
            span: 8216..8217,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 333,
            column: 64,
            span: 8218..8220,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 333,
            column: 66,
            span: 8220..8222,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 333,
            column: 0,
            span: 8223..8226,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 334,
            column: 11,
            span: 8236..8237,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 334,
            column: 12,
            span: 8237..8238,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 334,
            column: 13,
            span: 8237..8239,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 334,
            column: 14,
            span: 8239..8240,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 334,
            column: 17,
            span: 8241..8243,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 334,
            column: 19,
            span: 8243..8245,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 334,
            column: 20,
            span: 8245..8246,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 335,
            column: 0,
            span: 8247..8250,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 337,
            column: 6,
            span: 8252..8257,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 337,
            column: 7,
            span: 8257..8258,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        position: Position {
            line: 337,
            column: 11,
            span: 8258..8262,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 337,
            column: 12,
            span: 8262..8263,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 339,
            column: 7,
            span: 8265..8271,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 339,
            column: 0,
            span: 8272..8275,
        },
    },
]
