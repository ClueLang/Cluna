---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.1-tests/gc.lua
---
[
    Token {
        kind: Identifier,
        lexeme: "print",
        computed_lexeme: None,
        line: 1,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 1,
    },
    Token {
        kind: String,
        lexeme: "'testing garbage collection'",
        computed_lexeme: None,
        line: 1,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 1,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        computed_lexeme: None,
        line: 3,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 3,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        computed_lexeme: None,
        line: 5,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 5,
    },
    Token {
        kind: String,
        lexeme: "\"while\"",
        computed_lexeme: None,
        line: 5,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 5,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 5,
    },
    Token {
        kind: Number,
        lexeme: " 234",
        computed_lexeme: Some(
            "234",
        ),
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "limit",
        computed_lexeme: None,
        line: 7,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 7,
    },
    Token {
        kind: Number,
        lexeme: " 5000",
        computed_lexeme: Some(
            "5000",
        ),
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "contCreate",
        computed_lexeme: None,
        line: 11,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 11,
    },
    Token {
        kind: Number,
        lexeme: " 0",
        computed_lexeme: Some(
            "0",
        ),
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        computed_lexeme: None,
        line: 13,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 13,
    },
    Token {
        kind: String,
        lexeme: "'tables'",
        computed_lexeme: None,
        line: 13,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 13,
    },
    Token {
        kind: While,
        lexeme: "while",
        computed_lexeme: None,
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "contCreate",
        computed_lexeme: None,
        line: 14,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        computed_lexeme: None,
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "limit",
        computed_lexeme: None,
        line: 14,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 14,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 15,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 15,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 15,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 15,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        computed_lexeme: None,
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 15,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 15,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        computed_lexeme: None,
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "contCreate",
        computed_lexeme: None,
        line: 16,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "contCreate",
        computed_lexeme: None,
        line: 16,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        computed_lexeme: None,
        line: 16,
    },
    Token {
        kind: Number,
        lexeme: "+1",
        computed_lexeme: Some(
            "1",
        ),
        line: 16,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 17,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 19,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 19,
    },
    Token {
        kind: String,
        lexeme: "\"a\"",
        computed_lexeme: None,
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "contCreate",
        computed_lexeme: None,
        line: 21,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 21,
    },
    Token {
        kind: Number,
        lexeme: " 0",
        computed_lexeme: Some(
            "0",
        ),
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        computed_lexeme: None,
        line: 22,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 22,
    },
    Token {
        kind: String,
        lexeme: "'strings'",
        computed_lexeme: None,
        line: 22,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 22,
    },
    Token {
        kind: While,
        lexeme: "while",
        computed_lexeme: None,
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "contCreate",
        computed_lexeme: None,
        line: 23,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        computed_lexeme: None,
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "limit",
        computed_lexeme: None,
        line: 23,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 24,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "contCreate",
        computed_lexeme: None,
        line: 24,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        computed_lexeme: None,
        line: 24,
    },
    Token {
        kind: String,
        lexeme: "\"b\"",
        computed_lexeme: None,
        line: 24,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        computed_lexeme: None,
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 25,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        computed_lexeme: None,
        line: 25,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        computed_lexeme: None,
        line: 25,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 25,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 25,
    },
    Token {
        kind: String,
        lexeme: "'(%d%d*)'",
        computed_lexeme: None,
        line: 25,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        computed_lexeme: None,
        line: 25,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "upper",
        computed_lexeme: None,
        line: 25,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 26,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 26,
    },
    Token {
        kind: String,
        lexeme: "\"a\"",
        computed_lexeme: None,
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "contCreate",
        computed_lexeme: None,
        line: 27,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "contCreate",
        computed_lexeme: None,
        line: 27,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        computed_lexeme: None,
        line: 27,
    },
    Token {
        kind: Number,
        lexeme: "+1",
        computed_lexeme: Some(
            "1",
        ),
        line: 27,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "contCreate",
        computed_lexeme: None,
        line: 31,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 31,
    },
    Token {
        kind: Number,
        lexeme: " 0",
        computed_lexeme: Some(
            "0",
        ),
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 33,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 33,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 33,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        computed_lexeme: None,
        line: 35,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 35,
    },
    Token {
        kind: String,
        lexeme: "'functions'",
        computed_lexeme: None,
        line: 35,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 35,
    },
    Token {
        kind: Function,
        lexeme: "function",
        computed_lexeme: None,
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 36,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        computed_lexeme: None,
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "test",
        computed_lexeme: None,
        line: 36,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 36,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 36,
    },
    Token {
        kind: While,
        lexeme: "while",
        computed_lexeme: None,
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "contCreate",
        computed_lexeme: None,
        line: 37,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        computed_lexeme: None,
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "limit",
        computed_lexeme: None,
        line: 37,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        computed_lexeme: None,
        line: 38,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        computed_lexeme: None,
        line: 38,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        computed_lexeme: None,
        line: 38,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 38,
    },
    Token {
        kind: String,
        lexeme: "\"function temp(a) return 'a%d' end\"",
        computed_lexeme: None,
        line: 38,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "contCreate",
        computed_lexeme: None,
        line: 38,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 38,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 38,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 38,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "temp",
        computed_lexeme: None,
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 39,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        computed_lexeme: None,
        line: 39,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        computed_lexeme: None,
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 39,
    },
    Token {
        kind: String,
        lexeme: "'a%d'",
        computed_lexeme: None,
        line: 39,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "contCreate",
        computed_lexeme: None,
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "contCreate",
        computed_lexeme: None,
        line: 40,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "contCreate",
        computed_lexeme: None,
        line: 40,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        computed_lexeme: None,
        line: 40,
    },
    Token {
        kind: Number,
        lexeme: "+1",
        computed_lexeme: Some(
            "1",
        ),
        line: 40,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 41,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 44,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        computed_lexeme: None,
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "test",
        computed_lexeme: None,
        line: 44,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 44,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 44,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 47,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        computed_lexeme: None,
        line: 47,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 47,
    },
    Token {
        kind: Function,
        lexeme: "function",
        computed_lexeme: None,
        line: 47,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 47,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 47,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 47,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        computed_lexeme: None,
        line: 50,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 50,
    },
    Token {
        kind: String,
        lexeme: "\"functions with errors\"",
        computed_lexeme: None,
        line: 50,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        computed_lexeme: None,
        line: 51,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 51,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\ndo\n  a = 10;\n  function foo(x,y)\n    a = sin(a+0.456-0.23e-12);\n    return function (z) return sin(%x+z) end\n  end\n  local x = function (w) a=a+w; end\nend\n]]",
        computed_lexeme: None,
        line: 60,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 61,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "step",
        computed_lexeme: None,
        line: 62,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 62,
    },
    Token {
        kind: Number,
        lexeme: " 1",
        computed_lexeme: Some(
            "1",
        ),
        line: 62,
    },
    Token {
        kind: If,
        lexeme: "if",
        computed_lexeme: None,
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "rawget",
        computed_lexeme: None,
        line: 63,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        computed_lexeme: None,
        line: 63,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 63,
    },
    Token {
        kind: String,
        lexeme: "\"_soft\"",
        computed_lexeme: None,
        line: 63,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 63,
    },
    Token {
        kind: Then,
        lexeme: "then",
        computed_lexeme: None,
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "step",
        computed_lexeme: None,
        line: 63,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 63,
    },
    Token {
        kind: Number,
        lexeme: " 13",
        computed_lexeme: Some(
            "13",
        ),
        line: 63,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 63,
    },
    Token {
        kind: For,
        lexeme: "for",
        computed_lexeme: None,
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 64,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 64,
    },
    Token {
        kind: Number,
        lexeme: "=1",
        computed_lexeme: Some(
            "1",
        ),
        line: 64,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        computed_lexeme: None,
        line: 64,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        computed_lexeme: None,
        line: 64,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        computed_lexeme: None,
        line: 64,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 64,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "step",
        computed_lexeme: None,
        line: 64,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 64,
    },
    Token {
        kind: For,
        lexeme: "for",
        computed_lexeme: None,
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        computed_lexeme: None,
        line: 65,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 65,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        computed_lexeme: None,
        line: 65,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        computed_lexeme: None,
        line: 65,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        computed_lexeme: None,
        line: 65,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 65,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "step",
        computed_lexeme: None,
        line: 65,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        computed_lexeme: None,
        line: 66,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        computed_lexeme: None,
        line: 66,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        computed_lexeme: None,
        line: 66,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "sub",
        computed_lexeme: None,
        line: 66,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        computed_lexeme: None,
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        computed_lexeme: None,
        line: 66,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 66,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 66,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 66,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 67,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 68,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        computed_lexeme: None,
        line: 71,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 71,
    },
    Token {
        kind: String,
        lexeme: "'long strings'",
        computed_lexeme: None,
        line: 71,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        computed_lexeme: None,
        line: 72,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 72,
    },
    Token {
        kind: String,
        lexeme: "\"01234567890123456789012345678901234567890123456789012345678901234567890123456789\"",
        computed_lexeme: None,
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 73,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        computed_lexeme: None,
        line: 73,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        computed_lexeme: None,
        line: 73,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        computed_lexeme: None,
        line: 73,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 73,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 73,
    },
    Token {
        kind: Number,
        lexeme: "=80",
        computed_lexeme: Some(
            "80",
        ),
        line: 73,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        computed_lexeme: None,
        line: 74,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 74,
    },
    Token {
        kind: String,
        lexeme: "''",
        computed_lexeme: None,
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        computed_lexeme: None,
        line: 75,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 75,
    },
    Token {
        kind: Number,
        lexeme: " 0",
        computed_lexeme: Some(
            "0",
        ),
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        computed_lexeme: None,
        line: 76,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 76,
    },
    Token {
        kind: Number,
        lexeme: " 300",
        computed_lexeme: Some(
            "300",
        ),
        line: 76,
    },
    Token {
        kind: While,
        lexeme: "while",
        computed_lexeme: None,
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        computed_lexeme: None,
        line: 77,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        computed_lexeme: None,
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        computed_lexeme: None,
        line: 77,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        computed_lexeme: None,
        line: 77,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        computed_lexeme: None,
        line: 77,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        computed_lexeme: None,
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        computed_lexeme: None,
        line: 77,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        computed_lexeme: None,
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        computed_lexeme: None,
        line: 77,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        computed_lexeme: None,
        line: 77,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        computed_lexeme: None,
        line: 77,
    },
    Token {
        kind: Number,
        lexeme: "+1",
        computed_lexeme: Some(
            "1",
        ),
        line: 77,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        computed_lexeme: None,
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        computed_lexeme: None,
        line: 77,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "tostring",
        computed_lexeme: None,
        line: 77,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        computed_lexeme: None,
        line: 77,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 77,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 78,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        computed_lexeme: None,
        line: 78,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        computed_lexeme: None,
        line: 78,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        computed_lexeme: None,
        line: 78,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 78,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        computed_lexeme: None,
        line: 78,
    },
    Token {
        kind: Star,
        lexeme: "*",
        computed_lexeme: None,
        line: 78,
    },
    Token {
        kind: Number,
        lexeme: "*80",
        computed_lexeme: Some(
            "80",
        ),
        line: 78,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        computed_lexeme: None,
        line: 79,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        computed_lexeme: None,
        line: 79,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "sub",
        computed_lexeme: None,
        line: 79,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        computed_lexeme: None,
        line: 79,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 79,
    },
    Token {
        kind: Number,
        lexeme: " 1",
        computed_lexeme: Some(
            "1",
        ),
        line: 79,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 79,
    },
    Token {
        kind: Number,
        lexeme: " 20000",
        computed_lexeme: Some(
            "20000",
        ),
        line: 79,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        computed_lexeme: None,
        line: 80,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 80,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        computed_lexeme: None,
        line: 80,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        computed_lexeme: None,
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        computed_lexeme: None,
        line: 80,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 80,
    },
    Token {
        kind: String,
        lexeme: "'(%d%d%d%d)'",
        computed_lexeme: None,
        line: 80,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "math",
        computed_lexeme: None,
        line: 80,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "sin",
        computed_lexeme: None,
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 81,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 81,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 81,
    },
    Token {
        kind: Number,
        lexeme: "=20000",
        computed_lexeme: Some(
            "20000",
        ),
        line: 81,
    },
    Token {
        kind: Slash,
        lexeme: "/",
        computed_lexeme: None,
        line: 81,
    },
    Token {
        kind: Number,
        lexeme: "/4",
        computed_lexeme: Some(
            "4",
        ),
        line: 81,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        computed_lexeme: None,
        line: 82,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 82,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        computed_lexeme: None,
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        computed_lexeme: None,
        line: 83,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 83,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        computed_lexeme: None,
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 85,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        computed_lexeme: None,
        line: 85,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 85,
    },
    Token {
        kind: String,
        lexeme: "\"while\"",
        computed_lexeme: None,
        line: 85,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 85,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 85,
    },
    Token {
        kind: Number,
        lexeme: " 234",
        computed_lexeme: Some(
            "234",
        ),
        line: 85,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 85,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "bytes",
        computed_lexeme: None,
        line: 88,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "gcinfo",
        computed_lexeme: None,
        line: 88,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 88,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 88,
    },
    Token {
        kind: While,
        lexeme: "while",
        computed_lexeme: None,
        line: 89,
    },
    Token {
        kind: Number,
        lexeme: " 1",
        computed_lexeme: Some(
            "1",
        ),
        line: 89,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 89,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "nbytes",
        computed_lexeme: None,
        line: 90,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "gcinfo",
        computed_lexeme: None,
        line: 90,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 90,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 90,
    },
    Token {
        kind: If,
        lexeme: "if",
        computed_lexeme: None,
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "nbytes",
        computed_lexeme: None,
        line: 91,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        computed_lexeme: None,
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "bytes",
        computed_lexeme: None,
        line: 91,
    },
    Token {
        kind: Then,
        lexeme: "then",
        computed_lexeme: None,
        line: 91,
    },
    Token {
        kind: Break,
        lexeme: "break",
        computed_lexeme: None,
        line: 91,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "bytes",
        computed_lexeme: None,
        line: 92,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "nbytes",
        computed_lexeme: None,
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 93,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 93,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 93,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 93,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 94,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 97,
    },
    Token {
        kind: Function,
        lexeme: "function",
        computed_lexeme: None,
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "dosteps",
        computed_lexeme: None,
        line: 97,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "siz",
        computed_lexeme: None,
        line: 97,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        computed_lexeme: None,
        line: 98,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 98,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        computed_lexeme: None,
        line: 99,
    },
    Token {
        kind: String,
        lexeme: "\"stop\"",
        computed_lexeme: None,
        line: 99,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 100,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 100,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 100,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 100,
    },
    Token {
        kind: For,
        lexeme: "for",
        computed_lexeme: None,
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 101,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 101,
    },
    Token {
        kind: Number,
        lexeme: "=1",
        computed_lexeme: Some(
            "1",
        ),
        line: 101,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 101,
    },
    Token {
        kind: Number,
        lexeme: ",100",
        computed_lexeme: Some(
            "100",
        ),
        line: 101,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 101,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 101,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 101,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 101,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 101,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 101,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 101,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 101,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        computed_lexeme: None,
        line: 101,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        computed_lexeme: None,
        line: 101,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 101,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 101,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 101,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 101,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        computed_lexeme: None,
        line: 102,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: "gcinfo",
        computed_lexeme: None,
        line: 102,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 102,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 102,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 103,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 103,
    },
    Token {
        kind: Number,
        lexeme: " 0",
        computed_lexeme: Some(
            "0",
        ),
        line: 103,
    },
    Token {
        kind: Repeat,
        lexeme: "repeat",
        computed_lexeme: None,
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 105,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 105,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        computed_lexeme: None,
        line: 105,
    },
    Token {
        kind: Number,
        lexeme: "+1",
        computed_lexeme: Some(
            "1",
        ),
        line: 105,
    },
    Token {
        kind: Until,
        lexeme: "until",
        computed_lexeme: None,
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        computed_lexeme: None,
        line: 106,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 106,
    },
    Token {
        kind: String,
        lexeme: "\"step\"",
        computed_lexeme: None,
        line: 106,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "siz",
        computed_lexeme: None,
        line: 106,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 107,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: "gcinfo",
        computed_lexeme: None,
        line: 107,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 107,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 107,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        computed_lexeme: None,
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        computed_lexeme: None,
        line: 107,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 107,
    },
    Token {
        kind: Return,
        lexeme: "return",
        computed_lexeme: None,
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 108,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 111,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "dosteps",
        computed_lexeme: None,
        line: 111,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 111,
    },
    Token {
        kind: Number,
        lexeme: "(0",
        computed_lexeme: Some(
            "0",
        ),
        line: 111,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 111,
    },
    Token {
        kind: GreaterThan,
        lexeme: ">",
        computed_lexeme: None,
        line: 111,
    },
    Token {
        kind: Number,
        lexeme: " 10",
        computed_lexeme: Some(
            "10",
        ),
        line: 111,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 112,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: "dosteps",
        computed_lexeme: None,
        line: 112,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 112,
    },
    Token {
        kind: Number,
        lexeme: "(6",
        computed_lexeme: Some(
            "6",
        ),
        line: 112,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 112,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        computed_lexeme: None,
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: "dosteps",
        computed_lexeme: None,
        line: 112,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 112,
    },
    Token {
        kind: Number,
        lexeme: "(2",
        computed_lexeme: Some(
            "2",
        ),
        line: 112,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 112,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 113,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: "dosteps",
        computed_lexeme: None,
        line: 113,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 113,
    },
    Token {
        kind: Number,
        lexeme: "(10000",
        computed_lexeme: Some(
            "10000",
        ),
        line: 113,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 113,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 113,
    },
    Token {
        kind: Number,
        lexeme: " 1",
        computed_lexeme: Some(
            "1",
        ),
        line: 113,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 114,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        computed_lexeme: None,
        line: 114,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 114,
    },
    Token {
        kind: String,
        lexeme: "\"step\"",
        computed_lexeme: None,
        line: 114,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 114,
    },
    Token {
        kind: Number,
        lexeme: " 1000000",
        computed_lexeme: Some(
            "1000000",
        ),
        line: 114,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 114,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 114,
    },
    Token {
        kind: True,
        lexeme: "true",
        computed_lexeme: None,
        line: 114,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 115,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        computed_lexeme: None,
        line: 115,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 115,
    },
    Token {
        kind: String,
        lexeme: "\"step\"",
        computed_lexeme: None,
        line: 115,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 115,
    },
    Token {
        kind: Number,
        lexeme: " 1000000",
        computed_lexeme: Some(
            "1000000",
        ),
        line: 115,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 115,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 115,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 118,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        computed_lexeme: None,
        line: 119,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "gcinfo",
        computed_lexeme: None,
        line: 119,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 119,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        computed_lexeme: None,
        line: 120,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 120,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        computed_lexeme: None,
        line: 121,
    },
    Token {
        kind: String,
        lexeme: "\"stop\"",
        computed_lexeme: None,
        line: 121,
    },
    Token {
        kind: Repeat,
        lexeme: "repeat",
        computed_lexeme: None,
        line: 122,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 123,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 123,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 123,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 123,
    },
    Token {
        kind: Until,
        lexeme: "until",
        computed_lexeme: None,
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "gcinfo",
        computed_lexeme: None,
        line: 124,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 124,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 124,
    },
    Token {
        kind: GreaterThan,
        lexeme: ">",
        computed_lexeme: None,
        line: 124,
    },
    Token {
        kind: Number,
        lexeme: " 1000",
        computed_lexeme: Some(
            "1000",
        ),
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        computed_lexeme: None,
        line: 125,
    },
    Token {
        kind: String,
        lexeme: "\"restart\"",
        computed_lexeme: None,
        line: 125,
    },
    Token {
        kind: Repeat,
        lexeme: "repeat",
        computed_lexeme: None,
        line: 126,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 127,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 127,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 127,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 127,
    },
    Token {
        kind: Until,
        lexeme: "until",
        computed_lexeme: None,
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "gcinfo",
        computed_lexeme: None,
        line: 128,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 128,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 128,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        computed_lexeme: None,
        line: 128,
    },
    Token {
        kind: Number,
        lexeme: " 1000",
        computed_lexeme: Some(
            "1000",
        ),
        line: 128,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        computed_lexeme: None,
        line: 131,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 131,
    },
    Token {
        kind: Number,
        lexeme: " 15",
        computed_lexeme: Some(
            "15",
        ),
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 132,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 132,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 132,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 132,
    },
    Token {
        kind: For,
        lexeme: "for",
        computed_lexeme: None,
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 134,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 134,
    },
    Token {
        kind: Number,
        lexeme: "=1",
        computed_lexeme: Some(
            "1",
        ),
        line: 134,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        computed_lexeme: None,
        line: 134,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 134,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 134,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 134,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 134,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 134,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 134,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        computed_lexeme: None,
        line: 135,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 135,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 135,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 135,
    },
    Token {
        kind: For,
        lexeme: "for",
        computed_lexeme: None,
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        computed_lexeme: None,
        line: 136,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        computed_lexeme: None,
        line: 136,
    },
    Token {
        kind: In,
        lexeme: "in",
        computed_lexeme: None,
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        computed_lexeme: None,
        line: 136,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 136,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 136,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        computed_lexeme: None,
        line: 136,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        computed_lexeme: None,
        line: 136,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 136,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        computed_lexeme: None,
        line: 136,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 136,
    },
    Token {
        kind: For,
        lexeme: "for",
        computed_lexeme: None,
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        computed_lexeme: None,
        line: 138,
    },
    Token {
        kind: In,
        lexeme: "in",
        computed_lexeme: None,
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        computed_lexeme: None,
        line: 138,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        computed_lexeme: None,
        line: 138,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 138,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 139,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        computed_lexeme: None,
        line: 139,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 139,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 139,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        computed_lexeme: None,
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 140,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        computed_lexeme: None,
        line: 140,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        computed_lexeme: None,
        line: 140,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 140,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 140,
    },
    Token {
        kind: String,
        lexeme: "'table'",
        computed_lexeme: None,
        line: 140,
    },
    Token {
        kind: And,
        lexeme: "and",
        computed_lexeme: None,
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        computed_lexeme: None,
        line: 140,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        computed_lexeme: None,
        line: 140,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 140,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 140,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        computed_lexeme: None,
        line: 140,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        computed_lexeme: None,
        line: 141,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 141,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 141,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        computed_lexeme: None,
        line: 143,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 143,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        computed_lexeme: None,
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        computed_lexeme: None,
        line: 144,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 144,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 144,
    },
    Token {
        kind: For,
        lexeme: "for",
        computed_lexeme: None,
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        computed_lexeme: None,
        line: 145,
    },
    Token {
        kind: In,
        lexeme: "in",
        computed_lexeme: None,
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        computed_lexeme: None,
        line: 145,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 145,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 145,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "error",
        computed_lexeme: None,
        line: 145,
    },
    Token {
        kind: String,
        lexeme: "'cannot be here'",
        computed_lexeme: None,
        line: 145,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 145,
    },
    Token {
        kind: For,
        lexeme: "for",
        computed_lexeme: None,
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 146,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 146,
    },
    Token {
        kind: Number,
        lexeme: "=1",
        computed_lexeme: Some(
            "1",
        ),
        line: 146,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        computed_lexeme: None,
        line: 146,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 146,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 146,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 146,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 146,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 146,
    },
    Token {
        kind: For,
        lexeme: "for",
        computed_lexeme: None,
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 147,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 147,
    },
    Token {
        kind: Number,
        lexeme: "=1",
        computed_lexeme: Some(
            "1",
        ),
        line: 147,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        computed_lexeme: None,
        line: 147,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 147,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 147,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 147,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 147,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 147,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 147,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        computed_lexeme: None,
        line: 150,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 150,
    },
    Token {
        kind: String,
        lexeme: "'weak tables'",
        computed_lexeme: None,
        line: 150,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 151,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 151,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 151,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 151,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        computed_lexeme: None,
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        computed_lexeme: None,
        line: 151,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 151,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 151,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: "__mode",
        computed_lexeme: None,
        line: 151,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 151,
    },
    Token {
        kind: String,
        lexeme: "'k'",
        computed_lexeme: None,
        line: 151,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 151,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 151,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        computed_lexeme: None,
        line: 151,
    },
    Token {
        kind: For,
        lexeme: "for",
        computed_lexeme: None,
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 153,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 153,
    },
    Token {
        kind: Number,
        lexeme: "=1",
        computed_lexeme: Some(
            "1",
        ),
        line: 153,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        computed_lexeme: None,
        line: 153,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 153,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 153,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 153,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 153,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 153,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 153,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 153,
    },
    Token {
        kind: For,
        lexeme: "for",
        computed_lexeme: None,
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 155,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 155,
    },
    Token {
        kind: Number,
        lexeme: "=1",
        computed_lexeme: Some(
            "1",
        ),
        line: 155,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        computed_lexeme: None,
        line: 155,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 155,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        computed_lexeme: None,
        line: 155,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 155,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 155,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 155,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        computed_lexeme: None,
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 155,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        computed_lexeme: None,
        line: 155,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 155,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        computed_lexeme: None,
        line: 155,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 155,
    },
    Token {
        kind: For,
        lexeme: "for",
        computed_lexeme: None,
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 156,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 156,
    },
    Token {
        kind: Number,
        lexeme: "=1",
        computed_lexeme: Some(
            "1",
        ),
        line: 156,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        computed_lexeme: None,
        line: 156,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 156,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 156,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 156,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 156,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 156,
    },
    Token {
        kind: For,
        lexeme: "for",
        computed_lexeme: None,
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 157,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 157,
    },
    Token {
        kind: Number,
        lexeme: "=1",
        computed_lexeme: Some(
            "1",
        ),
        line: 157,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        computed_lexeme: None,
        line: 157,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 157,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        computed_lexeme: None,
        line: 157,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        computed_lexeme: None,
        line: 157,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        computed_lexeme: None,
        line: 157,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 157,
    },
    Token {
        kind: String,
        lexeme: "'@'",
        computed_lexeme: None,
        line: 157,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 157,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 157,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        computed_lexeme: None,
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 157,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        computed_lexeme: None,
        line: 157,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 157,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        computed_lexeme: None,
        line: 157,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        computed_lexeme: None,
        line: 157,
    },
    Token {
        kind: String,
        lexeme: "'#'",
        computed_lexeme: None,
        line: 157,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        computed_lexeme: None,
        line: 158,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 158,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 158,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 159,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 159,
    },
    Token {
        kind: Number,
        lexeme: " 0",
        computed_lexeme: Some(
            "0",
        ),
        line: 159,
    },
    Token {
        kind: For,
        lexeme: "for",
        computed_lexeme: None,
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        computed_lexeme: None,
        line: 160,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        computed_lexeme: None,
        line: 160,
    },
    Token {
        kind: In,
        lexeme: "in",
        computed_lexeme: None,
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        computed_lexeme: None,
        line: 160,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 160,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 160,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 160,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        computed_lexeme: None,
        line: 160,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        computed_lexeme: None,
        line: 160,
    },
    Token {
        kind: Or,
        lexeme: "or",
        computed_lexeme: None,
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        computed_lexeme: None,
        line: 160,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        computed_lexeme: None,
        line: 160,
    },
    Token {
        kind: String,
        lexeme: "'#'",
        computed_lexeme: None,
        line: 160,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        computed_lexeme: None,
        line: 160,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 160,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        computed_lexeme: None,
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 160,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 160,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        computed_lexeme: None,
        line: 160,
    },
    Token {
        kind: Number,
        lexeme: "+1",
        computed_lexeme: Some(
            "1",
        ),
        line: 160,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 161,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 161,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 161,
    },
    Token {
        kind: Number,
        lexeme: " 3",
        computed_lexeme: Some(
            "3",
        ),
        line: 161,
    },
    Token {
        kind: Star,
        lexeme: "*",
        computed_lexeme: None,
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        computed_lexeme: None,
        line: 161,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 163,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 163,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 163,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 163,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        computed_lexeme: None,
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        computed_lexeme: None,
        line: 163,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 163,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 163,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "__mode",
        computed_lexeme: None,
        line: 163,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 163,
    },
    Token {
        kind: String,
        lexeme: "'v'",
        computed_lexeme: None,
        line: 163,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 163,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 163,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        computed_lexeme: None,
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 164,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 164,
    },
    Token {
        kind: Number,
        lexeme: "[1",
        computed_lexeme: Some(
            "1",
        ),
        line: 164,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 164,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        computed_lexeme: None,
        line: 164,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        computed_lexeme: None,
        line: 164,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 164,
    },
    Token {
        kind: String,
        lexeme: "'b'",
        computed_lexeme: None,
        line: 164,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 164,
    },
    Token {
        kind: Number,
        lexeme: " 21",
        computed_lexeme: Some(
            "21",
        ),
        line: 164,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        computed_lexeme: None,
        line: 165,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 165,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 166,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 166,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 166,
    },
    Token {
        kind: Number,
        lexeme: "[1",
        computed_lexeme: Some(
            "1",
        ),
        line: 166,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 166,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 167,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 167,
    },
    Token {
        kind: Number,
        lexeme: "[1",
        computed_lexeme: Some(
            "1",
        ),
        line: 167,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 167,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 167,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        computed_lexeme: None,
        line: 167,
    },
    Token {
        kind: For,
        lexeme: "for",
        computed_lexeme: None,
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 169,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 169,
    },
    Token {
        kind: Number,
        lexeme: "=1",
        computed_lexeme: Some(
            "1",
        ),
        line: 169,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        computed_lexeme: None,
        line: 169,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 169,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 169,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 169,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 169,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 169,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 169,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 169,
    },
    Token {
        kind: For,
        lexeme: "for",
        computed_lexeme: None,
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 170,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 170,
    },
    Token {
        kind: Number,
        lexeme: "=1",
        computed_lexeme: Some(
            "1",
        ),
        line: 170,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        computed_lexeme: None,
        line: 170,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 170,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 170,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        computed_lexeme: None,
        line: 170,
    },
    Token {
        kind: String,
        lexeme: "'x'",
        computed_lexeme: None,
        line: 170,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 170,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 170,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 170,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 170,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 170,
    },
    Token {
        kind: For,
        lexeme: "for",
        computed_lexeme: None,
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 172,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 172,
    },
    Token {
        kind: Number,
        lexeme: "=1",
        computed_lexeme: Some(
            "1",
        ),
        line: 172,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        computed_lexeme: None,
        line: 172,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 172,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        computed_lexeme: None,
        line: 172,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 172,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 172,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 172,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        computed_lexeme: None,
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 172,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        computed_lexeme: None,
        line: 172,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 172,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        computed_lexeme: None,
        line: 172,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 172,
    },
    Token {
        kind: For,
        lexeme: "for",
        computed_lexeme: None,
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 173,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 173,
    },
    Token {
        kind: Number,
        lexeme: "=1",
        computed_lexeme: Some(
            "1",
        ),
        line: 173,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        computed_lexeme: None,
        line: 173,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 173,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 173,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        computed_lexeme: None,
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        computed_lexeme: None,
        line: 173,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 173,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 173,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        computed_lexeme: None,
        line: 173,
    },
    Token {
        kind: String,
        lexeme: "'x'",
        computed_lexeme: None,
        line: 173,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        computed_lexeme: None,
        line: 174,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 174,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 174,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 175,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 175,
    },
    Token {
        kind: Number,
        lexeme: " 0",
        computed_lexeme: Some(
            "0",
        ),
        line: 175,
    },
    Token {
        kind: For,
        lexeme: "for",
        computed_lexeme: None,
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        computed_lexeme: None,
        line: 176,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        computed_lexeme: None,
        line: 176,
    },
    Token {
        kind: In,
        lexeme: "in",
        computed_lexeme: None,
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        computed_lexeme: None,
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 176,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        computed_lexeme: None,
        line: 176,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        computed_lexeme: None,
        line: 176,
    },
    Token {
        kind: Or,
        lexeme: "or",
        computed_lexeme: None,
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        computed_lexeme: None,
        line: 176,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        computed_lexeme: None,
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        computed_lexeme: None,
        line: 176,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        computed_lexeme: None,
        line: 176,
    },
    Token {
        kind: String,
        lexeme: "'x'",
        computed_lexeme: None,
        line: 176,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        computed_lexeme: None,
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 176,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        computed_lexeme: None,
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 176,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 176,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        computed_lexeme: None,
        line: 176,
    },
    Token {
        kind: Number,
        lexeme: "+1",
        computed_lexeme: Some(
            "1",
        ),
        line: 176,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 177,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 177,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 177,
    },
    Token {
        kind: Number,
        lexeme: " 2",
        computed_lexeme: Some(
            "2",
        ),
        line: 177,
    },
    Token {
        kind: Star,
        lexeme: "*",
        computed_lexeme: None,
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        computed_lexeme: None,
        line: 177,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 179,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 179,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 179,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 179,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        computed_lexeme: None,
        line: 179,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        computed_lexeme: None,
        line: 179,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 179,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 179,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 179,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 179,
    },
    Token {
        kind: Identifier,
        lexeme: "__mode",
        computed_lexeme: None,
        line: 179,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 179,
    },
    Token {
        kind: String,
        lexeme: "'vk'",
        computed_lexeme: None,
        line: 179,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 179,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 179,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        computed_lexeme: None,
        line: 179,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        computed_lexeme: None,
        line: 180,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        computed_lexeme: None,
        line: 180,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        computed_lexeme: None,
        line: 180,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 180,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 180,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 180,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 180,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 180,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 180,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 180,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 180,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 182,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 182,
    },
    Token {
        kind: Number,
        lexeme: "[1",
        computed_lexeme: Some(
            "1",
        ),
        line: 182,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 182,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 182,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 182,
    },
    Token {
        kind: Number,
        lexeme: "[2",
        computed_lexeme: Some(
            "2",
        ),
        line: 182,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 182,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 182,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 182,
    },
    Token {
        kind: Number,
        lexeme: "[3",
        computed_lexeme: Some(
            "3",
        ),
        line: 182,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 182,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        computed_lexeme: None,
        line: 182,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        computed_lexeme: None,
        line: 182,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        computed_lexeme: None,
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 183,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 183,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        computed_lexeme: None,
        line: 183,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 183,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        computed_lexeme: None,
        line: 183,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 183,
    },
    Token {
        kind: String,
        lexeme: "'$'",
        computed_lexeme: None,
        line: 183,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 183,
    },
    Token {
        kind: Number,
        lexeme: " 11",
        computed_lexeme: Some(
            "11",
        ),
        line: 183,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 183,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 183,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 183,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        computed_lexeme: None,
        line: 183,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 183,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        computed_lexeme: None,
        line: 183,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 183,
    },
    Token {
        kind: String,
        lexeme: "'$'",
        computed_lexeme: None,
        line: 183,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 183,
    },
    Token {
        kind: Number,
        lexeme: " 11",
        computed_lexeme: Some(
            "11",
        ),
        line: 183,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 183,
    },
    Token {
        kind: For,
        lexeme: "for",
        computed_lexeme: None,
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 185,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 185,
    },
    Token {
        kind: Number,
        lexeme: "=4",
        computed_lexeme: Some(
            "4",
        ),
        line: 185,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        computed_lexeme: None,
        line: 185,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 185,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 185,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 185,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 185,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 185,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 185,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 185,
    },
    Token {
        kind: For,
        lexeme: "for",
        computed_lexeme: None,
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 186,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 186,
    },
    Token {
        kind: Number,
        lexeme: "=1",
        computed_lexeme: Some(
            "1",
        ),
        line: 186,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        computed_lexeme: None,
        line: 186,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 186,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 186,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 186,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 186,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 186,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 186,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 186,
    },
    Token {
        kind: For,
        lexeme: "for",
        computed_lexeme: None,
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 187,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 187,
    },
    Token {
        kind: Number,
        lexeme: "=1",
        computed_lexeme: Some(
            "1",
        ),
        line: 187,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        computed_lexeme: None,
        line: 187,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 187,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        computed_lexeme: None,
        line: 187,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 187,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 187,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 187,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        computed_lexeme: None,
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 187,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        computed_lexeme: None,
        line: 187,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 187,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        computed_lexeme: None,
        line: 187,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        computed_lexeme: None,
        line: 188,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 188,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 189,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        computed_lexeme: None,
        line: 189,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 189,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 189,
    },
    Token {
        kind: NotEquals,
        lexeme: "~=",
        computed_lexeme: None,
        line: 189,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        computed_lexeme: None,
        line: 189,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 189,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 190,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 190,
    },
    Token {
        kind: Number,
        lexeme: " 0",
        computed_lexeme: Some(
            "0",
        ),
        line: 190,
    },
    Token {
        kind: For,
        lexeme: "for",
        computed_lexeme: None,
        line: 191,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        computed_lexeme: None,
        line: 191,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 191,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        computed_lexeme: None,
        line: 191,
    },
    Token {
        kind: In,
        lexeme: "in",
        computed_lexeme: None,
        line: 191,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        computed_lexeme: None,
        line: 191,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 191,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 191,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 191,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 191,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 192,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 192,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 192,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        computed_lexeme: None,
        line: 192,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 192,
    },
    Token {
        kind: Number,
        lexeme: " 1",
        computed_lexeme: Some(
            "1",
        ),
        line: 192,
    },
    Token {
        kind: And,
        lexeme: "and",
        computed_lexeme: None,
        line: 192,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        computed_lexeme: None,
        line: 192,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 192,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        computed_lexeme: None,
        line: 192,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 192,
    },
    Token {
        kind: Or,
        lexeme: "or",
        computed_lexeme: None,
        line: 192,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        computed_lexeme: None,
        line: 193,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 193,
    },
    Token {
        kind: Number,
        lexeme: " 2",
        computed_lexeme: Some(
            "2",
        ),
        line: 193,
    },
    Token {
        kind: And,
        lexeme: "and",
        computed_lexeme: None,
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        computed_lexeme: None,
        line: 193,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        computed_lexeme: None,
        line: 193,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 193,
    },
    Token {
        kind: Or,
        lexeme: "or",
        computed_lexeme: None,
        line: 193,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 194,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        computed_lexeme: None,
        line: 194,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 194,
    },
    Token {
        kind: Number,
        lexeme: " 3",
        computed_lexeme: Some(
            "3",
        ),
        line: 194,
    },
    Token {
        kind: And,
        lexeme: "and",
        computed_lexeme: None,
        line: 194,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        computed_lexeme: None,
        line: 194,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 194,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        computed_lexeme: None,
        line: 194,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 194,
    },
    Token {
        kind: Or,
        lexeme: "or",
        computed_lexeme: None,
        line: 194,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        computed_lexeme: None,
        line: 194,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 194,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        computed_lexeme: None,
        line: 194,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 194,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        computed_lexeme: None,
        line: 194,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 195,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 195,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 195,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        computed_lexeme: None,
        line: 195,
    },
    Token {
        kind: Number,
        lexeme: "+1",
        computed_lexeme: Some(
            "1",
        ),
        line: 195,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 196,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 197,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 197,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 197,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 197,
    },
    Token {
        kind: Number,
        lexeme: " 4",
        computed_lexeme: Some(
            "4",
        ),
        line: 197,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 197,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        computed_lexeme: None,
        line: 198,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        computed_lexeme: None,
        line: 198,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        computed_lexeme: None,
        line: 198,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 198,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        computed_lexeme: None,
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        computed_lexeme: None,
        line: 199,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 199,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 199,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 200,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        computed_lexeme: None,
        line: 200,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 200,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 200,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        computed_lexeme: None,
        line: 200,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        computed_lexeme: None,
        line: 200,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 200,
    },
    Token {
        kind: String,
        lexeme: "'$'",
        computed_lexeme: None,
        line: 200,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 200,
    },
    Token {
        kind: Number,
        lexeme: " 11",
        computed_lexeme: Some(
            "11",
        ),
        line: 200,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 200,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        computed_lexeme: None,
        line: 204,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 204,
    },
    Token {
        kind: String,
        lexeme: "\"stop\"",
        computed_lexeme: None,
        line: 204,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 204,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 205,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        computed_lexeme: None,
        line: 205,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 205,
    },
    Token {
        kind: Identifier,
        lexeme: "newproxy",
        computed_lexeme: None,
        line: 205,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 205,
    },
    Token {
        kind: True,
        lexeme: "true",
        computed_lexeme: None,
        line: 205,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 205,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 206,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        computed_lexeme: None,
        line: 206,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 206,
    },
    Token {
        kind: Number,
        lexeme: " 0",
        computed_lexeme: Some(
            "0",
        ),
        line: 206,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 207,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 207,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 207,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        computed_lexeme: None,
        line: 207,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 207,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 207,
    },
    Token {
        kind: Number,
        lexeme: " 0",
        computed_lexeme: Some(
            "0",
        ),
        line: 207,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 207,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        computed_lexeme: None,
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        computed_lexeme: None,
        line: 207,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 207,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 207,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: "__mode",
        computed_lexeme: None,
        line: 207,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 207,
    },
    Token {
        kind: String,
        lexeme: "'vk'",
        computed_lexeme: None,
        line: 207,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 207,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 207,
    },
    Token {
        kind: For,
        lexeme: "for",
        computed_lexeme: None,
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 208,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 208,
    },
    Token {
        kind: Number,
        lexeme: "=1",
        computed_lexeme: Some(
            "1",
        ),
        line: 208,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 208,
    },
    Token {
        kind: Number,
        lexeme: ",10",
        computed_lexeme: Some(
            "10",
        ),
        line: 208,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 208,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: "newproxy",
        computed_lexeme: None,
        line: 208,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        computed_lexeme: None,
        line: 208,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 208,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 208,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 208,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 208,
    },
    Token {
        kind: For,
        lexeme: "for",
        computed_lexeme: None,
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        computed_lexeme: None,
        line: 209,
    },
    Token {
        kind: In,
        lexeme: "in",
        computed_lexeme: None,
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        computed_lexeme: None,
        line: 209,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 209,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 209,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 209,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        computed_lexeme: None,
        line: 209,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        computed_lexeme: None,
        line: 209,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 209,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        computed_lexeme: None,
        line: 209,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        computed_lexeme: None,
        line: 209,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 209,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 209,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 209,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "a1",
        computed_lexeme: None,
        line: 210,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 210,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 210,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 210,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        computed_lexeme: None,
        line: 210,
    },
    Token {
        kind: For,
        lexeme: "for",
        computed_lexeme: None,
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        computed_lexeme: None,
        line: 210,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        computed_lexeme: None,
        line: 210,
    },
    Token {
        kind: In,
        lexeme: "in",
        computed_lexeme: None,
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        computed_lexeme: None,
        line: 210,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 210,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 210,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "a1",
        computed_lexeme: None,
        line: 210,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        computed_lexeme: None,
        line: 210,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 210,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        computed_lexeme: None,
        line: 210,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 210,
    },
    Token {
        kind: For,
        lexeme: "for",
        computed_lexeme: None,
        line: 211,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        computed_lexeme: None,
        line: 211,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 211,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        computed_lexeme: None,
        line: 211,
    },
    Token {
        kind: In,
        lexeme: "in",
        computed_lexeme: None,
        line: 211,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        computed_lexeme: None,
        line: 211,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 211,
    },
    Token {
        kind: Identifier,
        lexeme: "a1",
        computed_lexeme: None,
        line: 211,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 211,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 211,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 211,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 211,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        computed_lexeme: None,
        line: 211,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 211,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 211,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        computed_lexeme: None,
        line: 211,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 211,
    },
    Token {
        kind: For,
        lexeme: "for",
        computed_lexeme: None,
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 212,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 212,
    },
    Token {
        kind: Number,
        lexeme: "=1",
        computed_lexeme: Some(
            "1",
        ),
        line: 212,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 212,
    },
    Token {
        kind: Number,
        lexeme: ",10",
        computed_lexeme: Some(
            "10",
        ),
        line: 212,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 212,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 212,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 212,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 212,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 212,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        computed_lexeme: None,
        line: 213,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 213,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        computed_lexeme: None,
        line: 213,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 213,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 213,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 213,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 213,
    },
    Token {
        kind: Identifier,
        lexeme: "a1",
        computed_lexeme: None,
        line: 213,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        computed_lexeme: None,
        line: 214,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 214,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        computed_lexeme: None,
        line: 214,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 214,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 214,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        computed_lexeme: None,
        line: 214,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 214,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        computed_lexeme: None,
        line: 214,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 215,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        computed_lexeme: None,
        line: 216,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        computed_lexeme: None,
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        computed_lexeme: None,
        line: 217,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        computed_lexeme: None,
        line: 217,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 217,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: "__gc",
        computed_lexeme: None,
        line: 217,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 217,
    },
    Token {
        kind: Function,
        lexeme: "function",
        computed_lexeme: None,
        line: 217,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: "o",
        computed_lexeme: None,
        line: 217,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 218,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 218,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 218,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 218,
    },
    Token {
        kind: Identifier,
        lexeme: "o",
        computed_lexeme: None,
        line: 218,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 218,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 218,
    },
    Token {
        kind: Number,
        lexeme: " 10",
        computed_lexeme: Some(
            "10",
        ),
        line: 218,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        computed_lexeme: None,
        line: 218,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        computed_lexeme: None,
        line: 218,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 218,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 219,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 219,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 219,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 219,
    },
    Token {
        kind: Number,
        lexeme: "[10",
        computed_lexeme: Some(
            "10",
        ),
        line: 219,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        computed_lexeme: None,
        line: 219,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        computed_lexeme: None,
        line: 219,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 219,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 219,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        computed_lexeme: None,
        line: 219,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 219,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 220,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 220,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        computed_lexeme: None,
        line: 220,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 220,
    },
    Token {
        kind: Identifier,
        lexeme: "o",
        computed_lexeme: None,
        line: 220,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 220,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 220,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        computed_lexeme: None,
        line: 220,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 220,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        computed_lexeme: None,
        line: 220,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 220,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 220,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 221,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        computed_lexeme: None,
        line: 221,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: "o",
        computed_lexeme: None,
        line: 221,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 221,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 221,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: "o",
        computed_lexeme: None,
        line: 221,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 221,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 221,
    },
    Token {
        kind: Number,
        lexeme: " 10",
        computed_lexeme: Some(
            "10",
        ),
        line: 221,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        computed_lexeme: None,
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        computed_lexeme: None,
        line: 221,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        computed_lexeme: None,
        line: 222,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        computed_lexeme: None,
        line: 222,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        computed_lexeme: None,
        line: 222,
    },
    Token {
        kind: Number,
        lexeme: "+1",
        computed_lexeme: Some(
            "1",
        ),
        line: 222,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 223,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 224,
    },
    Token {
        kind: Identifier,
        lexeme: "a1",
        computed_lexeme: None,
        line: 225,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 225,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        computed_lexeme: None,
        line: 225,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 225,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        computed_lexeme: None,
        line: 225,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 226,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 226,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        computed_lexeme: None,
        line: 226,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 226,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 226,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 226,
    },
    Token {
        kind: NotEquals,
        lexeme: "~=",
        computed_lexeme: None,
        line: 226,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        computed_lexeme: None,
        line: 226,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 226,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        computed_lexeme: None,
        line: 227,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 227,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 228,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 228,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        computed_lexeme: None,
        line: 228,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 228,
    },
    Token {
        kind: Number,
        lexeme: "=11",
        computed_lexeme: Some(
            "11",
        ),
        line: 228,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 228,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        computed_lexeme: None,
        line: 229,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 229,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 229,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 230,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        computed_lexeme: None,
        line: 230,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 230,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 230,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 230,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        computed_lexeme: None,
        line: 230,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 230,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        computed_lexeme: None,
        line: 234,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: "newproxy",
        computed_lexeme: None,
        line: 234,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 234,
    },
    Token {
        kind: True,
        lexeme: "true",
        computed_lexeme: None,
        line: 234,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        computed_lexeme: None,
        line: 235,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        computed_lexeme: None,
        line: 235,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        computed_lexeme: None,
        line: 235,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 235,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 235,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: "__mode",
        computed_lexeme: None,
        line: 235,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 235,
    },
    Token {
        kind: String,
        lexeme: "\"v\"",
        computed_lexeme: None,
        line: 235,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 235,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        computed_lexeme: None,
        line: 236,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 236,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        computed_lexeme: None,
        line: 236,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 236,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 236,
    },
    Token {
        kind: Identifier,
        lexeme: "__gc",
        computed_lexeme: None,
        line: 236,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 236,
    },
    Token {
        kind: Function,
        lexeme: "function",
        computed_lexeme: None,
        line: 236,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 236,
    },
    Token {
        kind: Identifier,
        lexeme: "o",
        computed_lexeme: None,
        line: 236,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 236,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        computed_lexeme: None,
        line: 236,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 236,
    },
    Token {
        kind: Identifier,
        lexeme: "exit",
        computed_lexeme: None,
        line: 236,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 236,
    },
    Token {
        kind: Number,
        lexeme: "(1",
        computed_lexeme: Some(
            "1",
        ),
        line: 236,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 236,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 236,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        computed_lexeme: None,
        line: 237,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 237,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 237,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        computed_lexeme: None,
        line: 239,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: "newproxy",
        computed_lexeme: None,
        line: 239,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 239,
    },
    Token {
        kind: True,
        lexeme: "true",
        computed_lexeme: None,
        line: 239,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 239,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 240,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        computed_lexeme: None,
        line: 240,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 240,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        computed_lexeme: None,
        line: 240,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 240,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        computed_lexeme: None,
        line: 240,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 240,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        computed_lexeme: None,
        line: 241,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        computed_lexeme: None,
        line: 241,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 241,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 241,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 241,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 241,
    },
    Token {
        kind: Number,
        lexeme: "{0",
        computed_lexeme: Some(
            "0",
        ),
        line: 241,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 241,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 241,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 241,
    },
    Token {
        kind: Number,
        lexeme: " 1",
        computed_lexeme: Some(
            "1",
        ),
        line: 241,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        computed_lexeme: None,
        line: 241,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 241,
    },
    Token {
        kind: Number,
        lexeme: "[0",
        computed_lexeme: Some(
            "0",
        ),
        line: 241,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 241,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 241,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 241,
    },
    Token {
        kind: Number,
        lexeme: "{1",
        computed_lexeme: Some(
            "1",
        ),
        line: 241,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 241,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 241,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        computed_lexeme: None,
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        computed_lexeme: None,
        line: 241,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        computed_lexeme: None,
        line: 241,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        computed_lexeme: None,
        line: 241,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 241,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: "__mode",
        computed_lexeme: None,
        line: 241,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 241,
    },
    Token {
        kind: String,
        lexeme: "\"kv\"",
        computed_lexeme: None,
        line: 241,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 241,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 241,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        computed_lexeme: None,
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        computed_lexeme: None,
        line: 242,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 242,
    },
    Token {
        kind: Identifier,
        lexeme: "__gc",
        computed_lexeme: None,
        line: 242,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 242,
    },
    Token {
        kind: Function,
        lexeme: "function",
        computed_lexeme: None,
        line: 242,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 242,
    },
    Token {
        kind: Identifier,
        lexeme: "o",
        computed_lexeme: None,
        line: 242,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 242,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 243,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        computed_lexeme: None,
        line: 243,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        computed_lexeme: None,
        line: 243,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: "o",
        computed_lexeme: None,
        line: 243,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 243,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        computed_lexeme: None,
        line: 243,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 243,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 243,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        computed_lexeme: None,
        line: 243,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        computed_lexeme: None,
        line: 244,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 244,
    },
    Token {
        kind: Number,
        lexeme: " 10",
        computed_lexeme: Some(
            "10",
        ),
        line: 244,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        computed_lexeme: None,
        line: 246,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        computed_lexeme: None,
        line: 246,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 246,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        computed_lexeme: None,
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        computed_lexeme: None,
        line: 247,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 247,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 248,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        computed_lexeme: None,
        line: 248,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 248,
    },
    Token {
        kind: Number,
        lexeme: "=10",
        computed_lexeme: Some(
            "10",
        ),
        line: 248,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        computed_lexeme: None,
        line: 252,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: "newproxy",
        computed_lexeme: None,
        line: 252,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 252,
    },
    Token {
        kind: True,
        lexeme: "true",
        computed_lexeme: None,
        line: 252,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        computed_lexeme: None,
        line: 253,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        computed_lexeme: None,
        line: 253,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 253,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: "__gc",
        computed_lexeme: None,
        line: 253,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 253,
    },
    Token {
        kind: Function,
        lexeme: "function",
        computed_lexeme: None,
        line: 253,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 253,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: "error",
        computed_lexeme: None,
        line: 253,
    },
    Token {
        kind: String,
        lexeme: "\"!!!\"",
        computed_lexeme: None,
        line: 253,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        computed_lexeme: None,
        line: 254,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 254,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        computed_lexeme: None,
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 255,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 255,
    },
    Token {
        kind: Not,
        lexeme: "not",
        computed_lexeme: None,
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        computed_lexeme: None,
        line: 255,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        computed_lexeme: None,
        line: 255,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 255,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 255,
    },
    Token {
        kind: If,
        lexeme: "if",
        computed_lexeme: None,
        line: 258,
    },
    Token {
        kind: Not,
        lexeme: "not",
        computed_lexeme: None,
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: "rawget",
        computed_lexeme: None,
        line: 258,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        computed_lexeme: None,
        line: 258,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 258,
    },
    Token {
        kind: String,
        lexeme: "\"_soft\"",
        computed_lexeme: None,
        line: 258,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 258,
    },
    Token {
        kind: Then,
        lexeme: "then",
        computed_lexeme: None,
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        computed_lexeme: None,
        line: 259,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 259,
    },
    Token {
        kind: String,
        lexeme: "\"deep structures\"",
        computed_lexeme: None,
        line: 259,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 259,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 260,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 260,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 260,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 260,
    },
    Token {
        kind: For,
        lexeme: "for",
        computed_lexeme: None,
        line: 261,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 261,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 261,
    },
    Token {
        kind: Number,
        lexeme: " 1",
        computed_lexeme: Some(
            "1",
        ),
        line: 261,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 261,
    },
    Token {
        kind: Number,
        lexeme: ",200000",
        computed_lexeme: Some(
            "200000",
        ),
        line: 261,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 261,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 262,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 262,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        computed_lexeme: None,
        line: 262,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 262,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 262,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        computed_lexeme: None,
        line: 264,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 264,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 264,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 265,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 268,
    },
    Token {
        kind: Identifier,
        lexeme: "thread_id",
        computed_lexeme: None,
        line: 268,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 268,
    },
    Token {
        kind: Number,
        lexeme: " 0",
        computed_lexeme: Some(
            "0",
        ),
        line: 268,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: "threads",
        computed_lexeme: None,
        line: 269,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 269,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 269,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 269,
    },
    Token {
        kind: Function,
        lexeme: "function",
        computed_lexeme: None,
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: "fn",
        computed_lexeme: None,
        line: 271,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: "thread",
        computed_lexeme: None,
        line: 271,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 271,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 272,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        computed_lexeme: None,
        line: 272,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 272,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 272,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 272,
    },
    Token {
        kind: Identifier,
        lexeme: "threads",
        computed_lexeme: None,
        line: 273,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        computed_lexeme: None,
        line: 273,
    },
    Token {
        kind: Identifier,
        lexeme: "thread_id",
        computed_lexeme: None,
        line: 273,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        computed_lexeme: None,
        line: 273,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 273,
    },
    Token {
        kind: Function,
        lexeme: "function",
        computed_lexeme: None,
        line: 273,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 273,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 273,
    },
    Token {
        kind: Identifier,
        lexeme: "thread",
        computed_lexeme: None,
        line: 274,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 274,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        computed_lexeme: None,
        line: 274,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 275,
    },
    Token {
        kind: Identifier,
        lexeme: "coroutine",
        computed_lexeme: None,
        line: 276,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: "yield",
        computed_lexeme: None,
        line: 276,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 276,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 276,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 277,
    },
    Token {
        kind: While,
        lexeme: "while",
        computed_lexeme: None,
        line: 279,
    },
    Token {
        kind: Identifier,
        lexeme: "thread_id",
        computed_lexeme: None,
        line: 279,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        computed_lexeme: None,
        line: 279,
    },
    Token {
        kind: Number,
        lexeme: " 1000",
        computed_lexeme: Some(
            "1000",
        ),
        line: 279,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 279,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 280,
    },
    Token {
        kind: Identifier,
        lexeme: "thread",
        computed_lexeme: None,
        line: 280,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 280,
    },
    Token {
        kind: Identifier,
        lexeme: "coroutine",
        computed_lexeme: None,
        line: 280,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 280,
    },
    Token {
        kind: Identifier,
        lexeme: "create",
        computed_lexeme: None,
        line: 280,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 280,
    },
    Token {
        kind: Identifier,
        lexeme: "fn",
        computed_lexeme: None,
        line: 280,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 280,
    },
    Token {
        kind: Identifier,
        lexeme: "coroutine",
        computed_lexeme: None,
        line: 281,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: "resume",
        computed_lexeme: None,
        line: 281,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: "thread",
        computed_lexeme: None,
        line: 281,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: "thread",
        computed_lexeme: None,
        line: 281,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: "thread_id",
        computed_lexeme: None,
        line: 282,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 282,
    },
    Token {
        kind: Identifier,
        lexeme: "thread_id",
        computed_lexeme: None,
        line: 282,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        computed_lexeme: None,
        line: 282,
    },
    Token {
        kind: Number,
        lexeme: " 1",
        computed_lexeme: Some(
            "1",
        ),
        line: 282,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 283,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 288,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: "newproxy",
        computed_lexeme: None,
        line: 289,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 289,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        computed_lexeme: None,
        line: 289,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        computed_lexeme: None,
        line: 289,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        computed_lexeme: None,
        line: 289,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: "newproxy",
        computed_lexeme: None,
        line: 290,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 290,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 290,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 290,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        computed_lexeme: None,
        line: 290,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 290,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        computed_lexeme: None,
        line: 290,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 290,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        computed_lexeme: None,
        line: 290,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 291,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        computed_lexeme: None,
        line: 291,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 291,
    },
    Token {
        kind: Identifier,
        lexeme: "newproxy",
        computed_lexeme: None,
        line: 291,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 291,
    },
    Token {
        kind: True,
        lexeme: "true",
        computed_lexeme: None,
        line: 291,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 291,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 292,
    },
    Token {
        kind: Identifier,
        lexeme: "tt",
        computed_lexeme: None,
        line: 292,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 292,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        computed_lexeme: None,
        line: 292,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 292,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        computed_lexeme: None,
        line: 292,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 292,
    },
    Token {
        kind: Identifier,
        lexeme: "___Glob",
        computed_lexeme: None,
        line: 293,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 293,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 293,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        computed_lexeme: None,
        line: 293,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 293,
    },
    Token {
        kind: Identifier,
        lexeme: "tt",
        computed_lexeme: None,
        line: 294,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: "__gc",
        computed_lexeme: None,
        line: 294,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 294,
    },
    Token {
        kind: Function,
        lexeme: "function",
        computed_lexeme: None,
        line: 294,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: "o",
        computed_lexeme: None,
        line: 294,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        computed_lexeme: None,
        line: 295,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 295,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        computed_lexeme: None,
        line: 295,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 295,
    },
    Token {
        kind: Identifier,
        lexeme: "o",
        computed_lexeme: None,
        line: 295,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 295,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        computed_lexeme: None,
        line: 295,
    },
    Token {
        kind: Identifier,
        lexeme: "tt",
        computed_lexeme: None,
        line: 295,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 295,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        computed_lexeme: None,
        line: 297,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 297,
    },
    Token {
        kind: String,
        lexeme: "'xuxu'",
        computed_lexeme: None,
        line: 297,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        computed_lexeme: None,
        line: 297,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 297,
    },
    Token {
        kind: Number,
        lexeme: "(10",
        computed_lexeme: Some(
            "10",
        ),
        line: 297,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        computed_lexeme: None,
        line: 297,
    },
    Token {
        kind: Number,
        lexeme: "+3",
        computed_lexeme: Some(
            "3",
        ),
        line: 297,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 297,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        computed_lexeme: None,
        line: 297,
    },
    Token {
        kind: String,
        lexeme: "'joao'",
        computed_lexeme: None,
        line: 297,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 297,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        computed_lexeme: None,
        line: 297,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        computed_lexeme: None,
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: "___Glob",
        computed_lexeme: None,
        line: 298,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 298,
    },
    Token {
        kind: Identifier,
        lexeme: "o",
        computed_lexeme: None,
        line: 298,
    },
    Token {
        kind: Identifier,
        lexeme: "newproxy",
        computed_lexeme: None,
        line: 299,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 299,
    },
    Token {
        kind: Identifier,
        lexeme: "o",
        computed_lexeme: None,
        line: 299,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 299,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        computed_lexeme: None,
        line: 300,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 300,
    },
    Token {
        kind: String,
        lexeme: "\">>> closing state \"",
        computed_lexeme: None,
        line: 300,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        computed_lexeme: None,
        line: 300,
    },
    Token {
        kind: String,
        lexeme: "\"<<<\\n\"",
        computed_lexeme: None,
        line: 300,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 300,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 301,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 302,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 305,
    },
    Token {
        kind: Local,
        lexeme: "local",
        computed_lexeme: None,
        line: 306,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        computed_lexeme: None,
        line: 306,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 306,
    },
    Token {
        kind: Identifier,
        lexeme: "newproxy",
        computed_lexeme: None,
        line: 306,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 306,
    },
    Token {
        kind: True,
        lexeme: "true",
        computed_lexeme: None,
        line: 306,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 306,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        computed_lexeme: None,
        line: 307,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 307,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        computed_lexeme: None,
        line: 307,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 307,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 307,
    },
    Token {
        kind: Identifier,
        lexeme: "__gc",
        computed_lexeme: None,
        line: 307,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 307,
    },
    Token {
        kind: Function,
        lexeme: "function",
        computed_lexeme: None,
        line: 307,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 307,
    },
    Token {
        kind: Identifier,
        lexeme: "o",
        computed_lexeme: None,
        line: 307,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 307,
    },
    Token {
        kind: Return,
        lexeme: "return",
        computed_lexeme: None,
        line: 307,
    },
    Token {
        kind: Identifier,
        lexeme: "o",
        computed_lexeme: None,
        line: 307,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        computed_lexeme: None,
        line: 307,
    },
    Token {
        kind: Number,
        lexeme: " 1",
        computed_lexeme: Some(
            "1",
        ),
        line: 307,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 307,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        computed_lexeme: None,
        line: 308,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 308,
    },
    Token {
        kind: Identifier,
        lexeme: "insert",
        computed_lexeme: None,
        line: 308,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 308,
    },
    Token {
        kind: Identifier,
        lexeme: "___Glob",
        computed_lexeme: None,
        line: 308,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 308,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        computed_lexeme: None,
        line: 308,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 308,
    },
    Token {
        kind: For,
        lexeme: "for",
        computed_lexeme: None,
        line: 309,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        computed_lexeme: None,
        line: 309,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        computed_lexeme: None,
        line: 309,
    },
    Token {
        kind: Number,
        lexeme: " 1",
        computed_lexeme: Some(
            "1",
        ),
        line: 309,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 309,
    },
    Token {
        kind: Number,
        lexeme: ",10",
        computed_lexeme: Some(
            "10",
        ),
        line: 309,
    },
    Token {
        kind: Do,
        lexeme: "do",
        computed_lexeme: None,
        line: 309,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        computed_lexeme: None,
        line: 309,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        computed_lexeme: None,
        line: 309,
    },
    Token {
        kind: Identifier,
        lexeme: "insert",
        computed_lexeme: None,
        line: 309,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 309,
    },
    Token {
        kind: Identifier,
        lexeme: "___Glob",
        computed_lexeme: None,
        line: 309,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        computed_lexeme: None,
        line: 309,
    },
    Token {
        kind: Identifier,
        lexeme: "newproxy",
        computed_lexeme: None,
        line: 309,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 309,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        computed_lexeme: None,
        line: 309,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 309,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 309,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 309,
    },
    Token {
        kind: End,
        lexeme: "end",
        computed_lexeme: None,
        line: 310,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        computed_lexeme: None,
        line: 312,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        computed_lexeme: None,
        line: 312,
    },
    Token {
        kind: String,
        lexeme: "'OK'",
        computed_lexeme: None,
        line: 312,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        computed_lexeme: None,
        line: 312,
    },
]
