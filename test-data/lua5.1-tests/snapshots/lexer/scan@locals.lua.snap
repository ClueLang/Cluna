---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.1-tests/locals.lua
---
[
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 1,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 1,
    },
    Token {
        kind: String,
        lexeme: "'testing local variables plus some extra stuff'",
        line: 1,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 1,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 3,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 4,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 4,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 4,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 4,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 5,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 5,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 5,
    },
    Token {
        kind: Number,
        lexeme: "100",
        line: 5,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 5,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 5,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 5,
    },
    Token {
        kind: Number,
        lexeme: "100",
        line: 5,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 5,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 5,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 6,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 6,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 6,
    },
    Token {
        kind: Number,
        lexeme: "1000",
        line: 6,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 6,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 6,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 6,
    },
    Token {
        kind: Number,
        lexeme: "1000",
        line: 6,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 6,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 7,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 7,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 7,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 7,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 7,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 8,
    },
    Token {
        kind: NotEquals,
        lexeme: " ~",
        line: 8,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 8,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 8,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 8,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 9,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 9,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 9,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 10,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 11,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 11,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 12,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 12,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 12,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 12,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 12,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 13,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 18,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 18,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 18,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 21,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 21,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 23,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 23,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 24,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 24,
    },
    Token {
        kind: String,
        lexeme: "'local a = {}'",
        line: 24,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 24,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 24,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 25,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 25,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 25,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 25,
    },
    Token {
        kind: NotEquals,
        lexeme: " ~",
        line: 25,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 25,
    },
    Token {
        kind: String,
        lexeme: "'table'",
        line: 25,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 25,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 27,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 27,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 27,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "_1",
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "_2",
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "_3",
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "_4",
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "_5",
        line: 28,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "_6",
        line: 29,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "_7",
        line: 29,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "_8",
        line: 29,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "_9",
        line: 29,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "_10",
        line: 29,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 30,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 30,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 30,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 31,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 31,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 32,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 32,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 32,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 32,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 33,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 33,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 33,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 33,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 33,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 34,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 34,
    },
    Token {
        kind: String,
        lexeme: "'q'",
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 35,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 36,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 36,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 36,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 36,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 36,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 38,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 38,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 38,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 38,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 40,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 40,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 40,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 40,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 40,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 41,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 41,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 41,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 42,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 44,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 44,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 44,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 45,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 45,
    },
    Token {
        kind: Repeat,
        lexeme: "repeat",
        line: 45,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 45,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 45,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 45,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 45,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 45,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 45,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 45,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 45,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 45,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 45,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 45,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 45,
    },
    Token {
        kind: Until,
        lexeme: "until",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 45,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 45,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 45,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 48,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 48,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 48,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 48,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 50,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 50,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 50,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 51,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 51,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 51,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 51,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 51,
    },
    Token {
        kind: String,
        lexeme: "'function'",
        line: 51,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 51,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 55,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 56,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 56,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 56,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 56,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 57,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 57,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 58,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 58,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 58,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 58,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 58,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 58,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 58,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 58,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 58,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 58,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 58,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 58,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 58,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 58,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 58,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 58,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 58,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 58,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "getfenv",
        line: 58,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 58,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 58,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 58,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 59,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 59,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 59,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 59,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 59,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 59,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 59,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 59,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 59,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 59,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 59,
    },
    Token {
        kind: Number,
        lexeme: "11",
        line: 59,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 59,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 60,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 60,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 60,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 60,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "setfenv",
        line: 60,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 60,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 60,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 60,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 60,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 60,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 60,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 60,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 60,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 60,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 60,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 60,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 60,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 61,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 61,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 61,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 61,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 61,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 61,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 61,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 61,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 61,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 61,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 61,
    },
    Token {
        kind: Number,
        lexeme: "11",
        line: 61,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 61,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 62,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 62,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 62,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 62,
    },
    Token {
        kind: Number,
        lexeme: "8",
        line: 62,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 62,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 62,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 62,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 63,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 63,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 63,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 63,
    },
    Token {
        kind: Number,
        lexeme: "9",
        line: 63,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 64,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 64,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 64,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 64,
    },
    Token {
        kind: Number,
        lexeme: "8",
        line: 64,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 64,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 64,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 64,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 65,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 65,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 65,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 65,
    },
    Token {
        kind: Number,
        lexeme: "11",
        line: 65,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 65,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "g",
        line: 66,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 67,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 67,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 67,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 67,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "setfenv",
        line: 67,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 67,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 67,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 67,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 67,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 67,
    },
    Token {
        kind: String,
        lexeme: "'10'",
        line: 67,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 67,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 67,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "g",
        line: 67,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 67,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "g",
        line: 68,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 68,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 68,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 68,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 68,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 68,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 68,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 68,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "getfenv",
        line: 68,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 68,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 68,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 68,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 68,
    },
    Token {
        kind: String,
        lexeme: "'10'",
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 68,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "g",
        line: 69,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 69,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 69,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 69,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "getfenv",
        line: 69,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "g",
        line: 69,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 69,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 69,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 69,
    },
    Token {
        kind: String,
        lexeme: "'10'",
        line: 69,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 69,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 70,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 73,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "foo",
        line: 73,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 73,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 73,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 74,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 74,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 74,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 77,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "getfenv",
        line: 77,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "foo",
        line: 77,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 77,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 77,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 77,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 77,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 77,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 77,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 78,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 78,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 78,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 78,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "setfenv",
        line: 79,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "foo",
        line: 79,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 79,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "getfenv",
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "foo",
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 80,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 80,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "setfenv",
        line: 81,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 81,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 81,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 81,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 82,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: "getfenv",
        line: 82,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: "foo",
        line: 82,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 82,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 82,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 82,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 82,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 82,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: "setfenv",
        line: 83,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 83,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 83,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 83,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 83,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 88,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 89,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 89,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 89,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 90,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 90,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 90,
    },
    Token {
        kind: Number,
        lexeme: "31",
        line: 90,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 90,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 91,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 91,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 91,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 91,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 91,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 91,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 92,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 92,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 92,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 92,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 92,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[local a=%s;a=a+\n                                            %s;\n                                      assert(a\n                                      ==2^%s)]]",
        line: 95,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 95,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 95,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 95,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 95,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 95,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 95,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 95,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 95,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 96,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 96,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 96,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 96,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 96,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[local a=%s;\n                                      a=a-%s;\n                                      assert(a==-2^%s)]]",
        line: 98,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 98,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 98,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 98,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 98,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 98,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 98,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 98,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 98,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 98,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 99,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 99,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 99,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 99,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 99,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[local a,b=0,%s;\n                                      a=b-%s;\n                                      assert(a==-2^%s)]]",
        line: 101,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 101,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 101,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 101,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 101,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 101,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 101,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 101,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 101,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 101,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 101,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 103,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 103,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 103,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 103,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 106,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 106,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "rawget",
        line: 109,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 109,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 109,
    },
    Token {
        kind: String,
        lexeme: "\"querytab\"",
        line: 109,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 109,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 111,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 111,
    },
    Token {
        kind: String,
        lexeme: "\"stop\"",
        line: 111,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 111,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 112,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 112,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 112,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 112,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 112,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 112,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 112,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 112,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 112,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 112,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 112,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 112,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 112,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 112,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 112,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: "alo",
        line: 112,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 112,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 112,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: "a1234567890123456789012345678901234567890",
        line: 113,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 113,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 113,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 113,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 115,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "querytab",
        line: 115,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 115,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 115,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 117,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "_",
        line: 117,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        line: 117,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 117,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 117,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 117,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 117,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 117,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 117,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 117,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 118,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 118,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 118,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 119,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 119,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 119,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 119,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 119,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 119,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 119,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 120,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "querytab",
        line: 120,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 120,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 120,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 121,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 121,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 121,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 121,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 121,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 121,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 121,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 121,
    },
    Token {
        kind: String,
        lexeme: "'number'",
        line: 121,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 121,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 121,
    },
    Token {
        kind: String,
        lexeme: "'alo'",
        line: 121,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 121,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 122,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 125,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 125,
    },
    Token {
        kind: String,
        lexeme: "'OK'",
        line: 125,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 125,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 127,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 127,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 127,
    },
]
