---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.1-tests/vararg.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 1,
        column: 5,
        span: 0..5,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1,
        column: 6,
        span: 5..6,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing vararg'",
        ),
        line: 1,
        column: 22,
        span: 6..22,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1,
        column: 23,
        span: 22..23,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 3,
        column: 3,
        span: 25..27,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 3,
        column: 4,
        span: 27..28,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 3,
        column: 7,
        span: 28..31,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 3,
        column: 9,
        span: 32..33,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 3,
        column: 0,
        span: 34..37,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 5,
        column: 9,
        span: 39..47,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 5,
        column: 11,
        span: 48..49,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 5,
        column: 12,
        span: 49..50,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 5,
        column: 13,
        span: 50..51,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 5,
        column: 14,
        span: 51..52,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 5,
        column: 18,
        span: 53..56,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 5,
        column: 19,
        span: 56..57,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 6,
        column: 9,
        span: 60..66,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 6,
        column: 10,
        span: 66..67,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 6,
        column: 14,
        span: 67..71,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 6,
        column: 15,
        span: 71..72,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 6,
        column: 18,
        span: 72..75,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 6,
        column: 19,
        span: 75..76,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 6,
        column: 22,
        span: 77..79,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        line: 6,
        column: 30,
        span: 80..87,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 6,
        column: 31,
        span: 87..88,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 7,
        column: 9,
        span: 91..97,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 7,
        column: 10,
        span: 97..98,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 7,
        column: 14,
        span: 98..102,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 7,
        column: 15,
        span: 102..103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 7,
        column: 18,
        span: 103..106,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 7,
        column: 19,
        span: 106..107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 7,
        column: 20,
        span: 107..108,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 7,
        column: 21,
        span: 108..109,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 7,
        column: 24,
        span: 110..112,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'number'",
        ),
        line: 7,
        column: 33,
        span: 113..121,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 7,
        column: 34,
        span: 121..122,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 8,
        column: 6,
        span: 125..128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 8,
        column: 8,
        span: 129..130,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 8,
        column: 9,
        span: 130..131,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 8,
        column: 10,
        span: 130..132,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 8,
        column: 11,
        span: 132..133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 8,
        column: 14,
        span: 133..136,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 8,
        column: 15,
        span: 136..137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 8,
        column: 16,
        span: 137..138,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 8,
        column: 19,
        span: 139..141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 8,
        column: 26,
        span: 142..148,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 27,
        span: 148..149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 8,
        column: 28,
        span: 149..150,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 8,
        column: 29,
        span: 150..151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 8,
        column: 30,
        span: 151..152,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 8,
        column: 31,
        span: 152..153,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 8,
        column: 33,
        span: 153..155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 8,
        column: 36,
        span: 155..158,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 8,
        column: 37,
        span: 158..159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 8,
        column: 38,
        span: 159..160,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 8,
        column: 39,
        span: 160..161,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 40,
        span: 161..162,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 8,
        column: 0,
        span: 163..166,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 9,
        column: 9,
        span: 169..175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 9,
        column: 13,
        span: 176..179,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 9,
        column: 14,
        span: 179..180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 9,
        column: 0,
        span: 180..181,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 10,
        column: 0,
        span: 182..185,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 12,
        column: 9,
        span: 187..195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c12",
        ),
        line: 12,
        column: 13,
        span: 196..199,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 15,
        span: 200..201,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 12,
        column: 18,
        span: 201..204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 19,
        span: 204..205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 13,
        column: 9,
        span: 208..214,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 13,
        column: 10,
        span: 214..215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 13,
        column: 13,
        span: 215..218,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 13,
        column: 16,
        span: 219..221,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 13,
        column: 20,
        span: 222..225,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 13,
        column: 21,
        span: 225..226,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 14,
        column: 8,
        span: 229..234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 14,
        column: 10,
        span: 235..236,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 14,
        column: 12,
        span: 237..238,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 14,
        column: 14,
        span: 239..240,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 14,
        column: 17,
        span: 240..243,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 14,
        column: 18,
        span: 243..244,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 14,
        column: 19,
        span: 244..245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 14,
        column: 21,
        span: 246..247,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 14,
        column: 22,
        span: 247..248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 14,
        column: 23,
        span: 248..249,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 14,
        column: 25,
        span: 250..251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 14,
        column: 31,
        span: 252..257,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 14,
        column: 32,
        span: 257..258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        line: 14,
        column: 36,
        span: 258..262,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 14,
        column: 37,
        span: 262..263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 14,
        column: 38,
        span: 263..264,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 14,
        column: 39,
        span: 264..265,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 15,
        column: 8,
        span: 268..273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 15,
        column: 12,
        span: 274..277,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 15,
        column: 14,
        span: 278..279,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
        column: 16,
        span: 280..281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 15,
        column: 17,
        span: 281..282,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 15,
        column: 18,
        span: 282..283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 15,
        column: 19,
        span: 283..284,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 15,
        column: 21,
        span: 284..286,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 15,
        column: 22,
        span: 285..287,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 15,
        column: 26,
        span: 288..291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 15,
        column: 28,
        span: 292..293,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 15,
        column: 29,
        span: 293..294,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 15,
        column: 30,
        span: 293..295,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 15,
        column: 31,
        span: 295..296,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 15,
        column: 34,
        span: 297..299,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 15,
        column: 36,
        span: 299..301,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 15,
        column: 40,
        span: 302..305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 15,
        column: 42,
        span: 306..307,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 15,
        column: 43,
        span: 307..308,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 15,
        column: 44,
        span: 307..309,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 15,
        column: 45,
        span: 309..310,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 15,
        column: 48,
        span: 311..313,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 15,
        column: 50,
        span: 313..315,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
        column: 51,
        span: 315..316,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 16,
        column: 5,
        span: 319..321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 16,
        column: 9,
        span: 322..325,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 16,
        column: 14,
        span: 326..330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 16,
        column: 18,
        span: 331..334,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 16,
        column: 20,
        span: 335..336,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "55",
                    after_decimal: "",
                },
            ),
        ),
        line: 16,
        column: 23,
        span: 336..339,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 16,
        column: 0,
        span: 340..343,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 17,
        column: 9,
        span: 346..352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 17,
        column: 13,
        span: 353..356,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 17,
        column: 14,
        span: 356..357,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 17,
        column: 0,
        span: 357..359,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 18,
        column: 0,
        span: 360..363,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 20,
        column: 9,
        span: 365..373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "vararg",
        ),
        line: 20,
        column: 16,
        span: 374..380,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 18,
        span: 381..382,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 20,
        column: 21,
        span: 382..385,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 22,
        span: 385..386,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 20,
        column: 29,
        span: 387..393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 20,
        column: 33,
        span: 394..397,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 20,
        column: 0,
        span: 398..401,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 22,
        column: 6,
        span: 403..408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 22,
        column: 11,
        span: 409..413,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 22,
        column: 13,
        span: 414..415,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 22,
        column: 22,
        span: 416..424,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 24,
        span: 425..426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 22,
        column: 25,
        span: 426..427,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 22,
        column: 26,
        span: 427..428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "args",
        ),
        line: 22,
        column: 31,
        span: 429..433,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 32,
        span: 433..434,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 22,
        column: 39,
        span: 435..441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 22,
        column: 41,
        span: 442..443,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 42,
        span: 443..444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 22,
        column: 48,
        span: 444..450,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 49,
        span: 450..451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "args",
        ),
        line: 22,
        column: 53,
        span: 451..455,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 22,
        column: 54,
        span: 455..456,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 22,
        column: 56,
        span: 456..458,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 22,
        column: 57,
        span: 458..459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "args",
        ),
        line: 22,
        column: 62,
        span: 460..464,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 22,
        column: 63,
        span: 464..465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 22,
        column: 64,
        span: 465..466,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 65,
        span: 466..467,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 66,
        span: 467..468,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 22,
        column: 0,
        span: 469..472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 24,
        column: 7,
        span: 474..480,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 24,
        column: 8,
        span: 480..481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 24,
        column: 9,
        span: 481..482,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 24,
        column: 10,
        span: 482..483,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 24,
        column: 11,
        span: 483..484,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 24,
        column: 14,
        span: 485..487,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 24,
        column: 16,
        span: 487..489,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 24,
        column: 17,
        span: 489..490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 25,
        column: 7,
        span: 491..497,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 8,
        span: 497..498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 25,
        column: 9,
        span: 498..499,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 10,
        span: 499..500,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 25,
        column: 11,
        span: 500..501,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 12,
        span: 500..502,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 13,
        span: 502..503,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 14,
        span: 502..504,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 15,
        span: 504..505,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 16,
        span: 504..506,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 25,
        column: 17,
        span: 506..507,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 18,
        span: 507..508,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 20,
        span: 508..510,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 21,
        span: 510..511,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 23,
        span: 511..513,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 24,
        span: 513..514,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 26,
        span: 514..516,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 27,
        span: 516..517,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 25,
        column: 30,
        span: 518..520,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 32,
        span: 520..522,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 33,
        span: 522..523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 26,
        column: 7,
        span: 524..530,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
        column: 8,
        span: 530..531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 26,
        column: 9,
        span: 531..532,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
        column: 10,
        span: 532..533,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 26,
        column: 11,
        span: 533..534,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 26,
        column: 16,
        span: 534..539,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 17,
        span: 539..540,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 26,
        column: 21,
        span: 541..544,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 22,
        span: 544..545,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "45",
                    after_decimal: "",
                },
            ),
        ),
        line: 26,
        column: 25,
        span: 545..548,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 26,
        span: 548..549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 26,
        column: 28,
        span: 550..551,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 29,
        span: 551..552,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 26,
        column: 33,
        span: 553..556,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 26,
        column: 34,
        span: 556..557,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 35,
        span: 557..558,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 26,
        column: 41,
        span: 559..564,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 42,
        span: 564..565,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 26,
        column: 46,
        span: 566..569,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 47,
        span: 569..570,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "45",
                    after_decimal: "",
                },
            ),
        ),
        line: 26,
        column: 50,
        span: 570..573,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 51,
        span: 573..574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 26,
        column: 53,
        span: 575..576,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 54,
        span: 576..577,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 26,
        column: 58,
        span: 578..581,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
        column: 59,
        span: 581..582,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 26,
        column: 62,
        span: 583..585,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 26,
        column: 64,
        span: 585..587,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
        column: 65,
        span: 587..588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 28,
        column: 7,
        span: 590..596,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 8,
        span: 596..597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c12",
        ),
        line: 28,
        column: 11,
        span: 597..600,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 12,
        span: 600..601,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 28,
        column: 13,
        span: 600..602,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 28,
        column: 14,
        span: 602..603,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 28,
        column: 15,
        span: 602..604,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 16,
        span: 604..605,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 28,
        column: 18,
        span: 605..607,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "55",
                    after_decimal: "",
                },
            ),
        ),
        line: 28,
        column: 20,
        span: 606..609,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 21,
        span: 609..610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 29,
        column: 2,
        span: 611..612,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 29,
        column: 3,
        span: 612..613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 29,
        column: 4,
        span: 613..614,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 29,
        column: 6,
        span: 615..616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 29,
        column: 13,
        span: 617..623,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
        column: 14,
        span: 623..624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 29,
        column: 18,
        span: 624..628,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
        column: 19,
        span: 628..629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c12",
        ),
        line: 29,
        column: 22,
        span: 629..632,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 29,
        column: 23,
        span: 632..633,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 29,
        column: 25,
        span: 634..635,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 29,
        column: 26,
        span: 634..636,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 29,
        column: 27,
        span: 636..637,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 29,
        column: 28,
        span: 636..638,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 29,
        column: 29,
        span: 638..639,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
        column: 30,
        span: 639..640,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
        column: 31,
        span: 640..641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 30,
        column: 7,
        span: 642..648,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 8,
        span: 648..649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 30,
        column: 9,
        span: 649..650,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 30,
        column: 12,
        span: 651..653,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "55",
                    after_decimal: "",
                },
            ),
        ),
        line: 30,
        column: 15,
        span: 653..656,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 30,
        column: 19,
        span: 657..660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 30,
        column: 21,
        span: 661..662,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 30,
        column: 24,
        span: 663..665,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 30,
        column: 26,
        span: 665..667,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 27,
        span: 667..668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 31,
        column: 2,
        span: 669..670,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 31,
        column: 4,
        span: 671..672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 31,
        column: 9,
        span: 673..677,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 10,
        span: 677..678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c12",
        ),
        line: 31,
        column: 13,
        span: 678..681,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 31,
        column: 14,
        span: 681..682,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 31,
        column: 16,
        span: 683..684,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 31,
        column: 17,
        span: 683..685,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 31,
        column: 18,
        span: 685..686,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 31,
        column: 19,
        span: 685..687,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 31,
        column: 20,
        span: 687..688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 31,
        column: 21,
        span: 688..689,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 31,
        column: 22,
        span: 689..690,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 31,
        column: 23,
        span: 689..691,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 31,
        column: 24,
        span: 691..692,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 25,
        span: 692..693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 32,
        column: 7,
        span: 694..700,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 8,
        span: 700..701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 32,
        column: 9,
        span: 701..702,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 32,
        column: 12,
        span: 703..705,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "55",
                    after_decimal: "",
                },
            ),
        ),
        line: 32,
        column: 15,
        span: 705..708,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 32,
        column: 19,
        span: 709..712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 32,
        column: 21,
        span: 713..714,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 32,
        column: 24,
        span: 715..717,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 32,
        column: 26,
        span: 717..719,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 27,
        span: 719..720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 33,
        column: 2,
        span: 721..722,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 33,
        column: 4,
        span: 723..724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 33,
        column: 9,
        span: 725..729,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 10,
        span: 729..730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c12",
        ),
        line: 33,
        column: 13,
        span: 730..733,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 33,
        column: 14,
        span: 733..734,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 33,
        column: 16,
        span: 735..736,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 33,
        column: 17,
        span: 735..737,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 33,
        column: 18,
        span: 737..738,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 33,
        column: 19,
        span: 737..739,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 33,
        column: 20,
        span: 739..740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 33,
        column: 21,
        span: 740..741,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 33,
        column: 22,
        span: 741..742,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 33,
        column: 23,
        span: 741..743,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 33,
        column: 24,
        span: 743..744,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 25,
        span: 744..745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 34,
        column: 7,
        span: 746..752,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 8,
        span: 752..753,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 34,
        column: 11,
        span: 753..756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 34,
        column: 13,
        span: 757..758,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 14,
        span: 758..759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 35,
        column: 7,
        span: 760..766,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 8,
        span: 766..767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c12",
        ),
        line: 35,
        column: 11,
        span: 767..770,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 12,
        span: 770..771,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 35,
        column: 13,
        span: 770..772,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 35,
        column: 14,
        span: 772..773,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 35,
        column: 15,
        span: 772..774,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 35,
        column: 16,
        span: 774..775,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 35,
        column: 17,
        span: 774..776,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 18,
        span: 776..777,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 35,
        column: 21,
        span: 778..780,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 35,
        column: 27,
        span: 781..786,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 28,
        span: 786..787,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 36,
        column: 6,
        span: 788..793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 36,
        column: 8,
        span: 794..795,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 36,
        column: 10,
        span: 796..797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "vararg",
        ),
        line: 36,
        column: 17,
        span: 798..804,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 18,
        span: 804..805,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 36,
        column: 22,
        span: 805..809,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 23,
        span: 809..810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 36,
        column: 27,
        span: 810..814,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 36,
        column: 28,
        span: 814..815,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 36,
        column: 30,
        span: 816..817,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 36,
        column: 32,
        span: 817..819,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 36,
        column: 33,
        span: 819..820,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 36,
        column: 36,
        span: 820..823,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 36,
        column: 37,
        span: 823..824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 36,
        column: 38,
        span: 824..825,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 36,
        column: 39,
        span: 825..826,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 36,
        column: 40,
        span: 825..827,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 36,
        column: 41,
        span: 827..828,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 42,
        span: 828..829,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 43,
        span: 829..830,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 37,
        column: 6,
        span: 831..836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 37,
        column: 8,
        span: 837..838,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 37,
        column: 9,
        span: 838..839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 37,
        column: 10,
        span: 839..840,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 37,
        column: 12,
        span: 841..842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 37,
        column: 17,
        span: 843..847,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 18,
        span: 847..848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 37,
        column: 20,
        span: 848..850,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 21,
        span: 850..851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 38,
        column: 7,
        span: 852..858,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 8,
        span: 858..859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 38,
        column: 9,
        span: 859..860,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 38,
        column: 10,
        span: 860..861,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 38,
        column: 11,
        span: 860..862,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 38,
        column: 12,
        span: 862..863,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 38,
        column: 15,
        span: 864..866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 38,
        column: 17,
        span: 867..868,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 38,
        column: 21,
        span: 869..872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 38,
        column: 23,
        span: 873..874,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 38,
        column: 24,
        span: 874..875,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 38,
        column: 25,
        span: 874..876,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 38,
        column: 26,
        span: 876..877,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 38,
        column: 29,
        span: 878..880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 38,
        column: 31,
        span: 881..882,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 38,
        column: 35,
        span: 883..886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 38,
        column: 37,
        span: 887..888,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 38,
        column: 38,
        span: 888..889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 38,
        column: 39,
        span: 889..890,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 38,
        column: 42,
        span: 891..893,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 38,
        column: 44,
        span: 893..895,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 45,
        span: 895..896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 39,
        column: 2,
        span: 897..898,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 39,
        column: 4,
        span: 899..900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "vararg",
        ),
        line: 39,
        column: 11,
        span: 901..907,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 12,
        span: 907..908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 39,
        column: 16,
        span: 908..912,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 17,
        span: 912..913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 39,
        column: 21,
        span: 913..917,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 22,
        span: 917..918,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 39,
        column: 24,
        span: 919..920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c12",
        ),
        line: 39,
        column: 27,
        span: 920..923,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 28,
        span: 923..924,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 39,
        column: 30,
        span: 925..926,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 39,
        column: 31,
        span: 925..927,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 32,
        span: 927..928,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 39,
        column: 33,
        span: 927..929,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 39,
        column: 34,
        span: 929..930,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 39,
        column: 35,
        span: 930..931,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 36,
        span: 931..932,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 37,
        span: 932..933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 40,
        column: 7,
        span: 934..940,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 8,
        span: 940..941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 40,
        column: 9,
        span: 941..942,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 40,
        column: 10,
        span: 942..943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 40,
        column: 11,
        span: 943..944,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 40,
        column: 14,
        span: 945..947,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 40,
        column: 16,
        span: 947..949,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 40,
        column: 20,
        span: 950..953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 40,
        column: 22,
        span: 954..955,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 40,
        column: 23,
        span: 955..956,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 40,
        column: 24,
        span: 955..957,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 40,
        column: 25,
        span: 957..958,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 40,
        column: 28,
        span: 959..961,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "55",
                    after_decimal: "",
                },
            ),
        ),
        line: 40,
        column: 31,
        span: 961..964,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 40,
        column: 35,
        span: 965..968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 40,
        column: 37,
        span: 969..970,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 40,
        column: 38,
        span: 970..971,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 40,
        column: 39,
        span: 970..972,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 40,
        column: 40,
        span: 972..973,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 40,
        column: 43,
        span: 974..976,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 40,
        column: 45,
        span: 976..978,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 46,
        span: 978..979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 41,
        column: 2,
        span: 980..981,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 41,
        column: 4,
        span: 982..983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 41,
        column: 9,
        span: 984..988,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 10,
        span: 988..989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 41,
        column: 15,
        span: 989..994,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 41,
        column: 16,
        span: 994..995,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 41,
        column: 18,
        span: 996..997,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 41,
        column: 21,
        span: 997..1000,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 41,
        column: 22,
        span: 1000..1001,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 23,
        span: 1001..1002,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 42,
        column: 7,
        span: 1003..1009,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
        column: 8,
        span: 1009..1010,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 42,
        column: 9,
        span: 1010..1011,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 42,
        column: 12,
        span: 1012..1014,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 42,
        column: 16,
        span: 1015..1018,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
        column: 17,
        span: 1018..1019,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 44,
        column: 6,
        span: 1021..1026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 44,
        column: 8,
        span: 1027..1028,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 44,
        column: 10,
        span: 1029..1030,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 44,
        column: 12,
        span: 1031..1032,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 44,
        column: 13,
        span: 1031..1033,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 44,
        column: 14,
        span: 1033..1034,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 44,
        column: 17,
        span: 1034..1037,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 44,
        column: 18,
        span: 1037..1038,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 45,
        column: 9,
        span: 1039..1047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 45,
        column: 11,
        span: 1048..1049,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 45,
        column: 12,
        span: 1049..1050,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 45,
        column: 13,
        span: 1050..1051,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 15,
        span: 1052..1053,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 45,
        column: 18,
        span: 1053..1056,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 19,
        span: 1056..1057,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 45,
        column: 26,
        span: 1058..1064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 45,
        column: 31,
        span: 1065..1069,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 45,
        column: 32,
        span: 1069..1070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 45,
        column: 35,
        span: 1070..1073,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 45,
        column: 36,
        span: 1073..1074,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 45,
        column: 37,
        span: 1073..1075,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 45,
        column: 38,
        span: 1075..1076,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 45,
        column: 39,
        span: 1076..1077,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 45,
        column: 40,
        span: 1077..1078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 45,
        column: 43,
        span: 1078..1081,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 45,
        column: 44,
        span: 1081..1082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 45,
        column: 45,
        span: 1082..1083,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 45,
        column: 0,
        span: 1084..1087,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 46,
        column: 7,
        span: 1088..1094,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 8,
        span: 1094..1095,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 46,
        column: 9,
        span: 1095..1096,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 46,
        column: 10,
        span: 1096..1097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 46,
        column: 11,
        span: 1097..1098,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 12,
        span: 1098..1099,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
        column: 13,
        span: 1098..1100,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 14,
        span: 1100..1101,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
        column: 15,
        span: 1100..1102,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 16,
        span: 1102..1103,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 46,
        column: 19,
        span: 1104..1106,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
        column: 21,
        span: 1106..1108,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 46,
        column: 25,
        span: 1109..1112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 46,
        column: 27,
        span: 1113..1114,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 46,
        column: 28,
        span: 1114..1115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 46,
        column: 29,
        span: 1115..1116,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 30,
        span: 1116..1117,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
        column: 31,
        span: 1116..1118,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 32,
        span: 1118..1119,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 46,
        column: 35,
        span: 1120..1122,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
        column: 38,
        span: 1122..1125,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 39,
        span: 1125..1126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 47,
        column: 6,
        span: 1127..1132,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 7,
        span: 1132..1133,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 47,
        column: 10,
        span: 1133..1136,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 11,
        span: 1136..1137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 49,
        column: 4,
        span: 1139..1142,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 49,
        column: 6,
        span: 1143..1144,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
        column: 0,
        span: 1144..1147,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 50,
        column: 6,
        span: 1148..1153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 50,
        column: 8,
        span: 1154..1155,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 50,
        column: 9,
        span: 1155..1156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 50,
        column: 11,
        span: 1157..1158,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 50,
        column: 13,
        span: 1159..1160,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
        column: 15,
        span: 1160..1162,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 50,
        column: 16,
        span: 1162..1163,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 50,
        column: 18,
        span: 1164..1165,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 50,
        column: 19,
        span: 1165..1166,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 51,
        column: 6,
        span: 1167..1172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 51,
        column: 8,
        span: 1173..1174,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 51,
        column: 11,
        span: 1175..1177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 51,
        column: 15,
        span: 1178..1181,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 51,
        column: 18,
        span: 1182..1184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 51,
        column: 20,
        span: 1185..1186,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 51,
        column: 21,
        span: 1186..1187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 51,
        column: 22,
        span: 1187..1188,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 51,
        column: 23,
        span: 1188..1189,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 51,
        column: 25,
        span: 1190..1191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 51,
        column: 27,
        span: 1192..1193,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 51,
        column: 28,
        span: 1193..1194,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 51,
        column: 31,
        span: 1193..1197,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 51,
        column: 32,
        span: 1197..1198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 51,
        column: 34,
        span: 1199..1200,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 51,
        column: 35,
        span: 1200..1201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 51,
        column: 36,
        span: 1201..1202,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 51,
        column: 37,
        span: 1202..1203,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 51,
        column: 38,
        span: 1202..1204,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 51,
        column: 0,
        span: 1205..1208,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 53,
        column: 9,
        span: 1210..1218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 53,
        column: 11,
        span: 1219..1220,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 12,
        span: 1220..1221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 53,
        column: 13,
        span: 1221..1222,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 14,
        span: 1222..1223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 53,
        column: 16,
        span: 1224..1225,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 17,
        span: 1225..1226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 53,
        column: 19,
        span: 1227..1228,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 20,
        span: 1228..1229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 53,
        column: 22,
        span: 1230..1231,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 23,
        span: 1231..1232,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 53,
        column: 27,
        span: 1233..1236,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 28,
        span: 1236..1237,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 54,
        column: 8,
        span: 1240..1245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "more",
        ),
        line: 54,
        column: 13,
        span: 1246..1250,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 54,
        column: 15,
        span: 1251..1252,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 54,
        column: 17,
        span: 1253..1254,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 54,
        column: 20,
        span: 1254..1257,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 54,
        column: 21,
        span: 1257..1258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 55,
        column: 9,
        span: 1261..1267,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 10,
        span: 1267..1268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 55,
        column: 11,
        span: 1268..1269,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 55,
        column: 14,
        span: 1270..1272,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 55,
        column: 18,
        span: 1272..1276,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 55,
        column: 22,
        span: 1277..1280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "more",
        ),
        line: 55,
        column: 27,
        span: 1281..1285,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 55,
        column: 28,
        span: 1285..1286,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 55,
        column: 29,
        span: 1285..1287,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 55,
        column: 30,
        span: 1287..1288,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 55,
        column: 33,
        span: 1289..1291,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 55,
        column: 37,
        span: 1291..1295,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 55,
        column: 0,
        span: 1296..1299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "more",
        ),
        line: 56,
        column: 14,
        span: 1309..1313,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 56,
        column: 15,
        span: 1313..1314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 56,
        column: 18,
        span: 1314..1317,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 56,
        column: 19,
        span: 1317..1318,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 56,
        column: 20,
        span: 1317..1319,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 56,
        column: 21,
        span: 1319..1320,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 56,
        column: 24,
        span: 1321..1323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 56,
        column: 28,
        span: 1324..1327,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 56,
        column: 29,
        span: 1327..1328,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 56,
        column: 32,
        span: 1327..1331,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 56,
        column: 36,
        span: 1332..1335,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 56,
        column: 40,
        span: 1336..1339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "more",
        ),
        line: 56,
        column: 45,
        span: 1340..1344,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 56,
        column: 46,
        span: 1344..1345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 56,
        column: 49,
        span: 1345..1348,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 56,
        column: 50,
        span: 1348..1349,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 56,
        column: 51,
        span: 1348..1350,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 56,
        column: 52,
        span: 1350..1351,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 53,
        span: 1351..1352,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 57,
        column: 0,
        span: 1353..1356,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 59,
        column: 9,
        span: 1358..1366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 59,
        column: 11,
        span: 1367..1368,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 12,
        span: 1368..1369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 59,
        column: 13,
        span: 1369..1370,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 59,
        column: 14,
        span: 1370..1371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 59,
        column: 15,
        span: 1371..1372,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 59,
        column: 16,
        span: 1372..1373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 59,
        column: 17,
        span: 1373..1374,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 18,
        span: 1374..1375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 60,
        column: 9,
        span: 1378..1384,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 10,
        span: 1384..1385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 60,
        column: 11,
        span: 1385..1386,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 60,
        column: 14,
        span: 1387..1389,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 60,
        column: 18,
        span: 1389..1393,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 60,
        column: 22,
        span: 1394..1397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 60,
        column: 24,
        span: 1398..1399,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 60,
        column: 27,
        span: 1400..1402,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 60,
        column: 31,
        span: 1402..1406,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 60,
        column: 35,
        span: 1407..1410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 60,
        column: 37,
        span: 1411..1412,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 60,
        column: 40,
        span: 1413..1415,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 60,
        column: 44,
        span: 1415..1419,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 45,
        span: 1419..1420,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 61,
        column: 0,
        span: 1421..1424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 63,
        column: 5,
        span: 1426..1430,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 6,
        span: 1430..1431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 63,
        column: 7,
        span: 1431..1432,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 63,
        column: 8,
        span: 1432..1433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 63,
        column: 10,
        span: 1434..1435,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 11,
        span: 1435..1436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 64,
        column: 5,
        span: 1437..1441,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 6,
        span: 1441..1442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 64,
        column: 7,
        span: 1442..1443,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 64,
        column: 8,
        span: 1443..1444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 64,
        column: 10,
        span: 1445..1446,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 11,
        span: 1446..1447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 66,
        column: 2,
        span: 1449..1450,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 66,
        column: 4,
        span: 1451..1452,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 66,
        column: 6,
        span: 1453..1454,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 66,
        column: 7,
        span: 1454..1455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 67,
        column: 2,
        span: 1456..1457,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 67,
        column: 4,
        span: 1458..1459,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 67,
        column: 0,
        span: 1459..1461,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 68,
        column: 6,
        span: 1462..1467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 68,
        column: 8,
        span: 1468..1469,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 68,
        column: 11,
        span: 1470..1472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 68,
        column: 15,
        span: 1473..1476,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 68,
        column: 18,
        span: 1477..1479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 68,
        column: 20,
        span: 1480..1481,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 68,
        column: 21,
        span: 1481..1482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 68,
        column: 22,
        span: 1482..1483,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 68,
        column: 23,
        span: 1483..1484,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 68,
        column: 25,
        span: 1485..1486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 68,
        column: 27,
        span: 1487..1488,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 68,
        column: 28,
        span: 1488..1489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 68,
        column: 30,
        span: 1490..1491,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 68,
        column: 31,
        span: 1491..1492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 68,
        column: 32,
        span: 1492..1493,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 68,
        column: 33,
        span: 1493..1494,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 68,
        column: 34,
        span: 1493..1495,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 68,
        column: 0,
        span: 1496..1499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 69,
        column: 7,
        span: 1500..1506,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 8,
        span: 1506..1507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 69,
        column: 12,
        span: 1507..1511,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 13,
        span: 1511..1512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 69,
        column: 17,
        span: 1512..1516,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 69,
        column: 18,
        span: 1516..1517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 69,
        column: 21,
        span: 1517..1520,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 69,
        column: 22,
        span: 1520..1521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 69,
        column: 24,
        span: 1522..1523,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 25,
        span: 1523..1524,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 69,
        column: 28,
        span: 1525..1527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 69,
        column: 32,
        span: 1528..1531,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 33,
        span: 1531..1532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 71,
        column: 6,
        span: 1534..1539,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 7,
        span: 1539..1540,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        line: 71,
        column: 10,
        span: 1540..1543,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 11,
        span: 1543..1544,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 76,
        column: 9,
        span: 1569..1577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oneless",
        ),
        line: 76,
        column: 17,
        span: 1578..1585,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 19,
        span: 1586..1587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 76,
        column: 20,
        span: 1587..1588,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 76,
        column: 21,
        span: 1588..1589,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 76,
        column: 25,
        span: 1590..1593,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 26,
        span: 1593..1594,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 76,
        column: 33,
        span: 1595..1601,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 76,
        column: 37,
        span: 1602..1605,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 76,
        column: 0,
        span: 1606..1609,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 78,
        column: 9,
        span: 1611..1619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 78,
        column: 11,
        span: 1620..1621,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 13,
        span: 1622..1623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 78,
        column: 14,
        span: 1623..1624,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 15,
        span: 1624..1625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 78,
        column: 17,
        span: 1626..1627,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 18,
        span: 1627..1628,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 78,
        column: 22,
        span: 1629..1632,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
        column: 23,
        span: 1632..1633,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 79,
        column: 8,
        span: 1636..1641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 79,
        column: 0,
        span: 1642..1643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 80,
        column: 9,
        span: 1646..1652,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
        column: 10,
        span: 1652..1653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 80,
        column: 13,
        span: 1653..1656,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 80,
        column: 16,
        span: 1657..1659,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 80,
        column: 20,
        span: 1660..1663,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
        column: 21,
        span: 1663..1664,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 81,
        column: 5,
        span: 1667..1669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 81,
        column: 7,
        span: 1670..1671,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 81,
        column: 10,
        span: 1672..1674,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 81,
        column: 12,
        span: 1674..1676,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 81,
        column: 0,
        span: 1677..1681,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 82,
        column: 10,
        span: 1686..1691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 82,
        column: 12,
        span: 1692..1693,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 82,
        column: 13,
        span: 1693..1694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 82,
        column: 15,
        span: 1695..1696,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 82,
        column: 16,
        span: 1696..1697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 82,
        column: 18,
        span: 1698..1699,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 82,
        column: 20,
        span: 1700..1701,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 82,
        column: 24,
        span: 1702..1705,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 83,
        column: 11,
        span: 1710..1716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 83,
        column: 13,
        span: 1717..1718,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 14,
        span: 1718..1719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 83,
        column: 16,
        span: 1720..1721,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 17,
        span: 1721..1722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 83,
        column: 19,
        span: 1723..1724,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 20,
        span: 1724..1725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 83,
        column: 22,
        span: 1726..1727,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 23,
        span: 1727..1728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oneless",
        ),
        line: 83,
        column: 31,
        span: 1729..1736,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
        column: 32,
        span: 1736..1737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oneless",
        ),
        line: 83,
        column: 39,
        span: 1737..1744,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
        column: 40,
        span: 1744..1745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oneless",
        ),
        line: 83,
        column: 47,
        span: 1745..1752,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
        column: 48,
        span: 1752..1753,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 83,
        column: 51,
        span: 1753..1756,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
        column: 52,
        span: 1756..1757,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
        column: 53,
        span: 1757..1758,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
        column: 54,
        span: 1758..1759,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 84,
        column: 0,
        span: 1762..1766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 85,
        column: 6,
        span: 1771..1772,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
        column: 7,
        span: 1772..1773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 85,
        column: 9,
        span: 1774..1775,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
        column: 10,
        span: 1775..1776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 85,
        column: 12,
        span: 1777..1778,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 85,
        column: 14,
        span: 1779..1780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 85,
        column: 16,
        span: 1781..1782,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 85,
        column: 17,
        span: 1782..1783,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
        column: 18,
        span: 1782..1784,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
        column: 19,
        span: 1784..1785,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 85,
        column: 23,
        span: 1786..1789,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
        column: 24,
        span: 1789..1790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 85,
        column: 0,
        span: 1791..1792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 86,
        column: 11,
        span: 1797..1803,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 12,
        span: 1803..1804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 86,
        column: 13,
        span: 1804..1805,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 86,
        column: 16,
        span: 1806..1808,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 86,
        column: 20,
        span: 1809..1812,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 21,
        span: 1812..1813,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 87,
        column: 11,
        span: 1818..1824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 87,
        column: 13,
        span: 1825..1826,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 14,
        span: 1826..1827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 87,
        column: 15,
        span: 1827..1828,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 87,
        column: 16,
        span: 1828..1829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 87,
        column: 18,
        span: 1830..1831,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 87,
        column: 19,
        span: 1831..1832,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 87,
        column: 23,
        span: 1833..1836,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 24,
        span: 1836..1837,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 88,
        column: 0,
        span: 1840..1843,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 89,
        column: 0,
        span: 1844..1847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 91,
        column: 2,
        span: 1849..1850,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 3,
        span: 1850..1851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 91,
        column: 4,
        span: 1851..1852,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 5,
        span: 1852..1853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 91,
        column: 6,
        span: 1853..1854,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 7,
        span: 1854..1855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 91,
        column: 8,
        span: 1855..1856,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 9,
        span: 1856..1857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 91,
        column: 10,
        span: 1857..1858,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 91,
        column: 12,
        span: 1859..1860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 91,
        column: 19,
        span: 1861..1867,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 20,
        span: 1867..1868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 91,
        column: 21,
        span: 1868..1869,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 22,
        span: 1869..1870,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 91,
        column: 24,
        span: 1869..1872,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 25,
        span: 1872..1873,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 91,
        column: 26,
        span: 1872..1874,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 27,
        span: 1874..1875,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 91,
        column: 28,
        span: 1874..1876,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 29,
        span: 1876..1877,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 91,
        column: 30,
        span: 1876..1878,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 31,
        span: 1878..1879,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 91,
        column: 32,
        span: 1878..1880,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 33,
        span: 1880..1881,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 91,
        column: 34,
        span: 1880..1882,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 35,
        span: 1882..1883,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 36,
        span: 1883..1884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 92,
        column: 7,
        span: 1885..1891,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 92,
        column: 8,
        span: 1891..1892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 92,
        column: 9,
        span: 1892..1893,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 92,
        column: 11,
        span: 1893..1895,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 92,
        column: 12,
        span: 1894..1896,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 92,
        column: 16,
        span: 1897..1900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 92,
        column: 18,
        span: 1901..1902,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 92,
        column: 20,
        span: 1902..1904,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 92,
        column: 21,
        span: 1903..1905,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 92,
        column: 25,
        span: 1906..1909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 92,
        column: 27,
        span: 1910..1911,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 92,
        column: 29,
        span: 1911..1913,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 92,
        column: 30,
        span: 1912..1914,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 92,
        column: 34,
        span: 1915..1918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 92,
        column: 36,
        span: 1919..1920,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 92,
        column: 38,
        span: 1920..1922,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 92,
        column: 39,
        span: 1921..1923,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 92,
        column: 43,
        span: 1924..1927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 92,
        column: 45,
        span: 1928..1929,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 92,
        column: 47,
        span: 1929..1931,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 92,
        column: 48,
        span: 1930..1932,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 92,
        column: 49,
        span: 1932..1933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 94,
        column: 2,
        span: 1935..1936,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 3,
        span: 1936..1937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 94,
        column: 4,
        span: 1937..1938,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 5,
        span: 1938..1939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 94,
        column: 6,
        span: 1939..1940,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 7,
        span: 1940..1941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 94,
        column: 8,
        span: 1941..1942,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 9,
        span: 1942..1943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 94,
        column: 10,
        span: 1943..1944,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 94,
        column: 12,
        span: 1945..1946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 94,
        column: 14,
        span: 1947..1948,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
        column: 15,
        span: 1948..1949,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 94,
        column: 16,
        span: 1948..1950,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
        column: 17,
        span: 1950..1951,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 95,
        column: 7,
        span: 1952..1958,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
        column: 8,
        span: 1958..1959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 95,
        column: 9,
        span: 1959..1960,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 95,
        column: 11,
        span: 1960..1962,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 95,
        column: 14,
        span: 1962..1965,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 95,
        column: 18,
        span: 1966..1969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 95,
        column: 20,
        span: 1970..1971,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 95,
        column: 22,
        span: 1971..1973,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 95,
        column: 25,
        span: 1973..1976,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 95,
        column: 29,
        span: 1977..1980,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 95,
        column: 31,
        span: 1981..1982,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 95,
        column: 33,
        span: 1982..1984,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 95,
        column: 36,
        span: 1984..1987,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 95,
        column: 40,
        span: 1988..1991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 95,
        column: 42,
        span: 1992..1993,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 95,
        column: 44,
        span: 1993..1995,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 95,
        column: 47,
        span: 1995..1998,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 95,
        column: 51,
        span: 1999..2002,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 95,
        column: 53,
        span: 2003..2004,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 95,
        column: 55,
        span: 2004..2006,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 95,
        column: 58,
        span: 2006..2009,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
        column: 59,
        span: 2009..2010,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 99,
        column: 2,
        span: 2040..2041,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 99,
        column: 4,
        span: 2042..2043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        line: 99,
        column: 15,
        span: 2044..2054,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ return {...} ]]",
        ),
        line: 99,
        column: 33,
        span: 2054..2072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 100,
        column: 2,
        span: 2073..2074,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 100,
        column: 4,
        span: 2075..2076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 100,
        column: 6,
        span: 2077..2078,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 7,
        span: 2078..2079,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 100,
        column: 8,
        span: 2078..2080,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 100,
        column: 9,
        span: 2080..2081,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 100,
        column: 10,
        span: 2080..2082,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 11,
        span: 2082..2083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 101,
        column: 7,
        span: 2084..2090,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
        column: 8,
        span: 2090..2091,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 101,
        column: 9,
        span: 2091..2092,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 101,
        column: 10,
        span: 2092..2093,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
        column: 11,
        span: 2092..2094,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 101,
        column: 12,
        span: 2094..2095,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 101,
        column: 15,
        span: 2096..2098,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
        column: 17,
        span: 2098..2100,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 101,
        column: 21,
        span: 2101..2104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 101,
        column: 23,
        span: 2105..2106,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 101,
        column: 24,
        span: 2106..2107,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
        column: 25,
        span: 2106..2108,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 101,
        column: 26,
        span: 2108..2109,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 101,
        column: 29,
        span: 2110..2112,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
        column: 31,
        span: 2112..2114,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 101,
        column: 35,
        span: 2115..2118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 101,
        column: 37,
        span: 2119..2120,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 101,
        column: 38,
        span: 2120..2121,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
        column: 39,
        span: 2120..2122,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 101,
        column: 40,
        span: 2122..2123,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 101,
        column: 43,
        span: 2124..2126,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 101,
        column: 47,
        span: 2127..2130,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
        column: 48,
        span: 2130..2131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 104,
        column: 2,
        span: 2134..2135,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 104,
        column: 4,
        span: 2136..2137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        line: 104,
        column: 15,
        span: 2138..2148,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  local x = {...}\n  for i=1,select('#', ...) do assert(x[i] == select(i, ...)) end\n  assert(x[select('#', ...)+1] == nil)\n  return true\n]]",
        ),
        line: 109,
        column: 3,
        span: 2148..2289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 111,
        column: 7,
        span: 2291..2297,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 8,
        span: 2297..2298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 111,
        column: 9,
        span: 2298..2299,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 10,
        span: 2299..2300,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 111,
        column: 13,
        span: 2300..2303,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 14,
        span: 2303..2304,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 111,
        column: 18,
        span: 2305..2308,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 19,
        span: 2308..2309,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 111,
        column: 23,
        span: 2310..2313,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 24,
        span: 2313..2314,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 111,
        column: 26,
        span: 2315..2316,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 111,
        column: 27,
        span: 2316..2317,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 28,
        span: 2317..2318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 111,
        column: 35,
        span: 2319..2325,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 36,
        span: 2325..2326,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 37,
        span: 2326..2327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 112,
        column: 7,
        span: 2328..2334,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 8,
        span: 2334..2335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 112,
        column: 9,
        span: 2335..2336,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 10,
        span: 2336..2337,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 11,
        span: 2337..2338,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 12,
        span: 2338..2339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 114,
        column: 2,
        span: 2341..2342,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 114,
        column: 4,
        span: 2343..2344,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 114,
        column: 6,
        span: 2345..2346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 114,
        column: 12,
        span: 2346..2352,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
        column: 13,
        span: 2352..2353,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 114,
        column: 14,
        span: 2352..2354,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 114,
        column: 15,
        span: 2354..2355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 114,
        column: 22,
        span: 2356..2362,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 114,
        column: 23,
        span: 2362..2363,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 114,
        column: 25,
        span: 2362..2365,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 114,
        column: 26,
        span: 2365..2366,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 114,
        column: 28,
        span: 2365..2368,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 114,
        column: 29,
        span: 2368..2369,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 114,
        column: 31,
        span: 2368..2371,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 114,
        column: 32,
        span: 2371..2372,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 114,
        column: 34,
        span: 2371..2374,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 114,
        column: 35,
        span: 2374..2375,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
        column: 36,
        span: 2375..2376,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 114,
        column: 37,
        span: 2376..2377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 115,
        column: 7,
        span: 2378..2384,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
        column: 8,
        span: 2384..2385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 115,
        column: 13,
        span: 2385..2390,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 115,
        column: 14,
        span: 2390..2391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        line: 115,
        column: 18,
        span: 2391..2395,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
        column: 19,
        span: 2395..2396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 115,
        column: 20,
        span: 2396..2397,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
        column: 21,
        span: 2397..2398,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 115,
        column: 24,
        span: 2399..2401,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 115,
        column: 26,
        span: 2401..2403,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 115,
        column: 30,
        span: 2404..2407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 115,
        column: 32,
        span: 2408..2409,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 115,
        column: 33,
        span: 2409..2410,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 115,
        column: 34,
        span: 2409..2411,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 115,
        column: 35,
        span: 2411..2412,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 115,
        column: 38,
        span: 2413..2415,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 115,
        column: 41,
        span: 2415..2418,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 115,
        column: 45,
        span: 2419..2422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 115,
        column: 47,
        span: 2423..2424,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 115,
        column: 48,
        span: 2424..2425,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 115,
        column: 49,
        span: 2424..2426,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 115,
        column: 50,
        span: 2426..2427,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 115,
        column: 53,
        span: 2428..2430,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 115,
        column: 56,
        span: 2430..2433,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
        column: 57,
        span: 2433..2434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 116,
        column: 2,
        span: 2435..2436,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 116,
        column: 4,
        span: 2437..2438,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 116,
        column: 6,
        span: 2439..2440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 116,
        column: 12,
        span: 2440..2446,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
        column: 13,
        span: 2446..2447,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 116,
        column: 14,
        span: 2446..2448,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
        column: 15,
        span: 2448..2449,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 116,
        column: 16,
        span: 2449..2450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 117,
        column: 7,
        span: 2451..2457,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 8,
        span: 2457..2458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 117,
        column: 12,
        span: 2458..2462,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 13,
        span: 2462..2463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 117,
        column: 14,
        span: 2463..2464,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 15,
        span: 2464..2465,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 117,
        column: 18,
        span: 2466..2468,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 117,
        column: 22,
        span: 2469..2472,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 23,
        span: 2472..2473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 118,
        column: 2,
        span: 2474..2475,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 118,
        column: 4,
        span: 2476..2477,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 118,
        column: 6,
        span: 2478..2479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 118,
        column: 12,
        span: 2479..2485,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 13,
        span: 2485..2486,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 118,
        column: 14,
        span: 2486..2487,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
        column: 15,
        span: 2486..2488,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 118,
        column: 16,
        span: 2488..2489,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
        column: 18,
        span: 2489..2491,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 118,
        column: 19,
        span: 2491..2492,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
        column: 21,
        span: 2492..2494,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 118,
        column: 22,
        span: 2494..2495,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
        column: 24,
        span: 2495..2497,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 25,
        span: 2497..2498,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 118,
        column: 26,
        span: 2498..2499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 119,
        column: 7,
        span: 2500..2506,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 119,
        column: 8,
        span: 2506..2507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 119,
        column: 9,
        span: 2507..2508,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 119,
        column: 10,
        span: 2508..2509,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 119,
        column: 11,
        span: 2508..2510,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 119,
        column: 12,
        span: 2510..2511,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 119,
        column: 15,
        span: 2512..2514,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 119,
        column: 17,
        span: 2514..2516,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 119,
        column: 21,
        span: 2517..2520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 119,
        column: 23,
        span: 2521..2522,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 119,
        column: 24,
        span: 2522..2523,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 119,
        column: 25,
        span: 2522..2524,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 119,
        column: 26,
        span: 2524..2525,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 119,
        column: 29,
        span: 2526..2528,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 119,
        column: 33,
        span: 2529..2532,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 119,
        column: 34,
        span: 2532..2533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 120,
        column: 2,
        span: 2534..2535,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 120,
        column: 4,
        span: 2536..2537,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 120,
        column: 6,
        span: 2538..2539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 120,
        column: 12,
        span: 2539..2545,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
        column: 13,
        span: 2545..2546,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 120,
        column: 14,
        span: 2546..2547,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
        column: 15,
        span: 2546..2548,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 16,
        span: 2548..2549,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
        column: 18,
        span: 2549..2551,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 19,
        span: 2551..2552,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
        column: 21,
        span: 2552..2554,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 22,
        span: 2554..2555,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
        column: 24,
        span: 2555..2557,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
        column: 25,
        span: 2557..2558,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 120,
        column: 26,
        span: 2558..2559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 121,
        column: 7,
        span: 2560..2566,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 121,
        column: 8,
        span: 2566..2567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 121,
        column: 9,
        span: 2567..2568,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 121,
        column: 10,
        span: 2568..2569,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 11,
        span: 2568..2570,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 121,
        column: 12,
        span: 2570..2571,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 121,
        column: 15,
        span: 2572..2574,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 17,
        span: 2574..2576,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 121,
        column: 21,
        span: 2577..2580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 121,
        column: 23,
        span: 2581..2582,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 121,
        column: 24,
        span: 2582..2583,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 25,
        span: 2582..2584,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 121,
        column: 26,
        span: 2584..2585,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 121,
        column: 29,
        span: 2586..2588,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 31,
        span: 2588..2590,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 121,
        column: 35,
        span: 2591..2594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 121,
        column: 37,
        span: 2595..2596,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 121,
        column: 38,
        span: 2596..2597,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 39,
        span: 2596..2598,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 121,
        column: 40,
        span: 2598..2599,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 121,
        column: 43,
        span: 2600..2602,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 121,
        column: 47,
        span: 2603..2606,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
        column: 48,
        span: 2606..2607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 122,
        column: 6,
        span: 2608..2613,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 7,
        span: 2613..2614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 122,
        column: 13,
        span: 2614..2620,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
        column: 14,
        span: 2620..2621,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
        column: 20,
        span: 2621..2627,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 21,
        span: 2627..2628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 123,
        column: 6,
        span: 2629..2634,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
        column: 7,
        span: 2634..2635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 123,
        column: 13,
        span: 2635..2641,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 123,
        column: 14,
        span: 2641..2642,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 123,
        column: 16,
        span: 2643..2644,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        line: 123,
        column: 21,
        span: 2643..2649,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
        column: 22,
        span: 2649..2650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 125,
        column: 6,
        span: 2652..2657,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 7,
        span: 2657..2658,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 125,
        column: 11,
        span: 2658..2662,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
        column: 12,
        span: 2662..2663,
    },
]
