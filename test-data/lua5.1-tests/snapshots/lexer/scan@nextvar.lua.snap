---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.1-tests/nextvar.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 1,
        column: 5,
        span: 0..5,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1,
        column: 6,
        span: 5..6,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing tables, next, and for'",
        ),
        line: 1,
        column: 37,
        span: 6..37,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1,
        column: 38,
        span: 37..38,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 3,
        column: 6,
        span: 40..45,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 3,
        column: 8,
        span: 46..47,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 3,
        column: 10,
        span: 48..49,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 3,
        column: 12,
        span: 50..51,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 3,
        column: 13,
        span: 51..52,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 6,
        column: 4,
        span: 104..107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 6,
        column: 6,
        span: 108..109,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 6,
        column: 7,
        span: 109..110,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 6,
        column: 8,
        span: 109..111,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 6,
        column: 9,
        span: 111..112,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 6,
        column: 12,
        span: 111..115,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 6,
        column: 15,
        span: 116..118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 6,
        column: 17,
        span: 119..120,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 6,
        column: 18,
        span: 120..121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 6,
        column: 19,
        span: 121..122,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 6,
        column: 21,
        span: 122..124,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        line: 6,
        column: 24,
        span: 124..127,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 6,
        column: 25,
        span: 127..128,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 6,
        column: 27,
        span: 129..130,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 6,
        column: 32,
        span: 131..135,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 6,
        column: 0,
        span: 136..139,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 7,
        column: 4,
        span: 140..143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 7,
        column: 6,
        span: 144..145,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 7,
        column: 7,
        span: 145..146,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 7,
        column: 8,
        span: 145..147,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 7,
        column: 9,
        span: 147..148,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 7,
        column: 12,
        span: 147..151,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 7,
        column: 15,
        span: 152..154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 7,
        column: 17,
        span: 155..156,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 7,
        column: 18,
        span: 156..157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 7,
        column: 19,
        span: 157..158,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 7,
        column: 21,
        span: 158..160,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        line: 7,
        column: 24,
        span: 160..163,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 7,
        column: 25,
        span: 163..164,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 7,
        column: 27,
        span: 165..166,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 7,
        column: 31,
        span: 167..170,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 7,
        column: 0,
        span: 171..174,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 9,
        column: 4,
        span: 236..239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 9,
        column: 6,
        span: 240..241,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 9,
        column: 7,
        span: 241..242,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 9,
        column: 8,
        span: 241..243,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 9,
        column: 9,
        span: 243..244,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 9,
        column: 12,
        span: 243..247,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 9,
        column: 0,
        span: 248..250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 10,
        column: 4,
        span: 253..254,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 10,
        column: 5,
        span: 254..255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 10,
        column: 6,
        span: 255..256,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 10,
        column: 7,
        span: 256..257,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 10,
        column: 9,
        span: 258..259,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 10,
        column: 0,
        span: 260..264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 11,
        column: 9,
        span: 267..273,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 11,
        column: 10,
        span: 273..274,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 11,
        column: 11,
        span: 274..275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 11,
        column: 12,
        span: 275..276,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 11,
        column: 15,
        span: 277..279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 11,
        column: 17,
        span: 280..281,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 11,
        column: 18,
        span: 281..282,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 12,
        column: 0,
        span: 283..286,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 15,
        column: 3,
        span: 289..291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 15,
        column: 5,
        span: 292..293,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 15,
        column: 0,
        span: 294..298,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 18,
        column: 6,
        span: 323..328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l2",
        ),
        line: 18,
        column: 9,
        span: 329..331,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 18,
        column: 11,
        span: 332..333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 18,
        column: 16,
        span: 334..338,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 18,
        column: 17,
        span: 338..339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log",
        ),
        line: 18,
        column: 20,
        span: 339..342,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
        column: 21,
        span: 342..343,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 18,
        column: 22,
        span: 342..344,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
        column: 23,
        span: 344..345,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 19,
        column: 6,
        span: 346..351,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 19,
        column: 15,
        span: 352..360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log2",
        ),
        line: 19,
        column: 20,
        span: 361..365,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 22,
        span: 366..367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 19,
        column: 23,
        span: 367..368,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 24,
        span: 368..369,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 19,
        column: 31,
        span: 370..376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 19,
        column: 36,
        span: 377..381,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 19,
        column: 37,
        span: 381..382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log",
        ),
        line: 19,
        column: 40,
        span: 382..385,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 41,
        span: 385..386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 19,
        column: 42,
        span: 386..387,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 43,
        span: 387..388,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 19,
        column: 44,
        span: 388..389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l2",
        ),
        line: 19,
        column: 46,
        span: 389..391,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 19,
        column: 0,
        span: 392..395,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 21,
        column: 6,
        span: 397..402,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 21,
        column: 15,
        span: 403..411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp2",
        ),
        line: 21,
        column: 19,
        span: 412..415,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
        column: 21,
        span: 416..417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 21,
        column: 22,
        span: 417..418,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
        column: 23,
        span: 418..419,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 22,
        column: 8,
        span: 451..456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp",
        ),
        line: 22,
        column: 11,
        span: 457..459,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 22,
        column: 13,
        span: 460..461,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 22,
        column: 15,
        span: 461..463,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 22,
        column: 16,
        span: 463..464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 22,
        column: 20,
        span: 464..468,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 22,
        column: 21,
        span: 468..469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 22,
        column: 25,
        span: 469..473,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 26,
        span: 473..474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log2",
        ),
        line: 22,
        column: 30,
        span: 474..478,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 31,
        span: 478..479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 22,
        column: 32,
        span: 479..480,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 33,
        span: 480..481,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 34,
        span: 481..482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 23,
        column: 9,
        span: 485..491,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 23,
        column: 10,
        span: 491..492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 23,
        column: 11,
        span: 492..493,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 23,
        column: 14,
        span: 494..496,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 23,
        column: 16,
        span: 496..498,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 23,
        column: 19,
        span: 499..501,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 23,
        column: 21,
        span: 502..503,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp",
        ),
        line: 23,
        column: 23,
        span: 503..505,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 23,
        column: 24,
        span: 505..506,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 23,
        column: 25,
        span: 505..507,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 23,
        column: 27,
        span: 508..509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 23,
        column: 29,
        span: 510..511,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 23,
        column: 33,
        span: 512..515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 23,
        column: 35,
        span: 516..517,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 23,
        column: 38,
        span: 518..520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp",
        ),
        line: 23,
        column: 41,
        span: 521..523,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 23,
        column: 42,
        span: 523..524,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 23,
        column: 43,
        span: 524..525,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 24,
        column: 9,
        span: 528..534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp",
        ),
        line: 24,
        column: 0,
        span: 535..537,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 25,
        column: 0,
        span: 538..541,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 27,
        column: 6,
        span: 543..548,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 27,
        column: 15,
        span: 549..557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fb",
        ),
        line: 27,
        column: 18,
        span: 558..560,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
        column: 20,
        span: 561..562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 27,
        column: 21,
        span: 562..563,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
        column: 22,
        span: 563..564,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 28,
        column: 8,
        span: 567..572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 28,
        column: 10,
        span: 573..574,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 28,
        column: 11,
        span: 574..575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nn",
        ),
        line: 28,
        column: 14,
        span: 576..578,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 28,
        column: 16,
        span: 579..580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 28,
        column: 18,
        span: 581..582,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 28,
        column: 19,
        span: 582..583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "int2fb",
        ),
        line: 28,
        column: 25,
        span: 583..589,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 26,
        span: 589..590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 28,
        column: 27,
        span: 590..591,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 28,
        span: 591..592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 29,
        column: 9,
        span: 595..601,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
        column: 10,
        span: 601..602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 29,
        column: 11,
        span: 602..603,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 29,
        column: 13,
        span: 604..605,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "256",
                    after_decimal: "",
                },
            ),
        ),
        line: 29,
        column: 17,
        span: 605..609,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
        column: 18,
        span: 609..610,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 30,
        column: 9,
        span: 613..619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nn",
        ),
        line: 30,
        column: 0,
        span: 620..622,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 31,
        column: 0,
        span: 623..626,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 34,
        column: 6,
        span: 648..653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 34,
        column: 8,
        span: 654..655,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 34,
        column: 10,
        span: 656..657,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 34,
        column: 0,
        span: 657..659,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 35,
        column: 6,
        span: 660..665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 35,
        column: 10,
        span: 666..669,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 35,
        column: 12,
        span: 670..671,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 35,
        column: 14,
        span: 671..673,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 35,
        column: 15,
        span: 673..674,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 35,
        column: 0,
        span: 673..676,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 36,
        column: 6,
        span: 677..682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 36,
        column: 8,
        span: 683..684,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 36,
        column: 10,
        span: 685..686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 36,
        column: 14,
        span: 687..690,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 36,
        column: 0,
        span: 691..693,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 37,
        column: 8,
        span: 696..701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 37,
        column: 10,
        span: 702..703,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 37,
        column: 12,
        span: 704..705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fb",
        ),
        line: 37,
        column: 15,
        span: 706..708,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 16,
        span: 708..709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 37,
        column: 17,
        span: 709..710,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 18,
        span: 710..711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 38,
        column: 9,
        span: 714..720,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 10,
        span: 720..721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 38,
        column: 11,
        span: 721..722,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 38,
        column: 14,
        span: 723..725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 38,
        column: 16,
        span: 726..727,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 38,
        column: 20,
        span: 728..731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 38,
        column: 22,
        span: 732..733,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 38,
        column: 25,
        span: 734..736,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 38,
        column: 27,
        span: 737..738,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 38,
        column: 28,
        span: 738..739,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".125",
                },
            ),
        ),
        line: 38,
        column: 33,
        span: 738..744,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 34,
        span: 744..745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 39,
        column: 4,
        span: 748..749,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 39,
        column: 6,
        span: 750..751,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 39,
        column: 11,
        span: 752..756,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 39,
        column: 12,
        span: 756..757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 39,
        column: 16,
        span: 757..761,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 17,
        span: 761..762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 39,
        column: 18,
        span: 762..763,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 39,
        column: 19,
        span: 763..764,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 39,
        column: 22,
        span: 763..767,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 23,
        span: 767..768,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 40,
        column: 0,
        span: 769..772,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 43,
        column: 6,
        span: 776..781,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 43,
        column: 15,
        span: 782..790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 43,
        column: 21,
        span: 791..796,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 23,
        span: 797..798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 43,
        column: 24,
        span: 798..799,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 43,
        column: 25,
        span: 799..800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        line: 43,
        column: 28,
        span: 801..803,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 43,
        column: 29,
        span: 803..804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nh",
        ),
        line: 43,
        column: 32,
        span: 805..807,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 33,
        span: 807..808,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 44,
        column: 8,
        span: 811..816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 44,
        column: 10,
        span: 817..818,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 44,
        column: 11,
        span: 818..819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 44,
        column: 13,
        span: 820..821,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 44,
        column: 15,
        span: 822..823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 44,
        column: 17,
        span: 824..825,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 44,
        column: 18,
        span: 825..826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "querytab",
        ),
        line: 44,
        column: 26,
        span: 826..834,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 27,
        span: 834..835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 44,
        column: 28,
        span: 835..836,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 29,
        span: 836..837,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 45,
        column: 5,
        span: 840..842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 45,
        column: 7,
        span: 843..844,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 45,
        column: 10,
        span: 845..847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        line: 45,
        column: 13,
        span: 848..850,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 45,
        column: 16,
        span: 851..853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 45,
        column: 18,
        span: 854..855,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 45,
        column: 21,
        span: 856..858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nh",
        ),
        line: 45,
        column: 24,
        span: 859..861,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 45,
        column: 0,
        span: 862..866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 46,
        column: 10,
        span: 871..876,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 11,
        span: 876..877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        line: 46,
        column: 13,
        span: 877..879,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 14,
        span: 879..880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nh",
        ),
        line: 46,
        column: 17,
        span: 881..883,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 18,
        span: 883..884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 46,
        column: 20,
        span: 885..886,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 21,
        span: 886..887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 46,
        column: 23,
        span: 888..889,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 24,
        span: 889..890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 47,
        column: 11,
        span: 895..901,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 12,
        span: 901..902,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 47,
        column: 15,
        span: 902..905,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 16,
        span: 905..906,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 48,
        column: 0,
        span: 909..912,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 49,
        column: 0,
        span: 913..916,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 52,
        column: 6,
        span: 947..952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 52,
        column: 10,
        span: 953..956,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 52,
        column: 12,
        span: 957..958,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 52,
        column: 0,
        span: 958..961,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 53,
        column: 6,
        span: 962..967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 53,
        column: 8,
        span: 968..969,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 53,
        column: 10,
        span: 970..971,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'return {'",
        ),
        line: 53,
        column: 21,
        span: 972..982,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 54,
        column: 4,
        span: 983..986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 54,
        column: 6,
        span: 987..988,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 54,
        column: 7,
        span: 988..989,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 54,
        column: 8,
        span: 988..990,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 54,
        column: 9,
        span: 990..991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 54,
        column: 12,
        span: 991..994,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 54,
        column: 0,
        span: 995..997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 55,
        column: 4,
        span: 1000..1001,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 55,
        column: 6,
        span: 1002..1003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 55,
        column: 8,
        span: 1004..1005,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 55,
        column: 10,
        span: 1005..1007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 55,
        column: 11,
        span: 1007..1008,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 55,
        column: 13,
        span: 1008..1010,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "','",
        ),
        line: 55,
        column: 16,
        span: 1010..1013,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 56,
        column: 8,
        span: 1016..1021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 56,
        column: 10,
        span: 1022..1023,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 56,
        column: 12,
        span: 1024..1025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 56,
        column: 0,
        span: 1026..1027,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 57,
        column: 6,
        span: 1030..1033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 57,
        column: 8,
        span: 1034..1035,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 57,
        column: 9,
        span: 1035..1036,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 57,
        column: 10,
        span: 1035..1037,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 57,
        column: 11,
        span: 1037..1038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 57,
        column: 14,
        span: 1038..1041,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 57,
        column: 17,
        span: 1042..1044,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 58,
        column: 10,
        span: 1050..1055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 58,
        column: 12,
        span: 1056..1057,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 58,
        column: 14,
        span: 1058..1059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        line: 58,
        column: 25,
        span: 1060..1070,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 26,
        span: 1070..1071,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 58,
        column: 27,
        span: 1071..1072,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 58,
        column: 29,
        span: 1072..1074,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'}'",
        ),
        line: 58,
        column: 32,
        span: 1074..1077,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 33,
        span: 1077..1078,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 34,
        span: 1078..1079,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 35,
        span: 1079..1080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 59,
        column: 11,
        span: 1085..1091,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 12,
        span: 1091..1092,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 59,
        column: 13,
        span: 1092..1093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 59,
        column: 14,
        span: 1093..1094,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 59,
        column: 17,
        span: 1095..1097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 59,
        column: 19,
        span: 1098..1099,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 20,
        span: 1099..1100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 60,
        column: 10,
        span: 1105..1110,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 11,
        span: 1110..1111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 60,
        column: 12,
        span: 1111..1112,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 60,
        column: 13,
        span: 1112..1113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fb",
        ),
        line: 60,
        column: 16,
        span: 1114..1116,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 17,
        span: 1116..1117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 60,
        column: 18,
        span: 1117..1118,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 19,
        span: 1118..1119,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 60,
        column: 20,
        span: 1119..1120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp2",
        ),
        line: 60,
        column: 24,
        span: 1121..1124,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 25,
        span: 1124..1125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 60,
        column: 26,
        span: 1125..1126,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 27,
        span: 1126..1127,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 28,
        span: 1127..1128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 61,
        column: 6,
        span: 1133..1134,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 61,
        column: 8,
        span: 1135..1136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 61,
        column: 15,
        span: 1137..1143,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 61,
        column: 16,
        span: 1143..1144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 61,
        column: 22,
        span: 1144..1150,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 23,
        span: 1150..1151,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%sa%d=%d,'",
        ),
        line: 61,
        column: 34,
        span: 1151..1162,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 35,
        span: 1162..1163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 61,
        column: 37,
        span: 1164..1165,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 38,
        span: 1165..1166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 61,
        column: 40,
        span: 1167..1168,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 41,
        span: 1168..1169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 61,
        column: 43,
        span: 1170..1171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 44,
        span: 1171..1172,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 62,
        column: 0,
        span: 1175..1178,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 63,
        column: 0,
        span: 1179..1182,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 67,
        column: 6,
        span: 1226..1231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 67,
        column: 8,
        span: 1232..1233,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 67,
        column: 10,
        span: 1234..1235,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 67,
        column: 12,
        span: 1236..1237,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 67,
        column: 13,
        span: 1237..1238,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 68,
        column: 4,
        span: 1239..1242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 68,
        column: 6,
        span: 1243..1244,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 68,
        column: 7,
        span: 1244..1245,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 68,
        column: 8,
        span: 1244..1246,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 68,
        column: 9,
        span: 1246..1247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 68,
        column: 12,
        span: 1247..1250,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 68,
        column: 15,
        span: 1251..1253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 68,
        column: 17,
        span: 1254..1255,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 68,
        column: 18,
        span: 1255..1256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 68,
        column: 19,
        span: 1256..1257,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 68,
        column: 20,
        span: 1257..1258,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 68,
        column: 22,
        span: 1259..1260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 68,
        column: 24,
        span: 1261..1262,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 68,
        column: 28,
        span: 1263..1266,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 69,
        column: 4,
        span: 1294..1297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 69,
        column: 6,
        span: 1298..1299,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 69,
        column: 7,
        span: 1299..1300,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 69,
        column: 8,
        span: 1299..1301,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 69,
        column: 9,
        span: 1301..1302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 69,
        column: 12,
        span: 1302..1305,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 69,
        column: 0,
        span: 1306..1308,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 70,
        column: 8,
        span: 1311..1316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 70,
        column: 10,
        span: 1317..1318,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 70,
        column: 12,
        span: 1319..1320,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 70,
        column: 14,
        span: 1321..1322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 70,
        column: 20,
        span: 1322..1328,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 21,
        span: 1328..1329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 70,
        column: 22,
        span: 1329..1330,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 70,
        column: 23,
        span: 1330..1331,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 70,
        column: 24,
        span: 1330..1332,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 70,
        column: 25,
        span: 1332..1333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 70,
        column: 26,
        span: 1333..1334,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 27,
        span: 1334..1335,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 70,
        column: 28,
        span: 1335..1336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 71,
        column: 9,
        span: 1339..1345,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 10,
        span: 1345..1346,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 71,
        column: 11,
        span: 1346..1347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 71,
        column: 12,
        span: 1347..1348,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 71,
        column: 15,
        span: 1349..1351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 71,
        column: 17,
        span: 1352..1353,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 18,
        span: 1353..1354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 72,
        column: 8,
        span: 1357..1362,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 9,
        span: 1362..1363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 72,
        column: 10,
        span: 1363..1364,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 72,
        column: 11,
        span: 1364..1365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 72,
        column: 13,
        span: 1366..1367,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 72,
        column: 14,
        span: 1367..1368,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 72,
        column: 16,
        span: 1368..1370,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 17,
        span: 1370..1371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 73,
        column: 4,
        span: 1374..1375,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 73,
        column: 6,
        span: 1376..1377,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 73,
        column: 8,
        span: 1378..1379,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 9,
        span: 1378..1380,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 73,
        column: 10,
        span: 1380..1381,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 11,
        span: 1380..1382,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 73,
        column: 12,
        span: 1382..1383,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 13,
        span: 1382..1384,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 73,
        column: 14,
        span: 1384..1385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 73,
        column: 20,
        span: 1385..1391,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 21,
        span: 1391..1392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 73,
        column: 22,
        span: 1392..1393,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 73,
        column: 23,
        span: 1393..1394,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 24,
        span: 1393..1395,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 73,
        column: 25,
        span: 1395..1396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 73,
        column: 26,
        span: 1396..1397,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 27,
        span: 1397..1398,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 73,
        column: 28,
        span: 1398..1399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 74,
        column: 8,
        span: 1402..1407,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
        column: 9,
        span: 1407..1408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 74,
        column: 10,
        span: 1408..1409,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 74,
        column: 11,
        span: 1409..1410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 74,
        column: 13,
        span: 1411..1412,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 74,
        column: 14,
        span: 1412..1413,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 74,
        column: 15,
        span: 1412..1414,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 74,
        column: 16,
        span: 1414..1415,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 74,
        column: 18,
        span: 1415..1417,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
        column: 19,
        span: 1417..1418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 75,
        column: 9,
        span: 1421..1427,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
        column: 10,
        span: 1427..1428,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 75,
        column: 11,
        span: 1428..1429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 75,
        column: 12,
        span: 1429..1430,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 75,
        column: 15,
        span: 1431..1433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 75,
        column: 17,
        span: 1434..1435,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 75,
        column: 19,
        span: 1436..1437,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 75,
        column: 21,
        span: 1437..1439,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
        column: 22,
        span: 1439..1440,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 76,
        column: 0,
        span: 1441..1444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 79,
        column: 6,
        span: 1447..1452,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 79,
        column: 9,
        span: 1452..1455,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 82,
        column: 6,
        span: 1493..1498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 82,
        column: 10,
        span: 1499..1502,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 82,
        column: 12,
        span: 1503..1504,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "130",
                    after_decimal: "",
                },
            ),
        ),
        line: 82,
        column: 0,
        span: 1504..1508,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 83,
        column: 6,
        span: 1509..1514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 83,
        column: 8,
        span: 1515..1516,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 83,
        column: 10,
        span: 1517..1518,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 83,
        column: 12,
        span: 1519..1520,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 83,
        column: 13,
        span: 1520..1521,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 83,
        column: 14,
        span: 1521..1522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 83,
        column: 16,
        span: 1523..1524,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 83,
        column: 17,
        span: 1524..1525,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 83,
        column: 18,
        span: 1524..1526,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 83,
        column: 19,
        span: 1526..1527,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 83,
        column: 21,
        span: 1528..1529,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 83,
        column: 23,
        span: 1529..1531,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 83,
        column: 24,
        span: 1531..1532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 83,
        column: 30,
        span: 1533..1538,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
        column: 31,
        span: 1538..1539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 83,
        column: 32,
        span: 1539..1540,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 33,
        span: 1540..1541,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 83,
        column: 35,
        span: 1541..1543,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 36,
        span: 1543..1544,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 83,
        column: 38,
        span: 1544..1546,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
        column: 39,
        span: 1546..1547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 84,
        column: 2,
        span: 1548..1549,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 84,
        column: 4,
        span: 1550..1551,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 84,
        column: 6,
        span: 1552..1553,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 84,
        column: 7,
        span: 1553..1554,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 84,
        column: 8,
        span: 1554..1555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 84,
        column: 10,
        span: 1556..1557,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 84,
        column: 11,
        span: 1557..1558,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 84,
        column: 12,
        span: 1557..1559,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 84,
        column: 13,
        span: 1559..1560,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 84,
        column: 15,
        span: 1561..1562,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 84,
        column: 17,
        span: 1562..1564,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 84,
        column: 18,
        span: 1564..1565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 84,
        column: 24,
        span: 1566..1571,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 84,
        column: 25,
        span: 1571..1572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 84,
        column: 26,
        span: 1572..1573,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 84,
        column: 27,
        span: 1573..1574,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 84,
        column: 29,
        span: 1574..1576,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 84,
        column: 30,
        span: 1576..1577,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 84,
        column: 32,
        span: 1577..1579,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 84,
        column: 33,
        span: 1579..1580,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 84,
        column: 34,
        span: 1580..1581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 84,
        column: 36,
        span: 1582..1583,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 84,
        column: 37,
        span: 1583..1584,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 84,
        column: 38,
        span: 1583..1585,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 84,
        column: 39,
        span: 1585..1586,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 84,
        column: 41,
        span: 1587..1588,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 84,
        column: 43,
        span: 1588..1590,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 84,
        column: 44,
        span: 1590..1591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 84,
        column: 50,
        span: 1592..1597,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 84,
        column: 51,
        span: 1597..1598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 84,
        column: 52,
        span: 1598..1599,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 84,
        column: 53,
        span: 1599..1600,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 84,
        column: 55,
        span: 1600..1602,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 84,
        column: 56,
        span: 1602..1603,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 84,
        column: 58,
        span: 1603..1605,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 84,
        column: 59,
        span: 1605..1606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 85,
        column: 2,
        span: 1607..1608,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 85,
        column: 4,
        span: 1609..1610,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 85,
        column: 6,
        span: 1611..1612,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 85,
        column: 7,
        span: 1612..1613,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 85,
        column: 8,
        span: 1613..1614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 85,
        column: 10,
        span: 1615..1616,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 85,
        column: 11,
        span: 1616..1617,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
        column: 12,
        span: 1616..1618,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 85,
        column: 13,
        span: 1618..1619,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 85,
        column: 15,
        span: 1620..1621,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
        column: 17,
        span: 1621..1623,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 85,
        column: 18,
        span: 1623..1624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 85,
        column: 20,
        span: 1625..1626,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 85,
        column: 21,
        span: 1626..1627,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
        column: 22,
        span: 1626..1628,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 85,
        column: 23,
        span: 1628..1629,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 85,
        column: 25,
        span: 1630..1631,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
        column: 27,
        span: 1631..1633,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 85,
        column: 28,
        span: 1633..1634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 85,
        column: 34,
        span: 1635..1640,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
        column: 35,
        span: 1640..1641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 85,
        column: 36,
        span: 1641..1642,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
        column: 37,
        span: 1642..1643,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
        column: 39,
        span: 1643..1645,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
        column: 40,
        span: 1645..1646,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
        column: 42,
        span: 1646..1648,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
        column: 43,
        span: 1648..1649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 86,
        column: 2,
        span: 1650..1651,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 86,
        column: 4,
        span: 1652..1653,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 86,
        column: 6,
        span: 1654..1655,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 86,
        column: 7,
        span: 1655..1656,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 87,
        column: 4,
        span: 1657..1660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 87,
        column: 6,
        span: 1661..1662,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 87,
        column: 8,
        span: 1663..1664,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 87,
        column: 10,
        span: 1664..1666,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 87,
        column: 11,
        span: 1666..1667,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 87,
        column: 14,
        span: 1667..1670,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 87,
        column: 0,
        span: 1671..1673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 88,
        column: 4,
        span: 1676..1677,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 88,
        column: 5,
        span: 1677..1678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 88,
        column: 6,
        span: 1678..1679,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 88,
        column: 7,
        span: 1679..1680,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 88,
        column: 9,
        span: 1681..1682,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 88,
        column: 0,
        span: 1682..1684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 89,
        column: 9,
        span: 1687..1693,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
        column: 10,
        span: 1693..1694,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 89,
        column: 11,
        span: 1694..1695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 89,
        column: 12,
        span: 1695..1696,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 89,
        column: 15,
        span: 1697..1699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 89,
        column: 17,
        span: 1700..1701,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
        column: 18,
        span: 1701..1702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 90,
        column: 8,
        span: 1705..1710,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 90,
        column: 9,
        span: 1710..1711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 90,
        column: 10,
        span: 1711..1712,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 90,
        column: 11,
        span: 1712..1713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp2",
        ),
        line: 90,
        column: 15,
        span: 1714..1717,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 90,
        column: 16,
        span: 1717..1718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 90,
        column: 17,
        span: 1718..1719,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 90,
        column: 18,
        span: 1719..1720,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 90,
        column: 19,
        span: 1720..1721,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 90,
        column: 21,
        span: 1721..1723,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 90,
        column: 22,
        span: 1723..1724,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 91,
        column: 0,
        span: 1725..1728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 93,
        column: 2,
        span: 1730..1731,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 93,
        column: 4,
        span: 1732..1733,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 93,
        column: 6,
        span: 1734..1735,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 93,
        column: 7,
        span: 1735..1736,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 94,
        column: 4,
        span: 1737..1740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 94,
        column: 6,
        span: 1741..1742,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 94,
        column: 8,
        span: 1743..1744,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 94,
        column: 10,
        span: 1744..1746,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 11,
        span: 1746..1747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 94,
        column: 14,
        span: 1747..1750,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 94,
        column: 0,
        span: 1751..1753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 95,
        column: 4,
        span: 1756..1757,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 95,
        column: 5,
        span: 1757..1758,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 95,
        column: 8,
        span: 1758..1761,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 95,
        column: 10,
        span: 1761..1763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 95,
        column: 11,
        span: 1763..1764,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 95,
        column: 12,
        span: 1764..1765,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 95,
        column: 14,
        span: 1766..1767,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 95,
        column: 0,
        span: 1767..1769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 96,
        column: 9,
        span: 1772..1778,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 10,
        span: 1778..1779,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 96,
        column: 11,
        span: 1779..1780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 96,
        column: 12,
        span: 1780..1781,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 96,
        column: 15,
        span: 1782..1784,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 96,
        column: 17,
        span: 1784..1786,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 18,
        span: 1786..1787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 97,
        column: 8,
        span: 1790..1795,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
        column: 9,
        span: 1795..1796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 97,
        column: 10,
        span: 1796..1797,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 97,
        column: 11,
        span: 1797..1798,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 97,
        column: 13,
        span: 1798..1800,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 97,
        column: 14,
        span: 1800..1801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp2",
        ),
        line: 97,
        column: 18,
        span: 1802..1805,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
        column: 19,
        span: 1805..1806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 97,
        column: 20,
        span: 1806..1807,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
        column: 21,
        span: 1807..1808,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
        column: 22,
        span: 1808..1809,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 98,
        column: 0,
        span: 1810..1813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 100,
        column: 2,
        span: 1815..1816,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 100,
        column: 4,
        span: 1817..1818,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 100,
        column: 6,
        span: 1819..1820,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 100,
        column: 7,
        span: 1820..1821,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 101,
        column: 4,
        span: 1822..1825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 101,
        column: 6,
        span: 1826..1827,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 101,
        column: 7,
        span: 1827..1828,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
        column: 8,
        span: 1827..1829,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 101,
        column: 9,
        span: 1829..1830,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
        column: 11,
        span: 1829..1832,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 101,
        column: 14,
        span: 1833..1835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 101,
        column: 16,
        span: 1836..1837,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 101,
        column: 17,
        span: 1837..1838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 101,
        column: 18,
        span: 1838..1839,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 101,
        column: 19,
        span: 1839..1840,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 101,
        column: 21,
        span: 1841..1842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 101,
        column: 23,
        span: 1843..1844,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 101,
        column: 0,
        span: 1845..1848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 102,
        column: 6,
        span: 1849..1854,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
        column: 7,
        span: 1854..1855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 102,
        column: 8,
        span: 1855..1856,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 102,
        column: 9,
        span: 1856..1857,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 102,
        column: 12,
        span: 1857..1860,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 102,
        column: 13,
        span: 1860..1861,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 102,
        column: 15,
        span: 1861..1863,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
        column: 16,
        span: 1863..1864,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 103,
        column: 4,
        span: 1865..1868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 103,
        column: 6,
        span: 1869..1870,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 103,
        column: 7,
        span: 1870..1871,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 103,
        column: 8,
        span: 1870..1872,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 103,
        column: 9,
        span: 1872..1873,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 103,
        column: 11,
        span: 1872..1875,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 103,
        column: 14,
        span: 1876..1878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 103,
        column: 16,
        span: 1879..1880,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 103,
        column: 17,
        span: 1880..1881,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 103,
        column: 18,
        span: 1881..1882,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 103,
        column: 19,
        span: 1882..1883,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 103,
        column: 21,
        span: 1884..1885,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 103,
        column: 25,
        span: 1886..1889,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 103,
        column: 0,
        span: 1890..1893,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 104,
        column: 4,
        span: 1894..1897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 104,
        column: 6,
        span: 1898..1899,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 104,
        column: 7,
        span: 1899..1900,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 104,
        column: 9,
        span: 1899..1902,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 104,
        column: 10,
        span: 1902..1903,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 104,
        column: 12,
        span: 1902..1905,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 104,
        column: 15,
        span: 1906..1908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 104,
        column: 17,
        span: 1909..1910,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 104,
        column: 18,
        span: 1910..1911,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 104,
        column: 19,
        span: 1911..1912,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 104,
        column: 20,
        span: 1912..1913,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 104,
        column: 22,
        span: 1914..1915,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 104,
        column: 26,
        span: 1916..1919,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 104,
        column: 30,
        span: 1920..1923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 105,
        column: 6,
        span: 1948..1953,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
        column: 7,
        span: 1953..1954,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 105,
        column: 8,
        span: 1954..1955,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 105,
        column: 9,
        span: 1955..1956,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
        column: 11,
        span: 1956..1958,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 105,
        column: 12,
        span: 1958..1959,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
        column: 14,
        span: 1959..1961,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
        column: 15,
        span: 1961..1962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 106,
        column: 2,
        span: 1963..1964,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 106,
        column: 3,
        span: 1964..1965,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
        column: 5,
        span: 1964..1967,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 106,
        column: 6,
        span: 1967..1968,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 106,
        column: 8,
        span: 1969..1970,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
        column: 0,
        span: 1970..1972,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 107,
        column: 4,
        span: 1973..1976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 107,
        column: 6,
        span: 1977..1978,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 107,
        column: 7,
        span: 1978..1979,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 107,
        column: 9,
        span: 1978..1981,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 107,
        column: 10,
        span: 1981..1982,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 107,
        column: 12,
        span: 1981..1984,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 107,
        column: 15,
        span: 1985..1987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 107,
        column: 17,
        span: 1988..1989,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 107,
        column: 18,
        span: 1989..1990,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 107,
        column: 19,
        span: 1990..1991,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 107,
        column: 20,
        span: 1991..1992,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 107,
        column: 22,
        span: 1993..1994,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 107,
        column: 26,
        span: 1995..1998,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 107,
        column: 30,
        span: 1999..2002,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 108,
        column: 6,
        span: 2027..2032,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
        column: 7,
        span: 2032..2033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 108,
        column: 8,
        span: 2033..2034,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 108,
        column: 9,
        span: 2034..2035,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 108,
        column: 11,
        span: 2035..2037,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 108,
        column: 12,
        span: 2037..2038,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 108,
        column: 14,
        span: 2038..2040,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
        column: 15,
        span: 2040..2041,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 109,
        column: 4,
        span: 2042..2045,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 109,
        column: 6,
        span: 2046..2047,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 109,
        column: 7,
        span: 2047..2048,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 109,
        column: 8,
        span: 2047..2049,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 109,
        column: 9,
        span: 2049..2050,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        line: 109,
        column: 11,
        span: 2049..2052,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 109,
        column: 14,
        span: 2053..2055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 109,
        column: 16,
        span: 2056..2057,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 109,
        column: 17,
        span: 2057..2058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 109,
        column: 18,
        span: 2058..2059,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 109,
        column: 19,
        span: 2059..2060,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 109,
        column: 21,
        span: 2061..2062,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 109,
        column: 25,
        span: 2063..2066,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 109,
        column: 0,
        span: 2067..2070,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 110,
        column: 4,
        span: 2071..2074,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 110,
        column: 6,
        span: 2075..2076,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 110,
        column: 7,
        span: 2076..2077,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 110,
        column: 9,
        span: 2076..2079,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 110,
        column: 10,
        span: 2079..2080,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        line: 110,
        column: 12,
        span: 2079..2082,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 110,
        column: 15,
        span: 2083..2085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 110,
        column: 17,
        span: 2086..2087,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 110,
        column: 18,
        span: 2087..2088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 110,
        column: 19,
        span: 2088..2089,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 110,
        column: 20,
        span: 2089..2090,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 110,
        column: 22,
        span: 2091..2092,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 110,
        column: 26,
        span: 2093..2096,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 110,
        column: 30,
        span: 2097..2100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 111,
        column: 6,
        span: 2125..2130,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 7,
        span: 2130..2131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 111,
        column: 8,
        span: 2131..2132,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 9,
        span: 2132..2133,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 111,
        column: 11,
        span: 2133..2135,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 12,
        span: 2135..2136,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 111,
        column: 14,
        span: 2136..2138,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 15,
        span: 2138..2139,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 114,
        column: 4,
        span: 2160..2163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 114,
        column: 6,
        span: 2164..2165,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 114,
        column: 7,
        span: 2165..2166,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 114,
        column: 8,
        span: 2165..2167,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 114,
        column: 9,
        span: 2167..2168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 114,
        column: 12,
        span: 2168..2171,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 114,
        column: 0,
        span: 2172..2174,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 115,
        column: 8,
        span: 2177..2182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 115,
        column: 10,
        span: 2183..2184,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 115,
        column: 12,
        span: 2185..2186,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 115,
        column: 14,
        span: 2187..2188,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 115,
        column: 15,
        span: 2188..2189,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 116,
        column: 6,
        span: 2192..2195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 116,
        column: 8,
        span: 2196..2197,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 116,
        column: 9,
        span: 2197..2198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 116,
        column: 10,
        span: 2198..2199,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 116,
        column: 11,
        span: 2199..2200,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 116,
        column: 12,
        span: 2199..2201,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 116,
        column: 13,
        span: 2201..2202,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 116,
        column: 14,
        span: 2202..2203,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 116,
        column: 15,
        span: 2202..2204,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 116,
        column: 18,
        span: 2205..2207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 116,
        column: 20,
        span: 2208..2209,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 116,
        column: 21,
        span: 2209..2210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 116,
        column: 22,
        span: 2210..2211,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 116,
        column: 23,
        span: 2211..2212,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 116,
        column: 25,
        span: 2213..2214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 116,
        column: 27,
        span: 2215..2216,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 116,
        column: 31,
        span: 2217..2220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 117,
        column: 8,
        span: 2244..2249,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 9,
        span: 2249..2250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 117,
        column: 10,
        span: 2250..2251,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 11,
        span: 2251..2252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp2",
        ),
        line: 117,
        column: 15,
        span: 2253..2256,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 16,
        span: 2256..2257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 117,
        column: 17,
        span: 2257..2258,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 18,
        span: 2258..2259,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 19,
        span: 2259..2260,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 117,
        column: 21,
        span: 2260..2262,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 22,
        span: 2262..2263,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 118,
        column: 0,
        span: 2264..2267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 121,
        column: 4,
        span: 2294..2297,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 121,
        column: 6,
        span: 2298..2299,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "35",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 0,
        span: 2299..2302,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 122,
        column: 9,
        span: 2303..2311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 122,
        column: 13,
        span: 2312..2315,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 15,
        span: 2316..2317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 122,
        column: 16,
        span: 2317..2318,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
        column: 17,
        span: 2318..2319,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 122,
        column: 21,
        span: 2320..2323,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 22,
        span: 2323..2324,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 123,
        column: 8,
        span: 2327..2332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 123,
        column: 12,
        span: 2333..2336,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 123,
        column: 14,
        span: 2337..2338,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 123,
        column: 16,
        span: 2339..2340,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 123,
        column: 19,
        span: 2340..2343,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 123,
        column: 20,
        span: 2343..2344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 124,
        column: 8,
        span: 2347..2352,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
        column: 9,
        span: 2352..2353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 124,
        column: 12,
        span: 2353..2356,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 124,
        column: 13,
        span: 2356..2357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 124,
        column: 15,
        span: 2358..2359,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 124,
        column: 16,
        span: 2359..2360,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 124,
        column: 18,
        span: 2360..2362,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
        column: 19,
        span: 2362..2363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 125,
        column: 9,
        span: 2366..2372,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 10,
        span: 2372..2373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 125,
        column: 16,
        span: 2373..2379,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 17,
        span: 2379..2380,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'#'",
        ),
        line: 125,
        column: 20,
        span: 2380..2383,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 21,
        span: 2383..2384,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 125,
        column: 25,
        span: 2385..2388,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
        column: 26,
        span: 2388..2389,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 125,
        column: 29,
        span: 2390..2392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 125,
        column: 31,
        span: 2393..2394,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
        column: 32,
        span: 2394..2395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 126,
        column: 6,
        span: 2398..2401,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 126,
        column: 7,
        span: 2401..2402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 126,
        column: 8,
        span: 2402..2403,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 126,
        column: 9,
        span: 2403..2404,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
        column: 10,
        span: 2403..2405,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 126,
        column: 11,
        span: 2405..2406,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 126,
        column: 13,
        span: 2407..2408,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 126,
        column: 0,
        span: 2409..2413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 127,
        column: 8,
        span: 2416..2421,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 127,
        column: 9,
        span: 2421..2422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 127,
        column: 12,
        span: 2422..2425,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 127,
        column: 13,
        span: 2425..2426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp2",
        ),
        line: 127,
        column: 17,
        span: 2427..2430,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 127,
        column: 18,
        span: 2430..2431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 127,
        column: 19,
        span: 2431..2432,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 127,
        column: 20,
        span: 2432..2433,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 127,
        column: 21,
        span: 2432..2434,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 127,
        column: 22,
        span: 2434..2435,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 127,
        column: 23,
        span: 2435..2436,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 127,
        column: 25,
        span: 2436..2438,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 127,
        column: 26,
        span: 2438..2439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 128,
        column: 6,
        span: 2442..2445,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 128,
        column: 7,
        span: 2445..2446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 128,
        column: 8,
        span: 2446..2447,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 128,
        column: 10,
        span: 2448..2449,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 128,
        column: 0,
        span: 2450..2454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 129,
        column: 8,
        span: 2457..2462,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
        column: 9,
        span: 2462..2463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 129,
        column: 12,
        span: 2463..2466,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 13,
        span: 2466..2467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp2",
        ),
        line: 129,
        column: 17,
        span: 2468..2471,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
        column: 18,
        span: 2471..2472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 129,
        column: 19,
        span: 2472..2473,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 129,
        column: 20,
        span: 2473..2474,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 129,
        column: 21,
        span: 2473..2475,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 22,
        span: 2475..2476,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 23,
        span: 2476..2477,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 129,
        column: 25,
        span: 2477..2479,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 26,
        span: 2479..2480,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 130,
        column: 0,
        span: 2481..2484,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 131,
        column: 6,
        span: 2485..2490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 131,
        column: 8,
        span: 2491..2492,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 131,
        column: 10,
        span: 2493..2494,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 131,
        column: 12,
        span: 2495..2496,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 131,
        column: 13,
        span: 2496..2497,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 132,
        column: 4,
        span: 2498..2501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 132,
        column: 6,
        span: 2502..2503,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 132,
        column: 7,
        span: 2503..2504,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 132,
        column: 8,
        span: 2503..2505,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 9,
        span: 2505..2506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 132,
        column: 12,
        span: 2506..2509,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 132,
        column: 15,
        span: 2510..2512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 132,
        column: 17,
        span: 2513..2514,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 132,
        column: 18,
        span: 2514..2515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 132,
        column: 19,
        span: 2515..2516,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 132,
        column: 20,
        span: 2516..2517,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 132,
        column: 22,
        span: 2518..2519,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 132,
        column: 27,
        span: 2520..2524,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 132,
        column: 28,
        span: 2524..2525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 132,
        column: 32,
        span: 2526..2529,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 132,
        column: 33,
        span: 2529..2530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 132,
        column: 34,
        span: 2530..2531,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 35,
        span: 2531..2532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 132,
        column: 42,
        span: 2533..2539,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 132,
        column: 43,
        span: 2539..2540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 132,
        column: 44,
        span: 2540..2541,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 132,
        column: 45,
        span: 2541..2542,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 132,
        column: 46,
        span: 2542..2543,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 132,
        column: 0,
        span: 2544..2547,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 134,
        column: 0,
        span: 2549..2552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 138,
        column: 7,
        span: 2594..2600,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 8,
        span: 2600..2601,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 138,
        column: 9,
        span: 2601..2602,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 138,
        column: 10,
        span: 2602..2603,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 138,
        column: 11,
        span: 2603..2604,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 138,
        column: 14,
        span: 2605..2607,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
        column: 16,
        span: 2607..2609,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 17,
        span: 2609..2610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 139,
        column: 7,
        span: 2611..2617,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
        column: 8,
        span: 2617..2618,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 139,
        column: 9,
        span: 2618..2619,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 139,
        column: 10,
        span: 2619..2620,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 139,
        column: 13,
        span: 2620..2623,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 139,
        column: 14,
        span: 2623..2624,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 139,
        column: 17,
        span: 2625..2627,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 139,
        column: 19,
        span: 2627..2629,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 20,
        span: 2629..2630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 140,
        column: 7,
        span: 2631..2637,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 8,
        span: 2637..2638,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 140,
        column: 9,
        span: 2638..2639,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 140,
        column: 10,
        span: 2639..2640,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 140,
        column: 13,
        span: 2640..2643,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
        column: 14,
        span: 2643..2644,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 140,
        column: 18,
        span: 2645..2648,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 140,
        column: 19,
        span: 2648..2649,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 140,
        column: 22,
        span: 2650..2652,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 140,
        column: 24,
        span: 2652..2654,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 25,
        span: 2654..2655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 141,
        column: 7,
        span: 2656..2662,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
        column: 8,
        span: 2662..2663,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 141,
        column: 9,
        span: 2663..2664,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 141,
        column: 10,
        span: 2664..2665,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 141,
        column: 13,
        span: 2665..2668,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 141,
        column: 14,
        span: 2668..2669,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 141,
        column: 18,
        span: 2670..2673,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 141,
        column: 19,
        span: 2673..2674,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 141,
        column: 23,
        span: 2675..2678,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 141,
        column: 24,
        span: 2678..2679,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 141,
        column: 27,
        span: 2680..2682,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 141,
        column: 29,
        span: 2682..2684,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
        column: 30,
        span: 2684..2685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 142,
        column: 7,
        span: 2686..2692,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 142,
        column: 8,
        span: 2692..2693,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 142,
        column: 9,
        span: 2693..2694,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 142,
        column: 10,
        span: 2694..2695,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 142,
        column: 13,
        span: 2695..2698,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 142,
        column: 14,
        span: 2698..2699,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 142,
        column: 18,
        span: 2700..2703,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 142,
        column: 19,
        span: 2703..2704,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 142,
        column: 23,
        span: 2705..2708,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 142,
        column: 24,
        span: 2708..2709,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 142,
        column: 28,
        span: 2710..2713,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 142,
        column: 29,
        span: 2713..2714,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 142,
        column: 32,
        span: 2715..2717,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 142,
        column: 34,
        span: 2717..2719,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 142,
        column: 35,
        span: 2719..2720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 143,
        column: 6,
        span: 2721..2726,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 143,
        column: 9,
        span: 2726..2729,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 146,
        column: 6,
        span: 2732..2737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nofind",
        ),
        line: 146,
        column: 13,
        span: 2738..2744,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 146,
        column: 15,
        span: 2745..2746,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 146,
        column: 17,
        span: 2747..2748,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 146,
        column: 18,
        span: 2748..2749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 148,
        column: 2,
        span: 2751..2752,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 148,
        column: 3,
        span: 2752..2753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 148,
        column: 4,
        span: 2753..2754,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 148,
        column: 5,
        span: 2754..2755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 148,
        column: 6,
        span: 2755..2756,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 148,
        column: 8,
        span: 2757..2758,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 148,
        column: 10,
        span: 2758..2760,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 148,
        column: 11,
        span: 2760..2761,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 148,
        column: 12,
        span: 2760..2762,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 148,
        column: 13,
        span: 2762..2763,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 148,
        column: 0,
        span: 2762..2764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 149,
        column: 2,
        span: 2765..2766,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 149,
        column: 3,
        span: 2766..2767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 149,
        column: 4,
        span: 2767..2768,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 149,
        column: 5,
        span: 2768..2769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 149,
        column: 6,
        span: 2769..2770,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 149,
        column: 8,
        span: 2771..2772,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 149,
        column: 0,
        span: 2773..2776,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 151,
        column: 6,
        span: 2778..2783,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 151,
        column: 15,
        span: 2784..2792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 151,
        column: 20,
        span: 2793..2797,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 22,
        span: 2798..2799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 151,
        column: 26,
        span: 2799..2803,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
        column: 27,
        span: 2803..2804,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 152,
        column: 8,
        span: 2807..2812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 152,
        column: 10,
        span: 2813..2814,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 152,
        column: 11,
        span: 2814..2815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 152,
        column: 0,
        span: 2815..2816,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 153,
        column: 8,
        span: 2819..2824,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 10,
        span: 2824..2826,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 153,
        column: 0,
        span: 2827..2829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 154,
        column: 6,
        span: 2834..2835,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 154,
        column: 7,
        span: 2835..2836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 154,
        column: 8,
        span: 2836..2837,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 154,
        column: 10,
        span: 2838..2839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 154,
        column: 15,
        span: 2840..2844,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 16,
        span: 2844..2845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 154,
        column: 18,
        span: 2845..2847,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 154,
        column: 19,
        span: 2847..2848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 154,
        column: 21,
        span: 2849..2850,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 22,
        span: 2850..2851,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 155,
        column: 7,
        span: 2856..2858,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 155,
        column: 11,
        span: 2859..2862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 155,
        column: 13,
        span: 2863..2864,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 155,
        column: 18,
        span: 2865..2869,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 155,
        column: 25,
        span: 2870..2876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nofind",
        ),
        line: 155,
        column: 32,
        span: 2877..2883,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 155,
        column: 0,
        span: 2884..2887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 156,
        column: 11,
        span: 2892..2898,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
        column: 12,
        span: 2898..2899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 156,
        column: 13,
        span: 2899..2900,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 156,
        column: 16,
        span: 2901..2903,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 156,
        column: 20,
        span: 2904..2907,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
        column: 21,
        span: 2907..2908,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 157,
        column: 7,
        span: 2913..2915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 157,
        column: 9,
        span: 2916..2917,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 157,
        column: 12,
        span: 2918..2920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 157,
        column: 17,
        span: 2921..2925,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 157,
        column: 22,
        span: 2926..2930,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 157,
        column: 29,
        span: 2931..2937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 157,
        column: 31,
        span: 2938..2939,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 157,
        column: 0,
        span: 2940..2943,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 158,
        column: 0,
        span: 2946..2949,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 159,
        column: 0,
        span: 2950..2953,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 161,
        column: 6,
        span: 2955..2960,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 161,
        column: 15,
        span: 2961..2969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find1",
        ),
        line: 161,
        column: 21,
        span: 2970..2975,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
        column: 23,
        span: 2976..2977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 161,
        column: 27,
        span: 2977..2981,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
        column: 28,
        span: 2981..2982,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 162,
        column: 6,
        span: 2985..2988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 162,
        column: 8,
        span: 2989..2990,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 162,
        column: 9,
        span: 2990..2991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 162,
        column: 10,
        span: 2991..2992,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 162,
        column: 13,
        span: 2993..2995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 162,
        column: 19,
        span: 2996..3001,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
        column: 20,
        span: 3001..3002,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 162,
        column: 22,
        span: 3002..3004,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
        column: 23,
        span: 3004..3005,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 162,
        column: 0,
        span: 3006..3008,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 163,
        column: 7,
        span: 3013..3015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 163,
        column: 9,
        span: 3016..3017,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 163,
        column: 11,
        span: 3017..3019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 163,
        column: 15,
        span: 3019..3023,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 163,
        column: 20,
        span: 3024..3028,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 163,
        column: 27,
        span: 3029..3035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 163,
        column: 29,
        span: 3036..3037,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 163,
        column: 0,
        span: 3038..3041,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 164,
        column: 0,
        span: 3044..3047,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 165,
        column: 9,
        span: 3050..3056,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 165,
        column: 13,
        span: 3057..3060,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 166,
        column: 0,
        span: 3075..3078,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 168,
        column: 3,
        span: 3080..3082,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 169,
        column: 6,
        span: 3124..3127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 169,
        column: 8,
        span: 3128..3129,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 169,
        column: 9,
        span: 3129..3130,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 10,
        span: 3129..3131,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
        column: 11,
        span: 3131..3132,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 16,
        span: 3131..3137,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 169,
        column: 19,
        span: 3138..3140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 169,
        column: 22,
        span: 3141..3143,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 169,
        column: 23,
        span: 3143..3144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 169,
        column: 24,
        span: 3144..3145,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 169,
        column: 25,
        span: 3145..3146,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 169,
        column: 27,
        span: 3147..3148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 169,
        column: 29,
        span: 3149..3150,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 169,
        column: 0,
        span: 3151..3154,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 170,
        column: 0,
        span: 3155..3158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 173,
        column: 2,
        span: 3161..3162,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 173,
        column: 4,
        span: 3163..3164,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 173,
        column: 6,
        span: 3165..3166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 173,
        column: 7,
        span: 3166..3167,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 173,
        column: 8,
        span: 3167..3168,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "90",
                    after_decimal: "",
                },
            ),
        ),
        line: 173,
        column: 10,
        span: 3167..3170,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 173,
        column: 11,
        span: 3170..3171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 173,
        column: 13,
        span: 3172..3173,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 173,
        column: 14,
        span: 3173..3174,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 173,
        column: 15,
        span: 3173..3175,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 173,
        column: 16,
        span: 3175..3176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 173,
        column: 18,
        span: 3177..3178,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 173,
        column: 19,
        span: 3178..3179,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 173,
        column: 21,
        span: 3178..3181,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 173,
        column: 22,
        span: 3181..3182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 174,
        column: 7,
        span: 3183..3189,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
        column: 8,
        span: 3189..3190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 174,
        column: 13,
        span: 3190..3195,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 174,
        column: 14,
        span: 3195..3196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foreach",
        ),
        line: 174,
        column: 21,
        span: 3196..3203,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
        column: 22,
        span: 3203..3204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 174,
        column: 23,
        span: 3204..3205,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 24,
        span: 3205..3206,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 174,
        column: 33,
        span: 3207..3215,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
        column: 34,
        span: 3215..3216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 174,
        column: 35,
        span: 3216..3217,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 36,
        span: 3217..3218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 174,
        column: 37,
        span: 3218..3219,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
        column: 38,
        span: 3219..3220,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 174,
        column: 41,
        span: 3221..3223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 174,
        column: 43,
        span: 3224..3225,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 174,
        column: 45,
        span: 3225..3227,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 174,
        column: 48,
        span: 3227..3230,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 174,
        column: 53,
        span: 3231..3235,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 174,
        column: 60,
        span: 3236..3242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 174,
        column: 62,
        span: 3243..3244,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 174,
        column: 66,
        span: 3245..3248,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 174,
        column: 70,
        span: 3249..3252,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
        column: 71,
        span: 3252..3253,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 174,
        column: 74,
        span: 3254..3256,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "90",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
        column: 77,
        span: 3256..3259,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
        column: 78,
        span: 3259..3260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 175,
        column: 7,
        span: 3261..3267,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
        column: 8,
        span: 3267..3268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 175,
        column: 13,
        span: 3268..3273,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 175,
        column: 14,
        span: 3273..3274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foreach",
        ),
        line: 175,
        column: 21,
        span: 3274..3281,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
        column: 22,
        span: 3281..3282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 175,
        column: 23,
        span: 3282..3283,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 175,
        column: 24,
        span: 3283..3284,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 175,
        column: 33,
        span: 3285..3293,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
        column: 34,
        span: 3293..3294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 175,
        column: 35,
        span: 3294..3295,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 175,
        column: 36,
        span: 3295..3296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 175,
        column: 37,
        span: 3296..3297,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
        column: 38,
        span: 3297..3298,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 175,
        column: 41,
        span: 3299..3301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 175,
        column: 43,
        span: 3302..3303,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 175,
        column: 45,
        span: 3303..3305,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 175,
        column: 48,
        span: 3305..3308,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 175,
        column: 53,
        span: 3309..3313,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 175,
        column: 60,
        span: 3314..3320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 175,
        column: 62,
        span: 3321..3322,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 175,
        column: 66,
        span: 3323..3326,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 175,
        column: 70,
        span: 3327..3330,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
        column: 71,
        span: 3330..3331,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 175,
        column: 74,
        span: 3332..3334,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 175,
        column: 78,
        span: 3335..3338,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
        column: 79,
        span: 3338..3339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 176,
        column: 6,
        span: 3340..3345,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 176,
        column: 7,
        span: 3345..3346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foreach",
        ),
        line: 176,
        column: 14,
        span: 3346..3353,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 15,
        span: 3353..3354,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 176,
        column: 16,
        span: 3354..3355,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 176,
        column: 17,
        span: 3355..3356,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
        column: 18,
        span: 3356..3357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 176,
        column: 24,
        span: 3358..3363,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 25,
        span: 3363..3364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 178,
        column: 6,
        span: 3366..3371,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 178,
        column: 7,
        span: 3371..3372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foreachi",
        ),
        line: 178,
        column: 15,
        span: 3372..3380,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
        column: 16,
        span: 3380..3381,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 178,
        column: 17,
        span: 3381..3382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 178,
        column: 18,
        span: 3382..3383,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 178,
        column: 19,
        span: 3383..3384,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 178,
        column: 21,
        span: 3383..3386,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 178,
        column: 22,
        span: 3386..3387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 178,
        column: 24,
        span: 3388..3389,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 178,
        column: 25,
        span: 3389..3390,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 178,
        column: 27,
        span: 3389..3392,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 178,
        column: 28,
        span: 3392..3393,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 178,
        column: 29,
        span: 3393..3394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 178,
        column: 35,
        span: 3395..3400,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
        column: 36,
        span: 3400..3401,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 179,
        column: 6,
        span: 3402..3407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 179,
        column: 8,
        span: 3408..3409,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 179,
        column: 10,
        span: 3410..3411,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 179,
        column: 12,
        span: 3412..3413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 179,
        column: 13,
        span: 3413..3414,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 179,
        column: 15,
        span: 3415..3416,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 179,
        column: 17,
        span: 3416..3418,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 179,
        column: 18,
        span: 3418..3419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 180,
        column: 6,
        span: 3420..3425,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 180,
        column: 7,
        span: 3425..3426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foreachi",
        ),
        line: 180,
        column: 15,
        span: 3426..3434,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
        column: 16,
        span: 3434..3435,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 180,
        column: 17,
        span: 3435..3436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 180,
        column: 18,
        span: 3436..3437,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 180,
        column: 19,
        span: 3437..3438,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 180,
        column: 20,
        span: 3437..3439,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 180,
        column: 21,
        span: 3439..3440,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 180,
        column: 22,
        span: 3440..3441,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 180,
        column: 31,
        span: 3442..3450,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
        column: 33,
        span: 3451..3452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 180,
        column: 34,
        span: 3452..3453,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 180,
        column: 35,
        span: 3453..3454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 180,
        column: 37,
        span: 3455..3456,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
        column: 38,
        span: 3456..3457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 181,
        column: 9,
        span: 3460..3466,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 181,
        column: 10,
        span: 3466..3467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 181,
        column: 11,
        span: 3467..3468,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 181,
        column: 12,
        span: 3468..3469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 181,
        column: 13,
        span: 3469..3470,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 181,
        column: 16,
        span: 3471..3473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 181,
        column: 18,
        span: 3474..3475,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 181,
        column: 22,
        span: 3476..3479,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 181,
        column: 26,
        span: 3480..3483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 181,
        column: 28,
        span: 3484..3485,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 181,
        column: 29,
        span: 3485..3486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 182,
        column: 4,
        span: 3489..3490,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 182,
        column: 5,
        span: 3490..3491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 182,
        column: 6,
        span: 3491..3492,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 182,
        column: 7,
        span: 3492..3493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 182,
        column: 8,
        span: 3493..3494,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 182,
        column: 9,
        span: 3494..3495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 182,
        column: 10,
        span: 3495..3496,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 182,
        column: 11,
        span: 3496..3497,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 182,
        column: 0,
        span: 3496..3498,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 183,
        column: 4,
        span: 3499..3502,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 183,
        column: 5,
        span: 3502..3503,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 184,
        column: 2,
        span: 3504..3505,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 184,
        column: 4,
        span: 3506..3507,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 184,
        column: 6,
        span: 3508..3509,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 184,
        column: 8,
        span: 3508..3511,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 9,
        span: 3511..3512,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 184,
        column: 11,
        span: 3511..3514,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 12,
        span: 3514..3515,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 184,
        column: 14,
        span: 3514..3517,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 15,
        span: 3517..3518,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 184,
        column: 18,
        span: 3518..3521,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 19,
        span: 3521..3522,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        line: 184,
        column: 21,
        span: 3521..3524,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 184,
        column: 22,
        span: 3524..3525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 185,
        column: 6,
        span: 3526..3531,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 185,
        column: 7,
        span: 3531..3532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foreachi",
        ),
        line: 185,
        column: 15,
        span: 3532..3540,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 16,
        span: 3540..3541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 185,
        column: 17,
        span: 3541..3542,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
        column: 18,
        span: 3542..3543,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 185,
        column: 27,
        span: 3544..3552,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 29,
        span: 3553..3554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 185,
        column: 30,
        span: 3554..3555,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
        column: 31,
        span: 3555..3556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 185,
        column: 32,
        span: 3556..3557,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 33,
        span: 3557..3558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 185,
        column: 40,
        span: 3559..3565,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 41,
        span: 3565..3566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 185,
        column: 42,
        span: 3566..3567,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 185,
        column: 43,
        span: 3567..3568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 185,
        column: 44,
        span: 3568..3569,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 185,
        column: 45,
        span: 3569..3570,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 185,
        column: 48,
        span: 3571..3573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 185,
        column: 50,
        span: 3574..3575,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 51,
        span: 3575..3576,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 185,
        column: 55,
        span: 3577..3580,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 56,
        span: 3580..3581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 186,
        column: 7,
        span: 3582..3588,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 8,
        span: 3588..3589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 186,
        column: 13,
        span: 3589..3594,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 186,
        column: 14,
        span: 3594..3595,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foreachi",
        ),
        line: 186,
        column: 22,
        span: 3595..3603,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 23,
        span: 3603..3604,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 186,
        column: 24,
        span: 3604..3605,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 186,
        column: 27,
        span: 3605..3608,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 28,
        span: 3608..3609,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 186,
        column: 32,
        span: 3610..3613,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 33,
        span: 3613..3614,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'c'",
        ),
        line: 186,
        column: 37,
        span: 3615..3618,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 186,
        column: 38,
        span: 3618..3619,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 39,
        span: 3619..3620,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 186,
        column: 48,
        span: 3621..3629,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 50,
        span: 3630..3631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 186,
        column: 51,
        span: 3631..3632,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 52,
        span: 3632..3633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 186,
        column: 53,
        span: 3633..3634,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 54,
        span: 3634..3635,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 187,
        column: 12,
        span: 3645..3647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 187,
        column: 14,
        span: 3648..3649,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 187,
        column: 16,
        span: 3649..3651,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 187,
        column: 17,
        span: 3650..3652,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 187,
        column: 22,
        span: 3653..3657,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 187,
        column: 29,
        span: 3658..3664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 187,
        column: 31,
        span: 3665..3666,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 187,
        column: 0,
        span: 3667..3670,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 188,
        column: 11,
        span: 3678..3681,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
        column: 12,
        span: 3681..3682,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 188,
        column: 15,
        span: 3683..3685,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 188,
        column: 19,
        span: 3686..3689,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
        column: 20,
        span: 3689..3690,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 191,
        column: 7,
        span: 3693..3699,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 8,
        span: 3699..3700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 191,
        column: 13,
        span: 3700..3705,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 191,
        column: 15,
        span: 3705..3707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 191,
        column: 19,
        span: 3707..3711,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 20,
        span: 3711..3712,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print\"",
        ),
        line: 191,
        column: 27,
        span: 3712..3719,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 28,
        span: 3719..3720,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 191,
        column: 32,
        span: 3721..3724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 191,
        column: 38,
        span: 3725..3730,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 191,
        column: 41,
        span: 3731..3733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find1",
        ),
        line: 191,
        column: 47,
        span: 3734..3739,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 48,
        span: 3739..3740,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print\"",
        ),
        line: 191,
        column: 55,
        span: 3740..3747,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 56,
        span: 3747..3748,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 57,
        span: 3748..3749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 192,
        column: 7,
        span: 3750..3756,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 8,
        span: 3756..3757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 192,
        column: 10,
        span: 3757..3759,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 192,
        column: 11,
        span: 3759..3760,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print\"",
        ),
        line: 192,
        column: 18,
        span: 3760..3767,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 192,
        column: 19,
        span: 3767..3768,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 192,
        column: 21,
        span: 3768..3770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 192,
        column: 25,
        span: 3770..3774,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 26,
        span: 3774..3775,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print\"",
        ),
        line: 192,
        column: 33,
        span: 3775..3782,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
        column: 34,
        span: 3782..3783,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
        column: 35,
        span: 3783..3784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 193,
        column: 7,
        span: 3785..3791,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 8,
        span: 3791..3792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 193,
        column: 14,
        span: 3792..3798,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 193,
        column: 16,
        span: 3798..3800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find1",
        ),
        line: 193,
        column: 21,
        span: 3800..3805,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 22,
        span: 3805..3806,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"assert\"",
        ),
        line: 193,
        column: 30,
        span: 3806..3814,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
        column: 31,
        span: 3814..3815,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
        column: 32,
        span: 3815..3816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 194,
        column: 7,
        span: 3817..3823,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 8,
        span: 3823..3824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nofind",
        ),
        line: 194,
        column: 14,
        span: 3824..3830,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 194,
        column: 16,
        span: 3830..3832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 194,
        column: 20,
        span: 3832..3836,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 21,
        span: 3836..3837,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return\"",
        ),
        line: 194,
        column: 29,
        span: 3837..3845,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
        column: 30,
        span: 3845..3846,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
        column: 31,
        span: 3846..3847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 195,
        column: 7,
        span: 3848..3854,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 8,
        span: 3854..3855,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 195,
        column: 11,
        span: 3855..3858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find1",
        ),
        line: 195,
        column: 17,
        span: 3859..3864,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 18,
        span: 3864..3865,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return\"",
        ),
        line: 195,
        column: 26,
        span: 3865..3873,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 27,
        span: 3873..3874,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 28,
        span: 3874..3875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 196,
        column: 3,
        span: 3876..3878,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 196,
        column: 4,
        span: 3878..3879,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ret\"",
        ),
        line: 196,
        column: 9,
        span: 3879..3884,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 196,
        column: 12,
        span: 3885..3887,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"urn\"",
        ),
        line: 196,
        column: 18,
        span: 3888..3893,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 196,
        column: 19,
        span: 3893..3894,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 196,
        column: 21,
        span: 3895..3896,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 196,
        column: 0,
        span: 3897..3900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 197,
        column: 7,
        span: 3901..3907,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 197,
        column: 8,
        span: 3907..3908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nofind",
        ),
        line: 197,
        column: 14,
        span: 3908..3914,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 197,
        column: 16,
        span: 3914..3916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 197,
        column: 20,
        span: 3916..3920,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 197,
        column: 21,
        span: 3920..3921,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return\"",
        ),
        line: 197,
        column: 29,
        span: 3921..3929,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 197,
        column: 30,
        span: 3929..3930,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 197,
        column: 31,
        span: 3930..3931,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 198,
        column: 3,
        span: 3932..3934,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 198,
        column: 4,
        span: 3934..3935,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xxx\"",
        ),
        line: 198,
        column: 9,
        span: 3935..3940,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 198,
        column: 10,
        span: 3940..3941,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 198,
        column: 12,
        span: 3942..3943,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 198,
        column: 0,
        span: 3943..3945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 199,
        column: 7,
        span: 3946..3952,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 199,
        column: 8,
        span: 3952..3953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xxx",
        ),
        line: 199,
        column: 11,
        span: 3953..3956,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 199,
        column: 13,
        span: 3956..3958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 199,
        column: 17,
        span: 3958..3962,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 199,
        column: 18,
        span: 3962..3963,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xxx\"",
        ),
        line: 199,
        column: 23,
        span: 3963..3968,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 199,
        column: 24,
        span: 3968..3969,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 199,
        column: 25,
        span: 3969..3970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 200,
        column: 6,
        span: 3971..3976,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 7,
        span: 3976..3977,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 200,
        column: 10,
        span: 3977..3980,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 11,
        span: 3980..3981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 202,
        column: 2,
        span: 3983..3984,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 202,
        column: 4,
        span: 3985..3986,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 202,
        column: 6,
        span: 3987..3988,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 202,
        column: 7,
        span: 3988..3989,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 203,
        column: 4,
        span: 3990..3993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 203,
        column: 6,
        span: 3994..3995,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 203,
        column: 7,
        span: 3995..3996,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 203,
        column: 8,
        span: 3995..3997,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 203,
        column: 9,
        span: 3997..3998,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        line: 203,
        column: 14,
        span: 3997..4003,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 203,
        column: 0,
        span: 4004..4006,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 204,
        column: 5,
        span: 4009..4011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 204,
        column: 10,
        span: 4012..4016,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 204,
        column: 11,
        span: 4016..4017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mod",
        ),
        line: 204,
        column: 14,
        span: 4017..4020,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 15,
        span: 4020..4021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 204,
        column: 16,
        span: 4021..4022,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 17,
        span: 4022..4023,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 19,
        span: 4022..4025,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 20,
        span: 4025..4026,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 204,
        column: 23,
        span: 4027..4029,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 25,
        span: 4029..4031,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 204,
        column: 0,
        span: 4032..4036,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 205,
        column: 6,
        span: 4041..4042,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 205,
        column: 7,
        span: 4042..4043,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 205,
        column: 10,
        span: 4043..4046,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 205,
        column: 12,
        span: 4046..4048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 205,
        column: 13,
        span: 4048..4049,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 205,
        column: 14,
        span: 4049..4050,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 205,
        column: 16,
        span: 4051..4052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 205,
        column: 0,
        span: 4053..4054,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 206,
        column: 0,
        span: 4057..4060,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 207,
        column: 0,
        span: 4061..4064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 209,
        column: 2,
        span: 4066..4067,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 209,
        column: 4,
        span: 4068..4069,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 209,
        column: 6,
        span: 4070..4071,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 209,
        column: 7,
        span: 4071..4072,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 209,
        column: 8,
        span: 4072..4073,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 209,
        column: 9,
        span: 4072..4074,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 209,
        column: 10,
        span: 4074..4075,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 210,
        column: 4,
        span: 4076..4079,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 210,
        column: 6,
        span: 4080..4081,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 210,
        column: 7,
        span: 4081..4082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 210,
        column: 8,
        span: 4082..4083,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 210,
        column: 11,
        span: 4084..4086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 210,
        column: 17,
        span: 4087..4092,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 18,
        span: 4092..4093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 210,
        column: 19,
        span: 4093..4094,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
        column: 20,
        span: 4094..4095,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 210,
        column: 0,
        span: 4096..4098,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 211,
        column: 4,
        span: 4101..4102,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 211,
        column: 5,
        span: 4102..4103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 211,
        column: 6,
        span: 4103..4104,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 211,
        column: 8,
        span: 4105..4106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 211,
        column: 10,
        span: 4107..4108,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 211,
        column: 11,
        span: 4108..4109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 211,
        column: 12,
        span: 4109..4110,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 211,
        column: 13,
        span: 4110..4111,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 211,
        column: 0,
        span: 4110..4112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 212,
        column: 9,
        span: 4115..4121,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 10,
        span: 4121..4122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 212,
        column: 11,
        span: 4122..4123,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 212,
        column: 15,
        span: 4124..4127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 212,
        column: 17,
        span: 4128..4129,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 212,
        column: 21,
        span: 4130..4133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 212,
        column: 23,
        span: 4134..4135,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 212,
        column: 24,
        span: 4135..4136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 212,
        column: 25,
        span: 4136..4137,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 212,
        column: 26,
        span: 4137..4138,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 212,
        column: 29,
        span: 4139..4141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 212,
        column: 31,
        span: 4142..4143,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 32,
        span: 4143..4144,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 213,
        column: 0,
        span: 4145..4148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 214,
        column: 7,
        span: 4149..4155,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
        column: 8,
        span: 4155..4156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 214,
        column: 9,
        span: 4156..4157,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 214,
        column: 10,
        span: 4157..4158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 214,
        column: 11,
        span: 4158..4159,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 214,
        column: 14,
        span: 4160..4162,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9000",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
        column: 19,
        span: 4162..4167,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 20,
        span: 4167..4168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 215,
        column: 2,
        span: 4169..4170,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 215,
        column: 4,
        span: 4171..4172,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 215,
        column: 0,
        span: 4173..4176,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 218,
        column: 4,
        span: 4221..4224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 218,
        column: 6,
        span: 4225..4226,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 218,
        column: 7,
        span: 4226..4227,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 218,
        column: 8,
        span: 4226..4228,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 218,
        column: 9,
        span: 4228..4229,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        line: 218,
        column: 14,
        span: 4228..4234,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 218,
        column: 17,
        span: 4235..4237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 218,
        column: 20,
        span: 4238..4240,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 218,
        column: 21,
        span: 4240..4241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 218,
        column: 22,
        span: 4241..4242,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 218,
        column: 23,
        span: 4242..4243,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 218,
        column: 25,
        span: 4244..4245,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 218,
        column: 29,
        span: 4246..4249,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 218,
        column: 0,
        span: 4250..4253,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 220,
        column: 3,
        span: 4255..4257,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 221,
        column: 8,
        span: 4284..4289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 221,
        column: 10,
        span: 4290..4291,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 221,
        column: 12,
        span: 4292..4293,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 221,
        column: 14,
        span: 4294..4295,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 221,
        column: 15,
        span: 4295..4296,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 222,
        column: 8,
        span: 4299..4304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "preserve",
        ),
        line: 222,
        column: 17,
        span: 4305..4313,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 222,
        column: 19,
        span: 4314..4315,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 222,
        column: 21,
        span: 4316..4317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 222,
        column: 23,
        span: 4317..4319,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 222,
        column: 25,
        span: 4320..4321,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 222,
        column: 27,
        span: 4321..4323,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 222,
        column: 28,
        span: 4323..4324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 222,
        column: 35,
        span: 4325..4331,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 222,
        column: 37,
        span: 4332..4333,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 222,
        column: 39,
        span: 4333..4335,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 222,
        column: 40,
        span: 4335..4336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 222,
        column: 46,
        span: 4337..4342,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 222,
        column: 48,
        span: 4343..4344,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 222,
        column: 50,
        span: 4344..4346,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 222,
        column: 51,
        span: 4346..4347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 222,
        column: 54,
        span: 4348..4350,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 222,
        column: 56,
        span: 4351..4352,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 222,
        column: 58,
        span: 4352..4354,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 222,
        column: 59,
        span: 4354..4355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 223,
        column: 30,
        span: 4376..4385,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 223,
        column: 32,
        span: 4386..4387,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 223,
        column: 34,
        span: 4387..4389,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 223,
        column: 35,
        span: 4389..4390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 223,
        column: 41,
        span: 4391..4396,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 223,
        column: 43,
        span: 4397..4398,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 223,
        column: 45,
        span: 4398..4400,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 223,
        column: 46,
        span: 4400..4401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 223,
        column: 51,
        span: 4402..4406,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 223,
        column: 53,
        span: 4407..4408,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 223,
        column: 55,
        span: 4408..4410,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 223,
        column: 56,
        span: 4410..4411,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 224,
        column: 6,
        span: 4414..4417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 224,
        column: 8,
        span: 4418..4419,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 224,
        column: 9,
        span: 4419..4420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 224,
        column: 10,
        span: 4420..4421,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 224,
        column: 13,
        span: 4422..4424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 224,
        column: 19,
        span: 4425..4430,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
        column: 20,
        span: 4430..4431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 224,
        column: 22,
        span: 4431..4433,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 23,
        span: 4433..4434,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 224,
        column: 26,
        span: 4435..4437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 224,
        column: 28,
        span: 4438..4439,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 224,
        column: 29,
        span: 4439..4440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 224,
        column: 30,
        span: 4440..4441,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 224,
        column: 31,
        span: 4441..4442,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 224,
        column: 32,
        span: 4442..4443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 224,
        column: 33,
        span: 4443..4444,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 224,
        column: 0,
        span: 4445..4448,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 225,
        column: 6,
        span: 4451..4454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 225,
        column: 8,
        span: 4455..4456,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 225,
        column: 9,
        span: 4456..4457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 225,
        column: 10,
        span: 4457..4458,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 225,
        column: 13,
        span: 4459..4461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 225,
        column: 19,
        span: 4462..4467,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 20,
        span: 4467..4468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 225,
        column: 21,
        span: 4468..4469,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 22,
        span: 4469..4470,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 225,
        column: 0,
        span: 4471..4473,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 226,
        column: 7,
        span: 4478..4480,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 226,
        column: 11,
        span: 4481..4484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "preserve",
        ),
        line: 226,
        column: 20,
        span: 4485..4493,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 226,
        column: 21,
        span: 4493..4494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 226,
        column: 22,
        span: 4494..4495,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 226,
        column: 23,
        span: 4495..4496,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 226,
        column: 27,
        span: 4497..4500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 226,
        column: 32,
        span: 4501..4505,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 226,
        column: 33,
        span: 4505..4506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 226,
        column: 34,
        span: 4506..4507,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
        column: 35,
        span: 4507..4508,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 226,
        column: 38,
        span: 4509..4511,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        line: 226,
        column: 49,
        span: 4512..4522,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 226,
        column: 0,
        span: 4523..4526,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 227,
        column: 11,
        span: 4534..4537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 227,
        column: 18,
        span: 4538..4544,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 227,
        column: 19,
        span: 4544..4545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 227,
        column: 23,
        span: 4545..4549,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
        column: 24,
        span: 4549..4550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 227,
        column: 25,
        span: 4550..4551,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 227,
        column: 26,
        span: 4551..4552,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^[%u_]\"",
        ),
        line: 227,
        column: 35,
        span: 4553..4561,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 36,
        span: 4561..4562,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 227,
        column: 0,
        span: 4563..4567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 228,
        column: 8,
        span: 4573..4575,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 228,
        column: 9,
        span: 4575..4576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 228,
        column: 10,
        span: 4576..4577,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 228,
        column: 11,
        span: 4577..4578,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 228,
        column: 13,
        span: 4579..4580,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 228,
        column: 0,
        span: 4581..4584,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 229,
        column: 0,
        span: 4589..4592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 230,
        column: 19,
        span: 4597..4611,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 230,
        column: 20,
        span: 4611..4612,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 230,
        column: 21,
        span: 4612..4613,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 231,
        column: 0,
        span: 4616..4619,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 232,
        column: 0,
        span: 4620..4623,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 234,
        column: 6,
        span: 4625..4630,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 234,
        column: 15,
        span: 4631..4639,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 234,
        column: 19,
        span: 4640..4643,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 234,
        column: 21,
        span: 4644..4645,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 234,
        column: 22,
        span: 4645..4646,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 235,
        column: 8,
        span: 4649..4654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getfenv",
        ),
        line: 235,
        column: 16,
        span: 4655..4662,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 235,
        column: 17,
        span: 4662..4663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setfenv",
        ),
        line: 235,
        column: 25,
        span: 4664..4671,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 235,
        column: 26,
        span: 4671..4672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 235,
        column: 33,
        span: 4673..4679,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 235,
        column: 34,
        span: 4679..4680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 235,
        column: 39,
        span: 4681..4685,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 235,
        column: 41,
        span: 4686..4687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getfenv",
        ),
        line: 236,
        column: 16,
        span: 4696..4703,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 236,
        column: 17,
        span: 4703..4704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setfenv",
        ),
        line: 236,
        column: 25,
        span: 4705..4712,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 236,
        column: 26,
        span: 4712..4713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 236,
        column: 33,
        span: 4714..4720,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 236,
        column: 34,
        span: 4720..4721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 236,
        column: 0,
        span: 4722..4726,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 237,
        column: 8,
        span: 4729..4734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 237,
        column: 10,
        span: 4735..4736,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 237,
        column: 12,
        span: 4737..4738,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 237,
        column: 14,
        span: 4739..4740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gl1",
        ),
        line: 237,
        column: 17,
        span: 4740..4743,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 237,
        column: 18,
        span: 4743..4744,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 237,
        column: 19,
        span: 4743..4745,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 237,
        column: 20,
        span: 4745..4746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setfenv",
        ),
        line: 238,
        column: 10,
        span: 4749..4756,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 238,
        column: 11,
        span: 4756..4757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 238,
        column: 14,
        span: 4757..4760,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 238,
        column: 15,
        span: 4760..4761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 238,
        column: 17,
        span: 4762..4763,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 238,
        column: 18,
        span: 4763..4764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 239,
        column: 9,
        span: 4767..4773,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 10,
        span: 4773..4774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getfenv",
        ),
        line: 239,
        column: 17,
        span: 4774..4781,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 18,
        span: 4781..4782,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 239,
        column: 21,
        span: 4782..4785,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 22,
        span: 4785..4786,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 239,
        column: 25,
        span: 4787..4789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getfenv",
        ),
        line: 239,
        column: 33,
        span: 4790..4797,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 34,
        span: 4797..4798,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 239,
        column: 35,
        span: 4797..4799,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 36,
        span: 4799..4800,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 37,
        span: 4800..4801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 240,
        column: 9,
        span: 4804..4810,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 10,
        span: 4810..4811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getfenv",
        ),
        line: 240,
        column: 17,
        span: 4811..4818,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 18,
        span: 4818..4819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 240,
        column: 21,
        span: 4819..4822,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 22,
        span: 4822..4823,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 240,
        column: 25,
        span: 4824..4826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 240,
        column: 27,
        span: 4827..4828,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 28,
        span: 4828..4829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 241,
        column: 9,
        span: 4832..4838,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 241,
        column: 10,
        span: 4838..4839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 241,
        column: 15,
        span: 4839..4844,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 241,
        column: 18,
        span: 4845..4847,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 241,
        column: 22,
        span: 4848..4851,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 241,
        column: 26,
        span: 4852..4855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gl1",
        ),
        line: 241,
        column: 30,
        span: 4856..4859,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 241,
        column: 33,
        span: 4860..4862,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 241,
        column: 35,
        span: 4862..4864,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 241,
        column: 36,
        span: 4864..4865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gl1",
        ),
        line: 242,
        column: 6,
        span: 4868..4871,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 242,
        column: 8,
        span: 4872..4873,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 242,
        column: 0,
        span: 4874..4877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gl",
        ),
        line: 243,
        column: 5,
        span: 4880..4882,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 243,
        column: 7,
        span: 4883..4884,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 243,
        column: 0,
        span: 4884..4886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 244,
        column: 9,
        span: 4889..4895,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 244,
        column: 10,
        span: 4895..4896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 244,
        column: 11,
        span: 4896..4897,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 244,
        column: 12,
        span: 4897..4898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gl",
        ),
        line: 244,
        column: 14,
        span: 4898..4900,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 244,
        column: 17,
        span: 4901..4903,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 244,
        column: 19,
        span: 4903..4905,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 244,
        column: 23,
        span: 4906..4909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 244,
        column: 28,
        span: 4910..4914,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 244,
        column: 29,
        span: 4914..4915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 244,
        column: 30,
        span: 4915..4916,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 244,
        column: 31,
        span: 4916..4917,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'gl'",
        ),
        line: 244,
        column: 36,
        span: 4918..4922,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 244,
        column: 37,
        span: 4922..4923,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 244,
        column: 40,
        span: 4924..4926,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 244,
        column: 44,
        span: 4927..4930,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 244,
        column: 45,
        span: 4930..4931,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 245,
        column: 0,
        span: 4932..4935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 246,
        column: 4,
        span: 4936..4939,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 246,
        column: 5,
        span: 4939..4940,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 246,
        column: 6,
        span: 4940..4941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 248,
        column: 6,
        span: 4943..4948,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 248,
        column: 9,
        span: 4948..4951,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 250,
        column: 6,
        span: 4953..4958,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 250,
        column: 15,
        span: 4959..4967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checknext",
        ),
        line: 250,
        column: 25,
        span: 4968..4977,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
        column: 27,
        span: 4978..4979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 250,
        column: 28,
        span: 4979..4980,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
        column: 29,
        span: 4980..4981,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 251,
        column: 8,
        span: 4984..4989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 251,
        column: 10,
        span: 4990..4991,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 251,
        column: 12,
        span: 4992..4993,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 251,
        column: 14,
        span: 4994..4995,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 251,
        column: 15,
        span: 4995..4996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 252,
        column: 8,
        span: 4999..5004,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 252,
        column: 9,
        span: 5004..5005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foreach",
        ),
        line: 252,
        column: 16,
        span: 5005..5012,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 17,
        span: 5012..5013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 252,
        column: 18,
        span: 5013..5014,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 252,
        column: 19,
        span: 5014..5015,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 252,
        column: 28,
        span: 5016..5024,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 30,
        span: 5025..5026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 252,
        column: 31,
        span: 5026..5027,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 252,
        column: 32,
        span: 5027..5028,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 252,
        column: 33,
        span: 5028..5029,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 34,
        span: 5029..5030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 252,
        column: 36,
        span: 5031..5032,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 252,
        column: 37,
        span: 5032..5033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 252,
        column: 38,
        span: 5033..5034,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 252,
        column: 39,
        span: 5034..5035,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 252,
        column: 41,
        span: 5036..5037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 252,
        column: 43,
        span: 5038..5039,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 252,
        column: 47,
        span: 5040..5043,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 48,
        span: 5043..5044,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 253,
        column: 6,
        span: 5047..5050,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 253,
        column: 8,
        span: 5051..5052,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 253,
        column: 9,
        span: 5052..5053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 253,
        column: 10,
        span: 5053..5054,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 253,
        column: 13,
        span: 5055..5057,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 253,
        column: 19,
        span: 5058..5063,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 20,
        span: 5063..5064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 253,
        column: 21,
        span: 5064..5065,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 22,
        span: 5065..5066,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 253,
        column: 25,
        span: 5067..5069,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 253,
        column: 32,
        span: 5070..5076,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 33,
        span: 5076..5077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 253,
        column: 34,
        span: 5077..5078,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 253,
        column: 35,
        span: 5078..5079,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 253,
        column: 36,
        span: 5079..5080,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 253,
        column: 37,
        span: 5080..5081,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 253,
        column: 40,
        span: 5082..5084,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 253,
        column: 42,
        span: 5085..5086,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 43,
        span: 5086..5087,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 253,
        column: 0,
        span: 5088..5091,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 254,
        column: 6,
        span: 5094..5097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 254,
        column: 8,
        span: 5098..5099,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 254,
        column: 9,
        span: 5099..5100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 254,
        column: 10,
        span: 5100..5101,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 254,
        column: 13,
        span: 5102..5104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 254,
        column: 19,
        span: 5105..5110,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 20,
        span: 5110..5111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 254,
        column: 21,
        span: 5111..5112,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 22,
        span: 5112..5113,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 254,
        column: 25,
        span: 5114..5116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 254,
        column: 32,
        span: 5117..5123,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 33,
        span: 5123..5124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 254,
        column: 34,
        span: 5124..5125,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 254,
        column: 35,
        span: 5125..5126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 254,
        column: 36,
        span: 5126..5127,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 254,
        column: 37,
        span: 5127..5128,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 254,
        column: 40,
        span: 5129..5131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 254,
        column: 42,
        span: 5132..5133,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 43,
        span: 5133..5134,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 254,
        column: 0,
        span: 5135..5138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 255,
        column: 4,
        span: 5141..5142,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 255,
        column: 6,
        span: 5143..5144,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 255,
        column: 8,
        span: 5145..5146,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 255,
        column: 9,
        span: 5146..5147,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 256,
        column: 5,
        span: 5150..5152,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 256,
        column: 11,
        span: 5153..5158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 256,
        column: 13,
        span: 5159..5160,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
        column: 14,
        span: 5160..5161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 256,
        column: 15,
        span: 5161..5162,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 256,
        column: 17,
        span: 5163..5164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 256,
        column: 22,
        span: 5165..5169,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
        column: 23,
        span: 5169..5170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 256,
        column: 24,
        span: 5170..5171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
        column: 25,
        span: 5171..5172,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 256,
        column: 26,
        span: 5172..5173,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 256,
        column: 32,
        span: 5174..5179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 256,
        column: 34,
        span: 5180..5181,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 256,
        column: 37,
        span: 5182..5184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 256,
        column: 39,
        span: 5185..5186,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 256,
        column: 40,
        span: 5186..5187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 256,
        column: 41,
        span: 5187..5188,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 256,
        column: 42,
        span: 5188..5189,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 256,
        column: 44,
        span: 5190..5191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 256,
        column: 46,
        span: 5192..5193,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 256,
        column: 47,
        span: 5193..5194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 256,
        column: 49,
        span: 5195..5196,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
        column: 50,
        span: 5196..5197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 256,
        column: 51,
        span: 5197..5198,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 256,
        column: 53,
        span: 5199..5200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 256,
        column: 58,
        span: 5201..5205,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
        column: 59,
        span: 5205..5206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 256,
        column: 60,
        span: 5206..5207,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
        column: 61,
        span: 5207..5208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 256,
        column: 62,
        span: 5208..5209,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
        column: 63,
        span: 5209..5210,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 256,
        column: 67,
        span: 5211..5214,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 256,
        column: 0,
        span: 5215..5218,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 257,
        column: 6,
        span: 5221..5224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 257,
        column: 8,
        span: 5225..5226,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
        column: 9,
        span: 5226..5227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 257,
        column: 10,
        span: 5227..5228,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 257,
        column: 13,
        span: 5229..5231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 257,
        column: 19,
        span: 5232..5237,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
        column: 20,
        span: 5237..5238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 257,
        column: 21,
        span: 5238..5239,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
        column: 22,
        span: 5239..5240,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 257,
        column: 25,
        span: 5241..5243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 257,
        column: 32,
        span: 5244..5250,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
        column: 33,
        span: 5250..5251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 257,
        column: 34,
        span: 5251..5252,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 257,
        column: 35,
        span: 5252..5253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 257,
        column: 36,
        span: 5253..5254,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 257,
        column: 37,
        span: 5254..5255,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 257,
        column: 40,
        span: 5256..5258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 257,
        column: 42,
        span: 5259..5260,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
        column: 43,
        span: 5260..5261,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 257,
        column: 0,
        span: 5262..5265,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 258,
        column: 6,
        span: 5268..5271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 258,
        column: 8,
        span: 5272..5273,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 258,
        column: 9,
        span: 5273..5274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 258,
        column: 10,
        span: 5274..5275,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 258,
        column: 13,
        span: 5276..5278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 258,
        column: 19,
        span: 5279..5284,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
        column: 20,
        span: 5284..5285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 258,
        column: 21,
        span: 5285..5286,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
        column: 22,
        span: 5286..5287,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 258,
        column: 25,
        span: 5288..5290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 258,
        column: 32,
        span: 5291..5297,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
        column: 33,
        span: 5297..5298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 258,
        column: 34,
        span: 5298..5299,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 258,
        column: 35,
        span: 5299..5300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 258,
        column: 36,
        span: 5300..5301,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 258,
        column: 37,
        span: 5301..5302,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 258,
        column: 40,
        span: 5303..5305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 258,
        column: 42,
        span: 5306..5307,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
        column: 43,
        span: 5307..5308,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 258,
        column: 0,
        span: 5309..5312,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 259,
        column: 0,
        span: 5313..5316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checknext",
        ),
        line: 261,
        column: 10,
        span: 5318..5327,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 261,
        column: 11,
        span: 5327..5328,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 261,
        column: 12,
        span: 5327..5329,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 261,
        column: 13,
        span: 5329..5330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 261,
        column: 14,
        span: 5330..5331,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 261,
        column: 15,
        span: 5331..5332,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 261,
        column: 16,
        span: 5331..5333,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 261,
        column: 17,
        span: 5333..5334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 261,
        column: 18,
        span: 5334..5335,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 261,
        column: 19,
        span: 5335..5336,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 261,
        column: 20,
        span: 5335..5337,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 261,
        column: 21,
        span: 5337..5338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 261,
        column: 22,
        span: 5338..5339,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 261,
        column: 23,
        span: 5339..5340,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 261,
        column: 24,
        span: 5339..5341,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 261,
        column: 25,
        span: 5341..5342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checknext",
        ),
        line: 262,
        column: 10,
        span: 5343..5352,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 262,
        column: 11,
        span: 5352..5353,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 262,
        column: 12,
        span: 5352..5354,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 262,
        column: 13,
        span: 5354..5355,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 262,
        column: 14,
        span: 5354..5356,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 262,
        column: 15,
        span: 5356..5357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 262,
        column: 16,
        span: 5357..5358,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 262,
        column: 17,
        span: 5358..5359,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 262,
        column: 18,
        span: 5358..5360,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 262,
        column: 19,
        span: 5360..5361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 262,
        column: 20,
        span: 5361..5362,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 262,
        column: 21,
        span: 5362..5363,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 262,
        column: 22,
        span: 5362..5364,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 262,
        column: 23,
        span: 5364..5365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 262,
        column: 24,
        span: 5365..5366,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 262,
        column: 25,
        span: 5366..5367,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 262,
        column: 26,
        span: 5366..5368,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 262,
        column: 27,
        span: 5368..5369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checknext",
        ),
        line: 263,
        column: 10,
        span: 5370..5379,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 263,
        column: 11,
        span: 5379..5380,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 263,
        column: 12,
        span: 5379..5381,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 263,
        column: 13,
        span: 5381..5382,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 263,
        column: 14,
        span: 5381..5383,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 263,
        column: 15,
        span: 5383..5384,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 263,
        column: 16,
        span: 5383..5385,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 263,
        column: 17,
        span: 5385..5386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 263,
        column: 18,
        span: 5386..5387,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 263,
        column: 19,
        span: 5387..5388,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 263,
        column: 20,
        span: 5387..5389,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 263,
        column: 21,
        span: 5389..5390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 263,
        column: 22,
        span: 5390..5391,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 263,
        column: 23,
        span: 5391..5392,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 263,
        column: 24,
        span: 5391..5393,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 263,
        column: 25,
        span: 5393..5394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 263,
        column: 26,
        span: 5394..5395,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 263,
        column: 27,
        span: 5395..5396,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 263,
        column: 28,
        span: 5395..5397,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 263,
        column: 29,
        span: 5397..5398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checknext",
        ),
        line: 264,
        column: 10,
        span: 5399..5408,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 264,
        column: 11,
        span: 5408..5409,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 264,
        column: 12,
        span: 5408..5410,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 264,
        column: 13,
        span: 5410..5411,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 264,
        column: 14,
        span: 5410..5412,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 264,
        column: 15,
        span: 5412..5413,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 264,
        column: 16,
        span: 5412..5414,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 264,
        column: 17,
        span: 5414..5415,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 264,
        column: 18,
        span: 5414..5416,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 264,
        column: 19,
        span: 5416..5417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 264,
        column: 20,
        span: 5417..5418,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 264,
        column: 21,
        span: 5418..5419,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 264,
        column: 22,
        span: 5418..5420,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 264,
        column: 23,
        span: 5420..5421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 264,
        column: 24,
        span: 5421..5422,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 264,
        column: 25,
        span: 5422..5423,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 264,
        column: 26,
        span: 5422..5424,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 264,
        column: 27,
        span: 5424..5425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 264,
        column: 28,
        span: 5425..5426,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 264,
        column: 29,
        span: 5426..5427,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 264,
        column: 30,
        span: 5426..5428,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 264,
        column: 31,
        span: 5428..5429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checknext",
        ),
        line: 265,
        column: 10,
        span: 5430..5439,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 265,
        column: 11,
        span: 5439..5440,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 265,
        column: 12,
        span: 5439..5441,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 265,
        column: 13,
        span: 5441..5442,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 265,
        column: 14,
        span: 5441..5443,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 265,
        column: 15,
        span: 5443..5444,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 265,
        column: 16,
        span: 5443..5445,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 265,
        column: 17,
        span: 5445..5446,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 265,
        column: 18,
        span: 5445..5447,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 265,
        column: 19,
        span: 5447..5448,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 265,
        column: 20,
        span: 5447..5449,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 265,
        column: 21,
        span: 5449..5450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 265,
        column: 22,
        span: 5450..5451,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 265,
        column: 23,
        span: 5451..5452,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 265,
        column: 24,
        span: 5451..5453,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 265,
        column: 25,
        span: 5453..5454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 265,
        column: 26,
        span: 5454..5455,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 265,
        column: 27,
        span: 5455..5456,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 265,
        column: 28,
        span: 5455..5457,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 265,
        column: 29,
        span: 5457..5458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 265,
        column: 30,
        span: 5458..5459,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 265,
        column: 31,
        span: 5459..5460,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 265,
        column: 32,
        span: 5459..5461,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 265,
        column: 33,
        span: 5461..5462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 267,
        column: 7,
        span: 5464..5470,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 8,
        span: 5470..5471,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 267,
        column: 13,
        span: 5471..5476,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 267,
        column: 14,
        span: 5476..5477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        line: 267,
        column: 18,
        span: 5477..5481,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 267,
        column: 19,
        span: 5481..5482,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 267,
        column: 20,
        span: 5482..5483,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 267,
        column: 23,
        span: 5484..5486,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 267,
        column: 25,
        span: 5486..5488,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
        column: 26,
        span: 5488..5489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 268,
        column: 7,
        span: 5490..5496,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
        column: 8,
        span: 5496..5497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 268,
        column: 13,
        span: 5497..5502,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 268,
        column: 14,
        span: 5502..5503,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        line: 268,
        column: 18,
        span: 5503..5507,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 268,
        column: 19,
        span: 5507..5508,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 268,
        column: 20,
        span: 5508..5509,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 268,
        column: 21,
        span: 5509..5510,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 268,
        column: 22,
        span: 5509..5511,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 268,
        column: 23,
        span: 5511..5512,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 268,
        column: 25,
        span: 5513..5514,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 268,
        column: 27,
        span: 5514..5516,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 268,
        column: 28,
        span: 5516..5517,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 268,
        column: 31,
        span: 5518..5520,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 268,
        column: 33,
        span: 5520..5522,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
        column: 34,
        span: 5522..5523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 269,
        column: 7,
        span: 5524..5530,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
        column: 8,
        span: 5530..5531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 269,
        column: 13,
        span: 5531..5536,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 269,
        column: 14,
        span: 5536..5537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        line: 269,
        column: 18,
        span: 5537..5541,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 269,
        column: 19,
        span: 5541..5542,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 269,
        column: 20,
        span: 5541..5543,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
        column: 21,
        span: 5543..5544,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 269,
        column: 22,
        span: 5543..5545,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
        column: 23,
        span: 5545..5546,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 269,
        column: 24,
        span: 5545..5547,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
        column: 25,
        span: 5547..5548,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 269,
        column: 28,
        span: 5548..5551,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
        column: 29,
        span: 5551..5552,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 269,
        column: 32,
        span: 5552..5555,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 269,
        column: 33,
        span: 5555..5556,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 269,
        column: 36,
        span: 5557..5559,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 269,
        column: 38,
        span: 5559..5561,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
        column: 39,
        span: 5561..5562,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 270,
        column: 4,
        span: 5563..5566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 270,
        column: 6,
        span: 5567..5568,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 270,
        column: 7,
        span: 5568..5569,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 270,
        column: 8,
        span: 5568..5570,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 270,
        column: 9,
        span: 5570..5571,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 270,
        column: 11,
        span: 5570..5573,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 270,
        column: 0,
        span: 5574..5576,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 271,
        column: 8,
        span: 5579..5584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 271,
        column: 10,
        span: 5585..5586,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 271,
        column: 12,
        span: 5587..5588,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 271,
        column: 14,
        span: 5589..5590,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 271,
        column: 15,
        span: 5590..5591,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 272,
        column: 6,
        span: 5594..5597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 272,
        column: 8,
        span: 5598..5599,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 272,
        column: 9,
        span: 5599..5600,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 272,
        column: 10,
        span: 5599..5601,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 272,
        column: 11,
        span: 5601..5602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 272,
        column: 12,
        span: 5602..5603,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 272,
        column: 15,
        span: 5604..5606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 272,
        column: 17,
        span: 5607..5608,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 272,
        column: 18,
        span: 5608..5609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 272,
        column: 19,
        span: 5609..5610,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 272,
        column: 20,
        span: 5610..5611,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 272,
        column: 21,
        span: 5611..5612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 272,
        column: 22,
        span: 5612..5613,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 272,
        column: 0,
        span: 5614..5617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 273,
        column: 9,
        span: 5620..5626,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 273,
        column: 10,
        span: 5626..5627,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 273,
        column: 15,
        span: 5627..5632,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 273,
        column: 16,
        span: 5632..5633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        line: 273,
        column: 20,
        span: 5633..5637,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 273,
        column: 21,
        span: 5637..5638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 273,
        column: 22,
        span: 5638..5639,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 273,
        column: 23,
        span: 5639..5640,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 273,
        column: 26,
        span: 5641..5643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 273,
        column: 28,
        span: 5644..5645,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 273,
        column: 29,
        span: 5645..5646,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 274,
        column: 0,
        span: 5647..5650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 277,
        column: 7,
        span: 5653..5659,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 8,
        span: 5659..5660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 277,
        column: 13,
        span: 5660..5665,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 277,
        column: 14,
        span: 5665..5666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxn",
        ),
        line: 277,
        column: 18,
        span: 5666..5670,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 277,
        column: 19,
        span: 5670..5671,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 277,
        column: 20,
        span: 5671..5672,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 277,
        column: 23,
        span: 5673..5675,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 277,
        column: 25,
        span: 5675..5677,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 26,
        span: 5677..5678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 278,
        column: 7,
        span: 5679..5685,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 278,
        column: 8,
        span: 5685..5686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 278,
        column: 13,
        span: 5686..5691,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 278,
        column: 14,
        span: 5691..5692,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxn",
        ),
        line: 278,
        column: 18,
        span: 5692..5696,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 278,
        column: 19,
        span: 5696..5697,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 278,
        column: 20,
        span: 5697..5698,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1000\"",
        ),
        line: 278,
        column: 26,
        span: 5698..5704,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 278,
        column: 27,
        span: 5704..5705,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 278,
        column: 29,
        span: 5706..5707,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 278,
        column: 34,
        span: 5708..5712,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 278,
        column: 35,
        span: 5712..5713,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 278,
        column: 38,
        span: 5714..5716,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 278,
        column: 40,
        span: 5716..5718,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
        column: 41,
        span: 5718..5719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 279,
        column: 7,
        span: 5720..5726,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 279,
        column: 8,
        span: 5726..5727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 279,
        column: 13,
        span: 5727..5732,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 279,
        column: 14,
        span: 5732..5733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxn",
        ),
        line: 279,
        column: 18,
        span: 5733..5737,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 279,
        column: 19,
        span: 5737..5738,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 279,
        column: 20,
        span: 5738..5739,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1000\"",
        ),
        line: 279,
        column: 26,
        span: 5739..5745,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 279,
        column: 27,
        span: 5745..5746,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 279,
        column: 29,
        span: 5747..5748,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 279,
        column: 34,
        span: 5749..5753,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 279,
        column: 35,
        span: 5753..5754,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 279,
        column: 37,
        span: 5755..5756,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 279,
        column: 41,
        span: 5755..5760,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 279,
        column: 42,
        span: 5760..5761,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 279,
        column: 44,
        span: 5762..5763,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 279,
        column: 46,
        span: 5763..5765,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 279,
        column: 47,
        span: 5765..5766,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 279,
        column: 50,
        span: 5767..5769,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 279,
        column: 55,
        span: 5769..5774,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 279,
        column: 56,
        span: 5774..5775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 280,
        column: 7,
        span: 5776..5782,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 280,
        column: 8,
        span: 5782..5783,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 280,
        column: 13,
        span: 5783..5788,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 280,
        column: 14,
        span: 5788..5789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxn",
        ),
        line: 280,
        column: 18,
        span: 5789..5793,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 280,
        column: 19,
        span: 5793..5794,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 280,
        column: 20,
        span: 5794..5795,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 280,
        column: 24,
        span: 5794..5799,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 280,
        column: 25,
        span: 5799..5800,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 280,
        column: 27,
        span: 5801..5802,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 280,
        column: 32,
        span: 5803..5807,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 280,
        column: 33,
        span: 5807..5808,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 280,
        column: 36,
        span: 5809..5811,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 280,
        column: 41,
        span: 5811..5816,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 280,
        column: 42,
        span: 5816..5817,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 281,
        column: 7,
        span: 5818..5824,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 281,
        column: 8,
        span: 5824..5825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 281,
        column: 13,
        span: 5825..5830,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 281,
        column: 14,
        span: 5830..5831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxn",
        ),
        line: 281,
        column: 18,
        span: 5831..5835,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 281,
        column: 19,
        span: 5835..5836,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 281,
        column: 20,
        span: 5836..5837,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 281,
        column: 22,
        span: 5836..5839,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 281,
        column: 23,
        span: 5839..5840,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 281,
        column: 25,
        span: 5841..5842,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 281,
        column: 30,
        span: 5843..5847,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 281,
        column: 31,
        span: 5847..5848,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 281,
        column: 33,
        span: 5849..5850,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 281,
        column: 36,
        span: 5849..5853,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 281,
        column: 37,
        span: 5853..5854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 281,
        column: 41,
        span: 5854..5858,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 281,
        column: 42,
        span: 5858..5859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 281,
        column: 44,
        span: 5859..5861,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 281,
        column: 45,
        span: 5861..5862,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 281,
        column: 47,
        span: 5863..5864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 281,
        column: 53,
        span: 5865..5870,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 281,
        column: 54,
        span: 5870..5871,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 281,
        column: 57,
        span: 5872..5874,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 281,
        column: 61,
        span: 5874..5878,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 281,
        column: 62,
        span: 5878..5879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 281,
        column: 66,
        span: 5879..5883,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 281,
        column: 67,
        span: 5883..5884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 281,
        column: 69,
        span: 5884..5886,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 281,
        column: 70,
        span: 5886..5887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 285,
        column: 2,
        span: 5906..5907,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 285,
        column: 4,
        span: 5908..5909,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 285,
        column: 6,
        span: 5910..5911,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 285,
        column: 7,
        span: 5911..5912,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 286,
        column: 4,
        span: 5913..5916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 286,
        column: 6,
        span: 5917..5918,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 286,
        column: 7,
        span: 5918..5919,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 286,
        column: 8,
        span: 5918..5920,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 286,
        column: 9,
        span: 5920..5921,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        line: 286,
        column: 11,
        span: 5920..5923,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 286,
        column: 14,
        span: 5924..5926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 286,
        column: 16,
        span: 5927..5928,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 286,
        column: 17,
        span: 5928..5929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 286,
        column: 21,
        span: 5929..5933,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 286,
        column: 22,
        span: 5933..5934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pow",
        ),
        line: 286,
        column: 25,
        span: 5934..5937,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 286,
        column: 26,
        span: 5937..5938,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 286,
        column: 27,
        span: 5937..5939,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 286,
        column: 28,
        span: 5939..5940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 286,
        column: 29,
        span: 5940..5941,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 286,
        column: 30,
        span: 5941..5942,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 286,
        column: 31,
        span: 5942..5943,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 286,
        column: 33,
        span: 5944..5945,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 286,
        column: 38,
        span: 5946..5950,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 286,
        column: 0,
        span: 5951..5954,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 287,
        column: 7,
        span: 5955..5961,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 287,
        column: 8,
        span: 5961..5962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 287,
        column: 9,
        span: 5962..5963,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 287,
        column: 10,
        span: 5963..5964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 287,
        column: 15,
        span: 5964..5969,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 287,
        column: 16,
        span: 5969..5970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        line: 287,
        column: 20,
        span: 5970..5974,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 287,
        column: 21,
        span: 5974..5975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 287,
        column: 22,
        span: 5975..5976,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 287,
        column: 23,
        span: 5976..5977,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 287,
        column: 24,
        span: 5977..5978,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 287,
        column: 25,
        span: 5978..5979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 289,
        column: 6,
        span: 5981..5986,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 289,
        column: 7,
        span: 5986..5987,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        line: 289,
        column: 10,
        span: 5987..5990,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 289,
        column: 11,
        span: 5990..5991,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 293,
        column: 6,
        span: 6012..6017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 293,
        column: 8,
        span: 6018..6019,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 293,
        column: 10,
        span: 6020..6021,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 293,
        column: 12,
        span: 6022..6023,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 293,
        column: 13,
        span: 6023..6024,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 293,
        column: 14,
        span: 6024..6025,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 293,
        column: 15,
        span: 6024..6026,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 293,
        column: 16,
        span: 6026..6027,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 293,
        column: 17,
        span: 6027..6028,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 293,
        column: 19,
        span: 6029..6030,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 293,
        column: 21,
        span: 6030..6032,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 293,
        column: 22,
        span: 6032..6033,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 293,
        column: 24,
        span: 6034..6035,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 293,
        column: 25,
        span: 6035..6036,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 293,
        column: 26,
        span: 6035..6037,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 293,
        column: 27,
        span: 6037..6038,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 293,
        column: 28,
        span: 6038..6039,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 293,
        column: 30,
        span: 6040..6041,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 293,
        column: 32,
        span: 6041..6043,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 293,
        column: 33,
        span: 6043..6044,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 293,
        column: 35,
        span: 6045..6046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 293,
        column: 41,
        span: 6046..6052,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 293,
        column: 42,
        span: 6052..6053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 293,
        column: 45,
        span: 6053..6056,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 293,
        column: 46,
        span: 6056..6057,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x \"",
        ),
        line: 293,
        column: 50,
        span: 6057..6061,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 293,
        column: 51,
        span: 6061..6062,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 293,
        column: 53,
        span: 6062..6064,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 293,
        column: 54,
        span: 6064..6065,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 293,
        column: 55,
        span: 6065..6066,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 293,
        column: 57,
        span: 6067..6068,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 293,
        column: 59,
        span: 6068..6070,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 293,
        column: 60,
        span: 6070..6071,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 294,
        column: 13,
        span: 6083..6084,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 294,
        column: 18,
        span: 6083..6089,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 294,
        column: 19,
        span: 6089..6090,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 294,
        column: 21,
        span: 6091..6092,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 294,
        column: 23,
        span: 6092..6094,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 294,
        column: 24,
        span: 6094..6095,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 294,
        column: 26,
        span: 6096..6097,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 294,
        column: 27,
        span: 6096..6098,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 294,
        column: 28,
        span: 6098..6099,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 294,
        column: 30,
        span: 6100..6101,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 294,
        column: 32,
        span: 6101..6103,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 294,
        column: 33,
        span: 6103..6104,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 296,
        column: 6,
        span: 6106..6111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 296,
        column: 8,
        span: 6112..6113,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 296,
        column: 10,
        span: 6114..6115,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 296,
        column: 0,
        span: 6115..6117,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 297,
        column: 4,
        span: 6118..6121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 297,
        column: 6,
        span: 6122..6123,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 297,
        column: 7,
        span: 6123..6124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 297,
        column: 9,
        span: 6125..6126,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 297,
        column: 12,
        span: 6127..6129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 297,
        column: 18,
        span: 6130..6135,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
        column: 19,
        span: 6135..6136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 297,
        column: 21,
        span: 6137..6138,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
        column: 23,
        span: 6139..6140,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 297,
        column: 0,
        span: 6141..6143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 298,
        column: 4,
        span: 6146..6147,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 298,
        column: 6,
        span: 6148..6149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 298,
        column: 8,
        span: 6150..6151,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 298,
        column: 9,
        span: 6151..6152,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 298,
        column: 0,
        span: 6151..6153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 299,
        column: 9,
        span: 6156..6162,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
        column: 10,
        span: 6162..6163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 299,
        column: 11,
        span: 6163..6164,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 299,
        column: 12,
        span: 6164..6165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 299,
        column: 13,
        span: 6165..6166,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 299,
        column: 14,
        span: 6166..6167,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 299,
        column: 17,
        span: 6168..6170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 299,
        column: 19,
        span: 6171..6172,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
        column: 20,
        span: 6172..6173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 300,
        column: 4,
        span: 6176..6177,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 300,
        column: 5,
        span: 6177..6178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 300,
        column: 6,
        span: 6178..6179,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 300,
        column: 7,
        span: 6179..6180,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 300,
        column: 9,
        span: 6181..6182,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 300,
        column: 0,
        span: 6183..6186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 301,
        column: 17,
        span: 6189..6203,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 301,
        column: 18,
        span: 6203..6204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 301,
        column: 19,
        span: 6204..6205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 302,
        column: 9,
        span: 6208..6214,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 302,
        column: 10,
        span: 6214..6215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 302,
        column: 11,
        span: 6215..6216,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 302,
        column: 12,
        span: 6216..6217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 302,
        column: 13,
        span: 6217..6218,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 302,
        column: 14,
        span: 6218..6219,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 302,
        column: 17,
        span: 6220..6222,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 302,
        column: 21,
        span: 6223..6226,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 302,
        column: 22,
        span: 6226..6227,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 303,
        column: 0,
        span: 6228..6231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 304,
        column: 7,
        span: 6232..6238,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 304,
        column: 8,
        span: 6238..6239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 304,
        column: 9,
        span: 6239..6240,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 304,
        column: 12,
        span: 6241..6243,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 304,
        column: 14,
        span: 6243..6245,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 304,
        column: 15,
        span: 6245..6246,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 307,
        column: 6,
        span: 6249..6254,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 307,
        column: 15,
        span: 6255..6263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 307,
        column: 20,
        span: 6264..6268,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 307,
        column: 22,
        span: 6269..6270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 307,
        column: 23,
        span: 6270..6271,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 307,
        column: 24,
        span: 6271..6272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 308,
        column: 8,
        span: 6275..6280,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 308,
        column: 9,
        span: 6280..6281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 308,
        column: 15,
        span: 6281..6287,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 308,
        column: 16,
        span: 6287..6288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 308,
        column: 17,
        span: 6288..6289,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 308,
        column: 18,
        span: 6289..6290,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 308,
        column: 21,
        span: 6290..6293,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 308,
        column: 22,
        span: 6293..6294,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 308,
        column: 23,
        span: 6294..6295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 308,
        column: 29,
        span: 6296..6301,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 308,
        column: 30,
        span: 6301..6302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 308,
        column: 36,
        span: 6302..6308,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 308,
        column: 37,
        span: 6308..6309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 308,
        column: 38,
        span: 6309..6310,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 308,
        column: 39,
        span: 6310..6311,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 308,
        column: 41,
        span: 6311..6313,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 308,
        column: 42,
        span: 6313..6314,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 308,
        column: 45,
        span: 6314..6317,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 308,
        column: 46,
        span: 6317..6318,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 308,
        column: 47,
        span: 6318..6319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 309,
        column: 8,
        span: 6322..6327,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 309,
        column: 9,
        span: 6327..6328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 309,
        column: 15,
        span: 6328..6334,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 309,
        column: 16,
        span: 6334..6335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 309,
        column: 17,
        span: 6335..6336,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 309,
        column: 18,
        span: 6336..6337,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 309,
        column: 20,
        span: 6337..6339,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 309,
        column: 21,
        span: 6339..6340,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 309,
        column: 23,
        span: 6341..6342,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 309,
        column: 24,
        span: 6341..6343,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 309,
        column: 25,
        span: 6343..6344,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 309,
        column: 26,
        span: 6344..6345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 309,
        column: 32,
        span: 6346..6351,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 309,
        column: 33,
        span: 6351..6352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 309,
        column: 39,
        span: 6352..6358,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 309,
        column: 40,
        span: 6358..6359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 309,
        column: 41,
        span: 6359..6360,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 309,
        column: 42,
        span: 6360..6361,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 309,
        column: 45,
        span: 6361..6364,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 309,
        column: 46,
        span: 6364..6365,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 309,
        column: 47,
        span: 6365..6366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 310,
        column: 8,
        span: 6369..6374,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 310,
        column: 9,
        span: 6374..6375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 310,
        column: 15,
        span: 6375..6381,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 310,
        column: 16,
        span: 6381..6382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 310,
        column: 17,
        span: 6382..6383,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 310,
        column: 18,
        span: 6383..6384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 310,
        column: 24,
        span: 6385..6390,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 310,
        column: 25,
        span: 6390..6391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        line: 310,
        column: 29,
        span: 6391..6395,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 310,
        column: 30,
        span: 6395..6396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 310,
        column: 31,
        span: 6396..6397,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 310,
        column: 32,
        span: 6397..6398,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 310,
        column: 33,
        span: 6398..6399,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 310,
        column: 34,
        span: 6398..6400,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 310,
        column: 35,
        span: 6400..6401,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        line: 310,
        column: 38,
        span: 6401..6404,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 310,
        column: 39,
        span: 6404..6405,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 311,
        column: 8,
        span: 6408..6413,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 311,
        column: 9,
        span: 6413..6414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 311,
        column: 15,
        span: 6414..6420,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
        column: 16,
        span: 6420..6421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 311,
        column: 17,
        span: 6421..6422,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 311,
        column: 18,
        span: 6422..6423,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
        column: 20,
        span: 6423..6425,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 311,
        column: 21,
        span: 6425..6426,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 311,
        column: 23,
        span: 6427..6428,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
        column: 24,
        span: 6427..6429,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 311,
        column: 25,
        span: 6429..6430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 312,
        column: 9,
        span: 6433..6439,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 312,
        column: 10,
        span: 6439..6440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 312,
        column: 15,
        span: 6440..6445,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 312,
        column: 16,
        span: 6445..6446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 312,
        column: 22,
        span: 6446..6452,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 312,
        column: 23,
        span: 6452..6453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 312,
        column: 24,
        span: 6453..6454,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 312,
        column: 25,
        span: 6454..6455,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 312,
        column: 26,
        span: 6454..6456,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 312,
        column: 27,
        span: 6456..6457,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 312,
        column: 30,
        span: 6458..6460,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 312,
        column: 32,
        span: 6461..6462,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 312,
        column: 33,
        span: 6461..6463,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 312,
        column: 34,
        span: 6463..6464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 313,
        column: 9,
        span: 6467..6473,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 313,
        column: 10,
        span: 6473..6474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 313,
        column: 15,
        span: 6474..6479,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 313,
        column: 16,
        span: 6479..6480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 313,
        column: 22,
        span: 6480..6486,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 313,
        column: 23,
        span: 6486..6487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 313,
        column: 24,
        span: 6487..6488,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 313,
        column: 25,
        span: 6488..6489,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 313,
        column: 26,
        span: 6488..6490,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 313,
        column: 27,
        span: 6490..6491,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 313,
        column: 30,
        span: 6492..6494,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 313,
        column: 32,
        span: 6495..6496,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 313,
        column: 33,
        span: 6495..6497,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 313,
        column: 34,
        span: 6497..6498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 314,
        column: 9,
        span: 6501..6507,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 314,
        column: 10,
        span: 6507..6508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 314,
        column: 15,
        span: 6508..6513,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 314,
        column: 16,
        span: 6513..6514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 314,
        column: 22,
        span: 6514..6520,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 314,
        column: 23,
        span: 6520..6521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 314,
        column: 24,
        span: 6521..6522,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 314,
        column: 25,
        span: 6522..6523,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 314,
        column: 26,
        span: 6522..6524,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 314,
        column: 27,
        span: 6524..6525,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 314,
        column: 30,
        span: 6526..6528,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 314,
        column: 33,
        span: 6528..6531,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 314,
        column: 34,
        span: 6531..6532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 315,
        column: 9,
        span: 6535..6541,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 315,
        column: 10,
        span: 6541..6542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 315,
        column: 15,
        span: 6542..6547,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 315,
        column: 16,
        span: 6547..6548,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 315,
        column: 22,
        span: 6548..6554,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 315,
        column: 23,
        span: 6554..6555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 315,
        column: 24,
        span: 6555..6556,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 315,
        column: 25,
        span: 6556..6557,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 315,
        column: 26,
        span: 6556..6558,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 315,
        column: 27,
        span: 6558..6559,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 315,
        column: 30,
        span: 6560..6562,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 315,
        column: 33,
        span: 6562..6565,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 315,
        column: 34,
        span: 6565..6566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 316,
        column: 9,
        span: 6569..6575,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 316,
        column: 10,
        span: 6575..6576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 316,
        column: 15,
        span: 6576..6581,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 316,
        column: 16,
        span: 6581..6582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 316,
        column: 22,
        span: 6582..6588,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 316,
        column: 23,
        span: 6588..6589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 316,
        column: 24,
        span: 6589..6590,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 316,
        column: 25,
        span: 6590..6591,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 316,
        column: 26,
        span: 6590..6592,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 316,
        column: 27,
        span: 6592..6593,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 316,
        column: 30,
        span: 6594..6596,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 316,
        column: 33,
        span: 6596..6599,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 316,
        column: 34,
        span: 6599..6600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 317,
        column: 9,
        span: 6603..6609,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
        column: 10,
        span: 6609..6610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 317,
        column: 15,
        span: 6610..6615,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 317,
        column: 16,
        span: 6615..6616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 317,
        column: 22,
        span: 6616..6622,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
        column: 23,
        span: 6622..6623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 317,
        column: 24,
        span: 6623..6624,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 317,
        column: 25,
        span: 6624..6625,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 317,
        column: 26,
        span: 6624..6626,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 317,
        column: 27,
        span: 6626..6627,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 317,
        column: 30,
        span: 6628..6630,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        line: 317,
        column: 33,
        span: 6630..6633,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 317,
        column: 34,
        span: 6633..6634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 318,
        column: 9,
        span: 6637..6643,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 318,
        column: 10,
        span: 6643..6644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 318,
        column: 15,
        span: 6644..6649,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 318,
        column: 16,
        span: 6649..6650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 318,
        column: 22,
        span: 6650..6656,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 318,
        column: 23,
        span: 6656..6657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 318,
        column: 24,
        span: 6657..6658,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 318,
        column: 25,
        span: 6658..6659,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 318,
        column: 26,
        span: 6658..6660,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 318,
        column: 27,
        span: 6660..6661,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 318,
        column: 30,
        span: 6662..6664,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 318,
        column: 34,
        span: 6665..6668,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 318,
        column: 35,
        span: 6668..6669,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 319,
        column: 0,
        span: 6670..6673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 321,
        column: 2,
        span: 6675..6676,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 321,
        column: 4,
        span: 6677..6678,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 321,
        column: 6,
        span: 6679..6680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 321,
        column: 7,
        span: 6680..6681,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 321,
        column: 8,
        span: 6681..6682,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 321,
        column: 9,
        span: 6681..6683,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 321,
        column: 10,
        span: 6683..6684,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 321,
        column: 12,
        span: 6685..6686,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 321,
        column: 13,
        span: 6686..6687,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 321,
        column: 14,
        span: 6686..6688,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 321,
        column: 15,
        span: 6688..6689,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 321,
        column: 17,
        span: 6690..6691,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ban\"",
        ),
        line: 321,
        column: 23,
        span: 6692..6697,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 321,
        column: 24,
        span: 6697..6698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 322,
        column: 5,
        span: 6699..6703,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 322,
        column: 6,
        span: 6703..6704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 322,
        column: 7,
        span: 6704..6705,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 322,
        column: 8,
        span: 6705..6706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 323,
        column: 7,
        span: 6707..6713,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 323,
        column: 8,
        span: 6713..6714,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 323,
        column: 9,
        span: 6714..6715,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 323,
        column: 10,
        span: 6715..6716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 323,
        column: 11,
        span: 6716..6717,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 323,
        column: 14,
        span: 6718..6720,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 323,
        column: 16,
        span: 6720..6722,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 323,
        column: 20,
        span: 6723..6726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 323,
        column: 22,
        span: 6727..6728,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 323,
        column: 23,
        span: 6728..6729,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 323,
        column: 24,
        span: 6729..6730,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 323,
        column: 25,
        span: 6729..6731,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 323,
        column: 26,
        span: 6731..6732,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 323,
        column: 29,
        span: 6733..6735,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ban\"",
        ),
        line: 323,
        column: 35,
        span: 6736..6741,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 323,
        column: 36,
        span: 6741..6742,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 325,
        column: 2,
        span: 6744..6745,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 325,
        column: 4,
        span: 6746..6747,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 325,
        column: 6,
        span: 6748..6749,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 325,
        column: 7,
        span: 6749..6750,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 325,
        column: 8,
        span: 6750..6751,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 325,
        column: 9,
        span: 6750..6752,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 325,
        column: 10,
        span: 6752..6753,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 325,
        column: 12,
        span: 6754..6755,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ban\"",
        ),
        line: 325,
        column: 18,
        span: 6756..6761,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 325,
        column: 19,
        span: 6761..6762,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 325,
        column: 20,
        span: 6762..6763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 326,
        column: 5,
        span: 6764..6768,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 326,
        column: 6,
        span: 6768..6769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 326,
        column: 7,
        span: 6769..6770,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 326,
        column: 8,
        span: 6770..6771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 327,
        column: 7,
        span: 6772..6778,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 327,
        column: 8,
        span: 6778..6779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 327,
        column: 9,
        span: 6779..6780,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 327,
        column: 10,
        span: 6780..6781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 327,
        column: 11,
        span: 6781..6782,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 327,
        column: 14,
        span: 6783..6785,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 327,
        column: 18,
        span: 6786..6789,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 327,
        column: 22,
        span: 6790..6793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 327,
        column: 28,
        span: 6794..6799,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 327,
        column: 29,
        span: 6799..6800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        line: 327,
        column: 33,
        span: 6800..6804,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 327,
        column: 34,
        span: 6804..6805,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 327,
        column: 35,
        span: 6805..6806,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 327,
        column: 36,
        span: 6806..6807,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 327,
        column: 39,
        span: 6808..6810,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 327,
        column: 41,
        span: 6810..6812,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 327,
        column: 45,
        span: 6813..6816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 327,
        column: 47,
        span: 6817..6818,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 327,
        column: 48,
        span: 6818..6819,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 327,
        column: 49,
        span: 6819..6820,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 327,
        column: 50,
        span: 6819..6821,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 327,
        column: 51,
        span: 6821..6822,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 327,
        column: 54,
        span: 6823..6825,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ban\"",
        ),
        line: 327,
        column: 60,
        span: 6826..6831,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 327,
        column: 61,
        span: 6831..6832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 330,
        column: 6,
        span: 6835..6840,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 330,
        column: 7,
        span: 6840..6841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 330,
        column: 13,
        span: 6841..6847,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 330,
        column: 14,
        span: 6847..6848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 330,
        column: 15,
        span: 6848..6849,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 330,
        column: 16,
        span: 6849..6850,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 330,
        column: 18,
        span: 6850..6852,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 330,
        column: 19,
        span: 6852..6853,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 330,
        column: 22,
        span: 6853..6856,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 330,
        column: 23,
        span: 6856..6857,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 330,
        column: 24,
        span: 6857..6858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 330,
        column: 30,
        span: 6859..6864,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 330,
        column: 31,
        span: 6864..6865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 330,
        column: 37,
        span: 6865..6871,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 330,
        column: 38,
        span: 6871..6872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 330,
        column: 39,
        span: 6872..6873,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 330,
        column: 40,
        span: 6873..6874,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 330,
        column: 42,
        span: 6874..6876,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 330,
        column: 43,
        span: 6876..6877,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 330,
        column: 46,
        span: 6877..6880,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 330,
        column: 47,
        span: 6880..6881,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 330,
        column: 48,
        span: 6881..6882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 330,
        column: 54,
        span: 6883..6888,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 330,
        column: 55,
        span: 6888..6889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 330,
        column: 61,
        span: 6889..6895,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 330,
        column: 62,
        span: 6895..6896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 330,
        column: 63,
        span: 6896..6897,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 330,
        column: 64,
        span: 6897..6898,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 330,
        column: 66,
        span: 6898..6900,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 330,
        column: 67,
        span: 6900..6901,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 330,
        column: 69,
        span: 6902..6903,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 330,
        column: 70,
        span: 6902..6904,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 330,
        column: 71,
        span: 6904..6905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 331,
        column: 7,
        span: 6906..6912,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 331,
        column: 8,
        span: 6912..6913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 331,
        column: 13,
        span: 6913..6918,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 331,
        column: 14,
        span: 6918..6919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 331,
        column: 20,
        span: 6919..6925,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 331,
        column: 21,
        span: 6925..6926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 331,
        column: 22,
        span: 6926..6927,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 331,
        column: 23,
        span: 6927..6928,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 331,
        column: 26,
        span: 6929..6931,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 331,
        column: 29,
        span: 6931..6934,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 331,
        column: 30,
        span: 6934..6935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 332,
        column: 7,
        span: 6936..6942,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 332,
        column: 8,
        span: 6942..6943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 332,
        column: 13,
        span: 6943..6948,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 332,
        column: 14,
        span: 6948..6949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 332,
        column: 20,
        span: 6949..6955,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 332,
        column: 21,
        span: 6955..6956,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 332,
        column: 22,
        span: 6956..6957,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 332,
        column: 23,
        span: 6957..6958,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 332,
        column: 26,
        span: 6959..6961,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 332,
        column: 29,
        span: 6961..6964,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 332,
        column: 30,
        span: 6964..6965,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 333,
        column: 7,
        span: 6966..6972,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 333,
        column: 8,
        span: 6972..6973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 333,
        column: 13,
        span: 6973..6978,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 333,
        column: 14,
        span: 6978..6979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 333,
        column: 20,
        span: 6979..6985,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 333,
        column: 21,
        span: 6985..6986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 333,
        column: 22,
        span: 6986..6987,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 333,
        column: 23,
        span: 6987..6988,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 333,
        column: 26,
        span: 6989..6991,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 333,
        column: 28,
        span: 6992..6993,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 333,
        column: 29,
        span: 6992..6994,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 333,
        column: 30,
        span: 6994..6995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 335,
        column: 2,
        span: 6997..6998,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 335,
        column: 4,
        span: 6999..7000,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 335,
        column: 6,
        span: 7001..7002,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'c'",
        ),
        line: 335,
        column: 9,
        span: 7002..7005,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 335,
        column: 10,
        span: 7005..7006,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'d'",
        ),
        line: 335,
        column: 14,
        span: 7007..7010,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 335,
        column: 15,
        span: 7010..7011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 336,
        column: 6,
        span: 7012..7017,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 336,
        column: 7,
        span: 7017..7018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 336,
        column: 13,
        span: 7018..7024,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 336,
        column: 14,
        span: 7024..7025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 336,
        column: 15,
        span: 7025..7026,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 336,
        column: 16,
        span: 7026..7027,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 336,
        column: 18,
        span: 7027..7029,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 336,
        column: 19,
        span: 7029..7030,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 336,
        column: 23,
        span: 7031..7034,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 336,
        column: 24,
        span: 7034..7035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 337,
        column: 6,
        span: 7036..7041,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 337,
        column: 7,
        span: 7041..7042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 337,
        column: 13,
        span: 7042..7048,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 337,
        column: 14,
        span: 7048..7049,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 337,
        column: 15,
        span: 7049..7050,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 337,
        column: 16,
        span: 7050..7051,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 337,
        column: 20,
        span: 7052..7055,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 337,
        column: 21,
        span: 7055..7056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 338,
        column: 7,
        span: 7057..7063,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 338,
        column: 8,
        span: 7063..7064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 338,
        column: 13,
        span: 7064..7069,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 338,
        column: 14,
        span: 7069..7070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 338,
        column: 20,
        span: 7070..7076,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 338,
        column: 21,
        span: 7076..7077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 338,
        column: 22,
        span: 7077..7078,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 338,
        column: 23,
        span: 7078..7079,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 338,
        column: 25,
        span: 7079..7081,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 338,
        column: 26,
        span: 7081..7082,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 338,
        column: 29,
        span: 7083..7085,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'c'",
        ),
        line: 338,
        column: 33,
        span: 7086..7089,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 338,
        column: 34,
        span: 7089..7090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 339,
        column: 7,
        span: 7091..7097,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 339,
        column: 8,
        span: 7097..7098,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 339,
        column: 13,
        span: 7098..7103,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 339,
        column: 14,
        span: 7103..7104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 339,
        column: 20,
        span: 7104..7110,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 339,
        column: 21,
        span: 7110..7111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 339,
        column: 22,
        span: 7111..7112,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 339,
        column: 23,
        span: 7112..7113,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 339,
        column: 25,
        span: 7113..7115,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 339,
        column: 26,
        span: 7115..7116,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 339,
        column: 29,
        span: 7117..7119,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'d'",
        ),
        line: 339,
        column: 33,
        span: 7120..7123,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 339,
        column: 34,
        span: 7123..7124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 340,
        column: 7,
        span: 7125..7131,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 340,
        column: 8,
        span: 7131..7132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 340,
        column: 13,
        span: 7132..7137,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 340,
        column: 14,
        span: 7137..7138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 340,
        column: 20,
        span: 7138..7144,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 340,
        column: 21,
        span: 7144..7145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 340,
        column: 22,
        span: 7145..7146,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 340,
        column: 23,
        span: 7146..7147,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 340,
        column: 25,
        span: 7147..7149,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 340,
        column: 26,
        span: 7149..7150,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 340,
        column: 29,
        span: 7151..7153,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 340,
        column: 33,
        span: 7154..7157,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 340,
        column: 34,
        span: 7157..7158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 341,
        column: 7,
        span: 7159..7165,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 341,
        column: 8,
        span: 7165..7166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 341,
        column: 13,
        span: 7166..7171,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 341,
        column: 14,
        span: 7171..7172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 341,
        column: 20,
        span: 7172..7178,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 341,
        column: 21,
        span: 7178..7179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 341,
        column: 22,
        span: 7179..7180,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 341,
        column: 23,
        span: 7180..7181,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 341,
        column: 25,
        span: 7181..7183,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 341,
        column: 26,
        span: 7183..7184,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 341,
        column: 29,
        span: 7185..7187,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 341,
        column: 33,
        span: 7188..7191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 341,
        column: 34,
        span: 7191..7192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 342,
        column: 7,
        span: 7193..7199,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 8,
        span: 7199..7200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 342,
        column: 13,
        span: 7200..7205,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 342,
        column: 14,
        span: 7205..7206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        line: 342,
        column: 18,
        span: 7206..7210,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 19,
        span: 7210..7211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 342,
        column: 20,
        span: 7211..7212,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 21,
        span: 7212..7213,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 342,
        column: 24,
        span: 7214..7216,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 342,
        column: 26,
        span: 7216..7218,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 342,
        column: 30,
        span: 7219..7222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 342,
        column: 32,
        span: 7223..7224,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 342,
        column: 33,
        span: 7224..7225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 342,
        column: 34,
        span: 7225..7226,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 342,
        column: 37,
        span: 7227..7229,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 342,
        column: 41,
        span: 7230..7233,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 42,
        span: 7233..7234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 343,
        column: 6,
        span: 7235..7240,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 343,
        column: 7,
        span: 7240..7241,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        line: 343,
        column: 10,
        span: 7241..7244,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 343,
        column: 11,
        span: 7244..7245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 345,
        column: 2,
        span: 7247..7248,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 345,
        column: 4,
        span: 7249..7250,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 345,
        column: 6,
        span: 7251..7252,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 345,
        column: 7,
        span: 7252..7253,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 346,
        column: 4,
        span: 7254..7257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 346,
        column: 6,
        span: 7258..7259,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 346,
        column: 7,
        span: 7259..7260,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 346,
        column: 8,
        span: 7259..7261,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 346,
        column: 9,
        span: 7261..7262,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 346,
        column: 13,
        span: 7261..7266,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 346,
        column: 0,
        span: 7267..7269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 347,
        column: 4,
        span: 7272..7273,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 347,
        column: 5,
        span: 7273..7274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 347,
        column: 6,
        span: 7274..7275,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 347,
        column: 7,
        span: 7275..7276,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 347,
        column: 9,
        span: 7277..7278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 347,
        column: 11,
        span: 7279..7280,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 347,
        column: 12,
        span: 7280..7281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 347,
        column: 14,
        span: 7282..7283,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 347,
        column: 15,
        span: 7283..7284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 347,
        column: 16,
        span: 7284..7285,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 347,
        column: 17,
        span: 7285..7286,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 347,
        column: 18,
        span: 7285..7287,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 347,
        column: 19,
        span: 7287..7288,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 347,
        column: 21,
        span: 7289..7290,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 347,
        column: 0,
        span: 7291..7294,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 348,
        column: 0,
        span: 7295..7298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 349,
        column: 7,
        span: 7299..7305,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 349,
        column: 8,
        span: 7305..7306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 349,
        column: 12,
        span: 7306..7310,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 349,
        column: 13,
        span: 7310..7311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 349,
        column: 14,
        span: 7311..7312,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 349,
        column: 15,
        span: 7312..7313,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 349,
        column: 18,
        span: 7313..7316,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 349,
        column: 19,
        span: 7316..7317,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 349,
        column: 22,
        span: 7318..7320,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 349,
        column: 27,
        span: 7320..7325,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 349,
        column: 31,
        span: 7326..7329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 349,
        column: 36,
        span: 7330..7334,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 349,
        column: 37,
        span: 7334..7335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 349,
        column: 38,
        span: 7335..7336,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 349,
        column: 39,
        span: 7336..7337,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 349,
        column: 43,
        span: 7336..7341,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 349,
        column: 44,
        span: 7341..7342,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 349,
        column: 47,
        span: 7343..7345,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 349,
        column: 51,
        span: 7346..7349,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 349,
        column: 52,
        span: 7349..7350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 351,
        column: 7,
        span: 7352..7358,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 351,
        column: 8,
        span: 7358..7359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 351,
        column: 12,
        span: 7359..7363,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 351,
        column: 13,
        span: 7363..7364,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 351,
        column: 14,
        span: 7364..7365,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 351,
        column: 15,
        span: 7365..7366,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 351,
        column: 16,
        span: 7366..7367,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 351,
        column: 19,
        span: 7368..7370,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 351,
        column: 23,
        span: 7371..7374,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 351,
        column: 24,
        span: 7374..7375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 352,
        column: 7,
        span: 7376..7382,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 352,
        column: 8,
        span: 7382..7383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 352,
        column: 12,
        span: 7383..7387,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 352,
        column: 13,
        span: 7387..7388,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 352,
        column: 14,
        span: 7388..7389,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 352,
        column: 15,
        span: 7389..7390,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 352,
        column: 16,
        span: 7390..7391,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 352,
        column: 20,
        span: 7392..7395,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 352,
        column: 21,
        span: 7395..7396,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 352,
        column: 24,
        span: 7397..7399,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 352,
        column: 28,
        span: 7400..7403,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 352,
        column: 29,
        span: 7403..7404,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 354,
        column: 4,
        span: 7406..7409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 354,
        column: 6,
        span: 7410..7411,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 354,
        column: 7,
        span: 7411..7412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 354,
        column: 8,
        span: 7412..7413,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 354,
        column: 11,
        span: 7414..7416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 354,
        column: 17,
        span: 7417..7422,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 354,
        column: 18,
        span: 7422..7423,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 354,
        column: 19,
        span: 7423..7424,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 354,
        column: 22,
        span: 7425..7427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 354,
        column: 28,
        span: 7428..7433,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"not here\"",
        ),
        line: 354,
        column: 38,
        span: 7433..7443,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 354,
        column: 0,
        span: 7444..7447,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 355,
        column: 4,
        span: 7448..7451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 355,
        column: 6,
        span: 7452..7453,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 355,
        column: 7,
        span: 7453..7454,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 355,
        column: 8,
        span: 7453..7455,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 355,
        column: 9,
        span: 7455..7456,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 355,
        column: 10,
        span: 7455..7457,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 355,
        column: 13,
        span: 7458..7460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 355,
        column: 19,
        span: 7461..7466,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'not here'",
        ),
        line: 355,
        column: 29,
        span: 7466..7476,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 355,
        column: 0,
        span: 7477..7480,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 356,
        column: 4,
        span: 7481..7484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 356,
        column: 6,
        span: 7485..7486,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 356,
        column: 7,
        span: 7486..7487,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 356,
        column: 8,
        span: 7486..7488,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 356,
        column: 9,
        span: 7488..7489,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 356,
        column: 10,
        span: 7488..7490,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 356,
        column: 11,
        span: 7490..7491,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 356,
        column: 12,
        span: 7491..7492,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 356,
        column: 13,
        span: 7491..7493,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 356,
        column: 16,
        span: 7494..7496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 356,
        column: 22,
        span: 7497..7502,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'not here'",
        ),
        line: 356,
        column: 32,
        span: 7502..7512,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 356,
        column: 0,
        span: 7513..7516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 357,
        column: 2,
        span: 7517..7518,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 357,
        column: 4,
        span: 7519..7520,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 357,
        column: 8,
        span: 7521..7524,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 357,
        column: 9,
        span: 7524..7525,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 357,
        column: 13,
        span: 7526..7529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 357,
        column: 15,
        span: 7530..7531,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 357,
        column: 16,
        span: 7531..7532,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 357,
        column: 17,
        span: 7531..7533,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 357,
        column: 18,
        span: 7533..7534,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 357,
        column: 19,
        span: 7533..7535,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 357,
        column: 22,
        span: 7536..7538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 357,
        column: 29,
        span: 7539..7545,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 357,
        column: 30,
        span: 7545..7546,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 357,
        column: 33,
        span: 7546..7549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 357,
        column: 35,
        span: 7550..7551,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 357,
        column: 36,
        span: 7551..7552,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 357,
        column: 37,
        span: 7552..7553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 357,
        column: 39,
        span: 7554..7555,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 357,
        column: 40,
        span: 7555..7556,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 357,
        column: 41,
        span: 7555..7557,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 357,
        column: 45,
        span: 7558..7561,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 357,
        column: 46,
        span: 7561..7562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 357,
        column: 53,
        span: 7563..7569,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 357,
        column: 54,
        span: 7569..7570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 357,
        column: 55,
        span: 7570..7571,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 357,
        column: 56,
        span: 7571..7572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 358,
        column: 2,
        span: 7573..7574,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 358,
        column: 4,
        span: 7575..7576,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 358,
        column: 8,
        span: 7577..7580,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 358,
        column: 9,
        span: 7580..7581,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 358,
        column: 13,
        span: 7582..7585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 358,
        column: 15,
        span: 7586..7587,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 358,
        column: 16,
        span: 7587..7588,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 358,
        column: 17,
        span: 7587..7589,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 358,
        column: 18,
        span: 7589..7590,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 358,
        column: 19,
        span: 7589..7591,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 358,
        column: 20,
        span: 7591..7592,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 358,
        column: 21,
        span: 7592..7593,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 358,
        column: 22,
        span: 7592..7594,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 358,
        column: 25,
        span: 7595..7597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 358,
        column: 32,
        span: 7598..7604,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 358,
        column: 33,
        span: 7604..7605,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 358,
        column: 36,
        span: 7605..7608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 358,
        column: 38,
        span: 7609..7610,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 358,
        column: 39,
        span: 7610..7611,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 358,
        column: 40,
        span: 7611..7612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 358,
        column: 42,
        span: 7613..7614,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 358,
        column: 43,
        span: 7614..7615,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 358,
        column: 44,
        span: 7614..7616,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 358,
        column: 48,
        span: 7617..7620,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 358,
        column: 49,
        span: 7620..7621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 358,
        column: 56,
        span: 7622..7628,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 358,
        column: 57,
        span: 7628..7629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 358,
        column: 58,
        span: 7629..7630,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 358,
        column: 59,
        span: 7630..7631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 360,
        column: 2,
        span: 7633..7634,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 360,
        column: 4,
        span: 7635..7636,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 360,
        column: 6,
        span: 7636..7638,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 360,
        column: 7,
        span: 7638..7639,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 360,
        column: 11,
        span: 7640..7643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 360,
        column: 13,
        span: 7644..7645,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 360,
        column: 14,
        span: 7645..7646,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 360,
        column: 15,
        span: 7645..7647,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 360,
        column: 16,
        span: 7647..7648,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 360,
        column: 18,
        span: 7648..7650,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 360,
        column: 19,
        span: 7650..7651,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 360,
        column: 23,
        span: 7651..7655,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 360,
        column: 26,
        span: 7656..7658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 360,
        column: 28,
        span: 7659..7660,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 360,
        column: 29,
        span: 7660..7661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 360,
        column: 30,
        span: 7661..7662,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 360,
        column: 31,
        span: 7662..7663,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 360,
        column: 32,
        span: 7662..7664,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 360,
        column: 36,
        span: 7665..7668,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 360,
        column: 37,
        span: 7668..7669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 360,
        column: 44,
        span: 7670..7676,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
        column: 45,
        span: 7676..7677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 360,
        column: 46,
        span: 7677..7678,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 360,
        column: 48,
        span: 7678..7680,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 360,
        column: 50,
        span: 7679..7682,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
        column: 51,
        span: 7682..7683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 363,
        column: 2,
        span: 7762..7763,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 363,
        column: 4,
        span: 7764..7765,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 363,
        column: 6,
        span: 7765..7767,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 363,
        column: 7,
        span: 7767..7768,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 363,
        column: 11,
        span: 7769..7772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 363,
        column: 13,
        span: 7773..7774,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 363,
        column: 14,
        span: 7774..7775,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 363,
        column: 15,
        span: 7774..7776,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 363,
        column: 16,
        span: 7776..7777,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".999999999",
                },
            ),
        ),
        line: 363,
        column: 28,
        span: 7777..7789,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 363,
        column: 29,
        span: 7789..7790,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 363,
        column: 33,
        span: 7790..7794,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 363,
        column: 36,
        span: 7795..7797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 363,
        column: 38,
        span: 7798..7799,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 363,
        column: 39,
        span: 7799..7800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 363,
        column: 40,
        span: 7800..7801,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 363,
        column: 41,
        span: 7801..7802,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 363,
        column: 42,
        span: 7801..7803,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 363,
        column: 46,
        span: 7804..7807,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 363,
        column: 47,
        span: 7807..7808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 363,
        column: 54,
        span: 7809..7815,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 363,
        column: 55,
        span: 7815..7816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 363,
        column: 56,
        span: 7816..7817,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 363,
        column: 58,
        span: 7817..7819,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 363,
        column: 60,
        span: 7818..7821,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 363,
        column: 61,
        span: 7821..7822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 364,
        column: 2,
        span: 7823..7824,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 364,
        column: 4,
        span: 7825..7826,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 364,
        column: 6,
        span: 7826..7828,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 364,
        column: 7,
        span: 7828..7829,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 364,
        column: 11,
        span: 7830..7833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 364,
        column: 13,
        span: 7834..7835,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 364,
        column: 14,
        span: 7835..7836,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 364,
        column: 15,
        span: 7835..7837,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 364,
        column: 16,
        span: 7837..7838,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 364,
        column: 18,
        span: 7838..7840,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 364,
        column: 19,
        span: 7840..7841,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 364,
        column: 21,
        span: 7841..7843,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 364,
        column: 24,
        span: 7844..7846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 364,
        column: 26,
        span: 7847..7848,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 364,
        column: 27,
        span: 7848..7849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 364,
        column: 28,
        span: 7849..7850,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 364,
        column: 29,
        span: 7850..7851,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 364,
        column: 30,
        span: 7850..7852,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 364,
        column: 34,
        span: 7853..7856,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 364,
        column: 35,
        span: 7856..7857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 364,
        column: 42,
        span: 7858..7864,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 364,
        column: 43,
        span: 7864..7865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 364,
        column: 44,
        span: 7865..7866,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 364,
        column: 46,
        span: 7866..7868,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 364,
        column: 47,
        span: 7867..7869,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 364,
        column: 48,
        span: 7869..7870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 365,
        column: 2,
        span: 7871..7872,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 365,
        column: 4,
        span: 7873..7874,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 365,
        column: 6,
        span: 7874..7876,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 365,
        column: 7,
        span: 7876..7877,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 365,
        column: 11,
        span: 7878..7881,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 365,
        column: 13,
        span: 7882..7883,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 365,
        column: 14,
        span: 7883..7884,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "10",
            },
        ),
        line: 365,
        column: 18,
        span: 7883..7888,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 365,
        column: 19,
        span: 7888..7889,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "10",
            },
        ),
        line: 365,
        column: 24,
        span: 7889..7894,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 365,
        column: 25,
        span: 7894..7895,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 365,
        column: 27,
        span: 7896..7897,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 365,
        column: 28,
        span: 7896..7898,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 365,
        column: 31,
        span: 7899..7901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 365,
        column: 33,
        span: 7902..7903,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 365,
        column: 34,
        span: 7903..7904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 365,
        column: 35,
        span: 7904..7905,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 365,
        column: 36,
        span: 7905..7906,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 365,
        column: 37,
        span: 7905..7907,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 365,
        column: 41,
        span: 7908..7911,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 365,
        column: 42,
        span: 7911..7912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 365,
        column: 49,
        span: 7913..7919,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 365,
        column: 50,
        span: 7919..7920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 365,
        column: 51,
        span: 7920..7921,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 365,
        column: 53,
        span: 7921..7923,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 365,
        column: 54,
        span: 7922..7924,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 365,
        column: 55,
        span: 7924..7925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 366,
        column: 2,
        span: 7926..7927,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 366,
        column: 4,
        span: 7928..7929,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 366,
        column: 6,
        span: 7929..7931,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 366,
        column: 7,
        span: 7931..7932,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 366,
        column: 11,
        span: 7933..7936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 366,
        column: 13,
        span: 7937..7938,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 366,
        column: 14,
        span: 7938..7939,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 366,
        column: 15,
        span: 7938..7940,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 366,
        column: 16,
        span: 7940..7941,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".99999",
                },
            ),
        ),
        line: 366,
        column: 24,
        span: 7941..7949,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 366,
        column: 25,
        span: 7949..7950,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 366,
        column: 27,
        span: 7950..7952,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 366,
        column: 30,
        span: 7953..7955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 366,
        column: 32,
        span: 7956..7957,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 366,
        column: 33,
        span: 7957..7958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 366,
        column: 34,
        span: 7958..7959,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 366,
        column: 35,
        span: 7959..7960,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 366,
        column: 36,
        span: 7959..7961,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 366,
        column: 40,
        span: 7962..7965,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 366,
        column: 41,
        span: 7965..7966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 366,
        column: 48,
        span: 7967..7973,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 366,
        column: 49,
        span: 7973..7974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 366,
        column: 50,
        span: 7974..7975,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 366,
        column: 52,
        span: 7975..7977,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 366,
        column: 53,
        span: 7976..7978,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 366,
        column: 54,
        span: 7978..7979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 367,
        column: 2,
        span: 7980..7981,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 367,
        column: 4,
        span: 7982..7983,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 367,
        column: 6,
        span: 7983..7985,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 367,
        column: 7,
        span: 7985..7986,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 367,
        column: 11,
        span: 7987..7990,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 367,
        column: 13,
        span: 7991..7992,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 367,
        column: 14,
        span: 7992..7993,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "99999",
                    after_decimal: "",
                },
            ),
        ),
        line: 367,
        column: 19,
        span: 7992..7998,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 367,
        column: 20,
        span: 7998..7999,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "5",
            },
        ),
        line: 367,
        column: 24,
        span: 7999..8003,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 367,
        column: 25,
        span: 8003..8004,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 367,
        column: 27,
        span: 8005..8006,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 367,
        column: 28,
        span: 8005..8007,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 367,
        column: 31,
        span: 8008..8010,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 367,
        column: 33,
        span: 8011..8012,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 367,
        column: 34,
        span: 8012..8013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 367,
        column: 35,
        span: 8013..8014,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 367,
        column: 36,
        span: 8014..8015,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 367,
        column: 37,
        span: 8014..8016,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 367,
        column: 41,
        span: 8017..8020,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 367,
        column: 42,
        span: 8020..8021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 367,
        column: 49,
        span: 8022..8028,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 367,
        column: 50,
        span: 8028..8029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 367,
        column: 51,
        span: 8029..8030,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 367,
        column: 53,
        span: 8030..8032,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 367,
        column: 54,
        span: 8031..8033,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 367,
        column: 55,
        span: 8033..8034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 368,
        column: 2,
        span: 8035..8036,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 368,
        column: 4,
        span: 8037..8038,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 368,
        column: 6,
        span: 8038..8040,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 368,
        column: 7,
        span: 8040..8041,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 368,
        column: 11,
        span: 8042..8045,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 368,
        column: 13,
        span: 8046..8047,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 368,
        column: 14,
        span: 8047..8048,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 368,
        column: 15,
        span: 8047..8049,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 368,
        column: 16,
        span: 8049..8050,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".99999",
                },
            ),
        ),
        line: 368,
        column: 24,
        span: 8050..8058,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 368,
        column: 25,
        span: 8058..8059,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 368,
        column: 27,
        span: 8060..8061,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 368,
        column: 28,
        span: 8060..8062,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 368,
        column: 31,
        span: 8063..8065,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 368,
        column: 33,
        span: 8066..8067,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 368,
        column: 34,
        span: 8067..8068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 368,
        column: 35,
        span: 8068..8069,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 368,
        column: 36,
        span: 8069..8070,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 368,
        column: 37,
        span: 8069..8071,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 368,
        column: 41,
        span: 8072..8075,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 368,
        column: 42,
        span: 8075..8076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 368,
        column: 49,
        span: 8077..8083,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 368,
        column: 50,
        span: 8083..8084,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 368,
        column: 51,
        span: 8084..8085,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 368,
        column: 53,
        span: 8085..8087,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 368,
        column: 54,
        span: 8086..8088,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 368,
        column: 55,
        span: 8088..8089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 371,
        column: 2,
        span: 8105..8106,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 371,
        column: 4,
        span: 8107..8108,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 371,
        column: 6,
        span: 8108..8110,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 371,
        column: 7,
        span: 8110..8111,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 371,
        column: 11,
        span: 8112..8115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 371,
        column: 13,
        span: 8116..8117,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 371,
        column: 14,
        span: 8117..8118,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10\"",
        ),
        line: 371,
        column: 18,
        span: 8118..8122,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 371,
        column: 19,
        span: 8122..8123,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\"",
        ),
        line: 371,
        column: 22,
        span: 8123..8126,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 371,
        column: 23,
        span: 8126..8127,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-2\"",
        ),
        line: 371,
        column: 27,
        span: 8127..8131,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 371,
        column: 30,
        span: 8132..8134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 371,
        column: 32,
        span: 8135..8136,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 371,
        column: 33,
        span: 8136..8137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 371,
        column: 34,
        span: 8137..8138,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 371,
        column: 35,
        span: 8138..8139,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 371,
        column: 36,
        span: 8138..8140,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 371,
        column: 40,
        span: 8141..8144,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 371,
        column: 41,
        span: 8144..8145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 371,
        column: 48,
        span: 8146..8152,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 371,
        column: 49,
        span: 8152..8153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 371,
        column: 50,
        span: 8153..8154,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 371,
        column: 52,
        span: 8154..8156,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 371,
        column: 53,
        span: 8155..8157,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 371,
        column: 54,
        span: 8157..8158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 374,
        column: 15,
        span: 8161..8175,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 374,
        column: 16,
        span: 8175..8176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 374,
        column: 17,
        span: 8176..8177,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 379,
        column: 6,
        span: 8206..8211,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 379,
        column: 15,
        span: 8212..8220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 379,
        column: 17,
        span: 8221..8222,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 379,
        column: 19,
        span: 8223..8224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 379,
        column: 20,
        span: 8224..8225,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 379,
        column: 21,
        span: 8225..8226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 379,
        column: 23,
        span: 8227..8228,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 379,
        column: 24,
        span: 8228..8229,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 380,
        column: 8,
        span: 8232..8237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 380,
        column: 10,
        span: 8238..8239,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 380,
        column: 12,
        span: 8240..8241,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 380,
        column: 14,
        span: 8242..8243,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 380,
        column: 15,
        span: 8243..8244,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 380,
        column: 16,
        span: 8244..8245,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 380,
        column: 20,
        span: 8246..8249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 380,
        column: 22,
        span: 8250..8251,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 380,
        column: 23,
        span: 8251..8252,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 380,
        column: 24,
        span: 8251..8253,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 380,
        column: 25,
        span: 8253..8254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 380,
        column: 26,
        span: 8254..8255,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 380,
        column: 29,
        span: 8256..8258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 380,
        column: 31,
        span: 8259..8260,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 380,
        column: 32,
        span: 8260..8261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 380,
        column: 33,
        span: 8261..8262,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 380,
        column: 34,
        span: 8262..8263,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 380,
        column: 36,
        span: 8264..8265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 380,
        column: 38,
        span: 8266..8267,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 380,
        column: 39,
        span: 8267..8268,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 380,
        column: 41,
        span: 8267..8270,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 380,
        column: 0,
        span: 8271..8274,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 381,
        column: 9,
        span: 8277..8283,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 381,
        column: 18,
        span: 8284..8292,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 381,
        column: 20,
        span: 8293..8294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 381,
        column: 21,
        span: 8294..8295,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 381,
        column: 22,
        span: 8295..8296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 381,
        column: 23,
        span: 8296..8297,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 381,
        column: 24,
        span: 8297..8298,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 382,
        column: 14,
        span: 8310..8312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 382,
        column: 16,
        span: 8313..8314,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 382,
        column: 18,
        span: 8315..8316,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 382,
        column: 20,
        span: 8316..8318,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 382,
        column: 0,
        span: 8319..8323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 383,
        column: 15,
        span: 8337..8338,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 383,
        column: 17,
        span: 8339..8340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 383,
        column: 19,
        span: 8341..8342,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 383,
        column: 20,
        span: 8342..8343,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 383,
        column: 0,
        span: 8342..8344,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 384,
        column: 20,
        span: 8358..8364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 384,
        column: 22,
        span: 8365..8366,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 384,
        column: 23,
        span: 8366..8367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 384,
        column: 30,
        span: 8368..8374,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 384,
        column: 31,
        span: 8374..8375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 384,
        column: 32,
        span: 8375..8376,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 384,
        column: 33,
        span: 8376..8377,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 385,
        column: 0,
        span: 8389..8392,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 386,
        column: 13,
        span: 8402..8405,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 386,
        column: 14,
        span: 8405..8406,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 386,
        column: 18,
        span: 8407..8410,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 386,
        column: 19,
        span: 8410..8411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 386,
        column: 0,
        span: 8412..8413,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 387,
        column: 0,
        span: 8414..8417,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 389,
        column: 6,
        span: 8419..8424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 389,
        column: 8,
        span: 8425..8426,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 389,
        column: 10,
        span: 8427..8428,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 389,
        column: 0,
        span: 8428..8430,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 390,
        column: 4,
        span: 8431..8434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 390,
        column: 6,
        span: 8435..8436,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 390,
        column: 7,
        span: 8436..8437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 390,
        column: 8,
        span: 8437..8438,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 390,
        column: 9,
        span: 8438..8439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 390,
        column: 10,
        span: 8439..8440,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 390,
        column: 11,
        span: 8440..8441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 390,
        column: 12,
        span: 8441..8442,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 390,
        column: 13,
        span: 8442..8443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 390,
        column: 14,
        span: 8443..8444,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 390,
        column: 17,
        span: 8445..8447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 390,
        column: 19,
        span: 8448..8449,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 390,
        column: 20,
        span: 8449..8450,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 390,
        column: 21,
        span: 8449..8451,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 390,
        column: 22,
        span: 8451..8452,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 390,
        column: 23,
        span: 8451..8453,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 390,
        column: 24,
        span: 8453..8454,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 390,
        column: 0,
        span: 8455..8457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 391,
        column: 4,
        span: 8460..8461,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 391,
        column: 6,
        span: 8462..8463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 391,
        column: 8,
        span: 8464..8465,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 391,
        column: 9,
        span: 8465..8466,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 391,
        column: 0,
        span: 8465..8467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 392,
        column: 9,
        span: 8470..8476,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 392,
        column: 10,
        span: 8476..8477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 392,
        column: 11,
        span: 8477..8478,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 392,
        column: 14,
        span: 8479..8481,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 392,
        column: 17,
        span: 8481..8484,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 392,
        column: 21,
        span: 8485..8488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 392,
        column: 23,
        span: 8489..8490,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 392,
        column: 26,
        span: 8491..8493,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 392,
        column: 29,
        span: 8493..8496,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 392,
        column: 33,
        span: 8497..8500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 392,
        column: 35,
        span: 8501..8502,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 392,
        column: 38,
        span: 8503..8505,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 392,
        column: 41,
        span: 8505..8508,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 392,
        column: 45,
        span: 8509..8512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 392,
        column: 47,
        span: 8513..8514,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 392,
        column: 50,
        span: 8515..8517,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 392,
        column: 54,
        span: 8518..8521,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 392,
        column: 55,
        span: 8521..8522,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 393,
        column: 0,
        span: 8523..8526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 394,
        column: 7,
        span: 8527..8533,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 394,
        column: 8,
        span: 8533..8534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 394,
        column: 9,
        span: 8534..8535,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 394,
        column: 12,
        span: 8536..8538,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 394,
        column: 14,
        span: 8538..8540,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 394,
        column: 15,
        span: 8540..8541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 396,
        column: 6,
        span: 8543..8548,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"OK\"",
        ),
        line: 396,
        column: 10,
        span: 8548..8552,
    },
]
