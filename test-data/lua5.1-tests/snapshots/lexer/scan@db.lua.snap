---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.1-tests/db.lua
---
[
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 3,
            column: 6,
            span: 26..31,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 3,
            column: 15,
            span: 32..40,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 3,
            column: 24,
            span: 41..49,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 3,
            column: 25,
            span: 49..50,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 3,
            column: 26,
            span: 50..51,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 3,
            column: 27,
            span: 51..52,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 3,
            column: 34,
            span: 53..59,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 3,
            column: 41,
            span: 60..66,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 3,
            column: 42,
            span: 66..67,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        position: Position {
            line: 3,
            column: 52,
            span: 67..77,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 3,
            column: 53,
            span: 77..78,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 3,
            column: 54,
            span: 78..79,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 3,
            column: 55,
            span: 79..80,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 3,
            column: 56,
            span: 80..81,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 3,
            column: 57,
            span: 81..82,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 3,
            column: 58,
            span: 82..83,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 3,
            column: 0,
            span: 84..87,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 5,
            column: 6,
            span: 89..94,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing debug library and debug information\"",
        ),
        position: Position {
            line: 5,
            column: 52,
            span: 95..140,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 7,
            column: 0,
            span: 142..144,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 8,
            column: 8,
            span: 147..152,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 8,
            column: 10,
            span: 153..154,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 8,
            column: 12,
            span: 155..156,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 8,
            column: 0,
            span: 156..158,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 9,
            column: 0,
            span: 159..162,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 11,
            column: 9,
            span: 164..172,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 11,
            column: 14,
            span: 173..177,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 11,
            column: 15,
            span: 177..178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 11,
            column: 16,
            span: 178..179,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 11,
            column: 17,
            span: 179..180,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 11,
            column: 19,
            span: 181..182,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 11,
            column: 20,
            span: 182..183,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 11,
            column: 22,
            span: 184..185,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 11,
            column: 23,
            span: 185..186,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 12,
            column: 17,
            span: 189..203,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 12,
            column: 18,
            span: 203..204,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 12,
            column: 19,
            span: 204..205,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 13,
            column: 8,
            span: 233..238,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 13,
            column: 17,
            span: 239..247,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 13,
            column: 19,
            span: 248..249,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 13,
            column: 20,
            span: 249..250,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "event",
        ),
        position: Position {
            line: 13,
            column: 25,
            span: 250..255,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 13,
            column: 26,
            span: 255..256,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        position: Position {
            line: 13,
            column: 31,
            span: 257..261,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 13,
            column: 32,
            span: 261..262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 14,
            column: 11,
            span: 267..273,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 14,
            column: 12,
            span: 273..274,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "event",
        ),
        position: Position {
            line: 14,
            column: 17,
            span: 274..279,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 14,
            column: 20,
            span: 280..282,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'line'",
        ),
        position: Position {
            line: 14,
            column: 27,
            span: 283..289,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 14,
            column: 28,
            span: 289..290,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 15,
            column: 10,
            span: 295..300,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 15,
            column: 12,
            span: 301..302,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 15,
            column: 14,
            span: 303..304,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 15,
            column: 20,
            span: 305..310,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 15,
            column: 21,
            span: 310..311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 15,
            column: 27,
            span: 311..317,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 15,
            column: 28,
            span: 317..318,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 15,
            column: 29,
            span: 318..319,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 15,
            column: 30,
            span: 319..320,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 15,
            column: 32,
            span: 320..322,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 15,
            column: 33,
            span: 322..323,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 16,
            column: 7,
            span: 328..330,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 16,
            column: 9,
            span: 331..332,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 16,
            column: 14,
            span: 333..337,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 16,
            column: 20,
            span: 338..343,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 16,
            column: 21,
            span: 343..344,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 16,
            column: 22,
            span: 344..345,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 16,
            column: 23,
            span: 345..346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        position: Position {
            line: 16,
            column: 28,
            span: 347..351,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 16,
            column: 29,
            span: 351..352,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 16,
            column: 0,
            span: 353..356,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 17,
            column: 11,
            span: 361..367,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 17,
            column: 12,
            span: 367..368,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 17,
            column: 13,
            span: 368..369,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 17,
            column: 16,
            span: 370..372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        position: Position {
            line: 17,
            column: 21,
            span: 373..377,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 17,
            column: 22,
            span: 377..378,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"wrong trace!!\"",
        ),
        position: Position {
            line: 17,
            column: 38,
            span: 379..394,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 17,
            column: 39,
            span: 394..395,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 18,
            column: 0,
            span: 398..401,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 20,
            column: 8,
            span: 405..410,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 20,
            column: 9,
            span: 410..411,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 20,
            column: 16,
            span: 411..418,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 20,
            column: 17,
            span: 418..419,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 20,
            column: 18,
            span: 419..420,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 20,
            column: 19,
            span: 420..421,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 20,
            column: 23,
            span: 422..425,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 20,
            column: 24,
            span: 425..426,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 20,
            column: 25,
            span: 426..427,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        position: Position {
            line: 21,
            column: 13,
            span: 430..440,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 21,
            column: 14,
            span: 440..441,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 21,
            column: 15,
            span: 441..442,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 21,
            column: 16,
            span: 442..443,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 21,
            column: 17,
            span: 443..444,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 21,
            column: 18,
            span: 444..445,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 21,
            column: 19,
            span: 445..446,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 22,
            column: 8,
            span: 449..454,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 22,
            column: 9,
            span: 454..455,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 22,
            column: 16,
            span: 455..462,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 22,
            column: 17,
            span: 462..463,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 22,
            column: 18,
            span: 463..464,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 23,
            column: 9,
            span: 467..473,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 23,
            column: 10,
            span: 473..474,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 23,
            column: 15,
            span: 474..479,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 23,
            column: 16,
            span: 479..480,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        position: Position {
            line: 23,
            column: 20,
            span: 480..484,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 23,
            column: 21,
            span: 484..485,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 23,
            column: 22,
            span: 485..486,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 23,
            column: 23,
            span: 486..487,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 23,
            column: 26,
            span: 488..490,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 23,
            column: 28,
            span: 490..492,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 23,
            column: 29,
            span: 492..493,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 24,
            column: 0,
            span: 494..497,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 26,
            column: 0,
            span: 499..501,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 27,
            column: 8,
            span: 504..509,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 27,
            column: 10,
            span: 510..511,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 27,
            column: 12,
            span: 512..513,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 27,
            column: 18,
            span: 514..519,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 27,
            column: 19,
            span: 519..520,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 27,
            column: 26,
            span: 520..527,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 27,
            column: 27,
            span: 527..528,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 27,
            column: 32,
            span: 528..533,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 27,
            column: 33,
            span: 533..534,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 28,
            column: 9,
            span: 537..543,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 28,
            column: 10,
            span: 543..544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 28,
            column: 11,
            span: 544..545,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 28,
            column: 12,
            span: 545..546,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        position: Position {
            line: 28,
            column: 16,
            span: 546..550,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 28,
            column: 19,
            span: 551..553,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C\"",
        ),
        position: Position {
            line: 28,
            column: 23,
            span: 554..557,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 28,
            column: 27,
            span: 558..561,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 28,
            column: 29,
            span: 562..563,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 28,
            column: 30,
            span: 563..564,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        position: Position {
            line: 28,
            column: 39,
            span: 564..573,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 28,
            column: 42,
            span: 574..576,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[C]\"",
        ),
        position: Position {
            line: 28,
            column: 48,
            span: 577..582,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 28,
            column: 49,
            span: 582..583,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 29,
            column: 8,
            span: 586..591,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 29,
            column: 10,
            span: 592..593,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 29,
            column: 12,
            span: 594..595,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 29,
            column: 18,
            span: 596..601,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 29,
            column: 19,
            span: 601..602,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 29,
            column: 26,
            span: 602..609,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 29,
            column: 27,
            span: 609..610,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 29,
            column: 31,
            span: 610..614,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 29,
            column: 32,
            span: 614..615,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"SfL\"",
        ),
        position: Position {
            line: 29,
            column: 38,
            span: 616..621,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 29,
            column: 39,
            span: 621..622,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 30,
            column: 9,
            span: 625..631,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 30,
            column: 10,
            span: 631..632,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 30,
            column: 11,
            span: 632..633,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 30,
            column: 12,
            span: 633..634,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 30,
            column: 16,
            span: 634..638,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 30,
            column: 19,
            span: 639..641,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 30,
            column: 23,
            span: 642..645,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 30,
            column: 27,
            span: 646..649,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 30,
            column: 29,
            span: 650..651,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 30,
            column: 30,
            span: 651..652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        position: Position {
            line: 30,
            column: 34,
            span: 652..656,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 30,
            column: 37,
            span: 657..659,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Lua\"",
        ),
        position: Position {
            line: 30,
            column: 43,
            span: 660..665,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 30,
            column: 47,
            span: 666..669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 30,
            column: 49,
            span: 670..671,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 30,
            column: 50,
            span: 671..672,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "linedefined",
        ),
        position: Position {
            line: 30,
            column: 61,
            span: 672..683,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 30,
            column: 64,
            span: 684..686,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 30,
            column: 67,
            span: 686..689,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 30,
            column: 0,
            span: 690..693,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 31,
            column: 6,
            span: 698..699,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 31,
            column: 7,
            span: 699..700,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lastlinedefined",
        ),
        position: Position {
            line: 31,
            column: 22,
            span: 700..715,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 31,
            column: 25,
            span: 716..718,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 31,
            column: 27,
            span: 719..720,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 31,
            column: 28,
            span: 720..721,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "linedefined",
        ),
        position: Position {
            line: 31,
            column: 39,
            span: 721..732,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 31,
            column: 41,
            span: 733..734,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 31,
            column: 44,
            span: 734..737,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 31,
            column: 0,
            span: 738..741,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 32,
            column: 6,
            span: 746..747,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 32,
            column: 7,
            span: 747..748,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        position: Position {
            line: 32,
            column: 11,
            span: 748..752,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 32,
            column: 14,
            span: 753..755,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 32,
            column: 19,
            span: 756..760,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 32,
            column: 23,
            span: 761..764,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 32,
            column: 27,
            span: 765..768,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 32,
            column: 34,
            span: 769..775,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 32,
            column: 35,
            span: 775..776,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 32,
            column: 39,
            span: 776..780,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 32,
            column: 40,
            span: 780..781,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 32,
            column: 41,
            span: 781..782,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 32,
            column: 42,
            span: 782..783,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        position: Position {
            line: 32,
            column: 51,
            span: 783..792,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 32,
            column: 52,
            span: 792..793,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%[\"",
        ),
        position: Position {
            line: 32,
            column: 57,
            span: 794..798,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 32,
            column: 58,
            span: 798..799,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 32,
            column: 59,
            span: 799..800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 33,
            column: 9,
            span: 803..809,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 33,
            column: 10,
            span: 809..810,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 33,
            column: 11,
            span: 810..811,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 33,
            column: 12,
            span: 811..812,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        position: Position {
            line: 33,
            column: 23,
            span: 812..823,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 33,
            column: 24,
            span: 823..824,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 33,
            column: 25,
            span: 824..825,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 33,
            column: 26,
            span: 825..826,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "linedefined",
        ),
        position: Position {
            line: 33,
            column: 37,
            span: 826..837,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 33,
            column: 39,
            span: 838..839,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 33,
            column: 41,
            span: 839..841,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 33,
            column: 42,
            span: 841..842,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 33,
            column: 0,
            span: 843..846,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 34,
            column: 6,
            span: 851..852,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 34,
            column: 7,
            span: 852..853,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        position: Position {
            line: 34,
            column: 18,
            span: 853..864,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 34,
            column: 19,
            span: 864..865,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 34,
            column: 20,
            span: 865..866,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 34,
            column: 21,
            span: 866..867,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lastlinedefined",
        ),
        position: Position {
            line: 34,
            column: 36,
            span: 867..882,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 34,
            column: 37,
            span: 882..883,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 34,
            column: 38,
            span: 883..884,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 35,
            column: 9,
            span: 887..893,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 35,
            column: 10,
            span: 893..894,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 35,
            column: 13,
            span: 894..897,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 35,
            column: 15,
            span: 898..899,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 35,
            column: 16,
            span: 899..900,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        position: Position {
            line: 35,
            column: 27,
            span: 900..911,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 35,
            column: 28,
            span: 911..912,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 35,
            column: 29,
            span: 912..913,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 35,
            column: 30,
            span: 913..914,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "linedefined",
        ),
        position: Position {
            line: 35,
            column: 41,
            span: 914..925,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 35,
            column: 42,
            span: 925..926,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 35,
            column: 0,
            span: 927..930,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 36,
            column: 8,
            span: 935..938,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 36,
            column: 10,
            span: 939..940,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 36,
            column: 11,
            span: 940..941,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        position: Position {
            line: 36,
            column: 22,
            span: 941..952,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 36,
            column: 23,
            span: 952..953,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 36,
            column: 24,
            span: 953..954,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 36,
            column: 25,
            span: 954..955,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lastlinedefined",
        ),
        position: Position {
            line: 36,
            column: 40,
            span: 955..970,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 36,
            column: 42,
            span: 971..972,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 36,
            column: 44,
            span: 972..974,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 36,
            column: 45,
            span: 974..975,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 36,
            column: 46,
            span: 975..976,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 37,
            column: 0,
            span: 977..980,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 41,
            column: 2,
            span: 1024..1025,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 41,
            column: 4,
            span: 1026..1027,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function f () end\"",
        ),
        position: Position {
            line: 41,
            column: 24,
            span: 1028..1047,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 42,
            column: 6,
            span: 1048..1053,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 42,
            column: 15,
            span: 1054..1062,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 42,
            column: 24,
            span: 1063..1071,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 42,
            column: 25,
            span: 1071..1072,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 42,
            column: 26,
            span: 1072..1073,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 42,
            column: 27,
            span: 1073..1074,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 42,
            column: 29,
            span: 1075..1076,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 42,
            column: 30,
            span: 1076..1077,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 42,
            column: 37,
            span: 1078..1084,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        position: Position {
            line: 42,
            column: 48,
            span: 1085..1095,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 42,
            column: 49,
            span: 1095..1096,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 42,
            column: 50,
            span: 1096..1097,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 42,
            column: 51,
            span: 1097..1098,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 42,
            column: 53,
            span: 1099..1100,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 42,
            column: 54,
            span: 1100..1101,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 42,
            column: 55,
            span: 1101..1102,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 42,
            column: 56,
            span: 1102..1103,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 42,
            column: 0,
            span: 1104..1107,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 44,
            column: 9,
            span: 1109..1117,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 44,
            column: 10,
            span: 1117..1118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 44,
            column: 11,
            span: 1118..1119,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 44,
            column: 12,
            span: 1119..1120,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 45,
            column: 7,
            span: 1121..1127,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 45,
            column: 8,
            span: 1127..1128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 45,
            column: 13,
            span: 1128..1133,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 45,
            column: 14,
            span: 1133..1134,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 45,
            column: 21,
            span: 1134..1141,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 45,
            column: 22,
            span: 1141..1142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 45,
            column: 23,
            span: 1142..1143,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 45,
            column: 24,
            span: 1143..1144,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 45,
            column: 25,
            span: 1144..1145,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        position: Position {
            line: 45,
            column: 34,
            span: 1145..1154,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 45,
            column: 37,
            span: 1155..1157,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 45,
            column: 44,
            span: 1158..1164,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 45,
            column: 45,
            span: 1164..1165,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 45,
            column: 51,
            span: 1165..1171,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 45,
            column: 52,
            span: 1171..1172,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[string \"%s\"]'",
        ),
        position: Position {
            line: 45,
            column: 67,
            span: 1172..1187,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 45,
            column: 68,
            span: 1187..1188,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 45,
            column: 70,
            span: 1189..1190,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 45,
            column: 71,
            span: 1190..1191,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 45,
            column: 72,
            span: 1191..1192,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 46,
            column: 9,
            span: 1193..1201,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 46,
            column: 10,
            span: 1201..1202,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 46,
            column: 11,
            span: 1202..1203,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 46,
            column: 14,
            span: 1204..1206,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 46,
            column: 21,
            span: 1207..1213,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 46,
            column: 22,
            span: 1213..1214,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 46,
            column: 28,
            span: 1214..1220,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 46,
            column: 29,
            span: 1220..1221,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; %s\\n=1\"",
        ),
        position: Position {
            line: 46,
            column: 39,
            span: 1221..1231,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 46,
            column: 40,
            span: 1231..1232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 46,
            column: 47,
            span: 1233..1239,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 46,
            column: 48,
            span: 1239..1240,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 46,
            column: 51,
            span: 1240..1243,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 46,
            column: 52,
            span: 1243..1244,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'p'",
        ),
        position: Position {
            line: 46,
            column: 55,
            span: 1244..1247,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 46,
            column: 56,
            span: 1247..1248,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "400",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 46,
            column: 60,
            span: 1248..1252,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 46,
            column: 61,
            span: 1252..1253,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 46,
            column: 62,
            span: 1253..1254,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 46,
            column: 63,
            span: 1254..1255,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 47,
            column: 7,
            span: 1256..1262,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 47,
            column: 8,
            span: 1262..1263,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 47,
            column: 14,
            span: 1263..1269,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 47,
            column: 15,
            span: 1269..1270,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 47,
            column: 19,
            span: 1270..1274,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 47,
            column: 20,
            span: 1274..1275,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 47,
            column: 25,
            span: 1275..1280,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 47,
            column: 26,
            span: 1280..1281,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 47,
            column: 33,
            span: 1281..1288,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 47,
            column: 34,
            span: 1288..1289,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 47,
            column: 35,
            span: 1289..1290,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 47,
            column: 36,
            span: 1290..1291,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 47,
            column: 37,
            span: 1291..1292,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        position: Position {
            line: 47,
            column: 46,
            span: 1292..1301,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 47,
            column: 47,
            span: 1301..1302,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^%[string [^\\n]*%.%.%.\"%]$'",
        ),
        position: Position {
            line: 47,
            column: 76,
            span: 1303..1331,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 47,
            column: 77,
            span: 1331..1332,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 47,
            column: 78,
            span: 1332..1333,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 48,
            column: 9,
            span: 1334..1342,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 48,
            column: 10,
            span: 1342..1343,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        position: Position {
            line: 48,
            column: 14,
            span: 1343..1347,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 48,
            column: 17,
            span: 1348..1350,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 48,
            column: 19,
            span: 1351..1352,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 48,
            column: 20,
            span: 1352..1353,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 49,
            column: 7,
            span: 1354..1360,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 49,
            column: 8,
            span: 1360..1361,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 49,
            column: 13,
            span: 1361..1366,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 49,
            column: 14,
            span: 1366..1367,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 49,
            column: 21,
            span: 1367..1374,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 49,
            column: 22,
            span: 1374..1375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 49,
            column: 23,
            span: 1375..1376,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 49,
            column: 24,
            span: 1376..1377,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 49,
            column: 25,
            span: 1377..1378,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        position: Position {
            line: 49,
            column: 34,
            span: 1378..1387,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 49,
            column: 37,
            span: 1388..1390,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[string \"...\"]'",
        ),
        position: Position {
            line: 49,
            column: 54,
            span: 1391..1407,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 49,
            column: 55,
            span: 1407..1408,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 50,
            column: 9,
            span: 1409..1417,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 50,
            column: 10,
            span: 1417..1418,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 50,
            column: 11,
            span: 1418..1419,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 50,
            column: 12,
            span: 1419..1420,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 50,
            column: 15,
            span: 1421..1423,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 50,
            column: 16,
            span: 1423..1424,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 51,
            column: 7,
            span: 1425..1431,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 51,
            column: 8,
            span: 1431..1432,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 51,
            column: 13,
            span: 1432..1437,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 51,
            column: 14,
            span: 1437..1438,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 51,
            column: 21,
            span: 1438..1445,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 51,
            column: 22,
            span: 1445..1446,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 51,
            column: 23,
            span: 1446..1447,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 51,
            column: 24,
            span: 1447..1448,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 51,
            column: 25,
            span: 1448..1449,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        position: Position {
            line: 51,
            column: 34,
            span: 1449..1458,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 51,
            column: 37,
            span: 1459..1461,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[string \"\"]'",
        ),
        position: Position {
            line: 51,
            column: 51,
            span: 1462..1475,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 51,
            column: 52,
            span: 1475..1476,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 52,
            column: 9,
            span: 1477..1485,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 52,
            column: 10,
            span: 1485..1486,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 52,
            column: 11,
            span: 1486..1487,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 52,
            column: 12,
            span: 1487..1488,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@xuxu\"",
        ),
        position: Position {
            line: 52,
            column: 20,
            span: 1489..1496,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 52,
            column: 21,
            span: 1496..1497,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 53,
            column: 7,
            span: 1498..1504,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 53,
            column: 8,
            span: 1504..1505,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 53,
            column: 13,
            span: 1505..1510,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 53,
            column: 14,
            span: 1510..1511,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 53,
            column: 21,
            span: 1511..1518,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 53,
            column: 22,
            span: 1518..1519,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 53,
            column: 23,
            span: 1519..1520,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 53,
            column: 24,
            span: 1520..1521,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 53,
            column: 25,
            span: 1521..1522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        position: Position {
            line: 53,
            column: 34,
            span: 1522..1531,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 53,
            column: 37,
            span: 1532..1534,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        position: Position {
            line: 53,
            column: 44,
            span: 1535..1541,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 53,
            column: 45,
            span: 1541..1542,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 54,
            column: 9,
            span: 1543..1551,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 54,
            column: 10,
            span: 1551..1552,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 54,
            column: 11,
            span: 1552..1553,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 54,
            column: 12,
            span: 1553..1554,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@\"",
        ),
        position: Position {
            line: 54,
            column: 16,
            span: 1555..1558,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 54,
            column: 19,
            span: 1559..1561,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 54,
            column: 26,
            span: 1562..1568,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 54,
            column: 27,
            span: 1568..1569,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 54,
            column: 30,
            span: 1569..1572,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 54,
            column: 31,
            span: 1572..1573,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'p'",
        ),
        position: Position {
            line: 54,
            column: 34,
            span: 1573..1576,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 54,
            column: 35,
            span: 1576..1577,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 54,
            column: 40,
            span: 1577..1582,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 54,
            column: 41,
            span: 1582..1583,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 54,
            column: 44,
            span: 1584..1586,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'t'",
        ),
        position: Position {
            line: 54,
            column: 48,
            span: 1587..1590,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 54,
            column: 49,
            span: 1590..1591,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 55,
            column: 7,
            span: 1592..1598,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 55,
            column: 8,
            span: 1598..1599,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 55,
            column: 14,
            span: 1599..1605,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 55,
            column: 15,
            span: 1605..1606,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 55,
            column: 19,
            span: 1606..1610,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 55,
            column: 20,
            span: 1610..1611,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 55,
            column: 25,
            span: 1611..1616,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 55,
            column: 26,
            span: 1616..1617,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 55,
            column: 33,
            span: 1617..1624,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 55,
            column: 34,
            span: 1624..1625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 55,
            column: 35,
            span: 1625..1626,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 55,
            column: 36,
            span: 1626..1627,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 55,
            column: 37,
            span: 1627..1628,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        position: Position {
            line: 55,
            column: 46,
            span: 1628..1637,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 55,
            column: 47,
            span: 1637..1638,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^%.%.%.p*t$\"",
        ),
        position: Position {
            line: 55,
            column: 61,
            span: 1639..1652,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 55,
            column: 62,
            span: 1652..1653,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 55,
            column: 63,
            span: 1653..1654,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 56,
            column: 9,
            span: 1655..1663,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 56,
            column: 10,
            span: 1663..1664,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 56,
            column: 11,
            span: 1664..1665,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 56,
            column: 12,
            span: 1665..1666,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=xuxu\"",
        ),
        position: Position {
            line: 56,
            column: 20,
            span: 1667..1674,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 56,
            column: 21,
            span: 1674..1675,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 57,
            column: 7,
            span: 1676..1682,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 57,
            column: 8,
            span: 1682..1683,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 57,
            column: 13,
            span: 1683..1688,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 57,
            column: 14,
            span: 1688..1689,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 57,
            column: 21,
            span: 1689..1696,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 57,
            column: 22,
            span: 1696..1697,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 57,
            column: 23,
            span: 1697..1698,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 57,
            column: 24,
            span: 1698..1699,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 57,
            column: 25,
            span: 1699..1700,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        position: Position {
            line: 57,
            column: 34,
            span: 1700..1709,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 57,
            column: 37,
            span: 1710..1712,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        position: Position {
            line: 57,
            column: 44,
            span: 1713..1719,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 57,
            column: 45,
            span: 1719..1720,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 58,
            column: 9,
            span: 1721..1729,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 58,
            column: 10,
            span: 1729..1730,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 58,
            column: 11,
            span: 1730..1731,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 12,
            span: 1731..1732,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 58,
            column: 19,
            span: 1733..1739,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 58,
            column: 20,
            span: 1739..1740,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 58,
            column: 26,
            span: 1740..1746,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 58,
            column: 27,
            span: 1746..1747,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=%s\"",
        ),
        position: Position {
            line: 58,
            column: 32,
            span: 1747..1752,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 33,
            span: 1752..1753,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 58,
            column: 40,
            span: 1754..1760,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 58,
            column: 41,
            span: 1760..1761,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 58,
            column: 44,
            span: 1761..1764,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 58,
            column: 45,
            span: 1764..1765,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        position: Position {
            line: 58,
            column: 48,
            span: 1765..1768,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 49,
            span: 1768..1769,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "500",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 58,
            column: 53,
            span: 1769..1773,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 58,
            column: 54,
            span: 1773..1774,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 58,
            column: 55,
            span: 1774..1775,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 58,
            column: 56,
            span: 1775..1776,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 59,
            column: 7,
            span: 1777..1783,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 59,
            column: 8,
            span: 1783..1784,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 59,
            column: 14,
            span: 1784..1790,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 59,
            column: 15,
            span: 1790..1791,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 59,
            column: 19,
            span: 1791..1795,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 59,
            column: 20,
            span: 1795..1796,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 59,
            column: 25,
            span: 1796..1801,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 59,
            column: 26,
            span: 1801..1802,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 59,
            column: 33,
            span: 1802..1809,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 59,
            column: 34,
            span: 1809..1810,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 59,
            column: 35,
            span: 1810..1811,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 59,
            column: 36,
            span: 1811..1812,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 59,
            column: 37,
            span: 1812..1813,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        position: Position {
            line: 59,
            column: 46,
            span: 1813..1822,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 59,
            column: 47,
            span: 1822..1823,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^x*\"",
        ),
        position: Position {
            line: 59,
            column: 53,
            span: 1824..1829,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 59,
            column: 54,
            span: 1829..1830,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 59,
            column: 55,
            span: 1830..1831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 60,
            column: 9,
            span: 1832..1840,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 60,
            column: 10,
            span: 1840..1841,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 60,
            column: 11,
            span: 1841..1842,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 60,
            column: 12,
            span: 1842..1843,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=\"",
        ),
        position: Position {
            line: 60,
            column: 16,
            span: 1844..1847,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 60,
            column: 17,
            span: 1847..1848,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 61,
            column: 7,
            span: 1849..1855,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 61,
            column: 8,
            span: 1855..1856,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 61,
            column: 13,
            span: 1856..1861,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 61,
            column: 14,
            span: 1861..1862,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 61,
            column: 21,
            span: 1862..1869,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 61,
            column: 22,
            span: 1869..1870,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 61,
            column: 23,
            span: 1870..1871,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 61,
            column: 24,
            span: 1871..1872,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 61,
            column: 25,
            span: 1872..1873,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        position: Position {
            line: 61,
            column: 34,
            span: 1873..1882,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 61,
            column: 37,
            span: 1883..1885,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 61,
            column: 40,
            span: 1886..1888,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 61,
            column: 41,
            span: 1888..1889,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 62,
            column: 2,
            span: 1890..1891,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 62,
            column: 4,
            span: 1892..1893,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 62,
            column: 8,
            span: 1894..1897,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 62,
            column: 9,
            span: 1897..1898,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 63,
            column: 2,
            span: 1899..1900,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 63,
            column: 4,
            span: 1901..1902,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 63,
            column: 8,
            span: 1903..1906,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 63,
            column: 9,
            span: 1906..1907,
        },
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        position: Position {
            line: 66,
            column: 0,
            span: 1910..1916,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 67,
            column: 8,
            span: 1919..1924,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 67,
            column: 10,
            span: 1925..1926,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 67,
            column: 12,
            span: 1927..1928,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 67,
            column: 14,
            span: 1929..1930,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 67,
            column: 16,
            span: 1931..1932,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 67,
            column: 18,
            span: 1933..1934,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 67,
            column: 27,
            span: 1935..1943,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 67,
            column: 28,
            span: 1943..1944,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 67,
            column: 29,
            span: 1944..1945,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 68,
            column: 10,
            span: 1950..1955,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 68,
            column: 12,
            span: 1956..1957,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 68,
            column: 14,
            span: 1958..1959,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 68,
            column: 20,
            span: 1960..1965,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 68,
            column: 21,
            span: 1965..1966,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 68,
            column: 28,
            span: 1966..1973,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 68,
            column: 29,
            span: 1973..1974,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 68,
            column: 30,
            span: 1973..1975,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 68,
            column: 31,
            span: 1975..1976,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 69,
            column: 11,
            span: 1981..1987,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 69,
            column: 12,
            span: 1987..1988,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 69,
            column: 13,
            span: 1988..1989,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 69,
            column: 14,
            span: 1989..1990,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 69,
            column: 18,
            span: 1990..1994,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 69,
            column: 21,
            span: 1995..1997,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'f'",
        ),
        position: Position {
            line: 69,
            column: 25,
            span: 1998..2001,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 69,
            column: 29,
            span: 2002..2005,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 69,
            column: 31,
            span: 2006..2007,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 69,
            column: 32,
            span: 2007..2008,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "namewhat",
        ),
        position: Position {
            line: 69,
            column: 40,
            span: 2008..2016,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 69,
            column: 43,
            span: 2017..2019,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'local'",
        ),
        position: Position {
            line: 69,
            column: 51,
            span: 2020..2027,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 69,
            column: 52,
            span: 2027..2028,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 70,
            column: 6,
            span: 2033..2034,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 70,
            column: 8,
            span: 2035..2036,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 70,
            column: 14,
            span: 2037..2042,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 70,
            column: 15,
            span: 2042..2043,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 70,
            column: 22,
            span: 2043..2050,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 70,
            column: 23,
            span: 2050..2051,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 70,
            column: 24,
            span: 2050..2052,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 70,
            column: 25,
            span: 2052..2053,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 71,
            column: 11,
            span: 2058..2064,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 71,
            column: 12,
            span: 2064..2065,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 71,
            column: 13,
            span: 2065..2066,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 71,
            column: 14,
            span: 2066..2067,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 71,
            column: 18,
            span: 2067..2071,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 71,
            column: 21,
            span: 2072..2074,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        position: Position {
            line: 71,
            column: 25,
            span: 2075..2078,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 71,
            column: 29,
            span: 2079..2082,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 71,
            column: 31,
            span: 2083..2084,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 71,
            column: 32,
            span: 2084..2085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "namewhat",
        ),
        position: Position {
            line: 71,
            column: 40,
            span: 2085..2093,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 71,
            column: 43,
            span: 2094..2096,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'field'",
        ),
        position: Position {
            line: 71,
            column: 51,
            span: 2097..2104,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 71,
            column: 52,
            span: 2104..2105,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 72,
            column: 11,
            span: 2110..2116,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xixi'",
        ),
        position: Position {
            line: 72,
            column: 18,
            span: 2117..2123,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 73,
            column: 6,
            span: 2126..2129,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 73,
            column: 8,
            span: 2130..2131,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 74,
            column: 8,
            span: 2134..2139,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 74,
            column: 10,
            span: 2140..2141,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 74,
            column: 12,
            span: 2142..2143,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 74,
            column: 21,
            span: 2144..2152,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 74,
            column: 22,
            span: 2152..2153,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 74,
            column: 23,
            span: 2153..2154,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 74,
            column: 30,
            span: 2155..2161,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 74,
            column: 32,
            span: 2161..2163,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 74,
            column: 34,
            span: 2164..2165,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 74,
            column: 36,
            span: 2165..2167,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 74,
            column: 40,
            span: 2168..2171,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 74,
            column: 42,
            span: 2172..2173,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 74,
            column: 45,
            span: 2173..2176,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 74,
            column: 47,
            span: 2176..2178,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 74,
            column: 50,
            span: 2179..2181,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 74,
            column: 52,
            span: 2182..2183,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 74,
            column: 53,
            span: 2183..2184,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 74,
            column: 54,
            span: 2184..2185,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 74,
            column: 55,
            span: 2185..2186,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 74,
            column: 56,
            span: 2186..2187,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 74,
            column: 57,
            span: 2187..2188,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 74,
            column: 0,
            span: 2189..2192,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 75,
            column: 9,
            span: 2195..2201,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 75,
            column: 10,
            span: 2201..2202,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 75,
            column: 11,
            span: 2202..2203,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 75,
            column: 12,
            span: 2203..2204,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 75,
            column: 13,
            span: 2204..2205,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 75,
            column: 16,
            span: 2206..2208,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xixi'",
        ),
        position: Position {
            line: 75,
            column: 23,
            span: 2209..2215,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 75,
            column: 24,
            span: 2215..2216,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 76,
            column: 4,
            span: 2219..2220,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 76,
            column: 6,
            span: 2221..2222,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 76,
            column: 12,
            span: 2223..2228,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 76,
            column: 13,
            span: 2228..2229,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 76,
            column: 20,
            span: 2229..2236,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 76,
            column: 21,
            span: 2236..2237,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 76,
            column: 22,
            span: 2237..2238,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 76,
            column: 23,
            span: 2238..2239,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 77,
            column: 9,
            span: 2242..2248,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 77,
            column: 10,
            span: 2248..2249,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 77,
            column: 11,
            span: 2249..2250,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 77,
            column: 12,
            span: 2250..2251,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        position: Position {
            line: 77,
            column: 16,
            span: 2251..2255,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 77,
            column: 19,
            span: 2256..2258,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Lua\"",
        ),
        position: Position {
            line: 77,
            column: 25,
            span: 2259..2264,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 77,
            column: 29,
            span: 2265..2268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 77,
            column: 31,
            span: 2269..2270,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 77,
            column: 32,
            span: 2270..2271,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        position: Position {
            line: 77,
            column: 36,
            span: 2271..2275,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 77,
            column: 39,
            span: 2276..2278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 77,
            column: 41,
            span: 2279..2280,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 77,
            column: 45,
            span: 2281..2284,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 77,
            column: 47,
            span: 2285..2286,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 77,
            column: 48,
            span: 2286..2287,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "namewhat",
        ),
        position: Position {
            line: 77,
            column: 56,
            span: 2287..2295,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 77,
            column: 59,
            span: 2296..2298,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 77,
            column: 62,
            span: 2299..2301,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 77,
            column: 66,
            span: 2302..2305,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 77,
            column: 70,
            span: 2306..2309,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 77,
            column: 72,
            span: 2310..2311,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 77,
            column: 73,
            span: 2311..2312,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 77,
            column: 77,
            span: 2312..2316,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 77,
            column: 78,
            span: 2316..2317,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 79,
            column: 11,
            span: 2321..2329,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 79,
            column: 13,
            span: 2330..2331,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 79,
            column: 14,
            span: 2331..2332,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 79,
            column: 15,
            span: 2332..2333,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 79,
            column: 16,
            span: 2333..2334,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 79,
            column: 21,
            span: 2335..2339,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 79,
            column: 22,
            span: 2339..2340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 80,
            column: 9,
            span: 2355..2359,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 80,
            column: 11,
            span: 2360..2361,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 80,
            column: 16,
            span: 2362..2366,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 80,
            column: 19,
            span: 2367..2369,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'f'",
        ),
        position: Position {
            line: 80,
            column: 23,
            span: 2370..2373,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 81,
            column: 10,
            span: 2378..2383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 81,
            column: 12,
            span: 2384..2385,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 81,
            column: 14,
            span: 2386..2387,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 81,
            column: 20,
            span: 2388..2393,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 81,
            column: 21,
            span: 2393..2394,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 81,
            column: 28,
            span: 2394..2401,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 81,
            column: 29,
            span: 2401..2402,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 81,
            column: 30,
            span: 2401..2403,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 81,
            column: 31,
            span: 2403..2404,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 82,
            column: 11,
            span: 2409..2415,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 82,
            column: 12,
            span: 2415..2416,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 82,
            column: 13,
            span: 2416..2417,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 82,
            column: 14,
            span: 2417..2418,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 82,
            column: 18,
            span: 2418..2422,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 82,
            column: 21,
            span: 2423..2425,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 82,
            column: 26,
            span: 2426..2430,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 82,
            column: 30,
            span: 2431..2434,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 82,
            column: 32,
            span: 2435..2436,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 82,
            column: 33,
            span: 2436..2437,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "namewhat",
        ),
        position: Position {
            line: 82,
            column: 41,
            span: 2437..2445,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 82,
            column: 44,
            span: 2446..2448,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'local'",
        ),
        position: Position {
            line: 82,
            column: 52,
            span: 2449..2456,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 82,
            column: 53,
            span: 2456..2457,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 83,
            column: 11,
            span: 2462..2468,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 83,
            column: 0,
            span: 2469..2470,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 84,
            column: 0,
            span: 2473..2476,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 87,
            column: 5,
            span: 2516..2518,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 87,
            column: 7,
            span: 2518..2520,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 87,
            column: 9,
            span: 2521..2522,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 87,
            column: 11,
            span: 2522..2524,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 87,
            column: 16,
            span: 2525..2529,
        },
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        position: Position {
            line: 87,
            column: 22,
            span: 2530..2535,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 87,
            column: 0,
            span: 2536..2539,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 88,
            column: 4,
            span: 2542..2543,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 88,
            column: 5,
            span: 2543..2544,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 88,
            column: 6,
            span: 2544..2545,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 89,
            column: 5,
            span: 2548..2550,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 89,
            column: 7,
            span: 2550..2552,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 89,
            column: 9,
            span: 2553..2554,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 89,
            column: 11,
            span: 2554..2556,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 89,
            column: 16,
            span: 2557..2561,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 89,
            column: 18,
            span: 2562..2563,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 89,
            column: 20,
            span: 2564..2565,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 89,
            column: 22,
            span: 2565..2567,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 89,
            column: 27,
            span: 2568..2572,
        },
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        position: Position {
            line: 89,
            column: 33,
            span: 2573..2578,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 89,
            column: 0,
            span: 2579..2582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 90,
            column: 4,
            span: 2585..2586,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 90,
            column: 5,
            span: 2586..2587,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 90,
            column: 6,
            span: 2587..2588,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 91,
            column: 8,
            span: 2591..2596,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 91,
            column: 10,
            span: 2596..2598,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 91,
            column: 13,
            span: 2599..2601,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 91,
            column: 19,
            span: 2602..2607,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 91,
            column: 21,
            span: 2608..2609,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 91,
            column: 23,
            span: 2610..2611,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 91,
            column: 26,
            span: 2611..2614,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 91,
            column: 27,
            span: 2614..2615,
        },
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        position: Position {
            line: 91,
            column: 33,
            span: 2616..2621,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 91,
            column: 0,
            span: 2622..2625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 92,
            column: 4,
            span: 2628..2629,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 92,
            column: 5,
            span: 2629..2630,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 92,
            column: 6,
            span: 2630..2631,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 93,
            column: 8,
            span: 2634..2639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 93,
            column: 10,
            span: 2640..2641,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 93,
            column: 12,
            span: 2642..2643,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 93,
            column: 0,
            span: 2643..2645,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 94,
            column: 5,
            span: 2648..2650,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 94,
            column: 7,
            span: 2650..2652,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 94,
            column: 9,
            span: 2653..2654,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 94,
            column: 11,
            span: 2654..2656,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 94,
            column: 16,
            span: 2657..2661,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 94,
            column: 23,
            span: 2662..2668,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 94,
            column: 28,
            span: 2669..2673,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 94,
            column: 29,
            span: 2673..2674,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        position: Position {
            line: 94,
            column: 32,
            span: 2674..2677,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 94,
            column: 33,
            span: 2677..2678,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 94,
            column: 34,
            span: 2677..2679,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 94,
            column: 35,
            span: 2679..2680,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 94,
            column: 0,
            span: 2681..2684,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 95,
            column: 4,
            span: 2687..2688,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 95,
            column: 5,
            span: 2688..2689,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 95,
            column: 6,
            span: 2689..2690,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 96,
            column: 4,
            span: 2693..2694,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 96,
            column: 6,
            span: 2695..2696,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 96,
            column: 8,
            span: 2696..2698,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 96,
            column: 10,
            span: 2699..2700,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 96,
            column: 12,
            span: 2700..2702,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 96,
            column: 13,
            span: 2702..2703,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 97,
            column: 4,
            span: 2706..2707,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 97,
            column: 5,
            span: 2707..2708,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 97,
            column: 6,
            span: 2708..2709,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 98,
            column: 4,
            span: 2712..2713,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 98,
            column: 6,
            span: 2714..2715,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 98,
            column: 8,
            span: 2715..2717,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 98,
            column: 10,
            span: 2718..2719,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 98,
            column: 12,
            span: 2719..2721,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 98,
            column: 15,
            span: 2722..2724,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 98,
            column: 17,
            span: 2724..2726,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 98,
            column: 18,
            span: 2726..2727,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 99,
            column: 4,
            span: 2730..2731,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 99,
            column: 5,
            span: 2731..2732,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 99,
            column: 6,
            span: 2732..2733,
        },
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        position: Position {
            line: 100,
            column: 9,
            span: 2736..2742,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 100,
            column: 15,
            span: 2743..2748,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 100,
            column: 17,
            span: 2749..2750,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 100,
            column: 19,
            span: 2751..2752,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 100,
            column: 22,
            span: 2752..2755,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 100,
            column: 23,
            span: 2755..2756,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 100,
            column: 26,
            span: 2757..2759,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 100,
            column: 28,
            span: 2759..2761,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 100,
            column: 30,
            span: 2762..2763,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 100,
            column: 32,
            span: 2763..2765,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 100,
            column: 37,
            span: 2766..2770,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 100,
            column: 39,
            span: 2771..2772,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 100,
            column: 40,
            span: 2772..2773,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 100,
            column: 41,
            span: 2773..2774,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 100,
            column: 46,
            span: 2775..2779,
        },
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        position: Position {
            line: 100,
            column: 52,
            span: 2780..2785,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 100,
            column: 56,
            span: 2786..2789,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 100,
            column: 58,
            span: 2790..2791,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 100,
            column: 59,
            span: 2791..2792,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 100,
            column: 60,
            span: 2792..2793,
        },
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        position: Position {
            line: 100,
            column: 66,
            span: 2794..2799,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 100,
            column: 0,
            span: 2799..2801,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 101,
            column: 4,
            span: 2804..2805,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 101,
            column: 6,
            span: 2806..2807,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 101,
            column: 8,
            span: 2808..2809,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 101,
            column: 9,
            span: 2809..2810,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 102,
            column: 4,
            span: 2813..2814,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 102,
            column: 5,
            span: 2814..2815,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 102,
            column: 6,
            span: 2815..2816,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 102,
            column: 7,
            span: 2816..2817,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 102,
            column: 8,
            span: 2817..2818,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 102,
            column: 9,
            span: 2818..2819,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 102,
            column: 11,
            span: 2820..2821,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 102,
            column: 13,
            span: 2822..2823,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 102,
            column: 14,
            span: 2823..2824,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 102,
            column: 15,
            span: 2823..2825,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 102,
            column: 16,
            span: 2825..2826,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 102,
            column: 20,
            span: 2827..2830,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 102,
            column: 22,
            span: 2831..2832,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 102,
            column: 23,
            span: 2832..2833,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 102,
            column: 25,
            span: 2832..2835,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 102,
            column: 26,
            span: 2835..2836,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 102,
            column: 28,
            span: 2837..2838,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 102,
            column: 30,
            span: 2839..2840,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 102,
            column: 31,
            span: 2840..2841,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 102,
            column: 32,
            span: 2840..2842,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 102,
            column: 33,
            span: 2842..2843,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 103,
            column: 9,
            span: 2846..2852,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 103,
            column: 10,
            span: 2852..2853,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 103,
            column: 11,
            span: 2853..2854,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 103,
            column: 12,
            span: 2854..2855,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 103,
            column: 13,
            span: 2855..2856,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 103,
            column: 16,
            span: 2857..2859,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 103,
            column: 18,
            span: 2860..2861,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 103,
            column: 19,
            span: 2861..2862,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "19",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 103,
            column: 21,
            span: 2861..2864,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 103,
            column: 22,
            span: 2864..2865,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 103,
            column: 23,
            span: 2865..2866,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 104,
            column: 11,
            span: 2869..2877,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 104,
            column: 13,
            span: 2878..2879,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 104,
            column: 14,
            span: 2879..2880,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 104,
            column: 15,
            span: 2880..2881,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 104,
            column: 16,
            span: 2881..2882,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 104,
            column: 19,
            span: 2883..2885,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 104,
            column: 23,
            span: 2886..2889,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 104,
            column: 25,
            span: 2890..2891,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 104,
            column: 30,
            span: 2892..2896,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 104,
            column: 37,
            span: 2897..2903,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 104,
            column: 39,
            span: 2903..2905,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 104,
            column: 43,
            span: 2906..2909,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 104,
            column: 50,
            span: 2910..2916,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 104,
            column: 52,
            span: 2917..2918,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 104,
            column: 53,
            span: 2918..2919,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 104,
            column: 54,
            span: 2919..2920,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 104,
            column: 57,
            span: 2920..2923,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 104,
            column: 58,
            span: 2923..2924,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        position: Position {
            line: 104,
            column: 62,
            span: 2925..2928,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 104,
            column: 63,
            span: 2928..2929,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 104,
            column: 64,
            span: 2929..2930,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 104,
            column: 0,
            span: 2931..2934,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 106,
            column: 9,
            span: 2938..2944,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 106,
            column: 10,
            span: 2944..2945,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 106,
            column: 11,
            span: 2945..2946,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 106,
            column: 12,
            span: 2946..2947,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 106,
            column: 13,
            span: 2947..2948,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 106,
            column: 14,
            span: 2948..2949,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 106,
            column: 17,
            span: 2950..2952,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 106,
            column: 21,
            span: 2953..2956,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 106,
            column: 22,
            span: 2956..2957,
        },
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        position: Position {
            line: 107,
            column: 6,
            span: 2958..2963,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 107,
            column: 0,
            span: 2963..2965,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 109,
            column: 5,
            span: 2967..2971,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 109,
            column: 6,
            span: 2971..2972,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[if\nmath.sin(1)\nthen\n  a=1\nelse\n  a=2\nend\n]]",
        ),
        position: Position {
            line: 116,
            column: 3,
            span: 2972..3017,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 116,
            column: 4,
            span: 3017..3018,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 116,
            column: 6,
            span: 3019..3020,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 116,
            column: 8,
            span: 3020..3022,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 116,
            column: 9,
            span: 3022..3023,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 116,
            column: 11,
            span: 3023..3025,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 116,
            column: 12,
            span: 3025..3026,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 116,
            column: 14,
            span: 3026..3028,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 116,
            column: 16,
            span: 3029..3030,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 116,
            column: 17,
            span: 3030..3031,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 118,
            column: 5,
            span: 3033..3037,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 118,
            column: 6,
            span: 3037..3038,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[--\nif nil then\n  a=1\nelse\n  a=2\nend\n]]",
        ),
        position: Position {
            line: 124,
            column: 3,
            span: 3038..3078,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 124,
            column: 4,
            span: 3078..3079,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 124,
            column: 6,
            span: 3080..3081,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 124,
            column: 8,
            span: 3081..3083,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 124,
            column: 9,
            span: 3083..3084,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 124,
            column: 11,
            span: 3084..3086,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 124,
            column: 12,
            span: 3086..3087,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 124,
            column: 14,
            span: 3087..3089,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 124,
            column: 16,
            span: 3090..3091,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 124,
            column: 17,
            span: 3091..3092,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 126,
            column: 5,
            span: 3094..3098,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 126,
            column: 6,
            span: 3098..3099,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[a=1\nrepeat\n  a=a+1\nuntil a==3\n]]",
        ),
        position: Position {
            line: 130,
            column: 3,
            span: 3099..3133,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 130,
            column: 4,
            span: 3133..3134,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 130,
            column: 6,
            span: 3135..3136,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 130,
            column: 8,
            span: 3136..3138,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 130,
            column: 9,
            span: 3138..3139,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 130,
            column: 11,
            span: 3139..3141,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 130,
            column: 12,
            span: 3141..3142,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 130,
            column: 14,
            span: 3142..3144,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 130,
            column: 15,
            span: 3144..3145,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 130,
            column: 17,
            span: 3145..3147,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 130,
            column: 18,
            span: 3147..3148,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 130,
            column: 20,
            span: 3148..3150,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 130,
            column: 22,
            span: 3151..3152,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 130,
            column: 23,
            span: 3152..3153,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 132,
            column: 5,
            span: 3155..3159,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 132,
            column: 6,
            span: 3159..3160,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ do\n  return\nend\n]]",
        ),
        position: Position {
            line: 135,
            column: 3,
            span: 3160..3181,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 135,
            column: 4,
            span: 3181..3182,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 135,
            column: 6,
            span: 3183..3184,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 135,
            column: 8,
            span: 3184..3186,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 135,
            column: 10,
            span: 3187..3188,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 135,
            column: 11,
            span: 3188..3189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 137,
            column: 5,
            span: 3191..3195,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 137,
            column: 6,
            span: 3195..3196,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[local a\na=1\nwhile a<=3 do\n  a=a+1\nend\n]]",
        ),
        position: Position {
            line: 142,
            column: 3,
            span: 3196..3238,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 142,
            column: 4,
            span: 3238..3239,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 142,
            column: 6,
            span: 3240..3241,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 142,
            column: 8,
            span: 3241..3243,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 142,
            column: 9,
            span: 3243..3244,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 142,
            column: 11,
            span: 3244..3246,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 142,
            column: 12,
            span: 3246..3247,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 142,
            column: 14,
            span: 3247..3249,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 142,
            column: 15,
            span: 3249..3250,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 142,
            column: 17,
            span: 3250..3252,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 142,
            column: 18,
            span: 3252..3253,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 142,
            column: 20,
            span: 3253..3255,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 142,
            column: 21,
            span: 3255..3256,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 142,
            column: 23,
            span: 3256..3258,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 142,
            column: 24,
            span: 3258..3259,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 142,
            column: 26,
            span: 3259..3261,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 142,
            column: 27,
            span: 3261..3262,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 142,
            column: 29,
            span: 3262..3264,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 142,
            column: 30,
            span: 3264..3265,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 142,
            column: 32,
            span: 3265..3267,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 142,
            column: 34,
            span: 3268..3269,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 142,
            column: 35,
            span: 3269..3270,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 144,
            column: 5,
            span: 3272..3276,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 144,
            column: 6,
            span: 3276..3277,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[while math.sin(1) do\n  if math.sin(1)\n  then\n    break\n  end\nend\na=1]]",
        ),
        position: Position {
            line: 150,
            column: 6,
            span: 3277..3349,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 150,
            column: 7,
            span: 3349..3350,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 150,
            column: 9,
            span: 3351..3352,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 150,
            column: 11,
            span: 3352..3354,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 150,
            column: 12,
            span: 3354..3355,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 150,
            column: 14,
            span: 3355..3357,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 150,
            column: 15,
            span: 3357..3358,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 150,
            column: 17,
            span: 3358..3360,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 150,
            column: 18,
            span: 3360..3361,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 150,
            column: 20,
            span: 3361..3363,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 150,
            column: 22,
            span: 3364..3365,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 150,
            column: 23,
            span: 3365..3366,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 152,
            column: 5,
            span: 3368..3372,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 152,
            column: 6,
            span: 3372..3373,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[for i=1,3 do\n  a=i\nend\n]]",
        ),
        position: Position {
            line: 155,
            column: 3,
            span: 3373..3400,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 155,
            column: 4,
            span: 3400..3401,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 155,
            column: 6,
            span: 3402..3403,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 155,
            column: 8,
            span: 3403..3405,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 155,
            column: 9,
            span: 3405..3406,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 155,
            column: 11,
            span: 3406..3408,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 155,
            column: 12,
            span: 3408..3409,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 155,
            column: 14,
            span: 3409..3411,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 155,
            column: 15,
            span: 3411..3412,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 155,
            column: 17,
            span: 3412..3414,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 155,
            column: 18,
            span: 3414..3415,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 155,
            column: 20,
            span: 3415..3417,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 155,
            column: 21,
            span: 3417..3418,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 155,
            column: 23,
            span: 3418..3420,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 155,
            column: 24,
            span: 3420..3421,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 155,
            column: 26,
            span: 3421..3423,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 155,
            column: 27,
            span: 3423..3424,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 155,
            column: 29,
            span: 3424..3426,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 155,
            column: 31,
            span: 3427..3428,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 155,
            column: 32,
            span: 3428..3429,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 157,
            column: 5,
            span: 3431..3435,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 157,
            column: 6,
            span: 3435..3436,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[for i,v in pairs{'a','b'} do\n  a=i..v\nend\n]]",
        ),
        position: Position {
            line: 160,
            column: 3,
            span: 3436..3482,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 160,
            column: 4,
            span: 3482..3483,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 160,
            column: 6,
            span: 3484..3485,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 160,
            column: 8,
            span: 3485..3487,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 160,
            column: 9,
            span: 3487..3488,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 160,
            column: 11,
            span: 3488..3490,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 160,
            column: 12,
            span: 3490..3491,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 160,
            column: 14,
            span: 3491..3493,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 160,
            column: 15,
            span: 3493..3494,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 160,
            column: 17,
            span: 3494..3496,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 160,
            column: 18,
            span: 3496..3497,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 160,
            column: 20,
            span: 3497..3499,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 160,
            column: 21,
            span: 3499..3500,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 160,
            column: 23,
            span: 3500..3502,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 160,
            column: 25,
            span: 3503..3504,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 160,
            column: 26,
            span: 3504..3505,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 162,
            column: 5,
            span: 3507..3511,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 162,
            column: 6,
            span: 3511..3512,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[for i=1,4 do a=1 end]]",
        ),
        position: Position {
            line: 162,
            column: 30,
            span: 3512..3536,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 162,
            column: 31,
            span: 3536..3537,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 162,
            column: 33,
            span: 3538..3539,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 162,
            column: 35,
            span: 3539..3541,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 162,
            column: 36,
            span: 3541..3542,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 162,
            column: 38,
            span: 3542..3544,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 162,
            column: 39,
            span: 3544..3545,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 162,
            column: 41,
            span: 3545..3547,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 162,
            column: 42,
            span: 3547..3548,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 162,
            column: 44,
            span: 3548..3550,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 162,
            column: 45,
            span: 3550..3551,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 162,
            column: 47,
            span: 3551..3553,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 162,
            column: 49,
            span: 3554..3555,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 162,
            column: 50,
            span: 3555..3556,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 166,
            column: 6,
            span: 3560..3565,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 166,
            column: 10,
            span: 3566..3569,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 168,
            column: 2,
            span: 3571..3572,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 168,
            column: 4,
            span: 3573..3574,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 168,
            column: 6,
            span: 3575..3576,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 168,
            column: 7,
            span: 3576..3577,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 168,
            column: 8,
            span: 3577..3578,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        position: Position {
            line: 169,
            column: 2,
            span: 3579..3580,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 169,
            column: 4,
            span: 3581..3582,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 169,
            column: 0,
            span: 3583..3586,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 170,
            column: 6,
            span: 3587..3592,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        position: Position {
            line: 170,
            column: 11,
            span: 3593..3597,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 170,
            column: 13,
            span: 3598..3599,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 170,
            column: 0,
            span: 3599..3601,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 171,
            column: 6,
            span: 3602..3607,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldglob",
        ),
        position: Position {
            line: 171,
            column: 14,
            span: 3608..3615,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 171,
            column: 16,
            span: 3616..3617,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        position: Position {
            line: 171,
            column: 0,
            span: 3618..3622,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 172,
            column: 6,
            span: 3623..3628,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 172,
            column: 7,
            span: 3628..3629,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 172,
            column: 14,
            span: 3629..3636,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 172,
            column: 15,
            span: 3636..3637,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 172,
            column: 23,
            span: 3637..3645,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 172,
            column: 24,
            span: 3645..3646,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 172,
            column: 25,
            span: 3646..3647,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 172,
            column: 26,
            span: 3647..3648,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 172,
            column: 28,
            span: 3649..3650,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 172,
            column: 29,
            span: 3650..3651,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 173,
            column: 17,
            span: 3654..3668,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 173,
            column: 18,
            span: 3668..3669,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 173,
            column: 19,
            span: 3669..3670,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 174,
            column: 8,
            span: 3699..3704,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 174,
            column: 10,
            span: 3705..3706,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 174,
            column: 11,
            span: 3706..3707,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 174,
            column: 13,
            span: 3708..3709,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 174,
            column: 14,
            span: 3709..3710,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 174,
            column: 16,
            span: 3711..3712,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 174,
            column: 18,
            span: 3713..3714,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 174,
            column: 24,
            span: 3715..3720,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 174,
            column: 25,
            span: 3720..3721,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        position: Position {
            line: 174,
            column: 32,
            span: 3721..3728,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 174,
            column: 33,
            span: 3728..3729,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 174,
            column: 34,
            span: 3729..3730,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 175,
            column: 9,
            span: 3733..3739,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 175,
            column: 10,
            span: 3739..3740,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 175,
            column: 11,
            span: 3740..3741,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 175,
            column: 14,
            span: 3742..3744,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'crl'",
        ),
        position: Position {
            line: 175,
            column: 20,
            span: 3745..3750,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 175,
            column: 24,
            span: 3751..3754,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 175,
            column: 26,
            span: 3755..3756,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 175,
            column: 29,
            span: 3757..3759,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 175,
            column: 31,
            span: 3759..3761,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 175,
            column: 32,
            span: 3761..3762,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 176,
            column: 5,
            span: 3765..3767,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 176,
            column: 7,
            span: 3768..3769,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 176,
            column: 10,
            span: 3770..3772,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line\"",
        ),
        position: Position {
            line: 176,
            column: 17,
            span: 3773..3779,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 176,
            column: 0,
            span: 3780..3784,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 177,
            column: 7,
            span: 3789..3791,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        position: Position {
            line: 177,
            column: 12,
            span: 3792..3796,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 177,
            column: 15,
            span: 3797..3799,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldglob",
        ),
        position: Position {
            line: 177,
            column: 23,
            span: 3800..3807,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 177,
            column: 0,
            span: 3808..3812,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        position: Position {
            line: 178,
            column: 8,
            span: 3819..3820,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 178,
            column: 10,
            span: 3821..3822,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 178,
            column: 12,
            span: 3823..3824,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 178,
            column: 14,
            span: 3825..3826,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 178,
            column: 16,
            span: 3826..3828,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldglob",
        ),
        position: Position {
            line: 179,
            column: 14,
            span: 3882..3889,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 179,
            column: 16,
            span: 3890..3891,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        position: Position {
            line: 179,
            column: 0,
            span: 3892..3896,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 180,
            column: 0,
            span: 3901..3904,
        },
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        position: Position {
            line: 181,
            column: 9,
            span: 3907..3913,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 181,
            column: 11,
            span: 3914..3915,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 181,
            column: 14,
            span: 3916..3918,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call\"",
        ),
        position: Position {
            line: 181,
            column: 21,
            span: 3919..3925,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 181,
            column: 0,
            span: 3926..3930,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 182,
            column: 10,
            span: 3935..3940,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 182,
            column: 12,
            span: 3941..3942,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 182,
            column: 14,
            span: 3943..3944,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 182,
            column: 20,
            span: 3945..3950,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 182,
            column: 21,
            span: 3950..3951,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 182,
            column: 28,
            span: 3951..3958,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 182,
            column: 29,
            span: 3958..3959,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 182,
            column: 30,
            span: 3958..3960,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 182,
            column: 31,
            span: 3960..3961,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        position: Position {
            line: 182,
            column: 35,
            span: 3962..3965,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 182,
            column: 36,
            span: 3965..3966,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 182,
            column: 37,
            span: 3966..3967,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        position: Position {
            line: 182,
            column: 0,
            span: 3967..3971,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 183,
            column: 6,
            span: 3976..3977,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 183,
            column: 7,
            span: 3977..3978,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 183,
            column: 8,
            span: 3978..3979,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 183,
            column: 9,
            span: 3979..3980,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 183,
            column: 11,
            span: 3981..3982,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 183,
            column: 0,
            span: 3982..3984,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 184,
            column: 7,
            span: 3987..3991,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 184,
            column: 14,
            span: 3992..3998,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 184,
            column: 15,
            span: 3998..3999,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 184,
            column: 16,
            span: 3999..4000,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 184,
            column: 19,
            span: 4001..4003,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return\"",
        ),
        position: Position {
            line: 184,
            column: 28,
            span: 4004..4012,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 184,
            column: 29,
            span: 4012..4013,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 185,
            column: 0,
            span: 4016..4019,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 186,
            column: 4,
            span: 4020..4023,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 186,
            column: 5,
            span: 4023..4024,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"crl\"",
        ),
        position: Position {
            line: 186,
            column: 11,
            span: 4025..4030,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 186,
            column: 12,
            span: 4030..4031,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 188,
            column: 9,
            span: 4033..4041,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 188,
            column: 11,
            span: 4042..4043,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 188,
            column: 12,
            span: 4043..4044,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 188,
            column: 13,
            span: 4044..4045,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 188,
            column: 14,
            span: 4045..4046,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 188,
            column: 16,
            span: 4047..4048,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 188,
            column: 17,
            span: 4048..4049,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 189,
            column: 17,
            span: 4052..4066,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 189,
            column: 18,
            span: 4066..4067,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 189,
            column: 19,
            span: 4067..4068,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 190,
            column: 8,
            span: 4071..4076,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 190,
            column: 10,
            span: 4077..4078,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 190,
            column: 11,
            span: 4078..4079,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 190,
            column: 13,
            span: 4080..4081,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 190,
            column: 15,
            span: 4082..4083,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 190,
            column: 21,
            span: 4084..4089,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 190,
            column: 22,
            span: 4089..4090,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 190,
            column: 30,
            span: 4090..4098,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 190,
            column: 31,
            span: 4098..4099,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 190,
            column: 32,
            span: 4098..4100,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 190,
            column: 33,
            span: 4100..4101,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 190,
            column: 35,
            span: 4101..4103,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 190,
            column: 36,
            span: 4103..4104,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 191,
            column: 8,
            span: 4107..4112,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 191,
            column: 10,
            span: 4113..4114,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 191,
            column: 11,
            span: 4114..4115,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 191,
            column: 13,
            span: 4116..4117,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 191,
            column: 15,
            span: 4118..4119,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 191,
            column: 21,
            span: 4120..4125,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 191,
            column: 22,
            span: 4125..4126,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 191,
            column: 30,
            span: 4126..4134,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 191,
            column: 31,
            span: 4134..4135,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 191,
            column: 32,
            span: 4134..4136,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 191,
            column: 33,
            span: 4136..4137,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 191,
            column: 35,
            span: 4137..4139,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 191,
            column: 36,
            span: 4139..4140,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 192,
            column: 9,
            span: 4143..4149,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 192,
            column: 10,
            span: 4149..4150,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 192,
            column: 11,
            span: 4150..4151,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 192,
            column: 14,
            span: 4152..4154,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 192,
            column: 16,
            span: 4155..4156,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 192,
            column: 20,
            span: 4157..4160,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 192,
            column: 22,
            span: 4161..4162,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 192,
            column: 25,
            span: 4163..4165,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 192,
            column: 27,
            span: 4166..4167,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 192,
            column: 28,
            span: 4167..4168,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 193,
            column: 9,
            span: 4171..4177,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 193,
            column: 10,
            span: 4177..4178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 193,
            column: 15,
            span: 4178..4183,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 193,
            column: 16,
            span: 4183..4184,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        position: Position {
            line: 193,
            column: 24,
            span: 4184..4192,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 193,
            column: 25,
            span: 4192..4193,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 193,
            column: 26,
            span: 4192..4194,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 193,
            column: 27,
            span: 4194..4195,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 193,
            column: 29,
            span: 4195..4197,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 193,
            column: 30,
            span: 4197..4198,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pera\"",
        ),
        position: Position {
            line: 193,
            column: 37,
            span: 4199..4205,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 193,
            column: 38,
            span: 4205..4206,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 193,
            column: 41,
            span: 4207..4209,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AA\"",
        ),
        position: Position {
            line: 193,
            column: 46,
            span: 4210..4214,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 193,
            column: 49,
            span: 4215..4217,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AA\"",
        ),
        position: Position {
            line: 193,
            column: 54,
            span: 4218..4222,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 193,
            column: 55,
            span: 4222..4223,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 194,
            column: 9,
            span: 4226..4232,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 194,
            column: 10,
            span: 4232..4233,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 194,
            column: 15,
            span: 4233..4238,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 194,
            column: 16,
            span: 4238..4239,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        position: Position {
            line: 194,
            column: 24,
            span: 4239..4247,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 194,
            column: 25,
            span: 4247..4248,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 194,
            column: 26,
            span: 4247..4249,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 194,
            column: 27,
            span: 4249..4250,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 194,
            column: 29,
            span: 4250..4252,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 194,
            column: 30,
            span: 4252..4253,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ma��\"",
        ),
        position: Position {
            line: 194,
            column: 37,
            span: 4254..4260,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 194,
            column: 38,
            span: 4260..4261,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 194,
            column: 41,
            span: 4262..4264,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"B\"",
        ),
        position: Position {
            line: 194,
            column: 45,
            span: 4265..4268,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 194,
            column: 46,
            span: 4268..4269,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 195,
            column: 4,
            span: 4272..4273,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 195,
            column: 6,
            span: 4274..4275,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 195,
            column: 12,
            span: 4276..4281,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 195,
            column: 13,
            span: 4281..4282,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 195,
            column: 20,
            span: 4282..4289,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 195,
            column: 21,
            span: 4289..4290,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 195,
            column: 22,
            span: 4289..4291,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 195,
            column: 23,
            span: 4291..4292,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 196,
            column: 9,
            span: 4295..4301,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 196,
            column: 10,
            span: 4301..4302,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 196,
            column: 11,
            span: 4302..4303,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 196,
            column: 12,
            span: 4303..4304,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        position: Position {
            line: 196,
            column: 16,
            span: 4304..4308,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 196,
            column: 19,
            span: 4309..4311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 196,
            column: 21,
            span: 4312..4313,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 196,
            column: 25,
            span: 4314..4317,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 196,
            column: 27,
            span: 4318..4319,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 196,
            column: 28,
            span: 4319..4320,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        position: Position {
            line: 196,
            column: 32,
            span: 4320..4324,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 196,
            column: 35,
            span: 4325..4327,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Lua\"",
        ),
        position: Position {
            line: 196,
            column: 41,
            span: 4328..4333,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 196,
            column: 45,
            span: 4334..4337,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 196,
            column: 47,
            span: 4338..4339,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 196,
            column: 48,
            span: 4339..4340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 196,
            column: 52,
            span: 4340..4344,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 196,
            column: 55,
            span: 4345..4347,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'g'",
        ),
        position: Position {
            line: 196,
            column: 59,
            span: 4348..4351,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 196,
            column: 0,
            span: 4352..4355,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 197,
            column: 6,
            span: 4360..4361,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 197,
            column: 7,
            span: 4361..4362,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nups",
        ),
        position: Position {
            line: 197,
            column: 11,
            span: 4362..4366,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 197,
            column: 14,
            span: 4367..4369,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 197,
            column: 16,
            span: 4369..4371,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 197,
            column: 20,
            span: 4372..4375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 197,
            column: 27,
            span: 4376..4382,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 197,
            column: 28,
            span: 4382..4383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 197,
            column: 32,
            span: 4383..4387,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 197,
            column: 33,
            span: 4387..4388,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 197,
            column: 34,
            span: 4388..4389,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 197,
            column: 35,
            span: 4389..4390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        position: Position {
            line: 197,
            column: 41,
            span: 4390..4396,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 197,
            column: 42,
            span: 4396..4397,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^@.*db%.lua\"",
        ),
        position: Position {
            line: 197,
            column: 56,
            span: 4398..4411,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 197,
            column: 57,
            span: 4411..4412,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 197,
            column: 58,
            span: 4412..4413,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        position: Position {
            line: 198,
            column: 7,
            span: 4416..4420,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 198,
            column: 9,
            span: 4421..4422,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        position: Position {
            line: 198,
            column: 14,
            span: 4423..4427,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 198,
            column: 16,
            span: 4428..4429,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 198,
            column: 0,
            span: 4429..4431,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 199,
            column: 9,
            span: 4434..4440,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 199,
            column: 10,
            span: 4440..4441,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 199,
            column: 15,
            span: 4441..4446,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 199,
            column: 16,
            span: 4446..4447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 199,
            column: 23,
            span: 4447..4454,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 199,
            column: 24,
            span: 4454..4455,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 199,
            column: 25,
            span: 4454..4456,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 199,
            column: 26,
            span: 4456..4457,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 199,
            column: 30,
            span: 4458..4461,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 199,
            column: 31,
            span: 4461..4462,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 199,
            column: 32,
            span: 4462..4463,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        position: Position {
            line: 199,
            column: 43,
            span: 4463..4474,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 199,
            column: 46,
            span: 4475..4477,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        position: Position {
            line: 199,
            column: 48,
            span: 4478..4479,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 199,
            column: 50,
            span: 4480..4481,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 199,
            column: 52,
            span: 4481..4483,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 199,
            column: 53,
            span: 4483..4484,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 200,
            column: 9,
            span: 4487..4493,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 200,
            column: 10,
            span: 4493..4494,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 200,
            column: 15,
            span: 4494..4499,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 200,
            column: 16,
            span: 4499..4500,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 200,
            column: 23,
            span: 4500..4507,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 200,
            column: 24,
            span: 4507..4508,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 200,
            column: 25,
            span: 4507..4509,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 200,
            column: 26,
            span: 4509..4510,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 200,
            column: 30,
            span: 4511..4514,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 200,
            column: 31,
            span: 4514..4515,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 200,
            column: 32,
            span: 4515..4516,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        position: Position {
            line: 200,
            column: 43,
            span: 4516..4527,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 200,
            column: 46,
            span: 4528..4530,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        position: Position {
            line: 200,
            column: 48,
            span: 4531..4532,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 200,
            column: 50,
            span: 4533..4534,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 200,
            column: 52,
            span: 4534..4536,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 200,
            column: 53,
            span: 4536..4537,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 201,
            column: 0,
            span: 4538..4541,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 203,
            column: 9,
            span: 4543..4551,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 203,
            column: 13,
            span: 4552..4555,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 203,
            column: 14,
            span: 4555..4556,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 203,
            column: 15,
            span: 4556..4557,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        position: Position {
            line: 204,
            column: 7,
            span: 4560..4564,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 204,
            column: 9,
            span: 4565..4566,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        position: Position {
            line: 204,
            column: 14,
            span: 4567..4571,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 204,
            column: 16,
            span: 4572..4573,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 204,
            column: 0,
            span: 4573..4575,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 205,
            column: 9,
            span: 4578..4584,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 205,
            column: 10,
            span: 4584..4585,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 205,
            column: 15,
            span: 4585..4590,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 205,
            column: 16,
            span: 4590..4591,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 205,
            column: 23,
            span: 4591..4598,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 205,
            column: 24,
            span: 4598..4599,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 205,
            column: 25,
            span: 4598..4600,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 205,
            column: 26,
            span: 4600..4601,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 205,
            column: 30,
            span: 4602..4605,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 205,
            column: 31,
            span: 4605..4606,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 205,
            column: 32,
            span: 4606..4607,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        position: Position {
            line: 205,
            column: 43,
            span: 4607..4618,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 205,
            column: 46,
            span: 4619..4621,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        position: Position {
            line: 205,
            column: 48,
            span: 4622..4623,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 205,
            column: 50,
            span: 4624..4625,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 205,
            column: 52,
            span: 4625..4627,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 205,
            column: 53,
            span: 4627..4628,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 206,
            column: 0,
            span: 4629..4632,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 208,
            column: 4,
            span: 4634..4637,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 208,
            column: 5,
            span: 4637..4638,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 208,
            column: 6,
            span: 4638..4639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 211,
            column: 2,
            span: 4704..4705,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 211,
            column: 4,
            span: 4706..4707,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo\\\nalo'",
        ),
        position: Position {
            line: 212,
            column: 5,
            span: 4708..4718,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 212,
            column: 8,
            span: 4719..4721,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n\n]]",
        ),
        position: Position {
            line: 214,
            column: 3,
            span: 4722..4728,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 217,
            column: 7,
            span: 4737..4743,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 217,
            column: 8,
            span: 4743..4744,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 217,
            column: 13,
            span: 4744..4749,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 217,
            column: 14,
            span: 4749..4750,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 217,
            column: 21,
            span: 4750..4757,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 217,
            column: 22,
            span: 4757..4758,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 217,
            column: 23,
            span: 4757..4759,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 217,
            column: 24,
            span: 4759..4760,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 217,
            column: 28,
            span: 4761..4764,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 217,
            column: 29,
            span: 4764..4765,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 217,
            column: 30,
            span: 4765..4766,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        position: Position {
            line: 217,
            column: 41,
            span: 4766..4777,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 217,
            column: 44,
            span: 4778..4780,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        position: Position {
            line: 217,
            column: 46,
            span: 4781..4782,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 217,
            column: 48,
            span: 4783..4784,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 217,
            column: 51,
            span: 4784..4787,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 217,
            column: 52,
            span: 4787..4788,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 220,
            column: 9,
            span: 4815..4823,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 220,
            column: 11,
            span: 4824..4825,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 220,
            column: 12,
            span: 4825..4826,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 220,
            column: 15,
            span: 4826..4829,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 220,
            column: 16,
            span: 4829..4830,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 221,
            column: 5,
            span: 4833..4835,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 221,
            column: 11,
            span: 4836..4841,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 221,
            column: 13,
            span: 4842..4843,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 221,
            column: 14,
            span: 4843..4844,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 221,
            column: 16,
            span: 4845..4846,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 221,
            column: 17,
            span: 4846..4847,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 221,
            column: 19,
            span: 4848..4849,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 221,
            column: 20,
            span: 4849..4850,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 222,
            column: 4,
            span: 4853..4854,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 222,
            column: 6,
            span: 4855..4856,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 222,
            column: 11,
            span: 4857..4861,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 222,
            column: 12,
            span: 4861..4862,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        position: Position {
            line: 222,
            column: 15,
            span: 4862..4865,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 222,
            column: 16,
            span: 4865..4866,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 222,
            column: 18,
            span: 4865..4868,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 222,
            column: 19,
            span: 4868..4869,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 222,
            column: 20,
            span: 4869..4870,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 223,
            column: 0,
            span: 4873..4876,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 224,
            column: 8,
            span: 4879..4884,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "feijao",
        ),
        position: Position {
            line: 224,
            column: 0,
            span: 4885..4891,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 225,
            column: 8,
            span: 4894..4899,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AAAA",
        ),
        position: Position {
            line: 225,
            column: 13,
            span: 4900..4904,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 225,
            column: 14,
            span: 4904..4905,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 225,
            column: 16,
            span: 4906..4907,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 225,
            column: 18,
            span: 4908..4909,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        position: Position {
            line: 225,
            column: 25,
            span: 4910..4916,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 225,
            column: 26,
            span: 4916..4917,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"mam�o\"",
        ),
        position: Position {
            line: 225,
            column: 34,
            span: 4918..4925,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 226,
            column: 4,
            span: 4928..4929,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 226,
            column: 5,
            span: 4929..4930,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AAAA",
        ),
        position: Position {
            line: 226,
            column: 9,
            span: 4930..4934,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 226,
            column: 10,
            span: 4934..4935,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 226,
            column: 12,
            span: 4936..4937,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 226,
            column: 13,
            span: 4937..4938,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 227,
            column: 9,
            span: 4941..4947,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 227,
            column: 10,
            span: 4947..4948,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AAAA",
        ),
        position: Position {
            line: 227,
            column: 14,
            span: 4948..4952,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 227,
            column: 17,
            span: 4953..4955,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pera\"",
        ),
        position: Position {
            line: 227,
            column: 24,
            span: 4956..4962,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 227,
            column: 28,
            span: 4963..4966,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 227,
            column: 30,
            span: 4967..4968,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 227,
            column: 33,
            span: 4969..4971,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ma��\"",
        ),
        position: Position {
            line: 227,
            column: 40,
            span: 4972..4978,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 227,
            column: 41,
            span: 4978..4979,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 228,
            column: 0,
            span: 4982..4984,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 229,
            column: 10,
            span: 4989..4994,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 229,
            column: 12,
            span: 4995..4996,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 229,
            column: 14,
            span: 4997..4998,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 229,
            column: 0,
            span: 4998..5001,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 230,
            column: 10,
            span: 5006..5011,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 230,
            column: 12,
            span: 5012..5013,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 230,
            column: 13,
            span: 5013..5014,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 230,
            column: 15,
            span: 5015..5016,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 230,
            column: 17,
            span: 5017..5018,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 230,
            column: 23,
            span: 5019..5024,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 230,
            column: 24,
            span: 5024..5025,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 230,
            column: 32,
            span: 5025..5033,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 230,
            column: 33,
            span: 5033..5034,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 230,
            column: 34,
            span: 5033..5035,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 230,
            column: 35,
            span: 5035..5036,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 230,
            column: 37,
            span: 5036..5038,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 230,
            column: 38,
            span: 5038..5039,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 231,
            column: 11,
            span: 5044..5050,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 231,
            column: 12,
            span: 5050..5051,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 231,
            column: 13,
            span: 5051..5052,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 231,
            column: 16,
            span: 5053..5055,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'B'",
        ),
        position: Position {
            line: 231,
            column: 20,
            span: 5056..5059,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 231,
            column: 24,
            span: 5060..5063,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 231,
            column: 26,
            span: 5064..5065,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 231,
            column: 29,
            span: 5066..5068,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 231,
            column: 32,
            span: 5068..5071,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 231,
            column: 33,
            span: 5071..5072,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 232,
            column: 0,
            span: 5075..5078,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 233,
            column: 0,
            span: 5079..5082,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 235,
            column: 2,
            span: 5084..5085,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 235,
            column: 3,
            span: 5085..5086,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 235,
            column: 4,
            span: 5086..5087,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 238,
            column: 7,
            span: 5090..5096,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 238,
            column: 8,
            span: 5096..5097,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 238,
            column: 9,
            span: 5097..5098,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 238,
            column: 10,
            span: 5098..5099,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 238,
            column: 11,
            span: 5099..5100,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 238,
            column: 12,
            span: 5100..5101,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 238,
            column: 16,
            span: 5102..5105,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 238,
            column: 18,
            span: 5106..5107,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 238,
            column: 19,
            span: 5107..5108,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 238,
            column: 20,
            span: 5108..5109,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 238,
            column: 21,
            span: 5109..5110,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 238,
            column: 25,
            span: 5111..5114,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 238,
            column: 27,
            span: 5115..5116,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 238,
            column: 28,
            span: 5116..5117,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 238,
            column: 34,
            span: 5117..5123,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 238,
            column: 35,
            span: 5123..5124,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 238,
            column: 39,
            span: 5125..5128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 238,
            column: 41,
            span: 5129..5130,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 238,
            column: 42,
            span: 5130..5131,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 238,
            column: 47,
            span: 5131..5136,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 238,
            column: 48,
            span: 5136..5137,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 238,
            column: 56,
            span: 5137..5145,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 238,
            column: 57,
            span: 5145..5146,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 238,
            column: 61,
            span: 5147..5150,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 238,
            column: 65,
            span: 5151..5154,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 238,
            column: 67,
            span: 5155..5156,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 238,
            column: 68,
            span: 5156..5157,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 238,
            column: 73,
            span: 5157..5162,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 238,
            column: 74,
            span: 5162..5163,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 238,
            column: 75,
            span: 5163..5164,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 243,
            column: 6,
            span: 5240..5245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 243,
            column: 8,
            span: 5246..5247,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 243,
            column: 9,
            span: 5247..5248,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 243,
            column: 11,
            span: 5249..5250,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 243,
            column: 13,
            span: 5251..5252,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 243,
            column: 19,
            span: 5253..5258,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 243,
            column: 20,
            span: 5258..5259,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 243,
            column: 28,
            span: 5259..5267,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 243,
            column: 29,
            span: 5267..5268,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 243,
            column: 30,
            span: 5267..5269,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 243,
            column: 31,
            span: 5269..5270,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 243,
            column: 33,
            span: 5270..5272,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 243,
            column: 34,
            span: 5272..5273,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 244,
            column: 7,
            span: 5274..5280,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 244,
            column: 8,
            span: 5280..5281,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 244,
            column: 9,
            span: 5281..5282,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 244,
            column: 12,
            span: 5283..5285,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 244,
            column: 14,
            span: 5285..5287,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 244,
            column: 18,
            span: 5288..5291,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 244,
            column: 20,
            span: 5292..5293,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 244,
            column: 23,
            span: 5294..5296,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(*temporary)\"",
        ),
        position: Position {
            line: 244,
            column: 38,
            span: 5297..5311,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 244,
            column: 39,
            span: 5311..5312,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 245,
            column: 6,
            span: 5313..5318,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 245,
            column: 8,
            span: 5319..5320,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 245,
            column: 9,
            span: 5320..5321,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 245,
            column: 11,
            span: 5322..5323,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 245,
            column: 13,
            span: 5324..5325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 245,
            column: 19,
            span: 5326..5331,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 245,
            column: 20,
            span: 5331..5332,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 245,
            column: 28,
            span: 5332..5340,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 245,
            column: 29,
            span: 5340..5341,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 245,
            column: 30,
            span: 5340..5342,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 245,
            column: 31,
            span: 5342..5343,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 245,
            column: 33,
            span: 5343..5345,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 245,
            column: 34,
            span: 5345..5346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 246,
            column: 7,
            span: 5347..5353,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 246,
            column: 8,
            span: 5353..5354,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 246,
            column: 9,
            span: 5354..5355,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 246,
            column: 12,
            span: 5356..5358,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 246,
            column: 14,
            span: 5358..5360,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 246,
            column: 18,
            span: 5361..5364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 246,
            column: 20,
            span: 5365..5366,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 246,
            column: 23,
            span: 5367..5369,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(*temporary)\"",
        ),
        position: Position {
            line: 246,
            column: 38,
            span: 5370..5384,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 246,
            column: 39,
            span: 5384..5385,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 247,
            column: 7,
            span: 5386..5392,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 247,
            column: 8,
            span: 5392..5393,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 247,
            column: 11,
            span: 5393..5396,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 247,
            column: 17,
            span: 5397..5402,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 247,
            column: 18,
            span: 5402..5403,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 247,
            column: 26,
            span: 5403..5411,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 247,
            column: 27,
            span: 5411..5412,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 247,
            column: 28,
            span: 5411..5413,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 247,
            column: 29,
            span: 5413..5414,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 247,
            column: 31,
            span: 5414..5416,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 247,
            column: 32,
            span: 5416..5417,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 247,
            column: 33,
            span: 5417..5418,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 248,
            column: 7,
            span: 5419..5425,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 248,
            column: 8,
            span: 5425..5426,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 248,
            column: 11,
            span: 5426..5429,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 248,
            column: 17,
            span: 5430..5435,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 248,
            column: 18,
            span: 5435..5436,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 248,
            column: 26,
            span: 5436..5444,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 248,
            column: 27,
            span: 5444..5445,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 248,
            column: 28,
            span: 5444..5446,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 248,
            column: 29,
            span: 5446..5447,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 248,
            column: 31,
            span: 5447..5449,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 248,
            column: 32,
            span: 5449..5450,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 248,
            column: 33,
            span: 5450..5451,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 250,
            column: 9,
            span: 5453..5461,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 250,
            column: 11,
            span: 5462..5463,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 250,
            column: 12,
            span: 5463..5464,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 250,
            column: 13,
            span: 5464..5465,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 251,
            column: 9,
            span: 5468..5474,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 251,
            column: 10,
            span: 5474..5475,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        position: Position {
            line: 251,
            column: 16,
            span: 5475..5481,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 251,
            column: 17,
            span: 5481..5482,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 251,
            column: 18,
            span: 5481..5483,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 251,
            column: 19,
            span: 5483..5484,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 251,
            column: 25,
            span: 5485..5490,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 251,
            column: 26,
            span: 5490..5491,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 251,
            column: 34,
            span: 5491..5499,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 251,
            column: 35,
            span: 5499..5500,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 251,
            column: 36,
            span: 5499..5501,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 251,
            column: 37,
            span: 5501..5502,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 251,
            column: 39,
            span: 5502..5504,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 251,
            column: 40,
            span: 5504..5505,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 251,
            column: 41,
            span: 5505..5506,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 251,
            column: 44,
            span: 5507..5509,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 251,
            column: 46,
            span: 5509..5511,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 251,
            column: 47,
            span: 5511..5512,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 252,
            column: 9,
            span: 5515..5521,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 252,
            column: 10,
            span: 5521..5522,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 252,
            column: 13,
            span: 5522..5525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 252,
            column: 19,
            span: 5526..5531,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 252,
            column: 20,
            span: 5531..5532,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 252,
            column: 28,
            span: 5532..5540,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 252,
            column: 29,
            span: 5540..5541,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 252,
            column: 30,
            span: 5540..5542,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 252,
            column: 31,
            span: 5542..5543,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 252,
            column: 33,
            span: 5543..5545,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 252,
            column: 34,
            span: 5545..5546,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 252,
            column: 35,
            span: 5546..5547,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 253,
            column: 8,
            span: 5550..5555,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 253,
            column: 9,
            span: 5555..5556,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        position: Position {
            line: 253,
            column: 17,
            span: 5556..5564,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 253,
            column: 18,
            span: 5564..5565,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 253,
            column: 19,
            span: 5564..5566,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 253,
            column: 20,
            span: 5566..5567,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 253,
            column: 22,
            span: 5567..5569,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 253,
            column: 23,
            span: 5569..5570,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 253,
            column: 26,
            span: 5570..5573,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 253,
            column: 27,
            span: 5573..5574,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 254,
            column: 9,
            span: 5577..5583,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 254,
            column: 0,
            span: 5583..5586,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 255,
            column: 0,
            span: 5587..5590,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 257,
            column: 9,
            span: 5592..5600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 257,
            column: 11,
            span: 5601..5602,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 257,
            column: 12,
            span: 5602..5603,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 257,
            column: 13,
            span: 5603..5604,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 257,
            column: 14,
            span: 5604..5605,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 257,
            column: 16,
            span: 5606..5607,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 257,
            column: 17,
            span: 5607..5608,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 257,
            column: 24,
            span: 5609..5615,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 257,
            column: 26,
            span: 5616..5617,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 257,
            column: 27,
            span: 5617..5618,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 257,
            column: 29,
            span: 5619..5620,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 257,
            column: 31,
            span: 5620..5622,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 257,
            column: 32,
            span: 5622..5623,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 257,
            column: 34,
            span: 5624..5625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 257,
            column: 36,
            span: 5626..5627,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 257,
            column: 37,
            span: 5627..5628,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 257,
            column: 38,
            span: 5628..5629,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 257,
            column: 0,
            span: 5630..5633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 259,
            column: 7,
            span: 5635..5641,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 259,
            column: 8,
            span: 5641..5642,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 259,
            column: 9,
            span: 5642..5643,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 259,
            column: 10,
            span: 5643..5644,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 259,
            column: 11,
            span: 5643..5645,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 259,
            column: 12,
            span: 5645..5646,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 259,
            column: 14,
            span: 5646..5648,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 259,
            column: 15,
            span: 5648..5649,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 259,
            column: 18,
            span: 5650..5652,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 259,
            column: 21,
            span: 5652..5655,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 259,
            column: 22,
            span: 5655..5656,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 262,
            column: 6,
            span: 5659..5664,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 262,
            column: 7,
            span: 5664..5665,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 262,
            column: 14,
            span: 5665..5672,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 262,
            column: 15,
            span: 5672..5673,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 262,
            column: 18,
            span: 5673..5676,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 262,
            column: 19,
            span: 5676..5677,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 262,
            column: 20,
            span: 5677..5678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 263,
            column: 7,
            span: 5679..5685,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 263,
            column: 8,
            span: 5685..5686,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 263,
            column: 13,
            span: 5686..5691,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 263,
            column: 14,
            span: 5691..5692,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        position: Position {
            line: 263,
            column: 21,
            span: 5692..5699,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 263,
            column: 22,
            span: 5699..5700,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 263,
            column: 23,
            span: 5700..5701,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 263,
            column: 26,
            span: 5702..5704,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 263,
            column: 30,
            span: 5705..5708,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 263,
            column: 31,
            span: 5708..5709,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 268,
            column: 2,
            span: 5753..5754,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 268,
            column: 4,
            span: 5755..5756,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 268,
            column: 0,
            span: 5757..5760,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 269,
            column: 2,
            span: 5761..5762,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 269,
            column: 4,
            span: 5763..5764,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 269,
            column: 6,
            span: 5765..5766,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 269,
            column: 7,
            span: 5766..5767,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 270,
            column: 9,
            span: 5768..5776,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 270,
            column: 11,
            span: 5777..5778,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 270,
            column: 12,
            span: 5778..5779,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 270,
            column: 13,
            span: 5779..5780,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 270,
            column: 14,
            span: 5780..5781,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 270,
            column: 15,
            span: 5781..5782,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 270,
            column: 16,
            span: 5782..5783,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 270,
            column: 18,
            span: 5784..5785,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 270,
            column: 19,
            span: 5785..5786,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 270,
            column: 23,
            span: 5787..5790,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 270,
            column: 24,
            span: 5790..5791,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 270,
            column: 30,
            span: 5792..5797,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 270,
            column: 32,
            span: 5798..5799,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 270,
            column: 34,
            span: 5800..5801,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 270,
            column: 37,
            span: 5801..5804,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 270,
            column: 0,
            span: 5805..5808,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 272,
            column: 6,
            span: 5810..5815,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 272,
            column: 7,
            span: 5815..5816,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 272,
            column: 14,
            span: 5816..5823,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 272,
            column: 15,
            span: 5823..5824,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 272,
            column: 23,
            span: 5824..5832,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 272,
            column: 24,
            span: 5832..5833,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 272,
            column: 25,
            span: 5833..5834,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 272,
            column: 26,
            span: 5834..5835,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 273,
            column: 9,
            span: 5838..5844,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 273,
            column: 10,
            span: 5844..5845,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 273,
            column: 11,
            span: 5845..5846,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 273,
            column: 14,
            span: 5847..5849,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call\"",
        ),
        position: Position {
            line: 273,
            column: 21,
            span: 5850..5856,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 273,
            column: 22,
            span: 5856..5857,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 274,
            column: 11,
            span: 5860..5868,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 274,
            column: 12,
            span: 5868..5869,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XX = 12\"",
        ),
        position: Position {
            line: 274,
            column: 21,
            span: 5869..5878,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 274,
            column: 22,
            span: 5878..5879,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 276,
            column: 9,
            span: 5945..5951,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 276,
            column: 10,
            span: 5951..5952,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 276,
            column: 13,
            span: 5952..5955,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 276,
            column: 19,
            span: 5956..5961,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 276,
            column: 20,
            span: 5961..5962,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        position: Position {
            line: 276,
            column: 30,
            span: 5962..5972,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 276,
            column: 31,
            span: 5972..5973,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a='joao'+1\"",
        ),
        position: Position {
            line: 276,
            column: 43,
            span: 5973..5985,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 276,
            column: 44,
            span: 5985..5986,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 276,
            column: 45,
            span: 5986..5987,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 276,
            column: 46,
            span: 5987..5988,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 277,
            column: 8,
            span: 5991..5996,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 277,
            column: 9,
            span: 5996..5997,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 277,
            column: 16,
            span: 5997..6004,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 277,
            column: 17,
            span: 6004..6005,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 277,
            column: 25,
            span: 6005..6013,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 277,
            column: 26,
            span: 6013..6014,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 277,
            column: 27,
            span: 6014..6015,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 277,
            column: 28,
            span: 6015..6016,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 277,
            column: 30,
            span: 6017..6018,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 277,
            column: 31,
            span: 6018..6019,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 278,
            column: 11,
            span: 6024..6030,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 278,
            column: 12,
            span: 6030..6031,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 278,
            column: 17,
            span: 6031..6036,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 278,
            column: 18,
            span: 6036..6037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 278,
            column: 25,
            span: 6037..6044,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 278,
            column: 26,
            span: 6044..6045,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 278,
            column: 27,
            span: 6044..6046,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 278,
            column: 28,
            span: 6046..6047,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 278,
            column: 32,
            span: 6048..6051,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 278,
            column: 33,
            span: 6051..6052,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 278,
            column: 34,
            span: 6052..6053,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        position: Position {
            line: 278,
            column: 45,
            span: 6053..6064,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 278,
            column: 48,
            span: 6065..6067,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 278,
            column: 50,
            span: 6068..6069,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 278,
            column: 51,
            span: 6069..6070,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 279,
            column: 10,
            span: 6075..6080,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 279,
            column: 12,
            span: 6081..6082,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 279,
            column: 13,
            span: 6082..6083,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 279,
            column: 15,
            span: 6084..6085,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 279,
            column: 16,
            span: 6085..6086,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 279,
            column: 18,
            span: 6087..6088,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 279,
            column: 20,
            span: 6089..6090,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 279,
            column: 26,
            span: 6091..6096,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 279,
            column: 27,
            span: 6096..6097,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        position: Position {
            line: 279,
            column: 34,
            span: 6097..6104,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 279,
            column: 35,
            span: 6104..6105,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 279,
            column: 36,
            span: 6105..6106,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 280,
            column: 11,
            span: 6111..6117,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 280,
            column: 12,
            span: 6117..6118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 280,
            column: 13,
            span: 6118..6119,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 280,
            column: 16,
            span: 6120..6122,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line\"",
        ),
        position: Position {
            line: 280,
            column: 23,
            span: 6123..6129,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 280,
            column: 24,
            span: 6129..6130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 281,
            column: 11,
            span: 6135..6141,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 281,
            column: 12,
            span: 6141..6142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 281,
            column: 13,
            span: 6142..6143,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 281,
            column: 16,
            span: 6144..6146,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'l'",
        ),
        position: Position {
            line: 281,
            column: 20,
            span: 6147..6150,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 281,
            column: 24,
            span: 6151..6154,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 281,
            column: 26,
            span: 6155..6156,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 281,
            column: 29,
            span: 6157..6159,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 281,
            column: 31,
            span: 6159..6161,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 281,
            column: 32,
            span: 6161..6162,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 282,
            column: 10,
            span: 6167..6172,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 282,
            column: 11,
            span: 6172..6173,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 282,
            column: 18,
            span: 6173..6180,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 282,
            column: 19,
            span: 6180..6181,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 282,
            column: 22,
            span: 6181..6184,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 282,
            column: 23,
            span: 6184..6185,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 283,
            column: 11,
            span: 6218..6224,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 283,
            column: 12,
            span: 6224..6225,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 283,
            column: 15,
            span: 6225..6228,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 283,
            column: 17,
            span: 6229..6230,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 283,
            column: 18,
            span: 6230..6231,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 284,
            column: 6,
            span: 6250..6251,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 284,
            column: 8,
            span: 6252..6253,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 284,
            column: 10,
            span: 6254..6255,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 284,
            column: 11,
            span: 6255..6256,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 284,
            column: 12,
            span: 6256..6257,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 285,
            column: 10,
            span: 6262..6267,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 285,
            column: 12,
            span: 6268..6269,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 285,
            column: 14,
            span: 6270..6271,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 285,
            column: 0,
            span: 6271..6273,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 286,
            column: 10,
            span: 6278..6283,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 286,
            column: 12,
            span: 6284..6285,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 286,
            column: 13,
            span: 6285..6286,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 286,
            column: 0,
            span: 6287..6288,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 287,
            column: 10,
            span: 6293..6298,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 287,
            column: 12,
            span: 6298..6300,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 287,
            column: 0,
            span: 6301..6303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 288,
            column: 8,
            span: 6310..6311,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 288,
            column: 9,
            span: 6311..6312,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 288,
            column: 11,
            span: 6313..6314,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 288,
            column: 13,
            span: 6315..6316,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 288,
            column: 19,
            span: 6317..6322,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 288,
            column: 20,
            span: 6322..6323,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 288,
            column: 28,
            span: 6323..6331,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 288,
            column: 29,
            span: 6331..6332,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 288,
            column: 30,
            span: 6331..6333,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 288,
            column: 31,
            span: 6333..6334,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 288,
            column: 33,
            span: 6335..6336,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 288,
            column: 34,
            span: 6336..6337,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 289,
            column: 9,
            span: 6344..6346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 289,
            column: 11,
            span: 6347..6348,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 289,
            column: 14,
            span: 6349..6351,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 289,
            column: 18,
            span: 6352..6355,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 289,
            column: 23,
            span: 6356..6360,
        },
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        position: Position {
            line: 289,
            column: 29,
            span: 6361..6366,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 289,
            column: 0,
            span: 6367..6370,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 290,
            column: 8,
            span: 6377..6378,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 290,
            column: 9,
            span: 6378..6379,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 290,
            column: 10,
            span: 6379..6380,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 290,
            column: 11,
            span: 6380..6381,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 290,
            column: 13,
            span: 6382..6383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 290,
            column: 0,
            span: 6384..6385,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 291,
            column: 8,
            span: 6392..6393,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 291,
            column: 10,
            span: 6394..6395,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 291,
            column: 12,
            span: 6396..6397,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 291,
            column: 14,
            span: 6398..6399,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 291,
            column: 0,
            span: 6399..6401,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 292,
            column: 0,
            span: 6406..6409,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 293,
            column: 6,
            span: 6412..6415,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 293,
            column: 7,
            span: 6415..6416,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 293,
            column: 11,
            span: 6417..6420,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 293,
            column: 12,
            span: 6420..6421,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 294,
            column: 4,
            span: 6422..6425,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 294,
            column: 5,
            span: 6425..6426,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c\"",
        ),
        position: Position {
            line: 294,
            column: 9,
            span: 6427..6430,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 294,
            column: 10,
            span: 6430..6431,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 296,
            column: 2,
            span: 6433..6434,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 296,
            column: 3,
            span: 6434..6435,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 296,
            column: 4,
            span: 6435..6436,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 296,
            column: 5,
            span: 6436..6437,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 296,
            column: 6,
            span: 6436..6438,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 296,
            column: 7,
            span: 6438..6439,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 296,
            column: 9,
            span: 6439..6441,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 296,
            column: 10,
            span: 6441..6442,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 296,
            column: 12,
            span: 6442..6444,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 296,
            column: 13,
            span: 6444..6445,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 296,
            column: 15,
            span: 6445..6447,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 296,
            column: 16,
            span: 6447..6448,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 296,
            column: 18,
            span: 6448..6450,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 296,
            column: 19,
            span: 6450..6451,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 297,
            column: 7,
            span: 6452..6458,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 297,
            column: 8,
            span: 6458..6459,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 297,
            column: 9,
            span: 6459..6460,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 297,
            column: 10,
            span: 6460..6461,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        position: Position {
            line: 297,
            column: 14,
            span: 6461..6465,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 297,
            column: 17,
            span: 6466..6468,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 297,
            column: 19,
            span: 6469..6470,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 297,
            column: 23,
            span: 6471..6474,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 297,
            column: 25,
            span: 6475..6476,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 297,
            column: 26,
            span: 6476..6477,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 297,
            column: 27,
            span: 6477..6478,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 297,
            column: 30,
            span: 6479..6481,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 297,
            column: 32,
            span: 6481..6483,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 297,
            column: 36,
            span: 6484..6487,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 297,
            column: 38,
            span: 6488..6489,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 297,
            column: 39,
            span: 6489..6490,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 297,
            column: 40,
            span: 6490..6491,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 297,
            column: 43,
            span: 6492..6494,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 297,
            column: 45,
            span: 6494..6496,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 297,
            column: 49,
            span: 6497..6500,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 297,
            column: 51,
            span: 6501..6502,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 297,
            column: 52,
            span: 6502..6503,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 297,
            column: 55,
            span: 6503..6506,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 297,
            column: 56,
            span: 6506..6507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 297,
            column: 57,
            span: 6507..6508,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 297,
            column: 60,
            span: 6509..6511,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 297,
            column: 62,
            span: 6511..6513,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 297,
            column: 66,
            span: 6514..6517,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 297,
            column: 68,
            span: 6518..6519,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 297,
            column: 69,
            span: 6519..6520,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 297,
            column: 70,
            span: 6520..6521,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 297,
            column: 73,
            span: 6522..6524,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 297,
            column: 77,
            span: 6525..6528,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 297,
            column: 78,
            span: 6528..6529,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 298,
            column: 7,
            span: 6530..6536,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 298,
            column: 8,
            span: 6536..6537,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        position: Position {
            line: 298,
            column: 10,
            span: 6537..6539,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 298,
            column: 13,
            span: 6540..6542,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 298,
            column: 16,
            span: 6542..6545,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 298,
            column: 17,
            span: 6545..6546,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 299,
            column: 7,
            span: 6547..6553,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 299,
            column: 8,
            span: 6553..6554,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 299,
            column: 13,
            span: 6554..6559,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 299,
            column: 14,
            span: 6559..6560,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        position: Position {
            line: 299,
            column: 21,
            span: 6560..6567,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 299,
            column: 22,
            span: 6567..6568,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 299,
            column: 23,
            span: 6568..6569,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 299,
            column: 26,
            span: 6570..6572,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 299,
            column: 30,
            span: 6573..6576,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 299,
            column: 31,
            span: 6576..6577,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 303,
            column: 6,
            span: 6606..6611,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 303,
            column: 15,
            span: 6612..6620,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalues",
        ),
        position: Position {
            line: 303,
            column: 27,
            span: 6621..6632,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 303,
            column: 28,
            span: 6632..6633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 303,
            column: 29,
            span: 6633..6634,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 303,
            column: 30,
            span: 6634..6635,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 304,
            column: 8,
            span: 6638..6643,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 304,
            column: 10,
            span: 6644..6645,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 304,
            column: 12,
            span: 6646..6647,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 304,
            column: 14,
            span: 6648..6649,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 304,
            column: 15,
            span: 6649..6650,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 305,
            column: 8,
            span: 6653..6658,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 305,
            column: 10,
            span: 6659..6660,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 305,
            column: 12,
            span: 6661..6662,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 305,
            column: 0,
            span: 6662..6664,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 306,
            column: 8,
            span: 6667..6672,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 306,
            column: 13,
            span: 6673..6677,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 306,
            column: 0,
            span: 6678..6680,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 307,
            column: 10,
            span: 6685..6690,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 307,
            column: 15,
            span: 6691..6695,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 307,
            column: 16,
            span: 6695..6696,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "value",
        ),
        position: Position {
            line: 307,
            column: 22,
            span: 6697..6702,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 307,
            column: 24,
            span: 6703..6704,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 307,
            column: 30,
            span: 6705..6710,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 307,
            column: 31,
            span: 6710..6711,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        position: Position {
            line: 307,
            column: 41,
            span: 6711..6721,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 307,
            column: 42,
            span: 6721..6722,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 307,
            column: 43,
            span: 6722..6723,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 307,
            column: 44,
            span: 6723..6724,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 307,
            column: 46,
            span: 6725..6726,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 307,
            column: 47,
            span: 6726..6727,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 308,
            column: 7,
            span: 6732..6734,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 308,
            column: 11,
            span: 6735..6738,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 308,
            column: 16,
            span: 6739..6743,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 308,
            column: 21,
            span: 6744..6748,
        },
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        position: Position {
            line: 308,
            column: 27,
            span: 6749..6754,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 308,
            column: 0,
            span: 6755..6758,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 309,
            column: 11,
            span: 6763..6769,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 309,
            column: 12,
            span: 6769..6770,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 309,
            column: 15,
            span: 6770..6773,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 309,
            column: 17,
            span: 6774..6775,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 309,
            column: 18,
            span: 6775..6776,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 309,
            column: 22,
            span: 6776..6780,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 309,
            column: 23,
            span: 6780..6781,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 309,
            column: 24,
            span: 6781..6782,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 310,
            column: 6,
            span: 6787..6788,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 310,
            column: 7,
            span: 6788..6789,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 310,
            column: 11,
            span: 6789..6793,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 310,
            column: 12,
            span: 6793..6794,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 310,
            column: 14,
            span: 6795..6796,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "value",
        ),
        position: Position {
            line: 310,
            column: 0,
            span: 6797..6802,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 311,
            column: 6,
            span: 6807..6808,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 311,
            column: 8,
            span: 6809..6810,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 311,
            column: 10,
            span: 6811..6812,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 311,
            column: 12,
            span: 6813..6814,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 311,
            column: 0,
            span: 6814..6816,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 312,
            column: 0,
            span: 6819..6822,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 313,
            column: 9,
            span: 6825..6831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 313,
            column: 0,
            span: 6832..6833,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 314,
            column: 0,
            span: 6834..6837,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 316,
            column: 6,
            span: 6839..6844,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 316,
            column: 8,
            span: 6845..6846,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 316,
            column: 9,
            span: 6846..6847,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 316,
            column: 11,
            span: 6848..6849,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 316,
            column: 12,
            span: 6849..6850,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 316,
            column: 14,
            span: 6851..6852,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 316,
            column: 16,
            span: 6853..6854,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 316,
            column: 18,
            span: 6854..6856,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 316,
            column: 19,
            span: 6856..6857,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 316,
            column: 21,
            span: 6857..6859,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 316,
            column: 22,
            span: 6859..6860,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 316,
            column: 0,
            span: 6860..6862,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 317,
            column: 6,
            span: 6863..6868,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 317,
            column: 15,
            span: 6869..6877,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        position: Position {
            line: 317,
            column: 20,
            span: 6878..6882,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 317,
            column: 21,
            span: 6882..6883,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 317,
            column: 22,
            span: 6883..6884,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 317,
            column: 23,
            span: 6884..6885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 317,
            column: 25,
            span: 6886..6887,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 317,
            column: 27,
            span: 6888..6889,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 317,
            column: 29,
            span: 6890..6891,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 317,
            column: 30,
            span: 6891..6892,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 317,
            column: 37,
            span: 6893..6899,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 317,
            column: 39,
            span: 6900..6901,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 317,
            column: 0,
            span: 6902..6905,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 319,
            column: 6,
            span: 6907..6912,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 319,
            column: 15,
            span: 6913..6921,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        position: Position {
            line: 319,
            column: 20,
            span: 6922..6926,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 319,
            column: 21,
            span: 6926..6927,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 319,
            column: 22,
            span: 6927..6928,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 319,
            column: 23,
            span: 6928..6929,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 319,
            column: 25,
            span: 6930..6931,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 319,
            column: 27,
            span: 6932..6933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 319,
            column: 29,
            span: 6934..6935,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 319,
            column: 30,
            span: 6935..6936,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 319,
            column: 37,
            span: 6937..6943,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 319,
            column: 39,
            span: 6944..6945,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 319,
            column: 41,
            span: 6946..6947,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 319,
            column: 43,
            span: 6948..6949,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 319,
            column: 0,
            span: 6950..6953,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 321,
            column: 7,
            span: 6955..6961,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 321,
            column: 8,
            span: 6961..6962,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 321,
            column: 13,
            span: 6962..6967,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 321,
            column: 14,
            span: 6967..6968,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        position: Position {
            line: 321,
            column: 24,
            span: 6968..6978,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 321,
            column: 25,
            span: 6978..6979,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        position: Position {
            line: 321,
            column: 29,
            span: 6979..6983,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 321,
            column: 30,
            span: 6983..6984,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 321,
            column: 32,
            span: 6984..6986,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 321,
            column: 33,
            span: 6986..6987,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 321,
            column: 36,
            span: 6988..6990,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 321,
            column: 40,
            span: 6991..6994,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 321,
            column: 41,
            span: 6994..6995,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 322,
            column: 7,
            span: 6996..7002,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 322,
            column: 8,
            span: 7002..7003,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 322,
            column: 13,
            span: 7003..7008,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 322,
            column: 14,
            span: 7008..7009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        position: Position {
            line: 322,
            column: 24,
            span: 7009..7019,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 322,
            column: 25,
            span: 7019..7020,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        position: Position {
            line: 322,
            column: 29,
            span: 7020..7024,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 322,
            column: 30,
            span: 7024..7025,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 322,
            column: 32,
            span: 7025..7027,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 322,
            column: 33,
            span: 7027..7028,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 322,
            column: 36,
            span: 7029..7031,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 322,
            column: 40,
            span: 7032..7035,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 322,
            column: 41,
            span: 7035..7036,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 323,
            column: 7,
            span: 7037..7043,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 323,
            column: 8,
            span: 7043..7044,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 323,
            column: 13,
            span: 7044..7049,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 323,
            column: 14,
            span: 7049..7050,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setupvalue",
        ),
        position: Position {
            line: 323,
            column: 24,
            span: 7050..7060,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 323,
            column: 25,
            span: 7060..7061,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        position: Position {
            line: 323,
            column: 29,
            span: 7061..7065,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 323,
            column: 30,
            span: 7065..7066,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 323,
            column: 32,
            span: 7066..7068,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 323,
            column: 33,
            span: 7068..7069,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        position: Position {
            line: 323,
            column: 40,
            span: 7070..7076,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 323,
            column: 41,
            span: 7076..7077,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 323,
            column: 44,
            span: 7078..7080,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 323,
            column: 48,
            span: 7081..7084,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 323,
            column: 49,
            span: 7084..7085,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 324,
            column: 6,
            span: 7086..7091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 324,
            column: 8,
            span: 7092..7093,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 324,
            column: 10,
            span: 7094..7095,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalues",
        ),
        position: Position {
            line: 324,
            column: 22,
            span: 7096..7107,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 324,
            column: 23,
            span: 7107..7108,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        position: Position {
            line: 324,
            column: 27,
            span: 7108..7112,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 324,
            column: 28,
            span: 7112..7113,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 325,
            column: 7,
            span: 7114..7120,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 325,
            column: 8,
            span: 7120..7121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 325,
            column: 9,
            span: 7121..7122,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 325,
            column: 10,
            span: 7122..7123,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 325,
            column: 11,
            span: 7123..7124,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 325,
            column: 14,
            span: 7125..7127,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 325,
            column: 18,
            span: 7128..7131,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 325,
            column: 22,
            span: 7132..7135,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 325,
            column: 24,
            span: 7136..7137,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 325,
            column: 25,
            span: 7137..7138,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 325,
            column: 26,
            span: 7138..7139,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 325,
            column: 29,
            span: 7140..7142,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 325,
            column: 31,
            span: 7142..7144,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 325,
            column: 35,
            span: 7145..7148,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 325,
            column: 37,
            span: 7149..7150,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 325,
            column: 38,
            span: 7150..7151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 325,
            column: 39,
            span: 7151..7152,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 325,
            column: 42,
            span: 7153..7155,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 325,
            column: 44,
            span: 7155..7157,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 325,
            column: 45,
            span: 7157..7158,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 326,
            column: 2,
            span: 7159..7160,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 326,
            column: 4,
            span: 7161..7162,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalues",
        ),
        position: Position {
            line: 326,
            column: 16,
            span: 7163..7174,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 326,
            column: 17,
            span: 7174..7175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        position: Position {
            line: 326,
            column: 21,
            span: 7175..7179,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 326,
            column: 22,
            span: 7179..7180,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 327,
            column: 7,
            span: 7181..7187,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 327,
            column: 8,
            span: 7187..7188,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 327,
            column: 9,
            span: 7188..7189,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 327,
            column: 10,
            span: 7189..7190,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 327,
            column: 11,
            span: 7190..7191,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 327,
            column: 14,
            span: 7192..7194,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 327,
            column: 16,
            span: 7194..7196,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 327,
            column: 20,
            span: 7197..7200,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 327,
            column: 22,
            span: 7201..7202,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 327,
            column: 23,
            span: 7202..7203,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 327,
            column: 24,
            span: 7203..7204,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 327,
            column: 27,
            span: 7205..7207,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 327,
            column: 29,
            span: 7207..7209,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 327,
            column: 33,
            span: 7210..7213,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 327,
            column: 35,
            span: 7214..7215,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 327,
            column: 36,
            span: 7215..7216,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 327,
            column: 37,
            span: 7216..7217,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 327,
            column: 40,
            span: 7218..7220,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 327,
            column: 42,
            span: 7220..7222,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 327,
            column: 43,
            span: 7222..7223,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 328,
            column: 7,
            span: 7224..7230,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 328,
            column: 8,
            span: 7230..7231,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 328,
            column: 13,
            span: 7231..7236,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 328,
            column: 14,
            span: 7236..7237,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setupvalue",
        ),
        position: Position {
            line: 328,
            column: 24,
            span: 7237..7247,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 328,
            column: 25,
            span: 7247..7248,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        position: Position {
            line: 328,
            column: 29,
            span: 7248..7252,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 328,
            column: 30,
            span: 7252..7253,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 328,
            column: 32,
            span: 7253..7255,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 328,
            column: 33,
            span: 7255..7256,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        position: Position {
            line: 328,
            column: 40,
            span: 7257..7263,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 328,
            column: 41,
            span: 7263..7264,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 328,
            column: 44,
            span: 7265..7267,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 328,
            column: 48,
            span: 7268..7271,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 328,
            column: 49,
            span: 7271..7272,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 329,
            column: 7,
            span: 7273..7279,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 329,
            column: 8,
            span: 7279..7280,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 329,
            column: 9,
            span: 7280..7281,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 329,
            column: 10,
            span: 7281..7282,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 329,
            column: 16,
            span: 7283..7288,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 329,
            column: 17,
            span: 7288..7289,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        position: Position {
            line: 329,
            column: 27,
            span: 7289..7299,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 329,
            column: 28,
            span: 7299..7300,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        position: Position {
            line: 329,
            column: 32,
            span: 7300..7304,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 329,
            column: 33,
            span: 7304..7305,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 329,
            column: 35,
            span: 7305..7307,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 329,
            column: 36,
            span: 7307..7308,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 329,
            column: 38,
            span: 7309..7310,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 329,
            column: 39,
            span: 7310..7311,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 329,
            column: 40,
            span: 7311..7312,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 329,
            column: 41,
            span: 7311..7313,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 329,
            column: 42,
            span: 7313..7314,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 329,
            column: 45,
            span: 7315..7317,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        position: Position {
            line: 329,
            column: 52,
            span: 7318..7324,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 329,
            column: 53,
            span: 7324..7325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 331,
            column: 7,
            span: 7367..7373,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 331,
            column: 8,
            span: 7373..7374,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 331,
            column: 13,
            span: 7374..7379,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 331,
            column: 14,
            span: 7379..7380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        position: Position {
            line: 331,
            column: 24,
            span: 7380..7390,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 331,
            column: 25,
            span: 7390..7391,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 331,
            column: 27,
            span: 7391..7393,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 331,
            column: 28,
            span: 7393..7394,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 331,
            column: 32,
            span: 7394..7398,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 331,
            column: 33,
            span: 7398..7399,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 331,
            column: 35,
            span: 7399..7401,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 331,
            column: 36,
            span: 7401..7402,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 331,
            column: 39,
            span: 7403..7405,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 331,
            column: 43,
            span: 7406..7409,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 331,
            column: 44,
            span: 7409..7410,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 332,
            column: 7,
            span: 7411..7417,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 332,
            column: 8,
            span: 7417..7418,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 332,
            column: 13,
            span: 7418..7423,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 332,
            column: 14,
            span: 7423..7424,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setupvalue",
        ),
        position: Position {
            line: 332,
            column: 24,
            span: 7424..7434,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 332,
            column: 25,
            span: 7434..7435,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 332,
            column: 27,
            span: 7435..7437,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 332,
            column: 28,
            span: 7437..7438,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 332,
            column: 32,
            span: 7438..7442,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 332,
            column: 33,
            span: 7442..7443,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 332,
            column: 35,
            span: 7443..7445,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 332,
            column: 36,
            span: 7445..7446,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 332,
            column: 39,
            span: 7446..7449,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 332,
            column: 40,
            span: 7449..7450,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 332,
            column: 43,
            span: 7451..7453,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 332,
            column: 47,
            span: 7454..7457,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 332,
            column: 48,
            span: 7457..7458,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 336,
            column: 6,
            span: 7484..7489,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 336,
            column: 8,
            span: 7490..7491,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 336,
            column: 10,
            span: 7492..7493,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 336,
            column: 0,
            span: 7493..7495,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 337,
            column: 6,
            span: 7496..7501,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 337,
            column: 7,
            span: 7501..7502,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 337,
            column: 14,
            span: 7502..7509,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 337,
            column: 15,
            span: 7509..7510,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 337,
            column: 23,
            span: 7510..7518,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 337,
            column: 24,
            span: 7518..7519,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 337,
            column: 25,
            span: 7519..7520,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 337,
            column: 26,
            span: 7520..7521,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 337,
            column: 28,
            span: 7522..7523,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 337,
            column: 30,
            span: 7524..7525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 337,
            column: 32,
            span: 7526..7527,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 337,
            column: 34,
            span: 7528..7529,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 337,
            column: 36,
            span: 7529..7531,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 337,
            column: 40,
            span: 7532..7535,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 337,
            column: 41,
            span: 7535..7536,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 337,
            column: 44,
            span: 7537..7539,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 337,
            column: 45,
            span: 7539..7540,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 337,
            column: 47,
            span: 7540..7542,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 337,
            column: 48,
            span: 7542..7543,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 338,
            column: 2,
            span: 7544..7545,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 338,
            column: 4,
            span: 7546..7547,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 338,
            column: 6,
            span: 7547..7549,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 338,
            column: 7,
            span: 7549..7550,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 339,
            column: 4,
            span: 7551..7554,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 339,
            column: 6,
            span: 7555..7556,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 339,
            column: 8,
            span: 7557..7558,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 339,
            column: 10,
            span: 7558..7560,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 339,
            column: 11,
            span: 7560..7561,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 339,
            column: 16,
            span: 7561..7566,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 339,
            column: 19,
            span: 7567..7569,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 339,
            column: 0,
            span: 7570..7573,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 340,
            column: 7,
            span: 7574..7580,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 340,
            column: 8,
            span: 7580..7581,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 340,
            column: 12,
            span: 7580..7585,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 340,
            column: 14,
            span: 7586..7587,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 340,
            column: 16,
            span: 7588..7589,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 340,
            column: 20,
            span: 7590..7593,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 340,
            column: 22,
            span: 7594..7595,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 340,
            column: 24,
            span: 7596..7597,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1012",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 340,
            column: 29,
            span: 7597..7602,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 340,
            column: 30,
            span: 7602..7603,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 341,
            column: 6,
            span: 7604..7609,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 341,
            column: 7,
            span: 7609..7610,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 341,
            column: 14,
            span: 7610..7617,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 341,
            column: 15,
            span: 7617..7618,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 341,
            column: 23,
            span: 7618..7626,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 341,
            column: 24,
            span: 7626..7627,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 341,
            column: 25,
            span: 7627..7628,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 341,
            column: 26,
            span: 7628..7629,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 341,
            column: 28,
            span: 7630..7631,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 341,
            column: 30,
            span: 7632..7633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 341,
            column: 32,
            span: 7634..7635,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 341,
            column: 34,
            span: 7636..7637,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 341,
            column: 36,
            span: 7637..7639,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 341,
            column: 40,
            span: 7640..7643,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 341,
            column: 41,
            span: 7643..7644,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 341,
            column: 44,
            span: 7645..7647,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 341,
            column: 45,
            span: 7647..7648,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 341,
            column: 47,
            span: 7648..7650,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 341,
            column: 48,
            span: 7650..7651,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 342,
            column: 2,
            span: 7652..7653,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 342,
            column: 4,
            span: 7654..7655,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 342,
            column: 6,
            span: 7655..7657,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 342,
            column: 7,
            span: 7657..7658,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 343,
            column: 4,
            span: 7659..7662,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 343,
            column: 6,
            span: 7663..7664,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 343,
            column: 8,
            span: 7665..7666,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 343,
            column: 10,
            span: 7666..7668,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 343,
            column: 11,
            span: 7668..7669,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 343,
            column: 16,
            span: 7669..7674,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 343,
            column: 19,
            span: 7675..7677,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 343,
            column: 0,
            span: 7678..7681,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 344,
            column: 7,
            span: 7682..7688,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 344,
            column: 8,
            span: 7688..7689,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "250",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 344,
            column: 11,
            span: 7688..7692,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 344,
            column: 13,
            span: 7693..7694,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 344,
            column: 15,
            span: 7695..7696,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 344,
            column: 19,
            span: 7697..7700,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 344,
            column: 21,
            span: 7701..7702,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 344,
            column: 23,
            span: 7703..7704,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 344,
            column: 27,
            span: 7704..7708,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 344,
            column: 28,
            span: 7708..7709,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 345,
            column: 6,
            span: 7710..7715,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 345,
            column: 8,
            span: 7716..7717,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 345,
            column: 9,
            span: 7717..7718,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 345,
            column: 11,
            span: 7719..7720,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 345,
            column: 12,
            span: 7720..7721,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 345,
            column: 14,
            span: 7722..7723,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 345,
            column: 16,
            span: 7724..7725,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 345,
            column: 22,
            span: 7726..7731,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 345,
            column: 23,
            span: 7731..7732,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        position: Position {
            line: 345,
            column: 30,
            span: 7732..7739,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 345,
            column: 31,
            span: 7739..7740,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 345,
            column: 32,
            span: 7740..7741,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 346,
            column: 7,
            span: 7742..7748,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 346,
            column: 8,
            span: 7748..7749,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 346,
            column: 9,
            span: 7749..7750,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 346,
            column: 12,
            span: 7751..7753,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 346,
            column: 15,
            span: 7754..7756,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 346,
            column: 19,
            span: 7757..7760,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 346,
            column: 21,
            span: 7761..7762,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 346,
            column: 24,
            span: 7763..7765,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 346,
            column: 26,
            span: 7765..7767,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 346,
            column: 27,
            span: 7767..7768,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 347,
            column: 6,
            span: 7769..7774,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 347,
            column: 7,
            span: 7774..7775,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 347,
            column: 14,
            span: 7775..7782,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 347,
            column: 15,
            span: 7782..7783,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 347,
            column: 23,
            span: 7783..7791,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 347,
            column: 24,
            span: 7791..7792,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 347,
            column: 25,
            span: 7792..7793,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 347,
            column: 26,
            span: 7793..7794,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 347,
            column: 28,
            span: 7795..7796,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 347,
            column: 30,
            span: 7797..7798,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 347,
            column: 32,
            span: 7799..7800,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 347,
            column: 34,
            span: 7801..7802,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 347,
            column: 36,
            span: 7802..7804,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 347,
            column: 40,
            span: 7805..7808,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 347,
            column: 41,
            span: 7808..7809,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 347,
            column: 44,
            span: 7810..7812,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 347,
            column: 45,
            span: 7812..7813,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 347,
            column: 50,
            span: 7813..7818,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 347,
            column: 51,
            span: 7818..7819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 348,
            column: 2,
            span: 7820..7821,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 348,
            column: 4,
            span: 7822..7823,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 348,
            column: 6,
            span: 7823..7825,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 348,
            column: 7,
            span: 7825..7826,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 349,
            column: 4,
            span: 7827..7830,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 349,
            column: 6,
            span: 7831..7832,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 349,
            column: 8,
            span: 7833..7834,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 349,
            column: 10,
            span: 7834..7836,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 349,
            column: 11,
            span: 7836..7837,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 349,
            column: 16,
            span: 7837..7842,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 349,
            column: 19,
            span: 7843..7845,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 349,
            column: 0,
            span: 7846..7849,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 350,
            column: 7,
            span: 7850..7856,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 350,
            column: 8,
            span: 7856..7857,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 350,
            column: 9,
            span: 7857..7858,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 350,
            column: 12,
            span: 7859..7861,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 350,
            column: 14,
            span: 7861..7863,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 350,
            column: 15,
            span: 7863..7864,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 351,
            column: 6,
            span: 7865..7870,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 351,
            column: 7,
            span: 7870..7871,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 351,
            column: 14,
            span: 7871..7878,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 351,
            column: 15,
            span: 7878..7879,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 351,
            column: 20,
            span: 7879..7884,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 351,
            column: 21,
            span: 7884..7885,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 351,
            column: 24,
            span: 7886..7888,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 351,
            column: 25,
            span: 7888..7889,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 351,
            column: 27,
            span: 7889..7891,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 351,
            column: 29,
            span: 7892..7893,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 351,
            column: 32,
            span: 7893..7896,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 351,
            column: 34,
            span: 7897..7898,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 351,
            column: 36,
            span: 7898..7900,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 351,
            column: 37,
            span: 7900..7901,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 352,
            column: 6,
            span: 7922..7927,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 352,
            column: 8,
            span: 7928..7929,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 352,
            column: 9,
            span: 7929..7930,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 352,
            column: 11,
            span: 7931..7932,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 352,
            column: 12,
            span: 7932..7933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 352,
            column: 14,
            span: 7934..7935,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 352,
            column: 16,
            span: 7936..7937,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 352,
            column: 22,
            span: 7938..7943,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 352,
            column: 23,
            span: 7943..7944,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        position: Position {
            line: 352,
            column: 30,
            span: 7944..7951,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 352,
            column: 31,
            span: 7951..7952,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 352,
            column: 32,
            span: 7952..7953,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 353,
            column: 7,
            span: 7954..7960,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 353,
            column: 8,
            span: 7960..7961,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 353,
            column: 9,
            span: 7961..7962,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 353,
            column: 10,
            span: 7962..7963,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 353,
            column: 16,
            span: 7964..7969,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 353,
            column: 17,
            span: 7969..7970,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        position: Position {
            line: 353,
            column: 24,
            span: 7970..7977,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 353,
            column: 25,
            span: 7977..7978,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 353,
            column: 26,
            span: 7978..7979,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 353,
            column: 28,
            span: 7980..7981,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 353,
            column: 29,
            span: 7981..7982,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 353,
            column: 30,
            span: 7982..7983,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 353,
            column: 31,
            span: 7982..7984,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 353,
            column: 32,
            span: 7984..7985,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 353,
            column: 35,
            span: 7986..7988,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 353,
            column: 37,
            span: 7988..7990,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 353,
            column: 39,
            span: 7991..7992,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 353,
            column: 42,
            span: 7992..7995,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 353,
            column: 44,
            span: 7996..7997,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 353,
            column: 46,
            span: 7997..7999,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 353,
            column: 47,
            span: 7999..8000,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 354,
            column: 6,
            span: 8001..8006,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 354,
            column: 7,
            span: 8006..8007,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 354,
            column: 14,
            span: 8007..8014,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 354,
            column: 15,
            span: 8014..8015,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 354,
            column: 16,
            span: 8015..8016,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 358,
            column: 6,
            span: 8043..8048,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 358,
            column: 15,
            span: 8049..8057,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 358,
            column: 17,
            span: 8058..8059,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 358,
            column: 18,
            span: 8059..8060,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 358,
            column: 19,
            span: 8060..8061,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 358,
            column: 20,
            span: 8061..8062,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 359,
            column: 5,
            span: 8065..8067,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 359,
            column: 7,
            span: 8068..8069,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 359,
            column: 0,
            span: 8070..8074,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 360,
            column: 11,
            span: 8079..8085,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 360,
            column: 12,
            span: 8085..8086,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 360,
            column: 17,
            span: 8086..8091,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 360,
            column: 18,
            span: 8091..8092,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 360,
            column: 25,
            span: 8092..8099,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 360,
            column: 26,
            span: 8099..8100,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 360,
            column: 27,
            span: 8099..8101,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 360,
            column: 28,
            span: 8101..8102,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"S\"",
        ),
        position: Position {
            line: 360,
            column: 32,
            span: 8103..8106,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 360,
            column: 33,
            span: 8106..8107,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 360,
            column: 34,
            span: 8107..8108,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        position: Position {
            line: 360,
            column: 38,
            span: 8108..8112,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 360,
            column: 41,
            span: 8113..8115,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Lua\"",
        ),
        position: Position {
            line: 360,
            column: 47,
            span: 8116..8121,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 360,
            column: 48,
            span: 8121..8122,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 361,
            column: 10,
            span: 8127..8132,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tail",
        ),
        position: Position {
            line: 361,
            column: 15,
            span: 8133..8137,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 361,
            column: 17,
            span: 8138..8139,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 361,
            column: 23,
            span: 8140..8145,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 361,
            column: 24,
            span: 8145..8146,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 361,
            column: 31,
            span: 8146..8153,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 361,
            column: 32,
            span: 8153..8154,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 361,
            column: 33,
            span: 8153..8155,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 361,
            column: 34,
            span: 8155..8156,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 362,
            column: 11,
            span: 8161..8167,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 362,
            column: 12,
            span: 8167..8168,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 362,
            column: 15,
            span: 8168..8171,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 362,
            column: 21,
            span: 8172..8177,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 362,
            column: 22,
            span: 8177..8178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getfenv",
        ),
        position: Position {
            line: 362,
            column: 29,
            span: 8178..8185,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 362,
            column: 30,
            span: 8185..8186,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 362,
            column: 32,
            span: 8186..8188,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 362,
            column: 33,
            span: 8188..8189,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 362,
            column: 34,
            span: 8189..8190,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 363,
            column: 11,
            span: 8195..8201,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 363,
            column: 12,
            span: 8201..8202,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tail",
        ),
        position: Position {
            line: 363,
            column: 16,
            span: 8202..8206,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 363,
            column: 17,
            span: 8206..8207,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        position: Position {
            line: 363,
            column: 21,
            span: 8207..8211,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 363,
            column: 24,
            span: 8212..8214,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tail\"",
        ),
        position: Position {
            line: 363,
            column: 31,
            span: 8215..8221,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 363,
            column: 35,
            span: 8222..8225,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tail",
        ),
        position: Position {
            line: 363,
            column: 40,
            span: 8226..8230,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 363,
            column: 41,
            span: 8230..8231,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        position: Position {
            line: 363,
            column: 50,
            span: 8231..8240,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 363,
            column: 53,
            span: 8241..8243,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(tail call)\"",
        ),
        position: Position {
            line: 363,
            column: 67,
            span: 8244..8257,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 363,
            column: 0,
            span: 8258..8261,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tail",
        ),
        position: Position {
            line: 364,
            column: 11,
            span: 8268..8272,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 364,
            column: 12,
            span: 8272..8273,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "linedefined",
        ),
        position: Position {
            line: 364,
            column: 23,
            span: 8273..8284,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 364,
            column: 26,
            span: 8285..8287,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 364,
            column: 28,
            span: 8288..8289,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 364,
            column: 29,
            span: 8288..8290,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 364,
            column: 33,
            span: 8291..8294,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tail",
        ),
        position: Position {
            line: 364,
            column: 38,
            span: 8295..8299,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 364,
            column: 39,
            span: 8299..8300,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        position: Position {
            line: 364,
            column: 43,
            span: 8300..8304,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 364,
            column: 46,
            span: 8305..8307,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 364,
            column: 50,
            span: 8308..8311,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 364,
            column: 51,
            span: 8311..8312,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 365,
            column: 11,
            span: 8317..8323,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 365,
            column: 12,
            span: 8323..8324,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 365,
            column: 17,
            span: 8324..8329,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 365,
            column: 18,
            span: 8329..8330,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 365,
            column: 25,
            span: 8330..8337,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 365,
            column: 26,
            span: 8337..8338,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 365,
            column: 27,
            span: 8337..8339,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 365,
            column: 28,
            span: 8339..8340,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        position: Position {
            line: 365,
            column: 32,
            span: 8341..8344,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 365,
            column: 33,
            span: 8344..8345,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 365,
            column: 34,
            span: 8345..8346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        position: Position {
            line: 365,
            column: 38,
            span: 8346..8350,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 365,
            column: 41,
            span: 8351..8353,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g1",
        ),
        position: Position {
            line: 365,
            column: 44,
            span: 8354..8356,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 365,
            column: 45,
            span: 8356..8357,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 366,
            column: 11,
            span: 8362..8368,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 366,
            column: 12,
            span: 8368..8369,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getfenv",
        ),
        position: Position {
            line: 366,
            column: 19,
            span: 8369..8376,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 366,
            column: 20,
            span: 8376..8377,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 366,
            column: 21,
            span: 8376..8378,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 366,
            column: 22,
            span: 8378..8379,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 366,
            column: 23,
            span: 8379..8380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 367,
            column: 11,
            span: 8385..8391,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 367,
            column: 12,
            span: 8391..8392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 367,
            column: 17,
            span: 8392..8397,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 367,
            column: 18,
            span: 8397..8398,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 367,
            column: 25,
            span: 8398..8405,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 367,
            column: 26,
            span: 8405..8406,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 367,
            column: 27,
            span: 8405..8407,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 367,
            column: 28,
            span: 8407..8408,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"S\"",
        ),
        position: Position {
            line: 367,
            column: 32,
            span: 8409..8412,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 367,
            column: 33,
            span: 8412..8413,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 367,
            column: 34,
            span: 8413..8414,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        position: Position {
            line: 367,
            column: 38,
            span: 8414..8418,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 367,
            column: 41,
            span: 8419..8421,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tail\"",
        ),
        position: Position {
            line: 367,
            column: 48,
            span: 8422..8428,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 367,
            column: 49,
            span: 8428..8429,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 368,
            column: 11,
            span: 8434..8440,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 368,
            column: 12,
            span: 8440..8441,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 368,
            column: 15,
            span: 8441..8444,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 368,
            column: 21,
            span: 8445..8450,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 368,
            column: 22,
            span: 8450..8451,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getfenv",
        ),
        position: Position {
            line: 368,
            column: 29,
            span: 8451..8458,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 368,
            column: 30,
            span: 8458..8459,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 368,
            column: 32,
            span: 8459..8461,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 368,
            column: 33,
            span: 8461..8462,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 368,
            column: 34,
            span: 8462..8463,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 369,
            column: 11,
            span: 8468..8474,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 369,
            column: 12,
            span: 8474..8475,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 369,
            column: 17,
            span: 8475..8480,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 369,
            column: 18,
            span: 8480..8481,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 369,
            column: 25,
            span: 8481..8488,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 369,
            column: 26,
            span: 8488..8489,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 369,
            column: 27,
            span: 8488..8490,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 369,
            column: 28,
            span: 8490..8491,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"S\"",
        ),
        position: Position {
            line: 369,
            column: 32,
            span: 8492..8495,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 369,
            column: 33,
            span: 8495..8496,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 369,
            column: 34,
            span: 8496..8497,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        position: Position {
            line: 369,
            column: 38,
            span: 8497..8501,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 369,
            column: 41,
            span: 8502..8504,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"main\"",
        ),
        position: Position {
            line: 369,
            column: 48,
            span: 8505..8511,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 369,
            column: 49,
            span: 8511..8512,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 370,
            column: 11,
            span: 8517..8523,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 370,
            column: 12,
            span: 8523..8524,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getfenv",
        ),
        position: Position {
            line: 370,
            column: 19,
            span: 8524..8531,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 370,
            column: 20,
            span: 8531..8532,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 370,
            column: 21,
            span: 8531..8533,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 370,
            column: 22,
            span: 8533..8534,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 370,
            column: 23,
            span: 8534..8535,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 371,
            column: 10,
            span: 8540..8545,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        position: Position {
            line: 371,
            column: 14,
            span: 8546..8549,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 372,
            column: 0,
            span: 8552..8555,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 373,
            column: 0,
            span: 8556..8559,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 375,
            column: 9,
            span: 8561..8569,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 375,
            column: 11,
            span: 8570..8571,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 375,
            column: 12,
            span: 8571..8572,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 375,
            column: 13,
            span: 8572..8573,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 375,
            column: 14,
            span: 8573..8574,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 375,
            column: 21,
            span: 8575..8581,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 375,
            column: 23,
            span: 8582..8583,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 375,
            column: 24,
            span: 8583..8584,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 375,
            column: 25,
            span: 8584..8585,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 375,
            column: 26,
            span: 8585..8586,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 375,
            column: 0,
            span: 8587..8590,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 377,
            column: 9,
            span: 8592..8600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g1",
        ),
        position: Position {
            line: 377,
            column: 12,
            span: 8601..8603,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 377,
            column: 13,
            span: 8603..8604,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 377,
            column: 14,
            span: 8604..8605,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 377,
            column: 15,
            span: 8605..8606,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 377,
            column: 17,
            span: 8607..8608,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 377,
            column: 18,
            span: 8608..8609,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 377,
            column: 19,
            span: 8609..8610,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 377,
            column: 20,
            span: 8610..8611,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 377,
            column: 0,
            span: 8612..8615,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 379,
            column: 6,
            span: 8617..8622,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 379,
            column: 15,
            span: 8623..8631,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        position: Position {
            line: 379,
            column: 17,
            span: 8632..8633,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 379,
            column: 18,
            span: 8633..8634,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 379,
            column: 19,
            span: 8634..8635,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 379,
            column: 20,
            span: 8635..8636,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 379,
            column: 26,
            span: 8637..8642,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 379,
            column: 28,
            span: 8643..8644,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 379,
            column: 30,
            span: 8645..8646,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g1",
        ),
        position: Position {
            line: 379,
            column: 33,
            span: 8647..8649,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 379,
            column: 34,
            span: 8649..8650,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 379,
            column: 41,
            span: 8651..8657,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 379,
            column: 43,
            span: 8658..8659,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 379,
            column: 44,
            span: 8659..8660,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 379,
            column: 45,
            span: 8660..8661,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 379,
            column: 46,
            span: 8661..8662,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 379,
            column: 0,
            span: 8663..8666,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        position: Position {
            line: 381,
            column: 2,
            span: 8668..8669,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 381,
            column: 3,
            span: 8669..8670,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 381,
            column: 7,
            span: 8670..8674,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 381,
            column: 8,
            span: 8674..8675,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 383,
            column: 6,
            span: 8677..8682,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 383,
            column: 8,
            span: 8683..8684,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 383,
            column: 10,
            span: 8685..8686,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 383,
            column: 12,
            span: 8687..8688,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 383,
            column: 13,
            span: 8688..8689,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 384,
            column: 6,
            span: 8690..8695,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 384,
            column: 7,
            span: 8695..8696,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 384,
            column: 14,
            span: 8696..8703,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 384,
            column: 15,
            span: 8703..8704,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 384,
            column: 23,
            span: 8704..8712,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 384,
            column: 24,
            span: 8712..8713,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 384,
            column: 25,
            span: 8713..8714,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 384,
            column: 26,
            span: 8714..8715,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 384,
            column: 32,
            span: 8716..8721,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 384,
            column: 33,
            span: 8721..8722,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 384,
            column: 39,
            span: 8722..8728,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 384,
            column: 40,
            span: 8728..8729,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 384,
            column: 41,
            span: 8729..8730,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 384,
            column: 42,
            span: 8730..8731,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 384,
            column: 44,
            span: 8732..8733,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 384,
            column: 45,
            span: 8733..8734,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 384,
            column: 49,
            span: 8735..8738,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 384,
            column: 50,
            span: 8738..8739,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cr\"",
        ),
        position: Position {
            line: 384,
            column: 55,
            span: 8740..8744,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 384,
            column: 56,
            span: 8744..8745,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        position: Position {
            line: 385,
            column: 2,
            span: 8746..8747,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 385,
            column: 3,
            span: 8747..8748,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 385,
            column: 8,
            span: 8748..8753,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 385,
            column: 9,
            span: 8753..8754,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 386,
            column: 6,
            span: 8755..8760,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 386,
            column: 7,
            span: 8760..8761,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 386,
            column: 14,
            span: 8761..8768,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 386,
            column: 15,
            span: 8768..8769,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 386,
            column: 16,
            span: 8769..8770,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 387,
            column: 6,
            span: 8771..8776,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 387,
            column: 10,
            span: 8777..8780,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 387,
            column: 12,
            span: 8781..8782,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 387,
            column: 14,
            span: 8783..8784,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return\"",
        ),
        position: Position {
            line: 387,
            column: 23,
            span: 8785..8793,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 387,
            column: 24,
            span: 8793..8794,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call\"",
        ),
        position: Position {
            line: 388,
            column: 9,
            span: 8828..8834,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 388,
            column: 10,
            span: 8834..8835,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call\"",
        ),
        position: Position {
            line: 388,
            column: 17,
            span: 8836..8842,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 388,
            column: 18,
            span: 8842..8843,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call\"",
        ),
        position: Position {
            line: 388,
            column: 25,
            span: 8844..8850,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 388,
            column: 26,
            span: 8850..8851,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call\"",
        ),
        position: Position {
            line: 388,
            column: 33,
            span: 8852..8858,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 388,
            column: 34,
            span: 8858..8859,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return\"",
        ),
        position: Position {
            line: 389,
            column: 11,
            span: 8862..8870,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 389,
            column: 12,
            span: 8870..8871,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tail return\"",
        ),
        position: Position {
            line: 389,
            column: 26,
            span: 8872..8885,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 389,
            column: 27,
            span: 8885..8886,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return\"",
        ),
        position: Position {
            line: 389,
            column: 36,
            span: 8887..8895,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 389,
            column: 37,
            span: 8895..8896,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tail return\"",
        ),
        position: Position {
            line: 389,
            column: 51,
            span: 8897..8910,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 389,
            column: 52,
            span: 8910..8911,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call\"",
        ),
        position: Position {
            line: 390,
            column: 9,
            span: 8914..8920,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 390,
            column: 10,
            span: 8920..8921,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 391,
            column: 2,
            span: 8948..8949,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 392,
            column: 4,
            span: 8950..8953,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 392,
            column: 6,
            span: 8954..8955,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 392,
            column: 7,
            span: 8955..8956,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 392,
            column: 9,
            span: 8957..8958,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 392,
            column: 12,
            span: 8959..8961,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ipairs",
        ),
        position: Position {
            line: 392,
            column: 19,
            span: 8962..8968,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 392,
            column: 20,
            span: 8968..8969,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 392,
            column: 23,
            span: 8969..8972,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 392,
            column: 24,
            span: 8972..8973,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 392,
            column: 27,
            span: 8974..8976,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 392,
            column: 34,
            span: 8977..8983,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 392,
            column: 35,
            span: 8983..8984,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 392,
            column: 36,
            span: 8984..8985,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 392,
            column: 39,
            span: 8986..8988,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 392,
            column: 45,
            span: 8989..8994,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 392,
            column: 46,
            span: 8994..8995,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 392,
            column: 52,
            span: 8995..9001,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 392,
            column: 53,
            span: 9001..9002,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 392,
            column: 54,
            span: 9002..9003,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 392,
            column: 55,
            span: 9003..9004,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 392,
            column: 57,
            span: 9004..9006,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 392,
            column: 58,
            span: 9006..9007,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 392,
            column: 59,
            span: 9007..9008,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 392,
            column: 0,
            span: 9009..9012,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 395,
            column: 4,
            span: 9015..9018,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 395,
            column: 6,
            span: 9019..9020,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 395,
            column: 0,
            span: 9020..9026,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 396,
            column: 6,
            span: 9027..9032,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 396,
            column: 15,
            span: 9033..9041,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 396,
            column: 19,
            span: 9042..9045,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 396,
            column: 20,
            span: 9045..9046,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 396,
            column: 21,
            span: 9046..9047,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 396,
            column: 22,
            span: 9047..9048,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 397,
            column: 5,
            span: 9051..9053,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 397,
            column: 7,
            span: 9054..9055,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 397,
            column: 10,
            span: 9056..9058,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 397,
            column: 12,
            span: 9058..9060,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 397,
            column: 0,
            span: 9061..9065,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 398,
            column: 11,
            span: 9070..9076,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 398,
            column: 12,
            span: 9076..9077,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 398,
            column: 17,
            span: 9077..9082,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 398,
            column: 18,
            span: 9082..9083,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 398,
            column: 25,
            span: 9083..9090,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 398,
            column: 26,
            span: 9090..9091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 398,
            column: 29,
            span: 9091..9094,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 398,
            column: 31,
            span: 9095..9096,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 398,
            column: 33,
            span: 9096..9098,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 398,
            column: 34,
            span: 9098..9099,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 398,
            column: 35,
            span: 9099..9100,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        position: Position {
            line: 398,
            column: 39,
            span: 9100..9104,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 398,
            column: 42,
            span: 9105..9107,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"main\"",
        ),
        position: Position {
            line: 398,
            column: 49,
            span: 9108..9114,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 398,
            column: 50,
            span: 9114..9115,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 399,
            column: 8,
            span: 9120..9123,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 399,
            column: 10,
            span: 9124..9125,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 399,
            column: 12,
            span: 9126..9127,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 399,
            column: 14,
            span: 9127..9129,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 399,
            column: 15,
            span: 9129..9130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 399,
            column: 19,
            span: 9131..9134,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 399,
            column: 22,
            span: 9135..9137,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 399,
            column: 29,
            span: 9138..9144,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 399,
            column: 30,
            span: 9144..9145,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 399,
            column: 35,
            span: 9145..9150,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 399,
            column: 36,
            span: 9150..9151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 399,
            column: 43,
            span: 9151..9158,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 399,
            column: 44,
            span: 9158..9159,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 399,
            column: 45,
            span: 9159..9160,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 399,
            column: 46,
            span: 9160..9161,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"S\"",
        ),
        position: Position {
            line: 399,
            column: 50,
            span: 9162..9165,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 399,
            column: 51,
            span: 9165..9166,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 399,
            column: 52,
            span: 9166..9167,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        position: Position {
            line: 399,
            column: 56,
            span: 9167..9171,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 399,
            column: 59,
            span: 9172..9174,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tail\"",
        ),
        position: Position {
            line: 399,
            column: 66,
            span: 9175..9181,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 399,
            column: 67,
            span: 9181..9182,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 399,
            column: 0,
            span: 9183..9186,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 400,
            column: 7,
            span: 9189..9193,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 400,
            column: 14,
            span: 9194..9200,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 400,
            column: 18,
            span: 9201..9204,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 400,
            column: 19,
            span: 9204..9205,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 400,
            column: 20,
            span: 9205..9206,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 400,
            column: 22,
            span: 9207..9208,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 400,
            column: 24,
            span: 9208..9210,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 400,
            column: 25,
            span: 9210..9211,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 401,
            column: 0,
            span: 9214..9217,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 402,
            column: 0,
            span: 9218..9221,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 404,
            column: 4,
            span: 9223..9226,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 404,
            column: 5,
            span: 9226..9227,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 404,
            column: 8,
            span: 9227..9230,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 404,
            column: 9,
            span: 9230..9231,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 407,
            column: 6,
            span: 9234..9239,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        position: Position {
            line: 407,
            column: 10,
            span: 9240..9243,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 412,
            column: 7,
            span: 9268..9274,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 412,
            column: 8,
            span: 9274..9275,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 412,
            column: 13,
            span: 9275..9280,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 412,
            column: 14,
            span: 9280..9281,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        position: Position {
            line: 412,
            column: 23,
            span: 9281..9290,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 412,
            column: 24,
            span: 9290..9291,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 412,
            column: 29,
            span: 9291..9296,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 412,
            column: 30,
            span: 9296..9297,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 412,
            column: 33,
            span: 9298..9300,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 412,
            column: 39,
            span: 9301..9306,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 412,
            column: 40,
            span: 9306..9307,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 413,
            column: 7,
            span: 9308..9314,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 413,
            column: 8,
            span: 9314..9315,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 413,
            column: 13,
            span: 9315..9320,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 413,
            column: 14,
            span: 9320..9321,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        position: Position {
            line: 413,
            column: 23,
            span: 9321..9330,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 413,
            column: 24,
            span: 9330..9331,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 413,
            column: 29,
            span: 9331..9336,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 413,
            column: 30,
            span: 9336..9337,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 413,
            column: 32,
            span: 9337..9339,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 413,
            column: 33,
            span: 9339..9340,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 413,
            column: 36,
            span: 9341..9343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 413,
            column: 42,
            span: 9344..9349,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 413,
            column: 43,
            span: 9349..9350,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 414,
            column: 7,
            span: 9351..9357,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 414,
            column: 8,
            span: 9357..9358,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 414,
            column: 14,
            span: 9358..9364,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 414,
            column: 15,
            span: 9364..9365,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 414,
            column: 19,
            span: 9365..9369,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 414,
            column: 20,
            span: 9369..9370,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 414,
            column: 25,
            span: 9370..9375,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 414,
            column: 26,
            span: 9375..9376,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        position: Position {
            line: 414,
            column: 35,
            span: 9376..9385,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 414,
            column: 36,
            span: 9385..9386,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        position: Position {
            line: 414,
            column: 40,
            span: 9386..9390,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 414,
            column: 41,
            span: 9390..9391,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 414,
            column: 43,
            span: 9391..9393,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 414,
            column: 44,
            span: 9393..9394,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 414,
            column: 45,
            span: 9394..9395,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^hi\\n\"",
        ),
        position: Position {
            line: 414,
            column: 53,
            span: 9396..9403,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 414,
            column: 54,
            span: 9403..9404,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 414,
            column: 55,
            span: 9404..9405,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 415,
            column: 7,
            span: 9406..9412,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 415,
            column: 8,
            span: 9412..9413,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 415,
            column: 14,
            span: 9413..9419,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 415,
            column: 15,
            span: 9419..9420,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 415,
            column: 19,
            span: 9420..9424,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 415,
            column: 20,
            span: 9424..9425,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 415,
            column: 25,
            span: 9425..9430,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 415,
            column: 26,
            span: 9430..9431,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        position: Position {
            line: 415,
            column: 35,
            span: 9431..9440,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 415,
            column: 36,
            span: 9440..9441,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        position: Position {
            line: 415,
            column: 40,
            span: 9441..9445,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 415,
            column: 41,
            span: 9445..9446,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 415,
            column: 42,
            span: 9446..9447,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^hi\\n\"",
        ),
        position: Position {
            line: 415,
            column: 50,
            span: 9448..9455,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 415,
            column: 51,
            span: 9455..9456,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 415,
            column: 52,
            span: 9456..9457,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 416,
            column: 7,
            span: 9458..9464,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 416,
            column: 8,
            span: 9464..9465,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 416,
            column: 11,
            span: 9465..9468,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 416,
            column: 18,
            span: 9469..9475,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 416,
            column: 19,
            span: 9475..9476,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 416,
            column: 23,
            span: 9476..9480,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 416,
            column: 24,
            span: 9480..9481,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 416,
            column: 29,
            span: 9481..9486,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 416,
            column: 30,
            span: 9486..9487,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        position: Position {
            line: 416,
            column: 39,
            span: 9487..9496,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 416,
            column: 40,
            span: 9496..9497,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        position: Position {
            line: 416,
            column: 44,
            span: 9497..9501,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 416,
            column: 45,
            span: 9501..9502,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 416,
            column: 46,
            span: 9502..9503,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'traceback'\"",
        ),
        position: Position {
            line: 416,
            column: 60,
            span: 9504..9517,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 416,
            column: 61,
            span: 9517..9518,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 416,
            column: 62,
            span: 9518..9519,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 417,
            column: 7,
            span: 9520..9526,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 417,
            column: 8,
            span: 9526..9527,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 417,
            column: 14,
            span: 9527..9533,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 417,
            column: 15,
            span: 9533..9534,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 417,
            column: 19,
            span: 9534..9538,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 417,
            column: 20,
            span: 9538..9539,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 417,
            column: 25,
            span: 9539..9544,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 417,
            column: 26,
            span: 9544..9545,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        position: Position {
            line: 417,
            column: 35,
            span: 9545..9554,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 417,
            column: 36,
            span: 9554..9555,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        position: Position {
            line: 417,
            column: 40,
            span: 9555..9559,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 417,
            column: 41,
            span: 9559..9560,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 417,
            column: 43,
            span: 9560..9562,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 417,
            column: 44,
            span: 9562..9563,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 417,
            column: 45,
            span: 9563..9564,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'traceback'\"",
        ),
        position: Position {
            line: 417,
            column: 59,
            span: 9565..9578,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 417,
            column: 60,
            span: 9578..9579,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 417,
            column: 61,
            span: 9579..9580,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 418,
            column: 7,
            span: 9581..9587,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 418,
            column: 8,
            span: 9587..9588,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 418,
            column: 14,
            span: 9588..9594,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 418,
            column: 15,
            span: 9594..9595,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 418,
            column: 19,
            span: 9595..9599,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 418,
            column: 20,
            span: 9599..9600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 418,
            column: 25,
            span: 9600..9605,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 418,
            column: 26,
            span: 9605..9606,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        position: Position {
            line: 418,
            column: 35,
            span: 9606..9615,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 418,
            column: 36,
            span: 9615..9616,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 418,
            column: 37,
            span: 9616..9617,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 418,
            column: 38,
            span: 9617..9618,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^stack traceback:\\n\"",
        ),
        position: Position {
            line: 418,
            column: 60,
            span: 9619..9640,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 418,
            column: 61,
            span: 9640..9641,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 418,
            column: 62,
            span: 9641..9642,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 422,
            column: 6,
            span: 9680..9685,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 422,
            column: 15,
            span: 9686..9694,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        position: Position {
            line: 422,
            column: 30,
            span: 9695..9709,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 422,
            column: 31,
            span: 9709..9710,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 422,
            column: 33,
            span: 9710..9712,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 422,
            column: 34,
            span: 9712..9713,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 422,
            column: 36,
            span: 9714..9715,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 422,
            column: 37,
            span: 9715..9716,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 423,
            column: 8,
            span: 9719..9724,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tb",
        ),
        position: Position {
            line: 423,
            column: 11,
            span: 9725..9727,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 423,
            column: 13,
            span: 9728..9729,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 423,
            column: 19,
            span: 9730..9735,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 423,
            column: 20,
            span: 9735..9736,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        position: Position {
            line: 423,
            column: 29,
            span: 9736..9745,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 423,
            column: 30,
            span: 9745..9746,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 423,
            column: 32,
            span: 9746..9748,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 423,
            column: 33,
            span: 9748..9749,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 424,
            column: 8,
            span: 9752..9757,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 424,
            column: 10,
            span: 9758..9759,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 424,
            column: 12,
            span: 9760..9761,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 424,
            column: 0,
            span: 9761..9763,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 425,
            column: 6,
            span: 9766..9769,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 425,
            column: 8,
            span: 9770..9771,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 425,
            column: 11,
            span: 9772..9774,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 425,
            column: 18,
            span: 9775..9781,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 425,
            column: 19,
            span: 9781..9782,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        position: Position {
            line: 425,
            column: 25,
            span: 9782..9788,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 425,
            column: 26,
            span: 9788..9789,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tb",
        ),
        position: Position {
            line: 425,
            column: 28,
            span: 9789..9791,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 425,
            column: 29,
            span: 9791..9792,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[^\\n]+\\n?\"",
        ),
        position: Position {
            line: 425,
            column: 41,
            span: 9793..9804,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 425,
            column: 42,
            span: 9804..9805,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 425,
            column: 0,
            span: 9806..9808,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 426,
            column: 11,
            span: 9813..9819,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 426,
            column: 12,
            span: 9819..9820,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 426,
            column: 13,
            span: 9820..9821,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 426,
            column: 16,
            span: 9822..9824,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 426,
            column: 18,
            span: 9824..9826,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 426,
            column: 21,
            span: 9827..9829,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 426,
            column: 28,
            span: 9830..9836,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 426,
            column: 29,
            span: 9836..9837,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 426,
            column: 33,
            span: 9837..9841,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 426,
            column: 34,
            span: 9841..9842,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 426,
            column: 35,
            span: 9842..9843,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 426,
            column: 36,
            span: 9843..9844,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 426,
            column: 38,
            span: 9845..9846,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 426,
            column: 39,
            span: 9846..9847,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 426,
            column: 40,
            span: 9847..9848,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 426,
            column: 41,
            span: 9848..9849,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 426,
            column: 42,
            span: 9849..9850,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 426,
            column: 43,
            span: 9850..9851,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 427,
            column: 6,
            span: 9856..9857,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 427,
            column: 8,
            span: 9858..9859,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 427,
            column: 10,
            span: 9860..9861,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 427,
            column: 12,
            span: 9862..9863,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 427,
            column: 0,
            span: 9863..9865,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 428,
            column: 0,
            span: 9868..9871,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 429,
            column: 9,
            span: 9874..9880,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 429,
            column: 10,
            span: 9880..9881,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 429,
            column: 11,
            span: 9881..9882,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 429,
            column: 12,
            span: 9882..9883,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 429,
            column: 13,
            span: 9883..9884,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 429,
            column: 14,
            span: 9884..9885,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 429,
            column: 17,
            span: 9886..9888,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 429,
            column: 21,
            span: 9889..9892,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 429,
            column: 22,
            span: 9892..9893,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 430,
            column: 0,
            span: 9894..9897,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 432,
            column: 6,
            span: 9899..9904,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 432,
            column: 15,
            span: 9905..9913,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 432,
            column: 17,
            span: 9914..9915,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 432,
            column: 18,
            span: 9915..9916,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 432,
            column: 19,
            span: 9916..9917,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 432,
            column: 20,
            span: 9917..9918,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 433,
            column: 5,
            span: 9921..9923,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 433,
            column: 7,
            span: 9924..9925,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 433,
            column: 9,
            span: 9926..9927,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 433,
            column: 11,
            span: 9927..9929,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 433,
            column: 16,
            span: 9930..9934,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 433,
            column: 23,
            span: 9935..9941,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 433,
            column: 25,
            span: 9942..9943,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 433,
            column: 26,
            span: 9943..9944,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 433,
            column: 27,
            span: 9944..9945,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 433,
            column: 29,
            span: 9946..9947,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 433,
            column: 31,
            span: 9947..9949,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 433,
            column: 32,
            span: 9949..9950,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 434,
            column: 7,
            span: 9953..9957,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 434,
            column: 17,
            span: 9958..9967,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 434,
            column: 18,
            span: 9967..9968,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 434,
            column: 23,
            span: 9968..9973,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 434,
            column: 24,
            span: 9973..9974,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 434,
            column: 25,
            span: 9974..9975,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 434,
            column: 0,
            span: 9976..9979,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 435,
            column: 0,
            span: 9980..9983,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 437,
            column: 6,
            span: 9985..9990,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 437,
            column: 9,
            span: 9991..9993,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 437,
            column: 11,
            span: 9994..9995,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 437,
            column: 21,
            span: 9996..10005,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 437,
            column: 22,
            span: 10005..10006,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        position: Position {
            line: 437,
            column: 28,
            span: 10006..10012,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 437,
            column: 29,
            span: 10012..10013,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 437,
            column: 30,
            span: 10013..10014,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 437,
            column: 31,
            span: 10014..10015,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 438,
            column: 10,
            span: 10016..10025,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 438,
            column: 11,
            span: 10025..10026,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 438,
            column: 17,
            span: 10026..10032,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 438,
            column: 18,
            span: 10032..10033,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 438,
            column: 20,
            span: 10033..10035,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 438,
            column: 21,
            span: 10035..10036,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 438,
            column: 23,
            span: 10036..10038,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 438,
            column: 24,
            span: 10038..10039,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        position: Position {
            line: 439,
            column: 15,
            span: 10040..10054,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 439,
            column: 16,
            span: 10054..10055,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 439,
            column: 18,
            span: 10055..10057,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 439,
            column: 19,
            span: 10057..10058,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 439,
            column: 21,
            span: 10059..10060,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"yield\"",
        ),
        position: Position {
            line: 439,
            column: 29,
            span: 10061..10068,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 439,
            column: 30,
            span: 10068..10069,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        position: Position {
            line: 439,
            column: 39,
            span: 10070..10078,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 439,
            column: 40,
            span: 10078..10079,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tail\"",
        ),
        position: Position {
            line: 439,
            column: 47,
            span: 10080..10086,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 439,
            column: 48,
            span: 10086..10087,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tail\"",
        ),
        position: Position {
            line: 439,
            column: 55,
            span: 10088..10094,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 439,
            column: 56,
            span: 10094..10095,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tail\"",
        ),
        position: Position {
            line: 439,
            column: 63,
            span: 10096..10102,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 439,
            column: 65,
            span: 10103..10104,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 439,
            column: 66,
            span: 10104..10105,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 442,
            column: 3,
            span: 10108..10110,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 442,
            column: 5,
            span: 10111..10112,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 442,
            column: 15,
            span: 10113..10122,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 442,
            column: 16,
            span: 10122..10123,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        position: Position {
            line: 442,
            column: 22,
            span: 10123..10129,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 442,
            column: 23,
            span: 10129..10130,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 442,
            column: 31,
            span: 10130..10138,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 442,
            column: 32,
            span: 10138..10139,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 442,
            column: 33,
            span: 10139..10140,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 442,
            column: 34,
            span: 10140..10141,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 443,
            column: 8,
            span: 10144..10149,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 443,
            column: 10,
            span: 10150..10151,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 443,
            column: 12,
            span: 10152..10153,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 443,
            column: 0,
            span: 10153..10155,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 444,
            column: 12,
            span: 10158..10167,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 444,
            column: 13,
            span: 10167..10168,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 444,
            column: 18,
            span: 10168..10173,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 444,
            column: 19,
            span: 10173..10174,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 444,
            column: 24,
            span: 10174..10179,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 444,
            column: 25,
            span: 10179..10180,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 444,
            column: 32,
            span: 10180..10187,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 444,
            column: 33,
            span: 10187..10188,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 444,
            column: 34,
            span: 10187..10189,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 444,
            column: 35,
            span: 10189..10190,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 444,
            column: 39,
            span: 10191..10194,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 444,
            column: 40,
            span: 10194..10195,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 444,
            column: 41,
            span: 10195..10196,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 445,
            column: 12,
            span: 10199..10208,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 445,
            column: 13,
            span: 10208..10209,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 445,
            column: 18,
            span: 10209..10214,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 445,
            column: 19,
            span: 10214..10215,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 445,
            column: 24,
            span: 10215..10220,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 445,
            column: 25,
            span: 10220..10221,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 445,
            column: 32,
            span: 10221..10228,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 445,
            column: 33,
            span: 10228..10229,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 445,
            column: 34,
            span: 10228..10230,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 445,
            column: 35,
            span: 10230..10231,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 445,
            column: 39,
            span: 10232..10235,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 445,
            column: 40,
            span: 10235..10236,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 445,
            column: 41,
            span: 10236..10237,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        position: Position {
            line: 445,
            column: 52,
            span: 10237..10248,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 445,
            column: 53,
            span: 10248..10249,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 446,
            column: 9,
            span: 10252..10258,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 446,
            column: 0,
            span: 10259..10260,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 447,
            column: 4,
            span: 10261..10264,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 447,
            column: 5,
            span: 10264..10265,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 449,
            column: 6,
            span: 10267..10272,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        position: Position {
            line: 449,
            column: 9,
            span: 10273..10275,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 449,
            column: 11,
            span: 10276..10277,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 449,
            column: 13,
            span: 10278..10279,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 449,
            column: 14,
            span: 10279..10280,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 450,
            column: 6,
            span: 10281..10286,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 450,
            column: 10,
            span: 10287..10290,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 450,
            column: 12,
            span: 10291..10292,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 450,
            column: 21,
            span: 10293..10301,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 450,
            column: 22,
            span: 10301..10302,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 450,
            column: 23,
            span: 10302..10303,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 450,
            column: 24,
            span: 10303..10304,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 450,
            column: 26,
            span: 10305..10306,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 450,
            column: 27,
            span: 10306..10307,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 450,
            column: 33,
            span: 10308..10313,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 450,
            column: 34,
            span: 10313..10314,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 450,
            column: 40,
            span: 10314..10320,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 450,
            column: 41,
            span: 10320..10321,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        position: Position {
            line: 450,
            column: 43,
            span: 10321..10323,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 450,
            column: 44,
            span: 10323..10324,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 450,
            column: 46,
            span: 10325..10326,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 450,
            column: 47,
            span: 10326..10327,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 450,
            column: 0,
            span: 10328..10331,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 451,
            column: 6,
            span: 10332..10337,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 451,
            column: 7,
            span: 10337..10338,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 451,
            column: 14,
            span: 10338..10345,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 451,
            column: 15,
            span: 10345..10346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 451,
            column: 17,
            span: 10346..10348,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 451,
            column: 18,
            span: 10348..10349,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 451,
            column: 22,
            span: 10350..10353,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 451,
            column: 23,
            span: 10353..10354,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 451,
            column: 27,
            span: 10355..10358,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 451,
            column: 28,
            span: 10358..10359,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 453,
            column: 6,
            span: 10361..10366,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 453,
            column: 8,
            span: 10367..10368,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 453,
            column: 9,
            span: 10368..10369,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 453,
            column: 11,
            span: 10370..10371,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 453,
            column: 13,
            span: 10372..10373,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 453,
            column: 23,
            span: 10374..10383,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 453,
            column: 24,
            span: 10383..10384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 453,
            column: 30,
            span: 10384..10390,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 453,
            column: 31,
            span: 10390..10391,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 453,
            column: 33,
            span: 10391..10393,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 453,
            column: 34,
            span: 10393..10394,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 453,
            column: 37,
            span: 10394..10397,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 453,
            column: 38,
            span: 10397..10398,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 454,
            column: 6,
            span: 10399..10404,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 454,
            column: 8,
            span: 10405..10406,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 454,
            column: 10,
            span: 10407..10408,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 454,
            column: 16,
            span: 10409..10414,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 454,
            column: 17,
            span: 10414..10415,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 454,
            column: 24,
            span: 10415..10422,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 454,
            column: 25,
            span: 10422..10423,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 454,
            column: 27,
            span: 10423..10425,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 454,
            column: 28,
            span: 10425..10426,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 454,
            column: 30,
            span: 10426..10428,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 454,
            column: 31,
            span: 10428..10429,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lfLS\"",
        ),
        position: Position {
            line: 454,
            column: 38,
            span: 10430..10436,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 454,
            column: 39,
            span: 10436..10437,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 455,
            column: 7,
            span: 10438..10444,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 455,
            column: 8,
            span: 10444..10445,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 455,
            column: 9,
            span: 10445..10446,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 455,
            column: 10,
            span: 10446..10447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        position: Position {
            line: 455,
            column: 21,
            span: 10447..10458,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 455,
            column: 24,
            span: 10459..10461,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 455,
            column: 26,
            span: 10462..10463,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 455,
            column: 27,
            span: 10463..10464,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        position: Position {
            line: 455,
            column: 38,
            span: 10464..10475,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 455,
            column: 42,
            span: 10476..10479,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 455,
            column: 44,
            span: 10480..10481,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 455,
            column: 45,
            span: 10481..10482,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        position: Position {
            line: 455,
            column: 56,
            span: 10482..10493,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 455,
            column: 57,
            span: 10493..10494,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 455,
            column: 58,
            span: 10494..10495,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 455,
            column: 59,
            span: 10495..10496,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        position: Position {
            line: 455,
            column: 70,
            span: 10496..10507,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 455,
            column: 71,
            span: 10507..10508,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 455,
            column: 72,
            span: 10508..10509,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 456,
            column: 7,
            span: 10510..10516,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 456,
            column: 8,
            span: 10516..10517,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 456,
            column: 12,
            span: 10517..10521,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 456,
            column: 13,
            span: 10521..10522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 456,
            column: 14,
            span: 10522..10523,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 456,
            column: 15,
            span: 10523..10524,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        position: Position {
            line: 456,
            column: 19,
            span: 10524..10528,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 456,
            column: 20,
            span: 10528..10529,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 456,
            column: 23,
            span: 10530..10532,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        position: Position {
            line: 456,
            column: 34,
            span: 10533..10543,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 456,
            column: 35,
            span: 10543..10544,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 457,
            column: 4,
            span: 10545..10548,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 457,
            column: 6,
            span: 10549..10550,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 457,
            column: 8,
            span: 10551..10552,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 457,
            column: 10,
            span: 10553..10554,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 457,
            column: 11,
            span: 10554..10555,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "linedefined",
        ),
        position: Position {
            line: 457,
            column: 22,
            span: 10555..10566,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 457,
            column: 24,
            span: 10567..10568,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 457,
            column: 26,
            span: 10568..10570,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 457,
            column: 27,
            span: 10570..10571,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 457,
            column: 29,
            span: 10572..10573,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 457,
            column: 30,
            span: 10573..10574,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lastlinedefined",
        ),
        position: Position {
            line: 457,
            column: 45,
            span: 10574..10589,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 457,
            column: 0,
            span: 10590..10592,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 458,
            column: 9,
            span: 10595..10601,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 458,
            column: 10,
            span: 10601..10602,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 458,
            column: 11,
            span: 10602..10603,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 458,
            column: 12,
            span: 10603..10604,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        position: Position {
            line: 458,
            column: 23,
            span: 10604..10615,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 458,
            column: 24,
            span: 10615..10616,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 458,
            column: 25,
            span: 10616..10617,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 458,
            column: 26,
            span: 10617..10618,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 458,
            column: 27,
            span: 10618..10619,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 459,
            column: 4,
            span: 10622..10623,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 459,
            column: 5,
            span: 10623..10624,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        position: Position {
            line: 459,
            column: 16,
            span: 10624..10635,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 459,
            column: 17,
            span: 10635..10636,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 459,
            column: 18,
            span: 10636..10637,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 459,
            column: 19,
            span: 10637..10638,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 459,
            column: 21,
            span: 10639..10640,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 459,
            column: 0,
            span: 10641..10644,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 460,
            column: 0,
            span: 10645..10648,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 461,
            column: 7,
            span: 10649..10655,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 461,
            column: 8,
            span: 10655..10656,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        position: Position {
            line: 461,
            column: 12,
            span: 10656..10660,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 461,
            column: 13,
            span: 10660..10661,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 461,
            column: 14,
            span: 10661..10662,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 461,
            column: 15,
            span: 10662..10663,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        position: Position {
            line: 461,
            column: 26,
            span: 10663..10674,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 461,
            column: 27,
            span: 10674..10675,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 461,
            column: 30,
            span: 10676..10678,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 461,
            column: 34,
            span: 10679..10682,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 461,
            column: 35,
            span: 10682..10683,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 462,
            column: 7,
            span: 10707..10713,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 462,
            column: 8,
            span: 10713..10714,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 462,
            column: 13,
            span: 10714..10719,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 462,
            column: 14,
            span: 10719..10720,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 462,
            column: 21,
            span: 10720..10727,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 462,
            column: 22,
            span: 10727..10728,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 462,
            column: 24,
            span: 10728..10730,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 462,
            column: 25,
            span: 10730..10731,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 462,
            column: 27,
            span: 10731..10733,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 462,
            column: 28,
            span: 10733..10734,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 462,
            column: 31,
            span: 10735..10737,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 462,
            column: 35,
            span: 10738..10741,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 462,
            column: 36,
            span: 10741..10742,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 463,
            column: 6,
            span: 10743..10748,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 463,
            column: 8,
            span: 10749..10750,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 463,
            column: 9,
            span: 10750..10751,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 463,
            column: 11,
            span: 10752..10753,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 463,
            column: 13,
            span: 10754..10755,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 463,
            column: 19,
            span: 10756..10761,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 463,
            column: 20,
            span: 10761..10762,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 463,
            column: 28,
            span: 10762..10770,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 463,
            column: 29,
            span: 10770..10771,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 463,
            column: 31,
            span: 10771..10773,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 463,
            column: 32,
            span: 10773..10774,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 463,
            column: 34,
            span: 10774..10776,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 463,
            column: 35,
            span: 10776..10777,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 463,
            column: 37,
            span: 10777..10779,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 463,
            column: 38,
            span: 10779..10780,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 464,
            column: 7,
            span: 10781..10787,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 464,
            column: 8,
            span: 10787..10788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 464,
            column: 9,
            span: 10788..10789,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 464,
            column: 12,
            span: 10790..10792,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 464,
            column: 16,
            span: 10793..10796,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 464,
            column: 20,
            span: 10797..10800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 464,
            column: 22,
            span: 10801..10802,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 464,
            column: 25,
            span: 10803..10805,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 464,
            column: 28,
            span: 10805..10808,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 464,
            column: 29,
            span: 10808..10809,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 465,
            column: 2,
            span: 10810..10811,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 465,
            column: 3,
            span: 10811..10812,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 465,
            column: 5,
            span: 10813..10814,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 465,
            column: 7,
            span: 10815..10816,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 465,
            column: 13,
            span: 10817..10822,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 465,
            column: 14,
            span: 10822..10823,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 465,
            column: 22,
            span: 10823..10831,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 465,
            column: 23,
            span: 10831..10832,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 465,
            column: 25,
            span: 10832..10834,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 465,
            column: 26,
            span: 10834..10835,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 465,
            column: 28,
            span: 10835..10837,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 465,
            column: 29,
            span: 10837..10838,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 465,
            column: 31,
            span: 10838..10840,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 465,
            column: 32,
            span: 10840..10841,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 466,
            column: 7,
            span: 10842..10848,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 466,
            column: 8,
            span: 10848..10849,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 466,
            column: 9,
            span: 10849..10850,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 466,
            column: 12,
            span: 10851..10853,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 466,
            column: 16,
            span: 10854..10857,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 466,
            column: 20,
            span: 10858..10861,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 466,
            column: 22,
            span: 10862..10863,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 466,
            column: 25,
            span: 10864..10866,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 466,
            column: 27,
            span: 10866..10868,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 466,
            column: 28,
            span: 10868..10869,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 467,
            column: 6,
            span: 10870..10875,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 467,
            column: 7,
            span: 10875..10876,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        position: Position {
            line: 467,
            column: 15,
            span: 10876..10884,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 467,
            column: 16,
            span: 10884..10885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 467,
            column: 18,
            span: 10885..10887,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 467,
            column: 19,
            span: 10887..10888,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 467,
            column: 21,
            span: 10888..10890,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 467,
            column: 22,
            span: 10890..10891,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 467,
            column: 24,
            span: 10891..10893,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 467,
            column: 25,
            span: 10893..10894,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        position: Position {
            line: 467,
            column: 30,
            span: 10895..10899,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 467,
            column: 31,
            span: 10899..10900,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 468,
            column: 7,
            span: 10901..10907,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 468,
            column: 8,
            span: 10907..10908,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 468,
            column: 13,
            span: 10908..10913,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 468,
            column: 14,
            span: 10913..10914,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        position: Position {
            line: 468,
            column: 21,
            span: 10914..10921,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 468,
            column: 22,
            span: 10921..10922,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 468,
            column: 24,
            span: 10922..10924,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 468,
            column: 25,
            span: 10924..10925,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 468,
            column: 28,
            span: 10926..10928,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 468,
            column: 32,
            span: 10929..10932,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 468,
            column: 33,
            span: 10932..10933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 469,
            column: 7,
            span: 10934..10940,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 469,
            column: 8,
            span: 10940..10941,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 469,
            column: 13,
            span: 10941..10946,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 469,
            column: 14,
            span: 10946..10947,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        position: Position {
            line: 469,
            column: 18,
            span: 10947..10951,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 469,
            column: 19,
            span: 10951..10952,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        position: Position {
            line: 469,
            column: 21,
            span: 10952..10954,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 469,
            column: 22,
            span: 10954..10955,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 469,
            column: 25,
            span: 10956..10958,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 469,
            column: 27,
            span: 10958..10960,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 469,
            column: 0,
            span: 10961..10964,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        position: Position {
            line: 470,
            column: 5,
            span: 10967..10969,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 470,
            column: 6,
            span: 10969..10970,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 470,
            column: 7,
            span: 10969..10971,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 470,
            column: 8,
            span: 10971..10972,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 470,
            column: 11,
            span: 10973..10975,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 470,
            column: 13,
            span: 10976..10977,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 470,
            column: 14,
            span: 10977..10978,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        position: Position {
            line: 470,
            column: 25,
            span: 10978..10989,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 470,
            column: 27,
            span: 10990..10991,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 470,
            column: 29,
            span: 10991..10993,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 470,
            column: 33,
            span: 10994..10997,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        position: Position {
            line: 470,
            column: 36,
            span: 10998..11000,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 470,
            column: 37,
            span: 11000..11001,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 470,
            column: 38,
            span: 11000..11002,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 470,
            column: 39,
            span: 11002..11003,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 470,
            column: 42,
            span: 11004..11006,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 470,
            column: 44,
            span: 11007..11008,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 470,
            column: 45,
            span: 11008..11009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        position: Position {
            line: 470,
            column: 56,
            span: 11009..11020,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 470,
            column: 57,
            span: 11020..11021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 472,
            column: 2,
            span: 11023..11024,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 472,
            column: 3,
            span: 11024..11025,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 472,
            column: 5,
            span: 11026..11027,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 472,
            column: 6,
            span: 11027..11028,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 472,
            column: 8,
            span: 11029..11030,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 472,
            column: 10,
            span: 11031..11032,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 472,
            column: 16,
            span: 11033..11038,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 472,
            column: 17,
            span: 11038..11039,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 472,
            column: 26,
            span: 11039..11048,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 472,
            column: 27,
            span: 11048..11049,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 472,
            column: 33,
            span: 11049..11055,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 472,
            column: 34,
            span: 11055..11056,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 472,
            column: 37,
            span: 11057..11059,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 472,
            column: 38,
            span: 11059..11060,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 473,
            column: 7,
            span: 11061..11067,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 473,
            column: 8,
            span: 11067..11068,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 473,
            column: 9,
            span: 11068..11069,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 473,
            column: 13,
            span: 11070..11073,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 473,
            column: 15,
            span: 11074..11075,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 473,
            column: 19,
            span: 11076..11079,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 473,
            column: 21,
            span: 11080..11081,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 473,
            column: 24,
            span: 11082..11084,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 473,
            column: 26,
            span: 11085..11086,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 473,
            column: 27,
            span: 11086..11087,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        position: Position {
            line: 473,
            column: 38,
            span: 11087..11098,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 473,
            column: 40,
            span: 11099..11100,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 473,
            column: 42,
            span: 11100..11102,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 473,
            column: 43,
            span: 11102..11103,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        position: Position {
            line: 474,
            column: 15,
            span: 11104..11118,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 474,
            column: 16,
            span: 11118..11119,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 474,
            column: 18,
            span: 11119..11121,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 474,
            column: 19,
            span: 11121..11122,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 474,
            column: 21,
            span: 11123..11124,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"yield\"",
        ),
        position: Position {
            line: 474,
            column: 29,
            span: 11125..11132,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 474,
            column: 30,
            span: 11132..11133,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"in function <\"",
        ),
        position: Position {
            line: 474,
            column: 46,
            span: 11134..11149,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 474,
            column: 48,
            span: 11150..11151,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 474,
            column: 49,
            span: 11151..11152,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 476,
            column: 2,
            span: 11154..11155,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 476,
            column: 3,
            span: 11155..11156,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 476,
            column: 5,
            span: 11157..11158,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 476,
            column: 7,
            span: 11159..11160,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 476,
            column: 17,
            span: 11161..11170,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 476,
            column: 18,
            span: 11170..11171,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 476,
            column: 24,
            span: 11171..11177,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 476,
            column: 25,
            span: 11177..11178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 476,
            column: 27,
            span: 11178..11180,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 476,
            column: 28,
            span: 11180..11181,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 477,
            column: 7,
            span: 11182..11188,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 477,
            column: 8,
            span: 11188..11189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 477,
            column: 9,
            span: 11189..11190,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 477,
            column: 13,
            span: 11191..11194,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 477,
            column: 15,
            span: 11195..11196,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 477,
            column: 18,
            span: 11197..11199,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        position: Position {
            line: 477,
            column: 23,
            span: 11200..11204,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 477,
            column: 24,
            span: 11204..11205,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 478,
            column: 7,
            span: 11206..11212,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 478,
            column: 8,
            span: 11212..11213,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 478,
            column: 13,
            span: 11213..11218,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 478,
            column: 14,
            span: 11218..11219,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        position: Position {
            line: 478,
            column: 18,
            span: 11219..11223,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 478,
            column: 19,
            span: 11223..11224,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        position: Position {
            line: 478,
            column: 21,
            span: 11224..11226,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 478,
            column: 22,
            span: 11226..11227,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 478,
            column: 25,
            span: 11228..11230,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 478,
            column: 27,
            span: 11230..11232,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 478,
            column: 31,
            span: 11233..11236,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        position: Position {
            line: 478,
            column: 34,
            span: 11237..11239,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 478,
            column: 35,
            span: 11239..11240,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 478,
            column: 36,
            span: 11239..11241,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 478,
            column: 37,
            span: 11241..11242,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 478,
            column: 40,
            span: 11243..11245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 478,
            column: 42,
            span: 11246..11247,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 478,
            column: 43,
            span: 11247..11248,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        position: Position {
            line: 478,
            column: 54,
            span: 11248..11259,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 478,
            column: 56,
            span: 11260..11261,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 478,
            column: 58,
            span: 11261..11263,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 478,
            column: 59,
            span: 11263..11264,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 479,
            column: 7,
            span: 11265..11271,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 479,
            column: 8,
            span: 11271..11272,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 479,
            column: 13,
            span: 11272..11277,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 479,
            column: 14,
            span: 11277..11278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        position: Position {
            line: 479,
            column: 21,
            span: 11278..11285,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 479,
            column: 22,
            span: 11285..11286,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 479,
            column: 24,
            span: 11286..11288,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 479,
            column: 25,
            span: 11288..11289,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 479,
            column: 28,
            span: 11290..11292,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 479,
            column: 32,
            span: 11293..11296,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 479,
            column: 33,
            span: 11296..11297,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 480,
            column: 7,
            span: 11298..11304,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 480,
            column: 8,
            span: 11304..11305,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 480,
            column: 13,
            span: 11305..11310,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 480,
            column: 14,
            span: 11310..11311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        position: Position {
            line: 480,
            column: 21,
            span: 11311..11318,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 480,
            column: 22,
            span: 11318..11319,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 480,
            column: 23,
            span: 11319..11320,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 480,
            column: 26,
            span: 11321..11323,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 480,
            column: 30,
            span: 11324..11327,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 480,
            column: 31,
            span: 11327..11328,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        position: Position {
            line: 481,
            column: 15,
            span: 11329..11343,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 481,
            column: 16,
            span: 11343..11344,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 481,
            column: 18,
            span: 11344..11346,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 481,
            column: 19,
            span: 11346..11347,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 481,
            column: 21,
            span: 11348..11349,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 481,
            column: 22,
            span: 11349..11350,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 481,
            column: 23,
            span: 11350..11351,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 486,
            column: 9,
            span: 11419..11427,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 486,
            column: 11,
            span: 11428..11429,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 486,
            column: 12,
            span: 11429..11430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 486,
            column: 13,
            span: 11430..11431,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 486,
            column: 14,
            span: 11431..11432,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 486,
            column: 17,
            span: 11433..11435,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 486,
            column: 19,
            span: 11436..11437,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 486,
            column: 22,
            span: 11438..11440,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 486,
            column: 24,
            span: 11440..11442,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 486,
            column: 29,
            span: 11443..11447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 486,
            column: 35,
            span: 11448..11453,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 486,
            column: 36,
            span: 11453..11454,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 486,
            column: 37,
            span: 11454..11455,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 486,
            column: 38,
            span: 11455..11456,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 486,
            column: 43,
            span: 11457..11461,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 486,
            column: 53,
            span: 11462..11471,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 486,
            column: 54,
            span: 11471..11472,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 486,
            column: 59,
            span: 11472..11477,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 486,
            column: 60,
            span: 11477..11478,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 486,
            column: 61,
            span: 11478..11479,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 486,
            column: 62,
            span: 11479..11480,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 486,
            column: 64,
            span: 11481..11482,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 486,
            column: 65,
            span: 11482..11483,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 486,
            column: 66,
            span: 11483..11484,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 486,
            column: 68,
            span: 11485..11486,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 486,
            column: 70,
            span: 11486..11488,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 486,
            column: 71,
            span: 11488..11489,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 486,
            column: 75,
            span: 11490..11493,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 486,
            column: 0,
            span: 11494..11497,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 488,
            column: 3,
            span: 11499..11501,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 488,
            column: 5,
            span: 11502..11503,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 488,
            column: 15,
            span: 11504..11513,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 488,
            column: 16,
            span: 11513..11514,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        position: Position {
            line: 488,
            column: 22,
            span: 11514..11520,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 488,
            column: 23,
            span: 11520..11521,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 488,
            column: 31,
            span: 11521..11529,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 488,
            column: 32,
            span: 11529..11530,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 488,
            column: 33,
            span: 11530..11531,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 488,
            column: 34,
            span: 11531..11532,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 488,
            column: 36,
            span: 11533..11534,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 488,
            column: 37,
            span: 11534..11535,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 488,
            column: 38,
            span: 11535..11536,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 488,
            column: 39,
            span: 11536..11537,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 488,
            column: 43,
            span: 11538..11541,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 488,
            column: 44,
            span: 11541..11542,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 489,
            column: 2,
            span: 11543..11544,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 489,
            column: 3,
            span: 11544..11545,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 489,
            column: 5,
            span: 11546..11547,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 489,
            column: 7,
            span: 11548..11549,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 489,
            column: 17,
            span: 11550..11559,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 489,
            column: 18,
            span: 11559..11560,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 489,
            column: 24,
            span: 11560..11566,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 489,
            column: 25,
            span: 11566..11567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 489,
            column: 27,
            span: 11567..11569,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 489,
            column: 28,
            span: 11569..11570,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 489,
            column: 30,
            span: 11570..11572,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 489,
            column: 31,
            span: 11572..11573,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 490,
            column: 2,
            span: 11574..11575,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 490,
            column: 4,
            span: 11576..11577,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 490,
            column: 6,
            span: 11578..11579,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'yield'\"",
        ),
        position: Position {
            line: 490,
            column: 16,
            span: 11580..11589,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 490,
            column: 17,
            span: 11589..11590,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'f'\"",
        ),
        position: Position {
            line: 490,
            column: 23,
            span: 11591..11596,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 490,
            column: 24,
            span: 11596..11597,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"in function <\"",
        ),
        position: Position {
            line: 490,
            column: 40,
            span: 11598..11613,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 490,
            column: 42,
            span: 11614..11615,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 491,
            column: 6,
            span: 11616..11621,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 491,
            column: 16,
            span: 11622..11631,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 491,
            column: 17,
            span: 11631..11632,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "status",
        ),
        position: Position {
            line: 491,
            column: 23,
            span: 11632..11638,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 491,
            column: 24,
            span: 11638..11639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 491,
            column: 26,
            span: 11639..11641,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 491,
            column: 27,
            span: 11641..11642,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 491,
            column: 30,
            span: 11643..11645,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"suspended\"",
        ),
        position: Position {
            line: 491,
            column: 42,
            span: 11646..11657,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 491,
            column: 0,
            span: 11658..11660,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        position: Position {
            line: 492,
            column: 17,
            span: 11663..11677,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 492,
            column: 18,
            span: 11677..11678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 492,
            column: 20,
            span: 11678..11680,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 492,
            column: 21,
            span: 11680..11681,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 492,
            column: 23,
            span: 11682..11683,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 492,
            column: 24,
            span: 11683..11684,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 493,
            column: 4,
            span: 11687..11688,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 493,
            column: 5,
            span: 11688..11689,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 493,
            column: 7,
            span: 11690..11691,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 493,
            column: 9,
            span: 11692..11693,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 493,
            column: 19,
            span: 11694..11703,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 493,
            column: 20,
            span: 11703..11704,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 493,
            column: 26,
            span: 11704..11710,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 493,
            column: 27,
            span: 11710..11711,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 493,
            column: 29,
            span: 11711..11713,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 493,
            column: 30,
            span: 11713..11714,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 494,
            column: 8,
            span: 11717..11722,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 494,
            column: 9,
            span: 11722..11723,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 494,
            column: 15,
            span: 11723..11729,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 494,
            column: 16,
            span: 11729..11730,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 494,
            column: 17,
            span: 11730..11731,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 494,
            column: 18,
            span: 11731..11732,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 494,
            column: 20,
            span: 11732..11734,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 494,
            column: 21,
            span: 11734..11735,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'f'\"",
        ),
        position: Position {
            line: 494,
            column: 27,
            span: 11736..11741,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 494,
            column: 28,
            span: 11741..11742,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 495,
            column: 0,
            span: 11777..11780,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 496,
            column: 2,
            span: 11781..11782,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 496,
            column: 3,
            span: 11782..11783,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 496,
            column: 4,
            span: 11782..11784,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 496,
            column: 5,
            span: 11784..11785,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 496,
            column: 7,
            span: 11786..11787,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'error'\"",
        ),
        position: Position {
            line: 496,
            column: 17,
            span: 11788..11797,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        position: Position {
            line: 497,
            column: 15,
            span: 11798..11812,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 497,
            column: 16,
            span: 11812..11813,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 497,
            column: 18,
            span: 11813..11815,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 497,
            column: 19,
            span: 11815..11816,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 497,
            column: 21,
            span: 11817..11818,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 497,
            column: 22,
            span: 11818..11819,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 503,
            column: 6,
            span: 11938..11943,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 503,
            column: 15,
            span: 11944..11952,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 503,
            column: 17,
            span: 11953..11954,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 503,
            column: 18,
            span: 11954..11955,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 503,
            column: 19,
            span: 11955..11956,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 503,
            column: 20,
            span: 11956..11957,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 504,
            column: 12,
            span: 11960..11969,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 504,
            column: 13,
            span: 11969..11970,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 504,
            column: 18,
            span: 11970..11975,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 504,
            column: 19,
            span: 11975..11976,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 504,
            column: 20,
            span: 11976..11977,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 504,
            column: 21,
            span: 11977..11978,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 505,
            column: 0,
            span: 11979..11982,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 507,
            column: 6,
            span: 11984..11989,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 507,
            column: 15,
            span: 11990..11998,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 507,
            column: 17,
            span: 11999..12000,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 507,
            column: 18,
            span: 12000..12001,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 507,
            column: 19,
            span: 12001..12002,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 507,
            column: 20,
            span: 12002..12003,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 508,
            column: 8,
            span: 12006..12011,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 508,
            column: 9,
            span: 12011..12012,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 508,
            column: 16,
            span: 12012..12019,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 508,
            column: 17,
            span: 12019..12020,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 508,
            column: 25,
            span: 12020..12028,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 508,
            column: 26,
            span: 12028..12029,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 508,
            column: 27,
            span: 12029..12030,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 508,
            column: 31,
            span: 12031..12034,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 508,
            column: 32,
            span: 12034..12035,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 508,
            column: 36,
            span: 12036..12039,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 508,
            column: 37,
            span: 12039..12040,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 509,
            column: 6,
            span: 12043..12046,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 509,
            column: 8,
            span: 12047..12048,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 509,
            column: 10,
            span: 12049..12050,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 509,
            column: 12,
            span: 12050..12052,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 509,
            column: 13,
            span: 12052..12053,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 509,
            column: 18,
            span: 12053..12058,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 509,
            column: 0,
            span: 12059..12061,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 510,
            column: 6,
            span: 12066..12067,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 510,
            column: 7,
            span: 12067..12068,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 510,
            column: 8,
            span: 12068..12069,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 510,
            column: 10,
            span: 12070..12071,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 510,
            column: 12,
            span: 12072..12073,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 510,
            column: 13,
            span: 12073..12074,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 511,
            column: 0,
            span: 12077..12080,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 512,
            column: 0,
            span: 12081..12084,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 514,
            column: 6,
            span: 12086..12091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 514,
            column: 9,
            span: 12092..12094,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 514,
            column: 11,
            span: 12095..12096,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 514,
            column: 21,
            span: 12097..12106,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 514,
            column: 22,
            span: 12106..12107,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 514,
            column: 26,
            span: 12107..12111,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 514,
            column: 27,
            span: 12111..12112,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 514,
            column: 28,
            span: 12112..12113,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 514,
            column: 29,
            span: 12113..12114,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 515,
            column: 3,
            span: 12115..12117,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 515,
            column: 4,
            span: 12117..12118,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 515,
            column: 6,
            span: 12117..12120,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 515,
            column: 7,
            span: 12120..12121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 516,
            column: 6,
            span: 12122..12127,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 516,
            column: 7,
            span: 12127..12128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 516,
            column: 9,
            span: 12128..12130,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 516,
            column: 10,
            span: 12130..12131,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 517,
            column: 6,
            span: 12132..12137,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 517,
            column: 7,
            span: 12137..12138,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 517,
            column: 9,
            span: 12138..12140,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 517,
            column: 10,
            span: 12140..12141,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 520,
            column: 7,
            span: 12144..12150,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 520,
            column: 8,
            span: 12150..12151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 520,
            column: 12,
            span: 12151..12155,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 520,
            column: 13,
            span: 12155..12156,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 520,
            column: 18,
            span: 12156..12161,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 520,
            column: 19,
            span: 12161..12162,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getregistry",
        ),
        position: Position {
            line: 520,
            column: 30,
            span: 12162..12173,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 520,
            column: 31,
            span: 12173..12174,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 520,
            column: 32,
            span: 12174..12175,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 520,
            column: 33,
            span: 12175..12176,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 520,
            column: 36,
            span: 12177..12179,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        position: Position {
            line: 520,
            column: 44,
            span: 12180..12187,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 520,
            column: 45,
            span: 12187..12188,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 523,
            column: 6,
            span: 12191..12196,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"OK\"",
        ),
        position: Position {
            line: 523,
            column: 11,
            span: 12197..12201,
        },
    },
]
