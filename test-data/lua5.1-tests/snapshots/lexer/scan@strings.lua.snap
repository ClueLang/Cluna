---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.1-tests/strings.lua
---
[
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 1,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 1,
    },
    Token {
        kind: String,
        lexeme: "'testing strings and string library'",
        line: 1,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 1,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 3,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 3,
    },
    Token {
        kind: String,
        lexeme: "'alo'",
        line: 3,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 3,
    },
    Token {
        kind: String,
        lexeme: "'alo1'",
        line: 3,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 4,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 4,
    },
    Token {
        kind: String,
        lexeme: "''",
        line: 4,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 4,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 4,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 4,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 5,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 5,
    },
    Token {
        kind: String,
        lexeme: "'alo\\0alo'",
        line: 5,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 5,
    },
    Token {
        kind: String,
        lexeme: "'alo\\0b'",
        line: 5,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 6,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 6,
    },
    Token {
        kind: String,
        lexeme: "'alo\\0alo\\0\\0'",
        line: 6,
    },
    Token {
        kind: GreaterThan,
        lexeme: ">",
        line: 6,
    },
    Token {
        kind: String,
        lexeme: "'alo\\0alo\\0'",
        line: 6,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 7,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 7,
    },
    Token {
        kind: String,
        lexeme: "'alo'",
        line: 7,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 7,
    },
    Token {
        kind: String,
        lexeme: "'alo\\0'",
        line: 7,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 8,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 8,
    },
    Token {
        kind: String,
        lexeme: "'alo\\0'",
        line: 8,
    },
    Token {
        kind: GreaterThan,
        lexeme: ">",
        line: 8,
    },
    Token {
        kind: String,
        lexeme: "'alo'",
        line: 8,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 9,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 9,
    },
    Token {
        kind: String,
        lexeme: "'\\0'",
        line: 9,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 9,
    },
    Token {
        kind: String,
        lexeme: "'\\1'",
        line: 9,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 10,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 10,
    },
    Token {
        kind: String,
        lexeme: "'\\0\\0'",
        line: 10,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 10,
    },
    Token {
        kind: String,
        lexeme: "'\\0\\1'",
        line: 10,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 11,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 11,
    },
    Token {
        kind: String,
        lexeme: "'\\1\\0a\\0a'",
        line: 11,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        line: 11,
    },
    Token {
        kind: String,
        lexeme: "'\\1\\0a\\0a'",
        line: 11,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 12,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 12,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 12,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 12,
    },
    Token {
        kind: String,
        lexeme: "'\\1\\0a\\0b'",
        line: 12,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        line: 12,
    },
    Token {
        kind: String,
        lexeme: "'\\1\\0a\\0a'",
        line: 12,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 12,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 13,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 13,
    },
    Token {
        kind: String,
        lexeme: "'\\0\\0\\0'",
        line: 13,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 13,
    },
    Token {
        kind: String,
        lexeme: "'\\0\\0\\0\\0'",
        line: 13,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 14,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 14,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 14,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 14,
    },
    Token {
        kind: String,
        lexeme: "'\\0\\0\\0\\0'",
        line: 14,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 14,
    },
    Token {
        kind: String,
        lexeme: "'\\0\\0\\0'",
        line: 14,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 14,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 15,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 15,
    },
    Token {
        kind: String,
        lexeme: "'\\0\\0\\0'",
        line: 15,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        line: 15,
    },
    Token {
        kind: String,
        lexeme: "'\\0\\0\\0\\0'",
        line: 15,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 16,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 16,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 16,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 16,
    },
    Token {
        kind: String,
        lexeme: "'\\0\\0\\0\\0'",
        line: 16,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        line: 16,
    },
    Token {
        kind: String,
        lexeme: "'\\0\\0\\0'",
        line: 16,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 16,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 17,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 17,
    },
    Token {
        kind: String,
        lexeme: "'\\0\\0\\0'",
        line: 17,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        line: 17,
    },
    Token {
        kind: String,
        lexeme: "'\\0\\0\\0'",
        line: 17,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 17,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 18,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 18,
    },
    Token {
        kind: String,
        lexeme: "'\\0\\0\\0'",
        line: 18,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: ">=",
        line: 18,
    },
    Token {
        kind: String,
        lexeme: "'\\0\\0\\0'",
        line: 18,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 19,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 19,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 19,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 19,
    },
    Token {
        kind: String,
        lexeme: "'\\0\\0b'",
        line: 19,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 19,
    },
    Token {
        kind: String,
        lexeme: "'\\0\\0a\\0'",
        line: 19,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 19,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 20,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 20,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 20,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 22,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 22,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "sub",
        line: 22,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 22,
    },
    Token {
        kind: String,
        lexeme: "\"123456789\"",
        line: 22,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 22,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 22,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 22,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 22,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 22,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 22,
    },
    Token {
        kind: String,
        lexeme: "\"234\"",
        line: 22,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 23,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 23,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "sub",
        line: 23,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 23,
    },
    Token {
        kind: String,
        lexeme: "\"123456789\"",
        line: 23,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 23,
    },
    Token {
        kind: Number,
        lexeme: "7",
        line: 23,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 23,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 23,
    },
    Token {
        kind: String,
        lexeme: "\"789\"",
        line: 23,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 24,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 24,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "sub",
        line: 24,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 24,
    },
    Token {
        kind: String,
        lexeme: "\"123456789\"",
        line: 24,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 24,
    },
    Token {
        kind: Number,
        lexeme: "7",
        line: 24,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 24,
    },
    Token {
        kind: Number,
        lexeme: "6",
        line: 24,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 24,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 24,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 24,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 25,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 25,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "sub",
        line: 25,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 25,
    },
    Token {
        kind: String,
        lexeme: "\"123456789\"",
        line: 25,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 25,
    },
    Token {
        kind: Number,
        lexeme: "7",
        line: 25,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 25,
    },
    Token {
        kind: Number,
        lexeme: "7",
        line: 25,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 25,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 25,
    },
    Token {
        kind: String,
        lexeme: "\"7\"",
        line: 25,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 26,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 26,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "sub",
        line: 26,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 26,
    },
    Token {
        kind: String,
        lexeme: "\"123456789\"",
        line: 26,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 26,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 26,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 26,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 26,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 26,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 26,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 26,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 27,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 27,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "sub",
        line: 27,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 27,
    },
    Token {
        kind: String,
        lexeme: "\"123456789\"",
        line: 27,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 27,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 27,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 27,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 27,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 27,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 27,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 27,
    },
    Token {
        kind: String,
        lexeme: "\"123456789\"",
        line: 27,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 28,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 28,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "sub",
        line: 28,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 28,
    },
    Token {
        kind: String,
        lexeme: "\"123456789\"",
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 28,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 28,
    },
    Token {
        kind: Number,
        lexeme: "9",
        line: 28,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 28,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 28,
    },
    Token {
        kind: String,
        lexeme: "\"123456789\"",
        line: 28,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 29,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 29,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "sub",
        line: 29,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 29,
    },
    Token {
        kind: String,
        lexeme: "\"123456789\"",
        line: 29,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 29,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 29,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 29,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 29,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 29,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 29,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 29,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 29,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 29,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 30,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 30,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "sub",
        line: 30,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 30,
    },
    Token {
        kind: String,
        lexeme: "\"123456789\"",
        line: 30,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 30,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 30,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 30,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 30,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 30,
    },
    Token {
        kind: String,
        lexeme: "\"9\"",
        line: 30,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 31,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 31,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "sub",
        line: 31,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 31,
    },
    Token {
        kind: String,
        lexeme: "\"123456789\"",
        line: 31,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 31,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 31,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 31,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 31,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 31,
    },
    Token {
        kind: String,
        lexeme: "\"6789\"",
        line: 31,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 32,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 32,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "sub",
        line: 32,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 32,
    },
    Token {
        kind: String,
        lexeme: "\"123456789\"",
        line: 32,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 32,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 32,
    },
    Token {
        kind: Number,
        lexeme: "6",
        line: 32,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 32,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 32,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 32,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 32,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 32,
    },
    Token {
        kind: String,
        lexeme: "\"456\"",
        line: 32,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 33,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 33,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "sub",
        line: 33,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 33,
    },
    Token {
        kind: String,
        lexeme: "\"\\000123456789\"",
        line: 33,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 33,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 33,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 33,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 33,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 33,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 33,
    },
    Token {
        kind: String,
        lexeme: "\"234\"",
        line: 33,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 34,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 34,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 34,
    },
    Token {
        kind: String,
        lexeme: "\"\\000123456789\"",
        line: 34,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 34,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: "sub",
        line: 34,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 34,
    },
    Token {
        kind: Number,
        lexeme: "8",
        line: 34,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 34,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 34,
    },
    Token {
        kind: String,
        lexeme: "\"789\"",
        line: 34,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 35,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 35,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 35,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 37,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 37,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 37,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 37,
    },
    Token {
        kind: String,
        lexeme: "\"123456789\"",
        line: 37,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 37,
    },
    Token {
        kind: String,
        lexeme: "\"345\"",
        line: 37,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 37,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 37,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 37,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 38,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 38,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 38,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 38,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 38,
    },
    Token {
        kind: String,
        lexeme: "\"123456789\"",
        line: 38,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 38,
    },
    Token {
        kind: String,
        lexeme: "\"345\"",
        line: 38,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 39,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "sub",
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 39,
    },
    Token {
        kind: String,
        lexeme: "\"123456789\"",
        line: 39,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 39,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 39,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 39,
    },
    Token {
        kind: String,
        lexeme: "\"345\"",
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 40,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 40,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 40,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 40,
    },
    Token {
        kind: String,
        lexeme: "\"1234567890123456789\"",
        line: 40,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 40,
    },
    Token {
        kind: String,
        lexeme: "\"345\"",
        line: 40,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 40,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 40,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 40,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 40,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 40,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 41,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 41,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 41,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 41,
    },
    Token {
        kind: String,
        lexeme: "\"1234567890123456789\"",
        line: 41,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 41,
    },
    Token {
        kind: String,
        lexeme: "\"345\"",
        line: 41,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 41,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 41,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 41,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 41,
    },
    Token {
        kind: Number,
        lexeme: "13",
        line: 41,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 42,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 42,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 42,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 42,
    },
    Token {
        kind: String,
        lexeme: "\"1234567890123456789\"",
        line: 42,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 42,
    },
    Token {
        kind: String,
        lexeme: "\"346\"",
        line: 42,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 42,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 42,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 42,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 42,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 42,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 43,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 43,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 43,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 43,
    },
    Token {
        kind: String,
        lexeme: "\"1234567890123456789\"",
        line: 43,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 43,
    },
    Token {
        kind: String,
        lexeme: "\".45\"",
        line: 43,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 43,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 43,
    },
    Token {
        kind: Number,
        lexeme: "9",
        line: 43,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 43,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 43,
    },
    Token {
        kind: Number,
        lexeme: "13",
        line: 43,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 44,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 44,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 44,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 44,
    },
    Token {
        kind: String,
        lexeme: "\"abcdefg\"",
        line: 44,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 44,
    },
    Token {
        kind: String,
        lexeme: "\"\\0\"",
        line: 44,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 44,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 44,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 44,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 44,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 44,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 44,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 44,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 45,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 45,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 45,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 45,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 45,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 45,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 46,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 46,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 46,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 46,
    },
    Token {
        kind: String,
        lexeme: "''",
        line: 46,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 46,
    },
    Token {
        kind: String,
        lexeme: "'aaa'",
        line: 46,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 46,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 46,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 46,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 46,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 46,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 47,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 47,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 47,
    },
    Token {
        kind: String,
        lexeme: "'alo(.)alo'",
        line: 47,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 47,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 47,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 47,
    },
    Token {
        kind: String,
        lexeme: "'(.)'",
        line: 47,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 47,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 47,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 47,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 47,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 47,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 47,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 47,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 48,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 48,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 48,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 50,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 50,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        line: 50,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 50,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 50,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 50,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 50,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 50,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 51,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 51,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        line: 51,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 51,
    },
    Token {
        kind: String,
        lexeme: "\"\\0\\0\\0\"",
        line: 51,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 51,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 51,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 51,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 52,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 52,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        line: 52,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 52,
    },
    Token {
        kind: String,
        lexeme: "\"1234567890\"",
        line: 52,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 52,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 52,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 52,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 54,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 54,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 54,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 54,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 54,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 54,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 55,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 55,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 55,
    },
    Token {
        kind: String,
        lexeme: "\"\\0\\0\\0\"",
        line: 55,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 55,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 55,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 55,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 56,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 56,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 56,
    },
    Token {
        kind: String,
        lexeme: "\"1234567890\"",
        line: 56,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 56,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 56,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 58,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 58,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "byte",
        line: 58,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 58,
    },
    Token {
        kind: String,
        lexeme: "\"a\"",
        line: 58,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 58,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 58,
    },
    Token {
        kind: Number,
        lexeme: "97",
        line: 58,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 59,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 59,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "byte",
        line: 59,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 59,
    },
    Token {
        kind: String,
        lexeme: "\"�\"",
        line: 59,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 59,
    },
    Token {
        kind: GreaterThan,
        lexeme: ">",
        line: 59,
    },
    Token {
        kind: Number,
        lexeme: "127",
        line: 59,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 60,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 60,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "byte",
        line: 60,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 60,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "char",
        line: 60,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: "255",
        line: 60,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 60,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 60,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: "255",
        line: 60,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 61,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 61,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "byte",
        line: 61,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 61,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "char",
        line: 61,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 61,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 61,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 61,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 61,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 61,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 61,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 62,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 62,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "byte",
        line: 62,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 62,
    },
    Token {
        kind: String,
        lexeme: "\"\\0\"",
        line: 62,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 62,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 62,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 62,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 63,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 63,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "byte",
        line: 63,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 63,
    },
    Token {
        kind: String,
        lexeme: "\"\\0\\0alo\\0x\"",
        line: 63,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 63,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 63,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 63,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 63,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 63,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "byte",
        line: 63,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 63,
    },
    Token {
        kind: String,
        lexeme: "'x'",
        line: 63,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 63,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 64,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 64,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "byte",
        line: 64,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 64,
    },
    Token {
        kind: String,
        lexeme: "\"ba\"",
        line: 64,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 64,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 64,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 64,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 64,
    },
    Token {
        kind: Number,
        lexeme: "97",
        line: 64,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 65,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 65,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "byte",
        line: 65,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 65,
    },
    Token {
        kind: String,
        lexeme: "\"\\n\\n\"",
        line: 65,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 65,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 65,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 65,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 65,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 65,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 65,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 65,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 65,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 66,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 66,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "byte",
        line: 66,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 66,
    },
    Token {
        kind: String,
        lexeme: "\"\\n\\n\"",
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 66,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 66,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 66,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 66,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 66,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 66,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 67,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 67,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "byte",
        line: 67,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 67,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 67,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 67,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 67,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 67,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 68,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 68,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "byte",
        line: 68,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 68,
    },
    Token {
        kind: String,
        lexeme: "\"hi\"",
        line: 68,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 68,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 68,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 68,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 68,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 69,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 69,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "byte",
        line: 69,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 69,
    },
    Token {
        kind: String,
        lexeme: "\"hi\"",
        line: 69,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 69,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 69,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 69,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 69,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 69,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 70,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 70,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: "byte",
        line: 70,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 70,
    },
    Token {
        kind: String,
        lexeme: "\"hi\"",
        line: 70,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 70,
    },
    Token {
        kind: Number,
        lexeme: "9",
        line: 70,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 70,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 70,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 70,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 70,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 70,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 71,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 71,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "byte",
        line: 71,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 71,
    },
    Token {
        kind: String,
        lexeme: "\"hi\"",
        line: 71,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 71,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 71,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 71,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 71,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 71,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 71,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 71,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 72,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 72,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "char",
        line: 72,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 72,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 72,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 72,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 72,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 73,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 73,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "char",
        line: 73,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 73,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 73,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 73,
    },
    Token {
        kind: Number,
        lexeme: "255",
        line: 73,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 73,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 73,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 73,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 73,
    },
    Token {
        kind: String,
        lexeme: "\"\\0\\255\\0\"",
        line: 73,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 74,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 74,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "char",
        line: 74,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 74,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 74,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 74,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "byte",
        line: 74,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 74,
    },
    Token {
        kind: String,
        lexeme: "\"�\"",
        line: 74,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 74,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 74,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 74,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 74,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 74,
    },
    Token {
        kind: String,
        lexeme: "\"\\0�\\0\"",
        line: 74,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 75,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 75,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "char",
        line: 75,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 75,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "byte",
        line: 75,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 75,
    },
    Token {
        kind: String,
        lexeme: "\"�l\\0�u\"",
        line: 75,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 75,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 75,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 75,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 75,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 75,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 75,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 75,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 75,
    },
    Token {
        kind: String,
        lexeme: "\"�l\\0�u\"",
        line: 75,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 76,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 76,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: "char",
        line: 76,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 76,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: "byte",
        line: 76,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 76,
    },
    Token {
        kind: String,
        lexeme: "\"�l\\0�u\"",
        line: 76,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 76,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 76,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 76,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 76,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 76,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 76,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 76,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 76,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 77,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 77,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "char",
        line: 77,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 77,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "byte",
        line: 77,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 77,
    },
    Token {
        kind: String,
        lexeme: "\"�l\\0�u\"",
        line: 77,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 77,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 77,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 77,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 77,
    },
    Token {
        kind: Number,
        lexeme: "100",
        line: 77,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 77,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 77,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 77,
    },
    Token {
        kind: String,
        lexeme: "\"�l\\0�u\"",
        line: 77,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 78,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 78,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 78,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 80,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "upper",
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 80,
    },
    Token {
        kind: String,
        lexeme: "\"ab\\0c\"",
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 80,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 80,
    },
    Token {
        kind: String,
        lexeme: "\"AB\\0C\"",
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 81,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 81,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "lower",
        line: 81,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 81,
    },
    Token {
        kind: String,
        lexeme: "\"\\0ABCc%$\"",
        line: 81,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 81,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 81,
    },
    Token {
        kind: String,
        lexeme: "\"\\0abcc%$\"",
        line: 81,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 82,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 82,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 82,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 82,
    },
    Token {
        kind: String,
        lexeme: "'teste'",
        line: 82,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 82,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 82,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 82,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 82,
    },
    Token {
        kind: String,
        lexeme: "''",
        line: 82,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 83,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 83,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 83,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 83,
    },
    Token {
        kind: String,
        lexeme: "'t�s\\00t�'",
        line: 83,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 83,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 83,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 83,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 83,
    },
    Token {
        kind: String,
        lexeme: "'t�s\\0t�t�s\\000t�'",
        line: 83,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 84,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 84,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 84,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 84,
    },
    Token {
        kind: String,
        lexeme: "''",
        line: 84,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 84,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 84,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 84,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 84,
    },
    Token {
        kind: String,
        lexeme: "''",
        line: 84,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 86,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 86,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "reverse",
        line: 86,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 86,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 86,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 86,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 87,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 87,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "reverse",
        line: 87,
    },
    Token {
        kind: String,
        lexeme: "\"\\0\\1\\2\\3\"",
        line: 87,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 87,
    },
    Token {
        kind: String,
        lexeme: "\"\\3\\2\\1\\0\"",
        line: 87,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 88,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 88,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "reverse",
        line: 88,
    },
    Token {
        kind: String,
        lexeme: "\"\\0001234\"",
        line: 88,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 88,
    },
    Token {
        kind: String,
        lexeme: "\"4321\\0\"",
        line: 88,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 88,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 90,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 90,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 90,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 90,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 90,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 90,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        line: 90,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 90,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 90,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 90,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 90,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 90,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 90,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 90,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 90,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 92,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 92,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "tostring",
        line: 92,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 92,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 92,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 92,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 92,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 92,
    },
    Token {
        kind: String,
        lexeme: "'string'",
        line: 92,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 93,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 93,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: "tostring",
        line: 93,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 93,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 93,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 93,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 93,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 93,
    },
    Token {
        kind: String,
        lexeme: "'string'",
        line: 93,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 94,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 94,
    },
    Token {
        kind: String,
        lexeme: "''",
        line: 94,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 94,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 94,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 94,
    },
    Token {
        kind: String,
        lexeme: "'12'",
        line: 94,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 94,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 94,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 94,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 94,
    },
    Token {
        kind: String,
        lexeme: "''",
        line: 94,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 94,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 94,
    },
    Token {
        kind: String,
        lexeme: "'string'",
        line: 94,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 95,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 95,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 95,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "tostring",
        line: 95,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 95,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 95,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 95,
    },
    Token {
        kind: String,
        lexeme: "'table:'",
        line: 95,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 95,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 96,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 96,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 96,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "tostring",
        line: 96,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 96,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 96,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 96,
    },
    Token {
        kind: String,
        lexeme: "'function:'",
        line: 96,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 96,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 97,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "tostring",
        line: 97,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 97,
    },
    Token {
        kind: Number,
        lexeme: "1234567890123",
        line: 97,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 97,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 97,
    },
    Token {
        kind: String,
        lexeme: "'1234567890123'",
        line: 97,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 98,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 98,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "tostring",
        line: 98,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 98,
    },
    Token {
        kind: String,
        lexeme: "'\\0'",
        line: 98,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 98,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 98,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 98,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 99,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: "tostring",
        line: 99,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 99,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 99,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 99,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 99,
    },
    Token {
        kind: String,
        lexeme: "\"true\"",
        line: 99,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 100,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: "tostring",
        line: 100,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 100,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 100,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 100,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 100,
    },
    Token {
        kind: String,
        lexeme: "\"false\"",
        line: 100,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 101,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 101,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 101,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 103,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 103,
    },
    Token {
        kind: String,
        lexeme: "'\"�lo\"\\n\\\\'",
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 104,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 104,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 104,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 104,
    },
    Token {
        kind: String,
        lexeme: "'%q%s'",
        line: 104,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 104,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 104,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 104,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 104,
    },
    Token {
        kind: String,
        lexeme: "'\"\\\\\"�lo\\\\\"\\\\\\n\\\\\\\\\"\"�lo\"\\n\\\\'",
        line: 104,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 105,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 105,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 105,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 105,
    },
    Token {
        kind: String,
        lexeme: "'%q'",
        line: 105,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 105,
    },
    Token {
        kind: String,
        lexeme: "\"\\0\"",
        line: 105,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 105,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 105,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\"\\000\"]]",
        line: 105,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 106,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 106,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 106,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 106,
    },
    Token {
        kind: String,
        lexeme: "\"\\0%c\\0%c%x\\0\"",
        line: 106,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 106,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "byte",
        line: 106,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 106,
    },
    Token {
        kind: String,
        lexeme: "\"�\"",
        line: 106,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 106,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 106,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "byte",
        line: 106,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 106,
    },
    Token {
        kind: String,
        lexeme: "\"b\"",
        line: 106,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 106,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 106,
    },
    Token {
        kind: Number,
        lexeme: "140",
        line: 106,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 106,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 106,
    },
    Token {
        kind: String,
        lexeme: "\"\\0�\\0b8c\\0\"",
        line: 107,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 108,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 108,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 108,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 108,
    },
    Token {
        kind: String,
        lexeme: "''",
        line: 108,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 108,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 108,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 108,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 109,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 109,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 109,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 109,
    },
    Token {
        kind: String,
        lexeme: "\"%c\"",
        line: 109,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 109,
    },
    Token {
        kind: Number,
        lexeme: "34",
        line: 109,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 109,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 109,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 109,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 109,
    },
    Token {
        kind: String,
        lexeme: "\"%c\"",
        line: 109,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 109,
    },
    Token {
        kind: Number,
        lexeme: "48",
        line: 109,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 109,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 109,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 109,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 109,
    },
    Token {
        kind: String,
        lexeme: "\"%c\"",
        line: 109,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 109,
    },
    Token {
        kind: Number,
        lexeme: "90",
        line: 109,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 109,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 109,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 109,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 109,
    },
    Token {
        kind: String,
        lexeme: "\"%c\"",
        line: 109,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 109,
    },
    Token {
        kind: Number,
        lexeme: "100",
        line: 109,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 109,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 110,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 110,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 110,
    },
    Token {
        kind: String,
        lexeme: "\"%c%c%c%c\"",
        line: 110,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 110,
    },
    Token {
        kind: Number,
        lexeme: "34",
        line: 110,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 110,
    },
    Token {
        kind: Number,
        lexeme: "48",
        line: 110,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 110,
    },
    Token {
        kind: Number,
        lexeme: "90",
        line: 110,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 110,
    },
    Token {
        kind: Number,
        lexeme: "100",
        line: 110,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 110,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 111,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 111,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 111,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 111,
    },
    Token {
        kind: String,
        lexeme: "\"%s\\0 is not \\0%s\"",
        line: 111,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 111,
    },
    Token {
        kind: String,
        lexeme: "'not be'",
        line: 111,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 111,
    },
    Token {
        kind: String,
        lexeme: "'be'",
        line: 111,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 111,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 111,
    },
    Token {
        kind: String,
        lexeme: "'not be\\0 is not \\0be'",
        line: 111,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 112,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 112,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 112,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 112,
    },
    Token {
        kind: String,
        lexeme: "\"%%%d %010d\"",
        line: 112,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 112,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 112,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 112,
    },
    Token {
        kind: Number,
        lexeme: "23",
        line: 112,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 112,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 112,
    },
    Token {
        kind: String,
        lexeme: "\"%10 0000000023\"",
        line: 112,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 113,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: "tonumber",
        line: 113,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 113,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 113,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 113,
    },
    Token {
        kind: String,
        lexeme: "\"%f\"",
        line: 113,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 113,
    },
    Token {
        kind: Number,
        lexeme: "10.3",
        line: 113,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 113,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 113,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 113,
    },
    Token {
        kind: Number,
        lexeme: "10.3",
        line: 113,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 114,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 114,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 114,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 114,
    },
    Token {
        kind: String,
        lexeme: "'\"%-50s\"'",
        line: 114,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 114,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 114,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 115,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 115,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 115,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 115,
    },
    Token {
        kind: Number,
        lexeme: "52",
        line: 115,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 116,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 116,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "sub",
        line: 116,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 116,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 116,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 116,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 116,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 116,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 116,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 116,
    },
    Token {
        kind: String,
        lexeme: "'\"a  '",
        line: 116,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 118,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 118,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 118,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 118,
    },
    Token {
        kind: String,
        lexeme: "\"-%.20s.20s\"",
        line: 118,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 118,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 118,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 118,
    },
    Token {
        kind: String,
        lexeme: "\"%\"",
        line: 118,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 118,
    },
    Token {
        kind: Number,
        lexeme: "2000",
        line: 118,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 118,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 118,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 118,
    },
    Token {
        kind: String,
        lexeme: "\"-\"",
        line: 118,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 118,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 118,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 118,
    },
    Token {
        kind: String,
        lexeme: "\"%\"",
        line: 118,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 118,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 118,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 118,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 118,
    },
    Token {
        kind: String,
        lexeme: "\".20s\"",
        line: 118,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 119,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 119,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 119,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 119,
    },
    Token {
        kind: String,
        lexeme: "'\"-%20s.20s\"'",
        line: 119,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 119,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 119,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 119,
    },
    Token {
        kind: String,
        lexeme: "\"%\"",
        line: 119,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 119,
    },
    Token {
        kind: Number,
        lexeme: "2000",
        line: 119,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 119,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 119,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 120,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 120,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 120,
    },
    Token {
        kind: String,
        lexeme: "\"%q\"",
        line: 120,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 120,
    },
    Token {
        kind: String,
        lexeme: "\"-\"",
        line: 120,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 120,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 120,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 120,
    },
    Token {
        kind: String,
        lexeme: "\"%\"",
        line: 120,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 120,
    },
    Token {
        kind: Number,
        lexeme: "2000",
        line: 120,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 120,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 120,
    },
    Token {
        kind: String,
        lexeme: "\".20s\"",
        line: 120,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 120,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 124,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 124,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        line: 124,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 124,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 124,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 124,
    },
    Token {
        kind: String,
        lexeme: "'%99.99f'",
        line: 124,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 124,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 124,
    },
    Token {
        kind: Number,
        lexeme: "1e308",
        line: 124,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 124,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 124,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: ">=",
        line: 124,
    },
    Token {
        kind: Number,
        lexeme: "100",
        line: 124,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 126,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 126,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 126,
    },
    Token {
        kind: String,
        lexeme: "\"return 1\\n--coment�rio sem EOL no final\"",
        line: 126,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 126,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 126,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 126,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 126,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 126,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 129,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 129,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "concat",
        line: 129,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 129,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 129,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 129,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 129,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 130,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 130,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: "concat",
        line: 130,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 130,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 130,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 130,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 130,
    },
    Token {
        kind: String,
        lexeme: "'x'",
        line: 130,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 130,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 130,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 130,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 131,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 131,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "concat",
        line: 131,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 131,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 131,
    },
    Token {
        kind: String,
        lexeme: "'\\0'",
        line: 131,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 131,
    },
    Token {
        kind: String,
        lexeme: "'\\0\\1'",
        line: 131,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 131,
    },
    Token {
        kind: String,
        lexeme: "'\\0\\1\\2'",
        line: 131,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 131,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 131,
    },
    Token {
        kind: String,
        lexeme: "'.\\0.'",
        line: 131,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 131,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 131,
    },
    Token {
        kind: String,
        lexeme: "\"\\0.\\0.\\0\\1.\\0.\\0\\1\\2\"",
        line: 131,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 131,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 132,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 132,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 132,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 132,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 132,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 133,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 133,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 133,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 133,
    },
    Token {
        kind: Number,
        lexeme: "3000",
        line: 133,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 133,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 133,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 133,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 133,
    },
    Token {
        kind: String,
        lexeme: "\"xuxu\"",
        line: 133,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 134,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 134,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "concat",
        line: 134,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 134,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 134,
    },
    Token {
        kind: String,
        lexeme: "\"123\"",
        line: 134,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 134,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 134,
    },
    Token {
        kind: String,
        lexeme: "\"123\"",
        line: 134,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 134,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 134,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 134,
    },
    Token {
        kind: String,
        lexeme: "\"xuxu123\"",
        line: 134,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 134,
    },
    Token {
        kind: Number,
        lexeme: "3000",
        line: 134,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 134,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 135,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 135,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "concat",
        line: 135,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 135,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 135,
    },
    Token {
        kind: String,
        lexeme: "\"b\"",
        line: 135,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 135,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 135,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 135,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 135,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 135,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 135,
    },
    Token {
        kind: String,
        lexeme: "\"xuxu\"",
        line: 135,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 136,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 136,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "concat",
        line: 136,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 136,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 136,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 136,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 136,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 136,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 136,
    },
    Token {
        kind: Number,
        lexeme: "21",
        line: 136,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 136,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 136,
    },
    Token {
        kind: String,
        lexeme: "\"xuxuxuxu\"",
        line: 136,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 137,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 137,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "concat",
        line: 137,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 137,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 137,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 137,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 137,
    },
    Token {
        kind: Number,
        lexeme: "22",
        line: 137,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 137,
    },
    Token {
        kind: Number,
        lexeme: "21",
        line: 137,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 137,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 137,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 137,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 138,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 138,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "concat",
        line: 138,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 138,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 138,
    },
    Token {
        kind: String,
        lexeme: "\"3\"",
        line: 138,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 138,
    },
    Token {
        kind: Number,
        lexeme: "2999",
        line: 138,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 138,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 138,
    },
    Token {
        kind: String,
        lexeme: "\"xuxu3xuxu\"",
        line: 138,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 140,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 140,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 140,
    },
    Token {
        kind: String,
        lexeme: "\"a\"",
        line: 140,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 140,
    },
    Token {
        kind: String,
        lexeme: "\"b\"",
        line: 140,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 140,
    },
    Token {
        kind: String,
        lexeme: "\"c\"",
        line: 140,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 141,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 141,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: "concat",
        line: 141,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 141,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 141,
    },
    Token {
        kind: String,
        lexeme: "\",\"",
        line: 141,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 141,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 141,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 141,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 141,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 141,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 141,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 141,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 142,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 142,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "concat",
        line: 142,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 142,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 142,
    },
    Token {
        kind: String,
        lexeme: "\",\"",
        line: 142,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 142,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 142,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 142,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 142,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 142,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 142,
    },
    Token {
        kind: String,
        lexeme: "\"a\"",
        line: 142,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 143,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 143,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "concat",
        line: 143,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 143,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 143,
    },
    Token {
        kind: String,
        lexeme: "\",\"",
        line: 143,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 143,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 143,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 143,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 143,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 143,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 143,
    },
    Token {
        kind: String,
        lexeme: "\"a,b\"",
        line: 143,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 144,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 144,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "concat",
        line: 144,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 144,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 144,
    },
    Token {
        kind: String,
        lexeme: "\",\"",
        line: 144,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 144,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 144,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 144,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 144,
    },
    Token {
        kind: String,
        lexeme: "\"b,c\"",
        line: 144,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 145,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 145,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "concat",
        line: 145,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 145,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 145,
    },
    Token {
        kind: String,
        lexeme: "\",\"",
        line: 145,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 145,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 145,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 145,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 145,
    },
    Token {
        kind: String,
        lexeme: "\"c\"",
        line: 145,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 146,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 146,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "concat",
        line: 146,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 146,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 146,
    },
    Token {
        kind: String,
        lexeme: "\",\"",
        line: 146,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 146,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 146,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 146,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 146,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 146,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 146,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 148,
    },
    Token {
        kind: Identifier,
        lexeme: "locales",
        line: 148,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 148,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 148,
    },
    Token {
        kind: String,
        lexeme: "\"ptb\"",
        line: 148,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 148,
    },
    Token {
        kind: String,
        lexeme: "\"ISO-8859-1\"",
        line: 148,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 148,
    },
    Token {
        kind: String,
        lexeme: "\"pt_BR\"",
        line: 148,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 148,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 149,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: "trylocale",
        line: 149,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: "w",
        line: 149,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 149,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: "_",
        line: 150,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 150,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: "ipairs",
        line: 150,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: "locales",
        line: 150,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 150,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 150,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 151,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: "setlocale",
        line: 151,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 151,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: "w",
        line: 151,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 151,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 151,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 151,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 151,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 151,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 152,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 153,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 153,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 154,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 156,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "trylocale",
        line: 156,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 156,
    },
    Token {
        kind: String,
        lexeme: "\"collate\"",
        line: 156,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 156,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 157,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 157,
    },
    Token {
        kind: String,
        lexeme: "\"locale not supported\"",
        line: 157,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 157,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 159,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 159,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 159,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 159,
    },
    Token {
        kind: String,
        lexeme: "\"�lo\"",
        line: 159,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 159,
    },
    Token {
        kind: String,
        lexeme: "\"�lo\"",
        line: 159,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 159,
    },
    Token {
        kind: String,
        lexeme: "\"amo\"",
        line: 159,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 159,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 160,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 162,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "trylocale",
        line: 162,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 162,
    },
    Token {
        kind: String,
        lexeme: "\"ctype\"",
        line: 162,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 162,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 163,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 163,
    },
    Token {
        kind: String,
        lexeme: "\"locale not supported\"",
        line: 163,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 163,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 165,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 165,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 165,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 165,
    },
    Token {
        kind: String,
        lexeme: "\"�����\"",
        line: 165,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 165,
    },
    Token {
        kind: String,
        lexeme: "\"%a\"",
        line: 165,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 165,
    },
    Token {
        kind: String,
        lexeme: "\"x\"",
        line: 165,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 165,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 165,
    },
    Token {
        kind: String,
        lexeme: "\"xxxxx\"",
        line: 165,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 166,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 166,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 166,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 166,
    },
    Token {
        kind: String,
        lexeme: "\"����\"",
        line: 166,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 166,
    },
    Token {
        kind: String,
        lexeme: "\"%l\"",
        line: 166,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 166,
    },
    Token {
        kind: String,
        lexeme: "\"x\"",
        line: 166,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 166,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 166,
    },
    Token {
        kind: String,
        lexeme: "\"x�x�\"",
        line: 166,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 167,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 167,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 167,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 167,
    },
    Token {
        kind: String,
        lexeme: "\"����\"",
        line: 167,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 167,
    },
    Token {
        kind: String,
        lexeme: "\"%u\"",
        line: 167,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 167,
    },
    Token {
        kind: String,
        lexeme: "\"x\"",
        line: 167,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 167,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 167,
    },
    Token {
        kind: String,
        lexeme: "\"�x�x\"",
        line: 167,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 168,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 168,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 168,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 168,
    },
    Token {
        kind: Identifier,
        lexeme: "upper",
        line: 168,
    },
    Token {
        kind: String,
        lexeme: "\"���{xuxu}��o\"",
        line: 168,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 168,
    },
    Token {
        kind: String,
        lexeme: "\"���{XUXU}��O\"",
        line: 168,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 168,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 171,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: "setlocale",
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 171,
    },
    Token {
        kind: String,
        lexeme: "\"C\"",
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 172,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "setlocale",
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 172,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 172,
    },
    Token {
        kind: String,
        lexeme: "'C'",
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 173,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 173,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: "setlocale",
        line: 173,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 173,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 173,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 173,
    },
    Token {
        kind: String,
        lexeme: "\"numeric\"",
        line: 173,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 173,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 173,
    },
    Token {
        kind: String,
        lexeme: "'C'",
        line: 173,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 175,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 175,
    },
    Token {
        kind: String,
        lexeme: "'OK'",
        line: 175,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 175,
    },
]
