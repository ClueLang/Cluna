---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.1-tests/all.lua
---
[
    Token {
        kind: Identifier,
        lexeme: "math",
        line: 3,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "randomseed",
        line: 3,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 3,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 3,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 5,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 5,
    },
    Token {
        kind: String,
        lexeme: "\"setstepmul\"",
        line: 5,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 5,
    },
    Token {
        kind: Number,
        lexeme: "180",
        line: 5,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 6,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 6,
    },
    Token {
        kind: String,
        lexeme: "\"setpause\"",
        line: 6,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 6,
    },
    Token {
        kind: Number,
        lexeme: "190",
        line: 6,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 15,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 15,
    },
    Token {
        kind: String,
        lexeme: "\"current path:\\n  \"",
        line: 15,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 15,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 15,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "package",
        line: 15,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "path",
        line: 15,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 15,
    },
    Token {
        kind: String,
        lexeme: "\";\"",
        line: 15,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 15,
    },
    Token {
        kind: String,
        lexeme: "\"\\n  \"",
        line: 15,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 15,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 15,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "msgs",
        line: 18,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 18,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 18,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 18,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "Message",
        line: 19,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 19,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 20,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 20,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "msgs",
        line: 21,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 21,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "msgs",
        line: 21,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 21,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 21,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 21,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 21,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "sub",
        line: 21,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 21,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 21,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 21,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 21,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 21,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 21,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 21,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 22,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 24,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 24,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "clock",
        line: 24,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 24,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 26,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 26,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "setlocale",
        line: 26,
    },
    Token {
        kind: String,
        lexeme: "\"C\"",
        line: 26,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 26,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "gcinfo",
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 28,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 29,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 29,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "gcinfo",
        line: 29,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 29,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 29,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 29,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 29,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 29,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 29,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 31,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "formatmem",
        line: 31,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 31,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 31,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 32,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 32,
    },
    Token {
        kind: Number,
        lexeme: "1024",
        line: 32,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 32,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 32,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 34,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 34,
    },
    Token {
        kind: Slash,
        lexeme: "/",
        line: 34,
    },
    Token {
        kind: Number,
        lexeme: "1024",
        line: 34,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 34,
    },
    Token {
        kind: Slash,
        lexeme: "/",
        line: 34,
    },
    Token {
        kind: Number,
        lexeme: "1024",
        line: 34,
    },
    Token {
        kind: Percent,
        lexeme: "%",
        line: 34,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 34,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 35,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 35,
    },
    Token {
        kind: Number,
        lexeme: "1024",
        line: 35,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 35,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 35,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 35,
    },
    Token {
        kind: String,
        lexeme: "\"K\"",
        line: 35,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 37,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 37,
    },
    Token {
        kind: Slash,
        lexeme: "/",
        line: 37,
    },
    Token {
        kind: Number,
        lexeme: "1024",
        line: 37,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 37,
    },
    Token {
        kind: Slash,
        lexeme: "/",
        line: 37,
    },
    Token {
        kind: Number,
        lexeme: "1024",
        line: 37,
    },
    Token {
        kind: Percent,
        lexeme: "%",
        line: 37,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 37,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 38,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 38,
    },
    Token {
        kind: String,
        lexeme: "\"M\"",
        line: 38,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 39,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 40,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 41,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "showmem",
        line: 43,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 43,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 43,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 43,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 43,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 44,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 44,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 45,
    },
    Token {
        kind: String,
        lexeme: "\"    ---- total memory: %s ----\\n\"",
        line: 45,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "formatmem",
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "gcinfo",
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 45,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 47,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmemory",
        line: 47,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 47,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 47,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 48,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 48,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 48,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 48,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "totalmem",
        line: 48,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 48,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 48,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 49,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 49,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: "gcinfo",
        line: 49,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 49,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 50,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 50,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 50,
    },
    Token {
        kind: String,
        lexeme: "\"\\n    ---- total memory: %s (%dK), max use: %s,  blocks: %d\\n\"",
        line: 51,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "formatmem",
        line: 52,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 52,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 52,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 52,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "formatmem",
        line: 52,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 52,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 52,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 52,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 52,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 52,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 53,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: "dofile",
        line: 60,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 60,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 60,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 60,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "showmem",
        line: 61,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 61,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 61,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 62,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 62,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "loadfile",
        line: 62,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 62,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 62,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 62,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 63,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 63,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "dump",
        line: 63,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 63,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 64,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 64,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 64,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 64,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 64,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 64,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 65,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 65,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 65,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "dofile",
        line: 68,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 68,
    },
    Token {
        kind: String,
        lexeme: "'main.lua'",
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 68,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 70,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        line: 71,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "newproxy",
        line: 71,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 71,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 71,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 71,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "newproxy",
        line: 72,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "stderr",
        line: 72,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "newproxy",
        line: 72,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 72,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "stderr",
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 73,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        line: 73,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 73,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "__gc",
        line: 73,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 73,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 73,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "o",
        line: 73,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "stderr",
        line: 74,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 74,
    },
    Token {
        kind: String,
        lexeme: "'.'",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "newproxy",
        line: 75,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "o",
        line: 75,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 75,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 76,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 77,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 79,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 79,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "loadfile",
        line: 79,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 79,
    },
    Token {
        kind: String,
        lexeme: "'gc.lua'",
        line: 79,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 79,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "dofile",
        line: 81,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 81,
    },
    Token {
        kind: String,
        lexeme: "'db.lua'",
        line: 81,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 82,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: "dofile",
        line: 82,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 82,
    },
    Token {
        kind: String,
        lexeme: "'calls.lua'",
        line: 82,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 82,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 82,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: "deep",
        line: 82,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: "deep",
        line: 82,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: "dofile",
        line: 83,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 83,
    },
    Token {
        kind: String,
        lexeme: "'strings.lua'",
        line: 83,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: "dofile",
        line: 84,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 84,
    },
    Token {
        kind: String,
        lexeme: "'literals.lua'",
        line: 84,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 85,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: "dofile",
        line: 85,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 85,
    },
    Token {
        kind: String,
        lexeme: "'attrib.lua'",
        line: 85,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 85,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 85,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 85,
    },
    Token {
        kind: Number,
        lexeme: "27",
        line: 85,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 86,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "dofile",
        line: 86,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 86,
    },
    Token {
        kind: String,
        lexeme: "'locals.lua'",
        line: 86,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 86,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 86,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 86,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 86,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "dofile",
        line: 87,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 87,
    },
    Token {
        kind: String,
        lexeme: "'constructs.lua'",
        line: 87,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "dofile",
        line: 88,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 88,
    },
    Token {
        kind: String,
        lexeme: "'code.lua'",
        line: 88,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 88,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 89,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 90,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "coroutine",
        line: 90,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "wrap",
        line: 90,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 90,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "loadfile",
        line: 90,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 90,
    },
    Token {
        kind: String,
        lexeme: "'big.lua'",
        line: 90,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 90,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 90,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 91,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 91,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 91,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 91,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 91,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 91,
    },
    Token {
        kind: String,
        lexeme: "'b'",
        line: 91,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 92,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 92,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 92,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 92,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 92,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 92,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 92,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 92,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: "dofile",
        line: 94,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 94,
    },
    Token {
        kind: String,
        lexeme: "'nextvar.lua'",
        line: 94,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: "dofile",
        line: 95,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 95,
    },
    Token {
        kind: String,
        lexeme: "'pm.lua'",
        line: 95,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "dofile",
        line: 96,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 96,
    },
    Token {
        kind: String,
        lexeme: "'api.lua'",
        line: 96,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 97,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "dofile",
        line: 97,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 97,
    },
    Token {
        kind: String,
        lexeme: "'events.lua'",
        line: 97,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 97,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 97,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 97,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 97,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "dofile",
        line: 98,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 98,
    },
    Token {
        kind: String,
        lexeme: "'vararg.lua'",
        line: 98,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "dofile",
        line: 99,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 99,
    },
    Token {
        kind: String,
        lexeme: "'closure.lua'",
        line: 99,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: "dofile",
        line: 100,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 100,
    },
    Token {
        kind: String,
        lexeme: "'errors.lua'",
        line: 100,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: "dofile",
        line: 101,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 101,
    },
    Token {
        kind: String,
        lexeme: "'math.lua'",
        line: 101,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: "dofile",
        line: 102,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 102,
    },
    Token {
        kind: String,
        lexeme: "'sort.lua'",
        line: 102,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 103,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: "dofile",
        line: 103,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 103,
    },
    Token {
        kind: String,
        lexeme: "'verybig.lua'",
        line: 103,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 103,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 103,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 103,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 103,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 103,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 104,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 104,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: "dofile",
        line: 105,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 105,
    },
    Token {
        kind: String,
        lexeme: "'files.lua'",
        line: 105,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 105,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 107,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: "msgs",
        line: 107,
    },
    Token {
        kind: GreaterThan,
        lexeme: ">",
        line: 107,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 107,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 108,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 108,
    },
    Token {
        kind: String,
        lexeme: "\"\\ntests not performed:\"",
        line: 108,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 108,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 109,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 109,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 109,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 109,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "msgs",
        line: 109,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 110,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "msgs",
        line: 110,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 110,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 110,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 110,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 112,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 112,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 112,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 115,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 115,
    },
    Token {
        kind: String,
        lexeme: "\"final OK !!!\"",
        line: 115,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 116,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 116,
    },
    Token {
        kind: String,
        lexeme: "'cleaning all!!!!'",
        line: 116,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 118,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "sethook",
        line: 118,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 118,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 118,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 118,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 118,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 118,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 118,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 118,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 118,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 118,
    },
    Token {
        kind: String,
        lexeme: "'string'",
        line: 118,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 118,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 118,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 118,
    },
    Token {
        kind: String,
        lexeme: "\"cr\"",
        line: 118,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 118,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 120,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 120,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "showmem",
        line: 120,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 120,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 120,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "clock",
        line: 120,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 121,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 121,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: "showmem",
        line: 121,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 121,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 121,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 121,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: "clock",
        line: 121,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 123,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 123,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 123,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 123,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 124,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        line: 124,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 124,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 124,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 124,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 124,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 124,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 124,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 124,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 125,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "tostring",
        line: 125,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 125,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 126,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "___Glob",
        line: 126,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 126,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 126,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 127,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        line: 127,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 127,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 127,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 127,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 127,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 127,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 127,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 127,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 129,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 129,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 130,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 130,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 131,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 131,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 132,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 132,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 133,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 133,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 134,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 134,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 135,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 135,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 135,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "showmem",
        line: 136,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 136,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 138,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 138,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 138,
    },
    Token {
        kind: String,
        lexeme: "\"\\n\\ntotal time: %.2f\\n\"",
        line: 138,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "clock",
        line: 138,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 138,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 138,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 138,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 138,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 138,
    },
]
