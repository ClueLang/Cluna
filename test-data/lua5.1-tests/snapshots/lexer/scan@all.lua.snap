---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.1-tests/all.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 3,
        column: 5,
        span: 12..16,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 3,
        column: 6,
        span: 16..17,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "randomseed",
        ),
        line: 3,
        column: 16,
        span: 17..27,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 3,
        column: 17,
        span: 27..28,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 3,
        column: 18,
        span: 27..29,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 3,
        column: 19,
        span: 29..30,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 5,
        column: 15,
        span: 32..46,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 5,
        column: 16,
        span: 46..47,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"setstepmul\"",
        ),
        line: 5,
        column: 28,
        span: 47..59,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 5,
        column: 29,
        span: 59..60,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "180",
                    after_decimal: "",
                },
            ),
        ),
        line: 5,
        column: 33,
        span: 60..64,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 5,
        column: 34,
        span: 64..65,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 6,
        column: 15,
        span: 66..80,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 6,
        column: 16,
        span: 80..81,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"setpause\"",
        ),
        line: 6,
        column: 26,
        span: 81..91,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 6,
        column: 27,
        span: 91..92,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "190",
                    after_decimal: "",
                },
            ),
        ),
        line: 6,
        column: 31,
        span: 92..96,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 6,
        column: 32,
        span: 96..97,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 15,
        column: 6,
        span: 174..179,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
        column: 7,
        span: 179..180,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"current path:\\n  \"",
        ),
        line: 15,
        column: 26,
        span: 180..199,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 15,
        column: 29,
        span: 200..202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 15,
        column: 36,
        span: 203..209,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 15,
        column: 37,
        span: 209..210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 15,
        column: 41,
        span: 210..214,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
        column: 42,
        span: 214..215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 15,
        column: 49,
        span: 215..222,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 15,
        column: 50,
        span: 222..223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 15,
        column: 54,
        span: 223..227,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 15,
        column: 55,
        span: 227..228,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        line: 15,
        column: 59,
        span: 229..232,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 15,
        column: 60,
        span: 232..233,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n  \"",
        ),
        line: 15,
        column: 67,
        span: 234..240,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
        column: 68,
        span: 240..241,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
        column: 69,
        span: 241..242,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 18,
        column: 6,
        span: 245..250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgs",
        ),
        line: 18,
        column: 11,
        span: 251..255,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 18,
        column: 13,
        span: 256..257,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 18,
        column: 15,
        span: 258..259,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 18,
        column: 16,
        span: 259..260,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 19,
        column: 9,
        span: 261..269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        line: 19,
        column: 17,
        span: 270..277,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 18,
        span: 277..278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 19,
        column: 19,
        span: 278..279,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 20,
        span: 279..280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 20,
        column: 8,
        span: 283..288,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 9,
        span: 288..289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 20,
        column: 10,
        span: 289..290,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 11,
        span: 290..291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgs",
        ),
        line: 21,
        column: 7,
        span: 294..298,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 21,
        column: 8,
        span: 298..299,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 21,
        column: 9,
        span: 299..300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgs",
        ),
        line: 21,
        column: 13,
        span: 300..304,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 21,
        column: 15,
        span: 305..306,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 21,
        column: 17,
        span: 306..308,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 21,
        column: 18,
        span: 308..309,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 21,
        column: 20,
        span: 310..311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 21,
        column: 27,
        span: 312..318,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 21,
        column: 28,
        span: 318..319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 21,
        column: 31,
        span: 319..322,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
        column: 32,
        span: 322..323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 21,
        column: 33,
        span: 323..324,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 21,
        column: 34,
        span: 324..325,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 21,
        column: 36,
        span: 325..327,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 21,
        column: 37,
        span: 327..328,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 21,
        column: 39,
        span: 329..330,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 21,
        column: 40,
        span: 329..331,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
        column: 41,
        span: 331..332,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 22,
        column: 0,
        span: 333..336,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 24,
        column: 6,
        span: 338..343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 24,
        column: 8,
        span: 344..345,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 24,
        column: 10,
        span: 346..347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 24,
        column: 13,
        span: 348..350,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 24,
        column: 14,
        span: 350..351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        line: 24,
        column: 19,
        span: 351..356,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 24,
        column: 20,
        span: 356..357,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 24,
        column: 21,
        span: 357..358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 26,
        column: 7,
        span: 360..366,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
        column: 8,
        span: 366..367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 26,
        column: 10,
        span: 367..369,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 26,
        column: 11,
        span: 369..370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocale",
        ),
        line: 26,
        column: 20,
        span: 370..379,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C\"",
        ),
        line: 26,
        column: 24,
        span: 380..383,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
        column: 25,
        span: 383..384,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 28,
        column: 6,
        span: 386..391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 28,
        column: 8,
        span: 392..393,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 28,
        column: 9,
        span: 393..394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 28,
        column: 15,
        span: 395..400,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 28,
        column: 16,
        span: 400..401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcinfo",
        ),
        line: 28,
        column: 23,
        span: 402..408,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 28,
        column: 24,
        span: 408..409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 28,
        column: 31,
        span: 410..416,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 28,
        column: 32,
        span: 416..417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 28,
        column: 38,
        span: 418..423,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 28,
        column: 39,
        span: 423..424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 28,
        column: 46,
        span: 425..431,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 28,
        column: 47,
        span: 431..432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 28,
        column: 52,
        span: 433..437,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 28,
        column: 54,
        span: 438..439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 29,
        column: 2,
        span: 440..441,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 29,
        column: 3,
        span: 441..442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 29,
        column: 9,
        span: 443..448,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 29,
        column: 10,
        span: 448..449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcinfo",
        ),
        line: 29,
        column: 17,
        span: 450..456,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 29,
        column: 18,
        span: 456..457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 29,
        column: 25,
        span: 458..464,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 29,
        column: 26,
        span: 464..465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 29,
        column: 32,
        span: 465..471,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 29,
        column: 33,
        span: 471..472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 29,
        column: 36,
        span: 473..475,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 29,
        column: 37,
        span: 475..476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 29,
        column: 42,
        span: 476..481,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 29,
        column: 43,
        span: 481..482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 29,
        column: 50,
        span: 483..489,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 29,
        column: 51,
        span: 489..490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 29,
        column: 0,
        span: 491..495,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 31,
        column: 6,
        span: 497..502,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 31,
        column: 15,
        span: 503..511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "formatmem",
        ),
        line: 31,
        column: 25,
        span: 512..521,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 26,
        span: 521..522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 31,
        column: 27,
        span: 522..523,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 28,
        span: 523..524,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 32,
        column: 5,
        span: 527..529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 32,
        column: 7,
        span: 530..531,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 32,
        column: 9,
        span: 532..533,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1024",
                    after_decimal: "",
                },
            ),
        ),
        line: 32,
        column: 14,
        span: 533..538,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 32,
        column: 19,
        span: 539..543,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 32,
        column: 26,
        span: 544..550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 32,
        column: 0,
        span: 551..552,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 33,
        column: 0,
        span: 555..559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 34,
        column: 6,
        span: 564..565,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 34,
        column: 8,
        span: 566..567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 34,
        column: 10,
        span: 568..569,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 34,
        column: 12,
        span: 570..571,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1024",
                    after_decimal: "",
                },
            ),
        ),
        line: 34,
        column: 17,
        span: 571..576,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 34,
        column: 19,
        span: 577..578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 34,
        column: 21,
        span: 579..580,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 34,
        column: 23,
        span: 581..582,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1024",
                    after_decimal: "",
                },
            ),
        ),
        line: 34,
        column: 28,
        span: 582..587,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 34,
        column: 30,
        span: 588..589,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 34,
        column: 0,
        span: 589..591,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 35,
        column: 7,
        span: 596..598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 35,
        column: 9,
        span: 599..600,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 35,
        column: 11,
        span: 601..602,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1024",
                    after_decimal: "",
                },
            ),
        ),
        line: 35,
        column: 16,
        span: 602..607,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 35,
        column: 21,
        span: 608..612,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 35,
        column: 28,
        span: 613..619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 35,
        column: 30,
        span: 620..621,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 35,
        column: 33,
        span: 622..624,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"K\"",
        ),
        line: 35,
        column: 37,
        span: 625..628,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 36,
        column: 0,
        span: 633..637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 37,
        column: 8,
        span: 644..645,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 37,
        column: 10,
        span: 646..647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 37,
        column: 12,
        span: 648..649,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 37,
        column: 14,
        span: 650..651,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1024",
                    after_decimal: "",
                },
            ),
        ),
        line: 37,
        column: 19,
        span: 651..656,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 37,
        column: 21,
        span: 657..658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 37,
        column: 23,
        span: 659..660,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 37,
        column: 25,
        span: 661..662,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1024",
                    after_decimal: "",
                },
            ),
        ),
        line: 37,
        column: 30,
        span: 662..667,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 37,
        column: 32,
        span: 668..669,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 37,
        column: 0,
        span: 669..671,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 38,
        column: 13,
        span: 678..684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 38,
        column: 15,
        span: 685..686,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 38,
        column: 18,
        span: 687..689,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"M\"",
        ),
        line: 38,
        column: 22,
        span: 690..693,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 39,
        column: 0,
        span: 698..701,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 40,
        column: 0,
        span: 704..707,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 41,
        column: 0,
        span: 708..711,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 43,
        column: 6,
        span: 713..718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        line: 43,
        column: 14,
        span: 719..726,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 43,
        column: 16,
        span: 727..728,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 43,
        column: 25,
        span: 729..737,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 26,
        span: 737..738,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 27,
        span: 738..739,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 44,
        column: 5,
        span: 742..744,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 44,
        column: 9,
        span: 745..748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 44,
        column: 11,
        span: 749..750,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 44,
        column: 0,
        span: 751..755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 45,
        column: 10,
        span: 760..765,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 11,
        span: 765..766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 45,
        column: 17,
        span: 766..772,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 18,
        span: 772..773,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"    ---- total memory: %s ----\\n\"",
        ),
        line: 45,
        column: 52,
        span: 773..807,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 45,
        column: 53,
        span: 807..808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "formatmem",
        ),
        line: 45,
        column: 63,
        span: 809..818,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 64,
        span: 818..819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcinfo",
        ),
        line: 45,
        column: 70,
        span: 819..825,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 71,
        span: 825..826,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 72,
        span: 826..827,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 73,
        span: 827..828,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 74,
        span: 828..829,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 75,
        span: 829..830,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 46,
        column: 0,
        span: 833..837,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 47,
        column: 6,
        span: 842..843,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 47,
        column: 7,
        span: 843..844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmemory",
        ),
        line: 47,
        column: 18,
        span: 844..855,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 19,
        span: 855..856,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 20,
        span: 856..857,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 48,
        column: 10,
        span: 862..867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 48,
        column: 12,
        span: 868..869,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 48,
        column: 13,
        span: 869..870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 48,
        column: 15,
        span: 871..872,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 48,
        column: 16,
        span: 872..873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 48,
        column: 18,
        span: 874..875,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 48,
        column: 20,
        span: 876..877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 48,
        column: 22,
        span: 878..879,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 48,
        column: 23,
        span: 879..880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 48,
        column: 31,
        span: 880..888,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
        column: 32,
        span: 888..889,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
        column: 33,
        span: 889..890,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 49,
        column: 10,
        span: 895..900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 49,
        column: 12,
        span: 901..902,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 49,
        column: 13,
        span: 902..903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 49,
        column: 15,
        span: 904..905,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 49,
        column: 17,
        span: 906..907,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcinfo",
        ),
        line: 49,
        column: 24,
        span: 908..914,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
        column: 25,
        span: 914..915,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 49,
        column: 26,
        span: 915..916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 50,
        column: 10,
        span: 921..926,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 50,
        column: 11,
        span: 926..927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 50,
        column: 17,
        span: 927..933,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 50,
        column: 18,
        span: 933..934,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n    ---- total memory: %s (%dK), max use: %s,  blocks: %d\\n\"",
        ),
        line: 51,
        column: 70,
        span: 941..1004,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
        column: 71,
        span: 1004..1005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "formatmem",
        ),
        line: 52,
        column: 16,
        span: 1012..1021,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
        column: 17,
        span: 1021..1022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 52,
        column: 18,
        span: 1022..1023,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 19,
        span: 1023..1024,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 52,
        column: 20,
        span: 1024..1025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 52,
        column: 22,
        span: 1026..1027,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 52,
        column: 23,
        span: 1027..1028,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "formatmem",
        ),
        line: 52,
        column: 33,
        span: 1029..1038,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
        column: 34,
        span: 1038..1039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 52,
        column: 35,
        span: 1039..1040,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 36,
        span: 1040..1041,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 52,
        column: 37,
        span: 1041..1042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 52,
        column: 39,
        span: 1043..1044,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 40,
        span: 1044..1045,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 41,
        span: 1045..1046,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 53,
        column: 0,
        span: 1049..1052,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 54,
        column: 0,
        span: 1053..1056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 60,
        column: 7,
        span: 1117..1123,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 60,
        column: 9,
        span: 1124..1125,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 60,
        column: 18,
        span: 1126..1134,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 19,
        span: 1134..1135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 60,
        column: 20,
        span: 1135..1136,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 21,
        span: 1136..1137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        line: 61,
        column: 10,
        span: 1140..1147,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 11,
        span: 1147..1148,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 12,
        span: 1148..1149,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 62,
        column: 8,
        span: 1152..1157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 62,
        column: 10,
        span: 1158..1159,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 62,
        column: 12,
        span: 1160..1161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 62,
        column: 19,
        span: 1162..1168,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 20,
        span: 1168..1169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 62,
        column: 28,
        span: 1169..1177,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 29,
        span: 1177..1178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 62,
        column: 30,
        span: 1178..1179,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 31,
        span: 1179..1180,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 32,
        span: 1180..1181,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 63,
        column: 8,
        span: 1184..1189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 63,
        column: 10,
        span: 1190..1191,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 63,
        column: 12,
        span: 1192..1193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 63,
        column: 19,
        span: 1194..1200,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 63,
        column: 20,
        span: 1200..1201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 63,
        column: 24,
        span: 1201..1205,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 25,
        span: 1205..1206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 63,
        column: 26,
        span: 1206..1207,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 27,
        span: 1207..1208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 64,
        column: 4,
        span: 1211..1212,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 64,
        column: 6,
        span: 1213..1214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 64,
        column: 13,
        span: 1215..1221,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 14,
        span: 1221..1222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        line: 64,
        column: 24,
        span: 1222..1232,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 25,
        span: 1232..1233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 64,
        column: 26,
        span: 1233..1234,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 27,
        span: 1234..1235,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 28,
        span: 1235..1236,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 65,
        column: 9,
        span: 1239..1245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 65,
        column: 11,
        span: 1246..1247,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 12,
        span: 1247..1248,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 13,
        span: 1248..1249,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 66,
        column: 0,
        span: 1250..1253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 68,
        column: 7,
        span: 1255..1261,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 8,
        span: 1261..1262,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'main.lua'",
        ),
        line: 68,
        column: 18,
        span: 1262..1272,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 19,
        span: 1272..1273,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 70,
        column: 0,
        span: 1275..1277,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 71,
        column: 8,
        span: 1280..1285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 71,
        column: 10,
        span: 1286..1287,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 71,
        column: 12,
        span: 1288..1289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newproxy",
        ),
        line: 71,
        column: 21,
        span: 1290..1298,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 22,
        span: 1298..1299,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 71,
        column: 26,
        span: 1299..1303,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 27,
        span: 1303..1304,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 72,
        column: 8,
        span: 1307..1312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newproxy",
        ),
        line: 72,
        column: 17,
        span: 1313..1321,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 72,
        column: 18,
        span: 1321..1322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stderr",
        ),
        line: 72,
        column: 25,
        span: 1323..1329,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 72,
        column: 27,
        span: 1330..1331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newproxy",
        ),
        line: 72,
        column: 36,
        span: 1332..1340,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 72,
        column: 37,
        span: 1340..1341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 72,
        column: 40,
        span: 1342..1344,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 72,
        column: 41,
        span: 1344..1345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stderr",
        ),
        line: 72,
        column: 0,
        span: 1345..1351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 73,
        column: 15,
        span: 1354..1366,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 16,
        span: 1366..1367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        line: 73,
        column: 17,
        span: 1367..1368,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 18,
        span: 1368..1369,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 73,
        column: 19,
        span: 1369..1370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 73,
        column: 23,
        span: 1370..1374,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 73,
        column: 25,
        span: 1375..1376,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 73,
        column: 34,
        span: 1377..1385,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 35,
        span: 1385..1386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 73,
        column: 36,
        span: 1386..1387,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 37,
        span: 1387..1388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stderr",
        ),
        line: 74,
        column: 11,
        span: 1393..1399,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 74,
        column: 12,
        span: 1399..1400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 74,
        column: 17,
        span: 1400..1405,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.'",
        ),
        line: 74,
        column: 21,
        span: 1406..1409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newproxy",
        ),
        line: 75,
        column: 13,
        span: 1414..1422,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
        column: 14,
        span: 1422..1423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        line: 75,
        column: 15,
        span: 1423..1424,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
        column: 16,
        span: 1424..1425,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 76,
        column: 0,
        span: 1428..1431,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 77,
        column: 0,
        span: 1432..1435,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 79,
        column: 6,
        span: 1437..1442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 79,
        column: 8,
        span: 1443..1444,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 79,
        column: 10,
        span: 1445..1446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 79,
        column: 17,
        span: 1447..1453,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
        column: 18,
        span: 1453..1454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 79,
        column: 26,
        span: 1454..1462,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
        column: 27,
        span: 1462..1463,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'gc.lua'",
        ),
        line: 79,
        column: 35,
        span: 1463..1471,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
        column: 36,
        span: 1471..1472,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
        column: 37,
        span: 1472..1473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 80,
        column: 2,
        span: 1474..1475,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
        column: 3,
        span: 1475..1476,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
        column: 4,
        span: 1476..1477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 81,
        column: 7,
        span: 1478..1484,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
        column: 8,
        span: 1484..1485,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'db.lua'",
        ),
        line: 81,
        column: 16,
        span: 1485..1493,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 17,
        span: 1493..1494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 82,
        column: 7,
        span: 1495..1501,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 8,
        span: 1501..1502,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 82,
        column: 14,
        span: 1502..1508,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 15,
        span: 1508..1509,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'calls.lua'",
        ),
        line: 82,
        column: 26,
        span: 1509..1520,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 27,
        span: 1520..1521,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 82,
        column: 30,
        span: 1522..1524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 82,
        column: 35,
        span: 1525..1529,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 82,
        column: 39,
        span: 1530..1533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 82,
        column: 44,
        span: 1534..1538,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 45,
        span: 1538..1539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 83,
        column: 7,
        span: 1540..1546,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
        column: 8,
        span: 1546..1547,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'strings.lua'",
        ),
        line: 83,
        column: 21,
        span: 1547..1560,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
        column: 22,
        span: 1560..1561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 84,
        column: 7,
        span: 1562..1568,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 84,
        column: 8,
        span: 1568..1569,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'literals.lua'",
        ),
        line: 84,
        column: 22,
        span: 1569..1583,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 84,
        column: 23,
        span: 1583..1584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 85,
        column: 7,
        span: 1585..1591,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
        column: 8,
        span: 1591..1592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 85,
        column: 14,
        span: 1592..1598,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
        column: 15,
        span: 1598..1599,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'attrib.lua'",
        ),
        line: 85,
        column: 27,
        span: 1599..1611,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
        column: 28,
        span: 1611..1612,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 85,
        column: 31,
        span: 1613..1615,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "27",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
        column: 34,
        span: 1615..1618,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
        column: 35,
        span: 1618..1619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 86,
        column: 7,
        span: 1620..1626,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 8,
        span: 1626..1627,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 86,
        column: 14,
        span: 1627..1633,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 15,
        span: 1633..1634,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'locals.lua'",
        ),
        line: 86,
        column: 27,
        span: 1634..1646,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 28,
        span: 1646..1647,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 86,
        column: 31,
        span: 1648..1650,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
        column: 33,
        span: 1650..1652,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 34,
        span: 1652..1653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 87,
        column: 7,
        span: 1654..1660,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 8,
        span: 1660..1661,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'constructs.lua'",
        ),
        line: 87,
        column: 24,
        span: 1661..1677,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 25,
        span: 1677..1678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 88,
        column: 7,
        span: 1679..1685,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 8,
        span: 1685..1686,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'code.lua'",
        ),
        line: 88,
        column: 18,
        span: 1686..1696,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 19,
        span: 1696..1697,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 89,
        column: 0,
        span: 1698..1700,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 90,
        column: 8,
        span: 1703..1708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 90,
        column: 10,
        span: 1709..1710,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 90,
        column: 12,
        span: 1711..1712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 90,
        column: 22,
        span: 1713..1722,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 90,
        column: 23,
        span: 1722..1723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 90,
        column: 27,
        span: 1723..1727,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 90,
        column: 28,
        span: 1727..1728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 90,
        column: 34,
        span: 1728..1734,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 90,
        column: 35,
        span: 1734..1735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 90,
        column: 43,
        span: 1735..1743,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 90,
        column: 44,
        span: 1743..1744,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'big.lua'",
        ),
        line: 90,
        column: 53,
        span: 1744..1753,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 90,
        column: 54,
        span: 1753..1754,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 90,
        column: 55,
        span: 1754..1755,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 90,
        column: 56,
        span: 1755..1756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 91,
        column: 9,
        span: 1759..1765,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 10,
        span: 1765..1766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 91,
        column: 11,
        span: 1766..1767,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 12,
        span: 1767..1768,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 13,
        span: 1768..1769,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 91,
        column: 16,
        span: 1770..1772,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 91,
        column: 20,
        span: 1773..1776,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 21,
        span: 1776..1777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 92,
        column: 9,
        span: 1780..1786,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 92,
        column: 10,
        span: 1786..1787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 92,
        column: 11,
        span: 1787..1788,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 92,
        column: 12,
        span: 1788..1789,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 92,
        column: 13,
        span: 1789..1790,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 92,
        column: 16,
        span: 1791..1793,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 92,
        column: 20,
        span: 1794..1797,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 92,
        column: 21,
        span: 1797..1798,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 93,
        column: 0,
        span: 1799..1802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 94,
        column: 7,
        span: 1803..1809,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
        column: 8,
        span: 1809..1810,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'nextvar.lua'",
        ),
        line: 94,
        column: 21,
        span: 1810..1823,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
        column: 22,
        span: 1823..1824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 95,
        column: 7,
        span: 1825..1831,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
        column: 8,
        span: 1831..1832,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'pm.lua'",
        ),
        line: 95,
        column: 16,
        span: 1832..1840,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
        column: 17,
        span: 1840..1841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 96,
        column: 7,
        span: 1842..1848,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 8,
        span: 1848..1849,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'api.lua'",
        ),
        line: 96,
        column: 17,
        span: 1849..1858,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 18,
        span: 1858..1859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 97,
        column: 7,
        span: 1860..1866,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
        column: 8,
        span: 1866..1867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 97,
        column: 14,
        span: 1867..1873,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
        column: 15,
        span: 1873..1874,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'events.lua'",
        ),
        line: 97,
        column: 27,
        span: 1874..1886,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
        column: 28,
        span: 1886..1887,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 97,
        column: 31,
        span: 1888..1890,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 97,
        column: 34,
        span: 1890..1893,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
        column: 35,
        span: 1893..1894,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 98,
        column: 7,
        span: 1895..1901,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
        column: 8,
        span: 1901..1902,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'vararg.lua'",
        ),
        line: 98,
        column: 20,
        span: 1902..1914,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
        column: 21,
        span: 1914..1915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 99,
        column: 7,
        span: 1916..1922,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
        column: 8,
        span: 1922..1923,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'closure.lua'",
        ),
        line: 99,
        column: 21,
        span: 1923..1936,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
        column: 22,
        span: 1936..1937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 100,
        column: 7,
        span: 1938..1944,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 8,
        span: 1944..1945,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'errors.lua'",
        ),
        line: 100,
        column: 20,
        span: 1945..1957,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 21,
        span: 1957..1958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 101,
        column: 7,
        span: 1959..1965,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
        column: 8,
        span: 1965..1966,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'math.lua'",
        ),
        line: 101,
        column: 18,
        span: 1966..1976,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
        column: 19,
        span: 1976..1977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 102,
        column: 7,
        span: 1978..1984,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
        column: 8,
        span: 1984..1985,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'sort.lua'",
        ),
        line: 102,
        column: 18,
        span: 1985..1995,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
        column: 19,
        span: 1995..1996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 103,
        column: 7,
        span: 1997..2003,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 8,
        span: 2003..2004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 103,
        column: 14,
        span: 2004..2010,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 15,
        span: 2010..2011,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'verybig.lua'",
        ),
        line: 103,
        column: 28,
        span: 2011..2024,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
        column: 29,
        span: 2024..2025,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 103,
        column: 32,
        span: 2026..2028,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 103,
        column: 35,
        span: 2028..2031,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
        column: 36,
        span: 2031..2032,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 103,
        column: 37,
        span: 2032..2033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 104,
        column: 15,
        span: 2034..2048,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
        column: 16,
        span: 2048..2049,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
        column: 17,
        span: 2049..2050,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 105,
        column: 7,
        span: 2051..2057,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
        column: 8,
        span: 2057..2058,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'files.lua'",
        ),
        line: 105,
        column: 19,
        span: 2058..2069,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
        column: 20,
        span: 2069..2070,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 107,
        column: 3,
        span: 2072..2074,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 107,
        column: 5,
        span: 2075..2076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgs",
        ),
        line: 107,
        column: 9,
        span: 2076..2080,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 107,
        column: 11,
        span: 2081..2082,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 107,
        column: 13,
        span: 2082..2084,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 107,
        column: 0,
        span: 2085..2089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 108,
        column: 8,
        span: 2092..2097,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
        column: 9,
        span: 2097..2098,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\ntests not performed:\"",
        ),
        line: 108,
        column: 33,
        span: 2098..2122,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
        column: 34,
        span: 2122..2123,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 109,
        column: 6,
        span: 2126..2129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 109,
        column: 8,
        span: 2130..2131,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 109,
        column: 10,
        span: 2132..2133,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 109,
        column: 12,
        span: 2133..2135,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 109,
        column: 13,
        span: 2135..2136,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 109,
        column: 15,
        span: 2137..2138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgs",
        ),
        line: 109,
        column: 19,
        span: 2138..2142,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 109,
        column: 0,
        span: 2143..2145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 110,
        column: 10,
        span: 2150..2155,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
        column: 11,
        span: 2155..2156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgs",
        ),
        line: 110,
        column: 15,
        span: 2156..2160,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 110,
        column: 16,
        span: 2160..2161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 110,
        column: 17,
        span: 2161..2162,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 110,
        column: 18,
        span: 2162..2163,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
        column: 19,
        span: 2163..2164,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 111,
        column: 0,
        span: 2167..2170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 112,
        column: 8,
        span: 2173..2178,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 9,
        span: 2178..2179,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 10,
        span: 2179..2180,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 113,
        column: 0,
        span: 2181..2184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 115,
        column: 6,
        span: 2186..2191,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
        column: 7,
        span: 2191..2192,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"final OK !!!\"",
        ),
        line: 115,
        column: 21,
        span: 2192..2206,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
        column: 22,
        span: 2206..2207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 116,
        column: 6,
        span: 2208..2213,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
        column: 7,
        span: 2213..2214,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'cleaning all!!!!'",
        ),
        line: 116,
        column: 25,
        span: 2214..2232,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
        column: 26,
        span: 2232..2233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 118,
        column: 6,
        span: 2235..2240,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 118,
        column: 7,
        span: 2240..2241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 118,
        column: 14,
        span: 2241..2248,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 15,
        span: 2248..2249,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 118,
        column: 23,
        span: 2249..2257,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 24,
        span: 2257..2258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 118,
        column: 25,
        span: 2258..2259,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 26,
        span: 2259..2260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 118,
        column: 33,
        span: 2261..2267,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 34,
        span: 2267..2268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 118,
        column: 38,
        span: 2268..2272,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 39,
        span: 2272..2273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 118,
        column: 40,
        span: 2273..2274,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 41,
        span: 2274..2275,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 118,
        column: 44,
        span: 2276..2278,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 118,
        column: 53,
        span: 2279..2287,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 54,
        span: 2287..2288,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 118,
        column: 58,
        span: 2289..2292,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 118,
        column: 59,
        span: 2292..2293,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cr\"",
        ),
        line: 118,
        column: 64,
        span: 2294..2298,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 65,
        span: 2298..2299,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 120,
        column: 6,
        span: 2301..2306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 120,
        column: 9,
        span: 2307..2309,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 10,
        span: 2309..2310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 120,
        column: 25,
        span: 2311..2325,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 26,
        span: 2325..2326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        line: 120,
        column: 34,
        span: 2327..2334,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 35,
        span: 2334..2335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 120,
        column: 41,
        span: 2336..2341,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 42,
        span: 2341..2342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 120,
        column: 49,
        span: 2343..2349,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 50,
        span: 2349..2350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        line: 120,
        column: 56,
        span: 2351..2356,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 120,
        column: 58,
        span: 2357..2358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 121,
        column: 3,
        span: 2359..2361,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 4,
        span: 2361..2362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 121,
        column: 19,
        span: 2363..2377,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 20,
        span: 2377..2378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        line: 121,
        column: 28,
        span: 2379..2386,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 29,
        span: 2386..2387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 121,
        column: 35,
        span: 2388..2393,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 36,
        span: 2393..2394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 121,
        column: 43,
        span: 2395..2401,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 44,
        span: 2401..2402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 121,
        column: 47,
        span: 2403..2405,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 121,
        column: 48,
        span: 2405..2406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        line: 121,
        column: 0,
        span: 2406..2411,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 123,
        column: 6,
        span: 2413..2418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 123,
        column: 8,
        span: 2419..2420,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 123,
        column: 10,
        span: 2421..2422,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 123,
        column: 12,
        span: 2423..2424,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 123,
        column: 13,
        span: 2424..2425,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 124,
        column: 4,
        span: 2426..2429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 124,
        column: 6,
        span: 2430..2431,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 124,
        column: 9,
        span: 2432..2434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 124,
        column: 15,
        span: 2435..2440,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
        column: 16,
        span: 2440..2441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 124,
        column: 18,
        span: 2441..2443,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
        column: 19,
        span: 2443..2444,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 124,
        column: 22,
        span: 2445..2447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 124,
        column: 24,
        span: 2448..2449,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 124,
        column: 25,
        span: 2449..2450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 124,
        column: 26,
        span: 2450..2451,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 124,
        column: 27,
        span: 2451..2452,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 124,
        column: 29,
        span: 2453..2454,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 124,
        column: 31,
        span: 2454..2456,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 124,
        column: 0,
        span: 2457..2460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 125,
        column: 2,
        span: 2461..2462,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 125,
        column: 3,
        span: 2462..2463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 125,
        column: 11,
        span: 2463..2471,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 125,
        column: 13,
        span: 2472..2473,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 125,
        column: 0,
        span: 2474..2477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 126,
        column: 2,
        span: 2478..2479,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 126,
        column: 3,
        span: 2479..2480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "___Glob",
        ),
        line: 126,
        column: 10,
        span: 2480..2487,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 126,
        column: 12,
        span: 2488..2489,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 126,
        column: 0,
        span: 2490..2493,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 127,
        column: 4,
        span: 2494..2497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 127,
        column: 6,
        span: 2498..2499,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 127,
        column: 9,
        span: 2500..2502,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 127,
        column: 15,
        span: 2503..2508,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 127,
        column: 16,
        span: 2508..2509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 127,
        column: 17,
        span: 2509..2510,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 127,
        column: 18,
        span: 2510..2511,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 127,
        column: 21,
        span: 2512..2514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 127,
        column: 24,
        span: 2515..2517,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 127,
        column: 25,
        span: 2517..2518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 127,
        column: 26,
        span: 2518..2519,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 127,
        column: 27,
        span: 2519..2520,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 127,
        column: 29,
        span: 2521..2522,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 127,
        column: 33,
        span: 2523..2526,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 127,
        column: 0,
        span: 2527..2530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 129,
        column: 2,
        span: 2532..2533,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 129,
        column: 4,
        span: 2534..2535,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 129,
        column: 0,
        span: 2536..2539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 130,
        column: 15,
        span: 2540..2554,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
        column: 16,
        span: 2554..2555,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
        column: 17,
        span: 2555..2556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 131,
        column: 15,
        span: 2557..2571,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
        column: 16,
        span: 2571..2572,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
        column: 17,
        span: 2572..2573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 132,
        column: 15,
        span: 2574..2588,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 132,
        column: 16,
        span: 2588..2589,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 132,
        column: 17,
        span: 2589..2590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 133,
        column: 15,
        span: 2591..2605,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
        column: 16,
        span: 2605..2606,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 17,
        span: 2606..2607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 134,
        column: 15,
        span: 2608..2622,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
        column: 16,
        span: 2622..2623,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
        column: 17,
        span: 2623..2624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 135,
        column: 15,
        span: 2625..2639,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 135,
        column: 16,
        span: 2639..2640,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 135,
        column: 17,
        span: 2640..2641,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 135,
        column: 18,
        span: 2641..2642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        line: 136,
        column: 8,
        span: 2643..2650,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 136,
        column: 9,
        span: 2650..2651,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 136,
        column: 10,
        span: 2651..2652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 138,
        column: 6,
        span: 2654..2659,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 7,
        span: 2659..2660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 138,
        column: 13,
        span: 2660..2666,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 14,
        span: 2666..2667,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\ntotal time: %.2f\\n\"",
        ),
        line: 138,
        column: 38,
        span: 2667..2691,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 138,
        column: 39,
        span: 2691..2692,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        line: 138,
        column: 45,
        span: 2693..2698,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 46,
        span: 2698..2699,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 47,
        span: 2699..2700,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 138,
        column: 49,
        span: 2701..2702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 138,
        column: 51,
        span: 2703..2704,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 52,
        span: 2704..2705,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 53,
        span: 2705..2706,
    },
]
