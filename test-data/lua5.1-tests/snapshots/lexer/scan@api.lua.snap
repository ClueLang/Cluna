---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.1-tests/api.lua
---
[
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 2,
            column: 3,
            span: 1..3,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 2,
            column: 5,
            span: 4..5,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 2,
            column: 7,
            span: 5..7,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 2,
            column: 10,
            span: 7..10,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 2,
            column: 0,
            span: 11..15,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 3,
            column: 4,
            span: 18..19,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        position: Position {
            line: 3,
            column: 11,
            span: 19..26,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 3,
            column: 14,
            span: 27..29,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 3,
            column: 20,
            span: 30..35,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 3,
            column: 21,
            span: 35..36,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 3,
            column: 22,
            span: 36..37,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\a\\n >>> testC not active: skipping API tests <<<\\n\\a'",
        ),
        position: Position {
            line: 3,
            column: 77,
            span: 37..92,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 3,
            column: 78,
            span: 92..93,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 4,
            column: 0,
            span: 96..102,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 5,
            column: 0,
            span: 103..106,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 9,
            column: 9,
            span: 110..118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 9,
            column: 16,
            span: 119..125,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 9,
            column: 18,
            span: 126..127,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 9,
            column: 20,
            span: 127..129,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 9,
            column: 21,
            span: 129..130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        position: Position {
            line: 9,
            column: 24,
            span: 131..133,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 9,
            column: 25,
            span: 133..134,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 10,
            column: 8,
            span: 137..142,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 10,
            column: 9,
            span: 142..143,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 10,
            column: 15,
            span: 143..149,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 10,
            column: 16,
            span: 149..150,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 10,
            column: 18,
            span: 150..152,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 10,
            column: 19,
            span: 152..153,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 10,
            column: 21,
            span: 153..155,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 10,
            column: 22,
            span: 155..156,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 11,
            column: 9,
            span: 175..181,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 11,
            column: 10,
            span: 181..182,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 11,
            column: 15,
            span: 182..187,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 11,
            column: 16,
            span: 187..188,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        position: Position {
            line: 11,
            column: 20,
            span: 188..192,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 11,
            column: 21,
            span: 192..193,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 11,
            column: 23,
            span: 193..195,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 11,
            column: 24,
            span: 195..196,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 11,
            column: 27,
            span: 197..199,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 11,
            column: 33,
            span: 200..205,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 11,
            column: 34,
            span: 205..206,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        position: Position {
            line: 11,
            column: 38,
            span: 206..210,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 11,
            column: 39,
            span: 210..211,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        position: Position {
            line: 11,
            column: 41,
            span: 211..213,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 11,
            column: 42,
            span: 213..214,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 11,
            column: 43,
            span: 214..215,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 12,
            column: 6,
            span: 218..221,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 12,
            column: 8,
            span: 222..223,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 12,
            column: 9,
            span: 223..224,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 12,
            column: 10,
            span: 223..225,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 12,
            column: 11,
            span: 225..226,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 12,
            column: 16,
            span: 226..231,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 12,
            column: 17,
            span: 231..232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        position: Position {
            line: 12,
            column: 21,
            span: 232..236,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 12,
            column: 22,
            span: 236..237,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 12,
            column: 24,
            span: 237..239,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 12,
            column: 25,
            span: 239..240,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 12,
            column: 28,
            span: 241..243,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 12,
            column: 35,
            span: 244..250,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 12,
            column: 36,
            span: 250..251,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 12,
            column: 38,
            span: 251..253,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 12,
            column: 39,
            span: 253..254,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 12,
            column: 40,
            span: 254..255,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 12,
            column: 41,
            span: 255..256,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 12,
            column: 44,
            span: 257..259,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        position: Position {
            line: 12,
            column: 47,
            span: 260..262,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 12,
            column: 48,
            span: 262..263,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 12,
            column: 49,
            span: 263..264,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 12,
            column: 50,
            span: 264..265,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 12,
            column: 51,
            span: 265..266,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 12,
            column: 0,
            span: 267..270,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 13,
            column: 0,
            span: 271..274,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 15,
            column: 9,
            span: 276..284,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 15,
            column: 14,
            span: 285..289,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 15,
            column: 15,
            span: 289..290,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 15,
            column: 18,
            span: 290..293,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 15,
            column: 19,
            span: 293..294,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 15,
            column: 26,
            span: 295..301,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 15,
            column: 30,
            span: 302..305,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 15,
            column: 0,
            span: 306..309,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 18,
            column: 6,
            span: 312..317,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 18,
            column: 7,
            span: 317..318,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing C API'",
        ),
        position: Position {
            line: 18,
            column: 22,
            span: 318..333,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 18,
            column: 23,
            span: 333..334,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 21,
            column: 2,
            span: 358..359,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 21,
            column: 4,
            span: 360..361,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 21,
            column: 6,
            span: 362..363,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 21,
            column: 7,
            span: 363..364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d2s",
        ),
        position: Position {
            line: 21,
            column: 10,
            span: 364..367,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 21,
            column: 11,
            span: 367..368,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12458954321123",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 21,
            column: 25,
            span: 367..382,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 21,
            column: 26,
            span: 382..383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 22,
            column: 7,
            span: 384..390,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 22,
            column: 8,
            span: 390..391,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 22,
            column: 14,
            span: 391..397,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 22,
            column: 15,
            span: 397..398,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 22,
            column: 18,
            span: 398..401,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 22,
            column: 19,
            span: 401..402,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 22,
            column: 20,
            span: 402..403,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 22,
            column: 21,
            span: 403..404,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 22,
            column: 24,
            span: 405..407,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 22,
            column: 26,
            span: 407..409,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 22,
            column: 27,
            span: 409..410,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 23,
            column: 7,
            span: 431..437,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 23,
            column: 8,
            span: 437..438,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 23,
            column: 9,
            span: 438..439,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 23,
            column: 10,
            span: 439..440,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s2d",
        ),
        position: Position {
            line: 23,
            column: 13,
            span: 440..443,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 23,
            column: 14,
            span: 443..444,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 23,
            column: 15,
            span: 444..445,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 23,
            column: 16,
            span: 445..446,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 23,
            column: 19,
            span: 447..449,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12458954321123",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 23,
            column: 34,
            span: 449..464,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 23,
            column: 35,
            span: 464..465,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 25,
            column: 2,
            span: 467..468,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 25,
            column: 3,
            span: 468..469,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 25,
            column: 4,
            span: 469..470,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 25,
            column: 5,
            span: 470..471,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 25,
            column: 6,
            span: 471..472,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 25,
            column: 8,
            span: 473..474,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 25,
            column: 10,
            span: 475..476,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 25,
            column: 11,
            span: 476..477,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 25,
            column: 16,
            span: 477..482,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 25,
            column: 17,
            span: 482..483,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 1; pushnum 2; pushnum 3; return 2\"",
        ),
        position: Position {
            line: 25,
            column: 60,
            span: 483..526,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 25,
            column: 61,
            span: 526..527,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 26,
            column: 7,
            span: 528..534,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 26,
            column: 8,
            span: 534..535,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 26,
            column: 9,
            span: 535..536,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 26,
            column: 12,
            span: 537..539,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 26,
            column: 14,
            span: 539..541,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 26,
            column: 18,
            span: 542..545,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 26,
            column: 20,
            span: 546..547,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 26,
            column: 23,
            span: 548..550,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 26,
            column: 25,
            span: 550..552,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 26,
            column: 29,
            span: 553..556,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 26,
            column: 33,
            span: 557..560,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 26,
            column: 35,
            span: 561..562,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 26,
            column: 36,
            span: 562..563,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 29,
            column: 2,
            span: 598..599,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 29,
            column: 3,
            span: 599..600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 29,
            column: 4,
            span: 600..601,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 29,
            column: 5,
            span: 601..602,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 29,
            column: 6,
            span: 602..603,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 29,
            column: 8,
            span: 604..605,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 29,
            column: 10,
            span: 606..607,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 29,
            column: 11,
            span: 607..608,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 29,
            column: 16,
            span: 608..613,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 29,
            column: 17,
            span: 613..614,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushbool 1; pushbool 2; pushbool 0; return 3\"",
        ),
        position: Position {
            line: 29,
            column: 63,
            span: 614..660,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 29,
            column: 64,
            span: 660..661,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 30,
            column: 7,
            span: 662..668,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 30,
            column: 8,
            span: 668..669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 30,
            column: 9,
            span: 669..670,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 30,
            column: 12,
            span: 671..673,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 30,
            column: 14,
            span: 674..675,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 30,
            column: 18,
            span: 676..679,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 30,
            column: 20,
            span: 680..681,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 30,
            column: 23,
            span: 682..684,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 30,
            column: 28,
            span: 685..689,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 30,
            column: 32,
            span: 690..693,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 30,
            column: 34,
            span: 694..695,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 30,
            column: 37,
            span: 696..698,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 30,
            column: 43,
            span: 699..704,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 30,
            column: 44,
            span: 704..705,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 31,
            column: 2,
            span: 706..707,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 31,
            column: 3,
            span: 707..708,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 31,
            column: 4,
            span: 708..709,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 31,
            column: 5,
            span: 709..710,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 31,
            column: 6,
            span: 710..711,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 31,
            column: 8,
            span: 712..713,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 31,
            column: 10,
            span: 714..715,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 31,
            column: 11,
            span: 715..716,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 31,
            column: 16,
            span: 716..721,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushbool 0; pushbool 10; pushnil;\\\n                      tobool -3; tobool -3; tobool -3; return 3\"",
        ),
        position: Position {
            line: 32,
            column: 65,
            span: 721..821,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 33,
            column: 7,
            span: 822..828,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 33,
            column: 8,
            span: 828..829,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 33,
            column: 9,
            span: 829..830,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 33,
            column: 11,
            span: 830..832,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 33,
            column: 12,
            span: 831..833,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 33,
            column: 16,
            span: 834..837,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 33,
            column: 18,
            span: 838..839,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 33,
            column: 20,
            span: 839..841,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 33,
            column: 21,
            span: 840..842,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 33,
            column: 25,
            span: 843..846,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 33,
            column: 27,
            span: 847..848,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 33,
            column: 29,
            span: 848..850,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 33,
            column: 30,
            span: 849..851,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 33,
            column: 31,
            span: 851..852,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 36,
            column: 2,
            span: 855..856,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 36,
            column: 3,
            span: 856..857,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 36,
            column: 4,
            span: 857..858,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 36,
            column: 5,
            span: 858..859,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 36,
            column: 6,
            span: 859..860,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 36,
            column: 8,
            span: 861..862,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 36,
            column: 10,
            span: 863..864,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 36,
            column: 11,
            span: 864..865,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 36,
            column: 16,
            span: 865..870,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 36,
            column: 17,
            span: 870..871,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gettop; return 2\"",
        ),
        position: Position {
            line: 36,
            column: 35,
            span: 871..889,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 36,
            column: 36,
            span: 889..890,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 36,
            column: 39,
            span: 890..893,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 36,
            column: 40,
            span: 893..894,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 36,
            column: 43,
            span: 894..897,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 36,
            column: 44,
            span: 897..898,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 36,
            column: 47,
            span: 898..901,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 36,
            column: 48,
            span: 901..902,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 36,
            column: 51,
            span: 902..905,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 36,
            column: 52,
            span: 905..906,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 37,
            column: 7,
            span: 907..913,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 37,
            column: 8,
            span: 913..914,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 37,
            column: 9,
            span: 914..915,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 37,
            column: 12,
            span: 916..918,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 37,
            column: 15,
            span: 918..921,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 37,
            column: 19,
            span: 922..925,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 37,
            column: 21,
            span: 926..927,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 37,
            column: 24,
            span: 928..930,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 37,
            column: 26,
            span: 930..932,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 37,
            column: 30,
            span: 933..936,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 37,
            column: 34,
            span: 937..940,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 37,
            column: 36,
            span: 941..942,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 37,
            column: 37,
            span: 942..943,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 39,
            column: 2,
            span: 945..946,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 39,
            column: 4,
            span: 947..948,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 39,
            column: 9,
            span: 949..953,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 39,
            column: 10,
            span: 953..954,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 39,
            column: 11,
            span: 954..955,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 39,
            column: 12,
            span: 955..956,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 39,
            column: 17,
            span: 956..961,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 39,
            column: 18,
            span: 961..962,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settop 5; gettop; return .\"",
        ),
        position: Position {
            line: 39,
            column: 46,
            span: 962..990,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 39,
            column: 47,
            span: 990..991,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 39,
            column: 49,
            span: 991..993,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 39,
            column: 50,
            span: 993..994,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 39,
            column: 52,
            span: 994..996,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 39,
            column: 53,
            span: 996..997,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 39,
            column: 54,
            span: 997..998,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 40,
            column: 7,
            span: 999..1005,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 40,
            column: 8,
            span: 1005..1006,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 40,
            column: 9,
            span: 1006..1007,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 40,
            column: 10,
            span: 1007..1008,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 40,
            column: 12,
            span: 1009..1010,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 40,
            column: 13,
            span: 1010..1011,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 40,
            column: 14,
            span: 1011..1012,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 40,
            column: 15,
            span: 1011..1013,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 40,
            column: 16,
            span: 1013..1014,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 40,
            column: 17,
            span: 1013..1015,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 40,
            column: 18,
            span: 1015..1016,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 40,
            column: 19,
            span: 1015..1017,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 40,
            column: 20,
            span: 1017..1018,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 40,
            column: 21,
            span: 1018..1019,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 42,
            column: 2,
            span: 1021..1022,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 42,
            column: 4,
            span: 1023..1024,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 42,
            column: 9,
            span: 1025..1029,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 42,
            column: 10,
            span: 1029..1030,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 42,
            column: 11,
            span: 1030..1031,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 42,
            column: 12,
            span: 1031..1032,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 42,
            column: 17,
            span: 1032..1037,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 42,
            column: 18,
            span: 1037..1038,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settop 0; settop 15; return 10\"",
        ),
        position: Position {
            line: 42,
            column: 50,
            span: 1038..1070,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 42,
            column: 51,
            span: 1070..1071,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 42,
            column: 53,
            span: 1071..1073,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 42,
            column: 54,
            span: 1073..1074,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 42,
            column: 56,
            span: 1074..1076,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 42,
            column: 57,
            span: 1076..1077,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 42,
            column: 60,
            span: 1077..1080,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 42,
            column: 61,
            span: 1080..1081,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 42,
            column: 62,
            span: 1081..1082,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 43,
            column: 7,
            span: 1083..1089,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 43,
            column: 8,
            span: 1089..1090,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 43,
            column: 9,
            span: 1090..1091,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 43,
            column: 10,
            span: 1091..1092,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 43,
            column: 11,
            span: 1092..1093,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 43,
            column: 14,
            span: 1094..1096,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 43,
            column: 17,
            span: 1096..1099,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 43,
            column: 21,
            span: 1100..1103,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 43,
            column: 23,
            span: 1104..1105,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 43,
            column: 24,
            span: 1105..1106,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 43,
            column: 25,
            span: 1105..1107,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 43,
            column: 26,
            span: 1107..1108,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 43,
            column: 29,
            span: 1109..1111,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 43,
            column: 33,
            span: 1112..1115,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 43,
            column: 37,
            span: 1116..1119,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 43,
            column: 39,
            span: 1120..1121,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 43,
            column: 40,
            span: 1121..1122,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 43,
            column: 42,
            span: 1121..1124,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 43,
            column: 43,
            span: 1124..1125,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 43,
            column: 46,
            span: 1126..1128,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 43,
            column: 50,
            span: 1129..1132,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 43,
            column: 51,
            span: 1132..1133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 45,
            column: 2,
            span: 1135..1136,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 45,
            column: 4,
            span: 1137..1138,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 45,
            column: 9,
            span: 1139..1143,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 45,
            column: 10,
            span: 1143..1144,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 45,
            column: 11,
            span: 1144..1145,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 45,
            column: 12,
            span: 1145..1146,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 45,
            column: 17,
            span: 1146..1151,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 45,
            column: 18,
            span: 1151..1152,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"remove -2; gettop; return .\"",
        ),
        position: Position {
            line: 45,
            column: 47,
            span: 1152..1181,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 45,
            column: 48,
            span: 1181..1182,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 45,
            column: 50,
            span: 1182..1184,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 45,
            column: 51,
            span: 1184..1185,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 45,
            column: 53,
            span: 1185..1187,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 45,
            column: 54,
            span: 1187..1188,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 45,
            column: 56,
            span: 1188..1190,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 45,
            column: 57,
            span: 1190..1191,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 45,
            column: 58,
            span: 1191..1192,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 46,
            column: 7,
            span: 1193..1199,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 46,
            column: 8,
            span: 1199..1200,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 46,
            column: 9,
            span: 1200..1201,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 46,
            column: 10,
            span: 1201..1202,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 46,
            column: 12,
            span: 1203..1204,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 46,
            column: 13,
            span: 1204..1205,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 46,
            column: 14,
            span: 1205..1206,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 46,
            column: 15,
            span: 1205..1207,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 46,
            column: 16,
            span: 1207..1208,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 46,
            column: 17,
            span: 1207..1209,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 46,
            column: 18,
            span: 1209..1210,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 46,
            column: 19,
            span: 1209..1211,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 46,
            column: 20,
            span: 1211..1212,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 46,
            column: 21,
            span: 1212..1213,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 48,
            column: 2,
            span: 1215..1216,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 48,
            column: 4,
            span: 1217..1218,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 48,
            column: 9,
            span: 1219..1223,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 48,
            column: 10,
            span: 1223..1224,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 48,
            column: 11,
            span: 1224..1225,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 48,
            column: 12,
            span: 1225..1226,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 48,
            column: 17,
            span: 1226..1231,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 48,
            column: 18,
            span: 1231..1232,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"insert -1; gettop; return .\"",
        ),
        position: Position {
            line: 48,
            column: 47,
            span: 1232..1261,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 48,
            column: 48,
            span: 1261..1262,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 48,
            column: 50,
            span: 1262..1264,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 48,
            column: 51,
            span: 1264..1265,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 48,
            column: 53,
            span: 1265..1267,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 48,
            column: 54,
            span: 1267..1268,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 48,
            column: 55,
            span: 1268..1269,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 49,
            column: 7,
            span: 1270..1276,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 49,
            column: 8,
            span: 1276..1277,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 49,
            column: 9,
            span: 1277..1278,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 49,
            column: 10,
            span: 1278..1279,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 49,
            column: 12,
            span: 1280..1281,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 49,
            column: 13,
            span: 1281..1282,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 49,
            column: 14,
            span: 1282..1283,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 49,
            column: 15,
            span: 1282..1284,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 49,
            column: 16,
            span: 1284..1285,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 49,
            column: 17,
            span: 1284..1286,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 49,
            column: 18,
            span: 1286..1287,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 49,
            column: 19,
            span: 1286..1288,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 49,
            column: 20,
            span: 1288..1289,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 49,
            column: 21,
            span: 1289..1290,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 51,
            column: 2,
            span: 1292..1293,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 51,
            column: 4,
            span: 1294..1295,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 51,
            column: 9,
            span: 1296..1300,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 51,
            column: 10,
            span: 1300..1301,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 51,
            column: 11,
            span: 1301..1302,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 51,
            column: 12,
            span: 1302..1303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 51,
            column: 17,
            span: 1303..1308,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 51,
            column: 18,
            span: 1308..1309,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"insert 3; gettop; return .\"",
        ),
        position: Position {
            line: 51,
            column: 46,
            span: 1309..1337,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 51,
            column: 47,
            span: 1337..1338,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 51,
            column: 49,
            span: 1338..1340,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 51,
            column: 50,
            span: 1340..1341,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 51,
            column: 52,
            span: 1341..1343,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 51,
            column: 53,
            span: 1343..1344,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 51,
            column: 55,
            span: 1344..1346,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 51,
            column: 56,
            span: 1346..1347,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 51,
            column: 58,
            span: 1347..1349,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 51,
            column: 59,
            span: 1349..1350,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 51,
            column: 60,
            span: 1350..1351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 52,
            column: 7,
            span: 1352..1358,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 52,
            column: 8,
            span: 1358..1359,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 52,
            column: 9,
            span: 1359..1360,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 52,
            column: 10,
            span: 1360..1361,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 52,
            column: 12,
            span: 1362..1363,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 52,
            column: 13,
            span: 1363..1364,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 52,
            column: 14,
            span: 1364..1365,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 52,
            column: 15,
            span: 1364..1366,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 52,
            column: 16,
            span: 1366..1367,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 52,
            column: 17,
            span: 1366..1368,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 52,
            column: 18,
            span: 1368..1369,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 52,
            column: 19,
            span: 1368..1370,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 52,
            column: 20,
            span: 1370..1371,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 52,
            column: 21,
            span: 1370..1372,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 52,
            column: 22,
            span: 1372..1373,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 52,
            column: 23,
            span: 1372..1374,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 52,
            column: 24,
            span: 1374..1375,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 52,
            column: 25,
            span: 1375..1376,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 54,
            column: 2,
            span: 1378..1379,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 54,
            column: 4,
            span: 1380..1381,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 54,
            column: 9,
            span: 1382..1386,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 54,
            column: 10,
            span: 1386..1387,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 54,
            column: 11,
            span: 1387..1388,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 54,
            column: 12,
            span: 1388..1389,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 54,
            column: 17,
            span: 1389..1394,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 54,
            column: 18,
            span: 1394..1395,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"replace 2; gettop; return .\"",
        ),
        position: Position {
            line: 54,
            column: 47,
            span: 1395..1424,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 54,
            column: 48,
            span: 1424..1425,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 54,
            column: 50,
            span: 1425..1427,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 54,
            column: 51,
            span: 1427..1428,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 54,
            column: 53,
            span: 1428..1430,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 54,
            column: 54,
            span: 1430..1431,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 54,
            column: 56,
            span: 1431..1433,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 54,
            column: 57,
            span: 1433..1434,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 54,
            column: 59,
            span: 1434..1436,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 54,
            column: 60,
            span: 1436..1437,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 54,
            column: 61,
            span: 1437..1438,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 55,
            column: 7,
            span: 1439..1445,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 55,
            column: 8,
            span: 1445..1446,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 55,
            column: 9,
            span: 1446..1447,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 55,
            column: 10,
            span: 1447..1448,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 55,
            column: 12,
            span: 1449..1450,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 55,
            column: 13,
            span: 1450..1451,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 55,
            column: 14,
            span: 1451..1452,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 55,
            column: 15,
            span: 1451..1453,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 55,
            column: 16,
            span: 1453..1454,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 55,
            column: 17,
            span: 1453..1455,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 55,
            column: 18,
            span: 1455..1456,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 55,
            column: 19,
            span: 1455..1457,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 55,
            column: 20,
            span: 1457..1458,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 55,
            column: 21,
            span: 1457..1459,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 55,
            column: 22,
            span: 1459..1460,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 55,
            column: 23,
            span: 1460..1461,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 57,
            column: 2,
            span: 1463..1464,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 57,
            column: 4,
            span: 1465..1466,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 57,
            column: 9,
            span: 1467..1471,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 57,
            column: 10,
            span: 1471..1472,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 57,
            column: 11,
            span: 1472..1473,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 57,
            column: 12,
            span: 1473..1474,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 57,
            column: 17,
            span: 1474..1479,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 57,
            column: 18,
            span: 1479..1480,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"replace -2; gettop; return .\"",
        ),
        position: Position {
            line: 57,
            column: 48,
            span: 1480..1510,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 57,
            column: 49,
            span: 1510..1511,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 57,
            column: 51,
            span: 1511..1513,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 57,
            column: 52,
            span: 1513..1514,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 57,
            column: 54,
            span: 1514..1516,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 57,
            column: 55,
            span: 1516..1517,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 57,
            column: 57,
            span: 1517..1519,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 57,
            column: 58,
            span: 1519..1520,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 57,
            column: 60,
            span: 1520..1522,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 57,
            column: 61,
            span: 1522..1523,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 57,
            column: 62,
            span: 1523..1524,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 58,
            column: 7,
            span: 1525..1531,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 58,
            column: 8,
            span: 1531..1532,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 58,
            column: 9,
            span: 1532..1533,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 10,
            span: 1533..1534,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 58,
            column: 12,
            span: 1535..1536,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 58,
            column: 13,
            span: 1536..1537,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 58,
            column: 14,
            span: 1537..1538,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 58,
            column: 15,
            span: 1537..1539,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 16,
            span: 1539..1540,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 58,
            column: 17,
            span: 1539..1541,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 18,
            span: 1541..1542,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 58,
            column: 19,
            span: 1541..1543,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 20,
            span: 1543..1544,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 58,
            column: 21,
            span: 1543..1545,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 58,
            column: 22,
            span: 1545..1546,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 58,
            column: 23,
            span: 1546..1547,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 60,
            column: 2,
            span: 1549..1550,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 60,
            column: 4,
            span: 1551..1552,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 60,
            column: 9,
            span: 1553..1557,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 60,
            column: 10,
            span: 1557..1558,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 60,
            column: 11,
            span: 1558..1559,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 60,
            column: 12,
            span: 1559..1560,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 60,
            column: 17,
            span: 1560..1565,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 60,
            column: 18,
            span: 1565..1566,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"remove 3; gettop; return .\"",
        ),
        position: Position {
            line: 60,
            column: 46,
            span: 1566..1594,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 60,
            column: 47,
            span: 1594..1595,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 60,
            column: 49,
            span: 1595..1597,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 60,
            column: 50,
            span: 1597..1598,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 60,
            column: 52,
            span: 1598..1600,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 60,
            column: 53,
            span: 1600..1601,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 60,
            column: 55,
            span: 1601..1603,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 60,
            column: 56,
            span: 1603..1604,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 60,
            column: 58,
            span: 1604..1606,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 60,
            column: 59,
            span: 1606..1607,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 60,
            column: 60,
            span: 1607..1608,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 61,
            column: 7,
            span: 1609..1615,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 61,
            column: 8,
            span: 1615..1616,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 61,
            column: 9,
            span: 1616..1617,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 61,
            column: 10,
            span: 1617..1618,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 61,
            column: 12,
            span: 1619..1620,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 61,
            column: 13,
            span: 1620..1621,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 61,
            column: 14,
            span: 1621..1622,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 61,
            column: 15,
            span: 1621..1623,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 61,
            column: 16,
            span: 1623..1624,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 61,
            column: 17,
            span: 1623..1625,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 61,
            column: 18,
            span: 1625..1626,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 61,
            column: 19,
            span: 1625..1627,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 61,
            column: 20,
            span: 1627..1628,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 61,
            column: 21,
            span: 1627..1629,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 61,
            column: 22,
            span: 1629..1630,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 61,
            column: 23,
            span: 1630..1631,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 63,
            column: 2,
            span: 1633..1634,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 63,
            column: 4,
            span: 1635..1636,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 63,
            column: 9,
            span: 1637..1641,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 63,
            column: 10,
            span: 1641..1642,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 63,
            column: 11,
            span: 1642..1643,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 63,
            column: 12,
            span: 1643..1644,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 63,
            column: 17,
            span: 1644..1649,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 63,
            column: 18,
            span: 1649..1650,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"insert 3; pushvalue 3; remove 3; pushvalue 2; remove 2; \\\n                  insert 2; pushvalue 1; remove 1; insert 1; \\\n      insert -2; pushvalue -2; remove -3; gettop; return .\"",
        ),
        position: Position {
            line: 65,
            column: 60,
            span: 1650..1831,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 65,
            column: 61,
            span: 1831..1832,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 66,
            column: 8,
            span: 1838..1840,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 66,
            column: 9,
            span: 1840..1841,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 66,
            column: 11,
            span: 1841..1843,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 66,
            column: 12,
            span: 1843..1844,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 66,
            column: 14,
            span: 1844..1846,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 66,
            column: 15,
            span: 1846..1847,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 66,
            column: 17,
            span: 1847..1849,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 66,
            column: 18,
            span: 1849..1850,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 66,
            column: 21,
            span: 1850..1853,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 66,
            column: 22,
            span: 1853..1854,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 66,
            column: 25,
            span: 1854..1857,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 66,
            column: 26,
            span: 1857..1858,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "90",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 66,
            column: 29,
            span: 1858..1861,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 66,
            column: 30,
            span: 1861..1862,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 66,
            column: 31,
            span: 1862..1863,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 67,
            column: 7,
            span: 1864..1870,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 67,
            column: 8,
            span: 1870..1871,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 67,
            column: 9,
            span: 1871..1872,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 67,
            column: 10,
            span: 1872..1873,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 67,
            column: 12,
            span: 1874..1875,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 67,
            column: 13,
            span: 1875..1876,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 67,
            column: 14,
            span: 1876..1877,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 67,
            column: 15,
            span: 1876..1878,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 67,
            column: 16,
            span: 1878..1879,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 67,
            column: 17,
            span: 1878..1880,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 67,
            column: 18,
            span: 1880..1881,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 67,
            column: 19,
            span: 1880..1882,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 67,
            column: 20,
            span: 1882..1883,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 67,
            column: 21,
            span: 1882..1884,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 67,
            column: 22,
            span: 1884..1885,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 67,
            column: 23,
            span: 1884..1886,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 67,
            column: 24,
            span: 1886..1887,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 67,
            column: 26,
            span: 1886..1889,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 67,
            column: 27,
            span: 1889..1890,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 67,
            column: 29,
            span: 1889..1892,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 67,
            column: 30,
            span: 1892..1893,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "90",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 67,
            column: 32,
            span: 1892..1895,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 67,
            column: 33,
            span: 1895..1896,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 67,
            column: 34,
            span: 1896..1897,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 69,
            column: 2,
            span: 1899..1900,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 69,
            column: 4,
            span: 1901..1902,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 69,
            column: 9,
            span: 1903..1907,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 69,
            column: 10,
            span: 1907..1908,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 69,
            column: 11,
            span: 1908..1909,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 69,
            column: 12,
            span: 1909..1910,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 69,
            column: 17,
            span: 1910..1915,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 69,
            column: 18,
            span: 1915..1916,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concat 5; gettop; return .\"",
        ),
        position: Position {
            line: 69,
            column: 46,
            span: 1916..1944,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 69,
            column: 47,
            span: 1944..1945,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 69,
            column: 53,
            span: 1946..1951,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 69,
            column: 54,
            span: 1951..1952,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 69,
            column: 56,
            span: 1952..1954,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 69,
            column: 57,
            span: 1954..1955,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 69,
            column: 59,
            span: 1955..1957,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 69,
            column: 60,
            span: 1957..1958,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"joao\"",
        ),
        position: Position {
            line: 69,
            column: 67,
            span: 1959..1965,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 69,
            column: 68,
            span: 1965..1966,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 69,
            column: 71,
            span: 1966..1969,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 69,
            column: 72,
            span: 1969..1970,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 69,
            column: 73,
            span: 1970..1971,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 70,
            column: 7,
            span: 1972..1978,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 70,
            column: 8,
            span: 1978..1979,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 70,
            column: 9,
            span: 1979..1980,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 70,
            column: 10,
            span: 1980..1981,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 70,
            column: 12,
            span: 1982..1983,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 70,
            column: 13,
            span: 1983..1984,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 70,
            column: 14,
            span: 1984..1985,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 70,
            column: 15,
            span: 1984..1986,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 70,
            column: 16,
            span: 1986..1987,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo23joao12\"",
        ),
        position: Position {
            line: 70,
            column: 29,
            span: 1987..2000,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 70,
            column: 30,
            span: 2000..2001,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 70,
            column: 31,
            span: 2001..2002,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 73,
            column: 2,
            span: 2023..2024,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 73,
            column: 4,
            span: 2025..2026,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 73,
            column: 9,
            span: 2027..2031,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 73,
            column: 10,
            span: 2031..2032,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 73,
            column: 11,
            span: 2032..2033,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 73,
            column: 12,
            span: 2033..2034,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 73,
            column: 17,
            span: 2034..2039,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 73,
            column: 18,
            span: 2039..2040,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rawcall 2,-1; gettop; return .\"",
        ),
        position: Position {
            line: 73,
            column: 50,
            span: 2040..2072,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 73,
            column: 51,
            span: 2072..2073,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 74,
            column: 14,
            span: 2079..2087,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 74,
            column: 16,
            span: 2088..2089,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 74,
            column: 17,
            span: 2089..2090,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 74,
            column: 18,
            span: 2090..2091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 74,
            column: 19,
            span: 2091..2092,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 74,
            column: 20,
            span: 2092..2093,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 74,
            column: 27,
            span: 2094..2100,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 74,
            column: 29,
            span: 2100..2102,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 74,
            column: 30,
            span: 2102..2103,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 74,
            column: 31,
            span: 2102..2104,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 74,
            column: 32,
            span: 2104..2105,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 74,
            column: 33,
            span: 2104..2106,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 74,
            column: 34,
            span: 2106..2107,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 74,
            column: 35,
            span: 2106..2108,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 74,
            column: 36,
            span: 2108..2109,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 74,
            column: 37,
            span: 2109..2110,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 74,
            column: 38,
            span: 2110..2111,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 74,
            column: 39,
            span: 2111..2112,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 74,
            column: 43,
            span: 2113..2116,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 74,
            column: 44,
            span: 2116..2117,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 74,
            column: 50,
            span: 2118..2123,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 74,
            column: 51,
            span: 2123..2124,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"joao\"",
        ),
        position: Position {
            line: 74,
            column: 58,
            span: 2125..2131,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 74,
            column: 59,
            span: 2131..2132,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 74,
            column: 60,
            span: 2132..2133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 75,
            column: 7,
            span: 2134..2140,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 75,
            column: 8,
            span: 2140..2141,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 75,
            column: 9,
            span: 2141..2142,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 75,
            column: 10,
            span: 2142..2143,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 75,
            column: 12,
            span: 2144..2145,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 75,
            column: 13,
            span: 2145..2146,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 75,
            column: 14,
            span: 2146..2147,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 75,
            column: 15,
            span: 2146..2148,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 75,
            column: 16,
            span: 2148..2149,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 75,
            column: 17,
            span: 2148..2150,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 75,
            column: 18,
            span: 2150..2151,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 75,
            column: 19,
            span: 2150..2152,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 75,
            column: 20,
            span: 2152..2153,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 75,
            column: 21,
            span: 2152..2154,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 75,
            column: 22,
            span: 2154..2155,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 75,
            column: 23,
            span: 2154..2156,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 75,
            column: 24,
            span: 2156..2157,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 75,
            column: 29,
            span: 2157..2162,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 75,
            column: 30,
            span: 2162..2163,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"joao\"",
        ),
        position: Position {
            line: 75,
            column: 37,
            span: 2164..2170,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 75,
            column: 38,
            span: 2170..2171,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 75,
            column: 39,
            span: 2171..2172,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 77,
            column: 3,
            span: 2174..2176,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 78,
            column: 8,
            span: 2240..2245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 78,
            column: 10,
            span: 2246..2247,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 78,
            column: 12,
            span: 2248..2249,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 78,
            column: 14,
            span: 2250..2251,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 78,
            column: 15,
            span: 2251..2252,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 79,
            column: 6,
            span: 2255..2258,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 79,
            column: 8,
            span: 2259..2260,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 79,
            column: 9,
            span: 2260..2261,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 79,
            column: 10,
            span: 2260..2262,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 79,
            column: 11,
            span: 2262..2263,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 79,
            column: 15,
            span: 2262..2267,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 79,
            column: 18,
            span: 2268..2270,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 79,
            column: 20,
            span: 2271..2272,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 79,
            column: 21,
            span: 2272..2273,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 79,
            column: 22,
            span: 2273..2274,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 79,
            column: 23,
            span: 2274..2275,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 79,
            column: 25,
            span: 2276..2277,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 79,
            column: 30,
            span: 2278..2282,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 79,
            column: 34,
            span: 2283..2286,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 79,
            column: 35,
            span: 2286..2287,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 79,
            column: 37,
            span: 2288..2289,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 79,
            column: 38,
            span: 2289..2290,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "999",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 79,
            column: 41,
            span: 2289..2293,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 79,
            column: 42,
            span: 2293..2294,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 79,
            column: 44,
            span: 2295..2296,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 79,
            column: 0,
            span: 2296..2299,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 80,
            column: 8,
            span: 2302..2307,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 80,
            column: 10,
            span: 2308..2309,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 80,
            column: 12,
            span: 2310..2311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 80,
            column: 14,
            span: 2312..2313,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 80,
            column: 15,
            span: 2313..2314,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 80,
            column: 20,
            span: 2314..2319,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 80,
            column: 21,
            span: 2319..2320,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[call 1 -1; pop 1; tostring -1; return 1]]",
        ),
        position: Position {
            line: 80,
            column: 64,
            span: 2320..2363,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 80,
            column: 65,
            span: 2363..2364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 80,
            column: 72,
            span: 2365..2371,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 80,
            column: 73,
            span: 2371..2372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 80,
            column: 75,
            span: 2373..2374,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 80,
            column: 76,
            span: 2374..2375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 81,
            column: 9,
            span: 2378..2384,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 81,
            column: 10,
            span: 2384..2385,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 81,
            column: 11,
            span: 2385..2386,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 81,
            column: 14,
            span: 2387..2389,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10\"",
        ),
        position: Position {
            line: 81,
            column: 19,
            span: 2390..2394,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 81,
            column: 20,
            span: 2394..2395,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 82,
            column: 0,
            span: 2396..2399,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 86,
            column: 7,
            span: 2422..2428,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 86,
            column: 8,
            span: 2428..2429,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 86,
            column: 9,
            span: 2429..2430,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 86,
            column: 10,
            span: 2430..2431,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 86,
            column: 15,
            span: 2431..2436,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 86,
            column: 16,
            span: 2436..2437,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lessthan 2 5, return 1\"",
        ),
        position: Position {
            line: 86,
            column: 40,
            span: 2437..2461,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 86,
            column: 41,
            span: 2461..2462,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 86,
            column: 43,
            span: 2462..2464,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 86,
            column: 44,
            span: 2464..2465,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 86,
            column: 46,
            span: 2465..2467,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 86,
            column: 47,
            span: 2467..2468,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 86,
            column: 49,
            span: 2468..2470,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 86,
            column: 50,
            span: 2470..2471,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 86,
            column: 52,
            span: 2471..2473,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 86,
            column: 53,
            span: 2473..2474,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 86,
            column: 55,
            span: 2474..2476,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 86,
            column: 56,
            span: 2476..2477,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 86,
            column: 58,
            span: 2477..2479,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 86,
            column: 59,
            span: 2479..2480,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 86,
            column: 60,
            span: 2480..2481,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 87,
            column: 7,
            span: 2482..2488,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 87,
            column: 8,
            span: 2488..2489,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 87,
            column: 9,
            span: 2489..2490,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 87,
            column: 10,
            span: 2490..2491,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 87,
            column: 15,
            span: 2491..2496,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 87,
            column: 16,
            span: 2496..2497,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lessthan 5 2, return 1\"",
        ),
        position: Position {
            line: 87,
            column: 40,
            span: 2497..2521,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 87,
            column: 41,
            span: 2521..2522,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 87,
            column: 43,
            span: 2522..2524,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 87,
            column: 44,
            span: 2524..2525,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 87,
            column: 46,
            span: 2525..2527,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 87,
            column: 47,
            span: 2527..2528,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 87,
            column: 49,
            span: 2528..2530,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 87,
            column: 50,
            span: 2530..2531,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 87,
            column: 52,
            span: 2531..2533,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 87,
            column: 53,
            span: 2533..2534,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 87,
            column: 55,
            span: 2534..2536,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 87,
            column: 56,
            span: 2536..2537,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 87,
            column: 58,
            span: 2537..2539,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 87,
            column: 59,
            span: 2539..2540,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 87,
            column: 60,
            span: 2540..2541,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 88,
            column: 7,
            span: 2542..2548,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 88,
            column: 8,
            span: 2548..2549,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 88,
            column: 11,
            span: 2549..2552,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 88,
            column: 13,
            span: 2553..2554,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 88,
            column: 14,
            span: 2554..2555,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 88,
            column: 19,
            span: 2555..2560,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 88,
            column: 20,
            span: 2560..2561,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lessthan 2 -3, return 1\"",
        ),
        position: Position {
            line: 88,
            column: 45,
            span: 2561..2586,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 88,
            column: 46,
            span: 2586..2587,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"4\"",
        ),
        position: Position {
            line: 88,
            column: 50,
            span: 2588..2591,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 88,
            column: 51,
            span: 2591..2592,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        position: Position {
            line: 88,
            column: 55,
            span: 2593..2596,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 88,
            column: 56,
            span: 2596..2597,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        position: Position {
            line: 88,
            column: 60,
            span: 2598..2601,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 88,
            column: 61,
            span: 2601..2602,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3\"",
        ),
        position: Position {
            line: 88,
            column: 65,
            span: 2603..2606,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 88,
            column: 66,
            span: 2606..2607,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        position: Position {
            line: 88,
            column: 70,
            span: 2608..2611,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 88,
            column: 71,
            span: 2611..2612,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        position: Position {
            line: 88,
            column: 75,
            span: 2613..2616,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 88,
            column: 76,
            span: 2616..2617,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 88,
            column: 77,
            span: 2617..2618,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 89,
            column: 7,
            span: 2619..2625,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 89,
            column: 8,
            span: 2625..2626,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 89,
            column: 11,
            span: 2626..2629,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 89,
            column: 13,
            span: 2630..2631,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 89,
            column: 14,
            span: 2631..2632,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 89,
            column: 19,
            span: 2632..2637,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 89,
            column: 20,
            span: 2637..2638,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lessthan -3 2, return 1\"",
        ),
        position: Position {
            line: 89,
            column: 45,
            span: 2638..2663,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 89,
            column: 46,
            span: 2663..2664,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3\"",
        ),
        position: Position {
            line: 89,
            column: 50,
            span: 2665..2668,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 89,
            column: 51,
            span: 2668..2669,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        position: Position {
            line: 89,
            column: 55,
            span: 2670..2673,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 89,
            column: 56,
            span: 2673..2674,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        position: Position {
            line: 89,
            column: 60,
            span: 2675..2678,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 89,
            column: 61,
            span: 2678..2679,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"4\"",
        ),
        position: Position {
            line: 89,
            column: 65,
            span: 2680..2683,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 89,
            column: 66,
            span: 2683..2684,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        position: Position {
            line: 89,
            column: 70,
            span: 2685..2688,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 89,
            column: 71,
            span: 2688..2689,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        position: Position {
            line: 89,
            column: 75,
            span: 2690..2693,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 89,
            column: 76,
            span: 2693..2694,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 89,
            column: 77,
            span: 2694..2695,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 91,
            column: 6,
            span: 2697..2702,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 91,
            column: 8,
            span: 2703..2704,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 91,
            column: 10,
            span: 2705..2706,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 91,
            column: 12,
            span: 2707..2708,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__lt",
        ),
        position: Position {
            line: 91,
            column: 16,
            span: 2708..2712,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 91,
            column: 18,
            span: 2713..2714,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 91,
            column: 27,
            span: 2715..2723,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 91,
            column: 29,
            span: 2724..2725,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 91,
            column: 30,
            span: 2725..2726,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 91,
            column: 31,
            span: 2726..2727,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 91,
            column: 32,
            span: 2727..2728,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 91,
            column: 33,
            span: 2728..2729,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 91,
            column: 40,
            span: 2730..2736,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 91,
            column: 42,
            span: 2737..2738,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 91,
            column: 43,
            span: 2738..2739,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 91,
            column: 44,
            span: 2738..2740,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 91,
            column: 45,
            span: 2740..2741,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 91,
            column: 47,
            span: 2742..2743,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 91,
            column: 49,
            span: 2744..2745,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 91,
            column: 50,
            span: 2745..2746,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 91,
            column: 51,
            span: 2745..2747,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 91,
            column: 52,
            span: 2747..2748,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 91,
            column: 56,
            span: 2749..2752,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 91,
            column: 57,
            span: 2752..2753,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 92,
            column: 6,
            span: 2754..2759,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        position: Position {
            line: 92,
            column: 9,
            span: 2760..2762,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 92,
            column: 10,
            span: 2762..2763,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        position: Position {
            line: 92,
            column: 12,
            span: 2763..2765,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 92,
            column: 13,
            span: 2765..2766,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a4",
        ),
        position: Position {
            line: 92,
            column: 15,
            span: 2766..2768,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 92,
            column: 17,
            span: 2769..2770,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 92,
            column: 30,
            span: 2771..2783,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 92,
            column: 31,
            span: 2783..2784,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 92,
            column: 32,
            span: 2784..2785,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 92,
            column: 33,
            span: 2784..2786,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 92,
            column: 34,
            span: 2786..2787,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 92,
            column: 35,
            span: 2787..2788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 92,
            column: 37,
            span: 2789..2790,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 92,
            column: 38,
            span: 2790..2791,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 92,
            column: 39,
            span: 2791..2792,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 93,
            column: 30,
            span: 2810..2822,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 93,
            column: 31,
            span: 2822..2823,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 93,
            column: 32,
            span: 2823..2824,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 93,
            column: 33,
            span: 2823..2825,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 93,
            column: 34,
            span: 2825..2826,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 93,
            column: 35,
            span: 2826..2827,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 93,
            column: 37,
            span: 2828..2829,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 93,
            column: 38,
            span: 2829..2830,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 93,
            column: 39,
            span: 2830..2831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 94,
            column: 30,
            span: 2849..2861,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 94,
            column: 31,
            span: 2861..2862,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 94,
            column: 32,
            span: 2862..2863,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 94,
            column: 33,
            span: 2862..2864,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 94,
            column: 34,
            span: 2864..2865,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 94,
            column: 35,
            span: 2865..2866,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 94,
            column: 37,
            span: 2867..2868,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 94,
            column: 38,
            span: 2868..2869,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 95,
            column: 7,
            span: 2870..2876,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 95,
            column: 8,
            span: 2876..2877,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 95,
            column: 9,
            span: 2877..2878,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 95,
            column: 10,
            span: 2878..2879,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 95,
            column: 15,
            span: 2879..2884,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 95,
            column: 16,
            span: 2884..2885,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lessthan 2 5, return 1\"",
        ),
        position: Position {
            line: 95,
            column: 40,
            span: 2885..2909,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 95,
            column: 41,
            span: 2909..2910,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        position: Position {
            line: 95,
            column: 44,
            span: 2911..2913,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 95,
            column: 45,
            span: 2913..2914,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 95,
            column: 47,
            span: 2914..2916,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 95,
            column: 48,
            span: 2916..2917,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 95,
            column: 50,
            span: 2917..2919,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 95,
            column: 51,
            span: 2919..2920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a4",
        ),
        position: Position {
            line: 95,
            column: 54,
            span: 2921..2923,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 95,
            column: 55,
            span: 2923..2924,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 95,
            column: 57,
            span: 2924..2926,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 95,
            column: 58,
            span: 2926..2927,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 95,
            column: 60,
            span: 2927..2929,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 95,
            column: 61,
            span: 2929..2930,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 95,
            column: 62,
            span: 2930..2931,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 96,
            column: 7,
            span: 2932..2938,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 96,
            column: 8,
            span: 2938..2939,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 96,
            column: 9,
            span: 2939..2940,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 96,
            column: 10,
            span: 2940..2941,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 96,
            column: 15,
            span: 2941..2946,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 96,
            column: 16,
            span: 2946..2947,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lessthan 5 -6, return 1\"",
        ),
        position: Position {
            line: 96,
            column: 41,
            span: 2947..2972,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 96,
            column: 42,
            span: 2972..2973,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a4",
        ),
        position: Position {
            line: 96,
            column: 45,
            span: 2974..2976,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 96,
            column: 46,
            span: 2976..2977,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 96,
            column: 48,
            span: 2977..2979,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 96,
            column: 49,
            span: 2979..2980,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 96,
            column: 51,
            span: 2980..2982,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 96,
            column: 52,
            span: 2982..2983,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        position: Position {
            line: 96,
            column: 55,
            span: 2984..2986,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 96,
            column: 56,
            span: 2986..2987,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 96,
            column: 58,
            span: 2987..2989,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 96,
            column: 59,
            span: 2989..2990,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 96,
            column: 61,
            span: 2990..2992,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 96,
            column: 62,
            span: 2992..2993,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 96,
            column: 63,
            span: 2993..2994,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 97,
            column: 2,
            span: 2995..2996,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 97,
            column: 3,
            span: 2996..2997,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 97,
            column: 4,
            span: 2997..2998,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 97,
            column: 6,
            span: 2999..3000,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 97,
            column: 8,
            span: 3001..3002,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 97,
            column: 9,
            span: 3002..3003,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 97,
            column: 14,
            span: 3003..3008,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 97,
            column: 15,
            span: 3008..3009,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lessthan 5 -6, return 2\"",
        ),
        position: Position {
            line: 97,
            column: 40,
            span: 3009..3034,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 97,
            column: 41,
            span: 3034..3035,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        position: Position {
            line: 97,
            column: 44,
            span: 3036..3038,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 97,
            column: 45,
            span: 3038..3039,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 97,
            column: 47,
            span: 3039..3041,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 97,
            column: 48,
            span: 3041..3042,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 97,
            column: 50,
            span: 3042..3044,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 97,
            column: 51,
            span: 3044..3045,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        position: Position {
            line: 97,
            column: 54,
            span: 3046..3048,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 97,
            column: 55,
            span: 3048..3049,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 97,
            column: 57,
            span: 3049..3051,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 97,
            column: 58,
            span: 3051..3052,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 97,
            column: 61,
            span: 3052..3055,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 97,
            column: 62,
            span: 3055..3056,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 98,
            column: 7,
            span: 3057..3063,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 98,
            column: 8,
            span: 3063..3064,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 98,
            column: 9,
            span: 3064..3065,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 98,
            column: 12,
            span: 3066..3068,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 98,
            column: 15,
            span: 3068..3071,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 98,
            column: 19,
            span: 3072..3075,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 98,
            column: 21,
            span: 3076..3077,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 98,
            column: 24,
            span: 3078..3080,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 98,
            column: 30,
            span: 3081..3086,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 98,
            column: 31,
            span: 3086..3087,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 103,
            column: 9,
            span: 3109..3117,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 103,
            column: 15,
            span: 3118..3123,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 103,
            column: 17,
            span: 3124..3125,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 103,
            column: 18,
            span: 3125..3126,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 103,
            column: 19,
            span: 3126..3127,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 103,
            column: 21,
            span: 3128..3129,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 103,
            column: 22,
            span: 3129..3130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 104,
            column: 4,
            span: 3133..3134,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 104,
            column: 6,
            span: 3135..3136,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 104,
            column: 8,
            span: 3137..3138,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 104,
            column: 11,
            span: 3139..3141,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 104,
            column: 0,
            span: 3141..3143,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 105,
            column: 8,
            span: 3146..3151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 105,
            column: 13,
            span: 3152..3156,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 105,
            column: 15,
            span: 3157..3158,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    isnumber %d;\n    isstring %d;\n    isfunction %d;\n    iscfunction %d;\n    istable %d;\n    isuserdata %d;\n    isnil %d;\n    isnull %d;\n    return 8\n  ]]",
        ),
        position: Position {
            line: 115,
            column: 5,
            span: 3159..3316,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 116,
            column: 7,
            span: 3319..3323,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 116,
            column: 9,
            span: 3324..3325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 116,
            column: 16,
            span: 3326..3332,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 116,
            column: 17,
            span: 3332..3333,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 116,
            column: 23,
            span: 3333..3339,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 116,
            column: 24,
            span: 3339..3340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 116,
            column: 28,
            span: 3340..3344,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 116,
            column: 29,
            span: 3344..3345,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 116,
            column: 31,
            span: 3346..3347,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 116,
            column: 32,
            span: 3347..3348,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 116,
            column: 34,
            span: 3349..3350,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 116,
            column: 35,
            span: 3350..3351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 116,
            column: 37,
            span: 3352..3353,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 116,
            column: 38,
            span: 3353..3354,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 116,
            column: 40,
            span: 3355..3356,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 116,
            column: 41,
            span: 3356..3357,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 116,
            column: 43,
            span: 3358..3359,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 116,
            column: 44,
            span: 3359..3360,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 116,
            column: 46,
            span: 3361..3362,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 116,
            column: 47,
            span: 3362..3363,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 116,
            column: 49,
            span: 3364..3365,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 116,
            column: 50,
            span: 3365..3366,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 116,
            column: 52,
            span: 3367..3368,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 116,
            column: 53,
            span: 3368..3369,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 117,
            column: 8,
            span: 3372..3377,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 117,
            column: 10,
            span: 3378..3379,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 117,
            column: 11,
            span: 3379..3380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 117,
            column: 12,
            span: 3380..3381,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 117,
            column: 13,
            span: 3381..3382,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 117,
            column: 14,
            span: 3382..3383,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 117,
            column: 15,
            span: 3383..3384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 117,
            column: 16,
            span: 3384..3385,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 117,
            column: 17,
            span: 3385..3386,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 117,
            column: 18,
            span: 3386..3387,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 117,
            column: 19,
            span: 3387..3388,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 117,
            column: 20,
            span: 3388..3389,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 117,
            column: 21,
            span: 3389..3390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 117,
            column: 22,
            span: 3390..3391,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 117,
            column: 23,
            span: 3391..3392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        position: Position {
            line: 117,
            column: 24,
            span: 3392..3393,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 117,
            column: 26,
            span: 3394..3395,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 117,
            column: 28,
            span: 3396..3397,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 117,
            column: 29,
            span: 3397..3398,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 117,
            column: 34,
            span: 3398..3403,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 117,
            column: 35,
            span: 3403..3404,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 117,
            column: 39,
            span: 3404..3408,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 117,
            column: 40,
            span: 3408..3409,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 117,
            column: 42,
            span: 3410..3411,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 117,
            column: 43,
            span: 3411..3412,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 118,
            column: 9,
            span: 3415..3421,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 118,
            column: 11,
            span: 3422..3423,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 118,
            column: 12,
            span: 3423..3424,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 118,
            column: 13,
            span: 3424..3425,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 118,
            column: 14,
            span: 3425..3426,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 118,
            column: 15,
            span: 3426..3427,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 118,
            column: 16,
            span: 3427..3428,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 118,
            column: 17,
            span: 3428..3429,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 118,
            column: 18,
            span: 3429..3430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 118,
            column: 19,
            span: 3430..3431,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 118,
            column: 20,
            span: 3431..3432,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 118,
            column: 21,
            span: 3432..3433,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 118,
            column: 22,
            span: 3433..3434,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 118,
            column: 23,
            span: 3434..3435,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 118,
            column: 24,
            span: 3435..3436,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 118,
            column: 25,
            span: 3436..3437,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 118,
            column: 28,
            span: 3436..3440,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 118,
            column: 29,
            span: 3440..3441,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        position: Position {
            line: 118,
            column: 30,
            span: 3441..3442,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 118,
            column: 31,
            span: 3442..3443,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 119,
            column: 0,
            span: 3444..3447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 121,
            column: 7,
            span: 3449..3455,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 121,
            column: 8,
            span: 3455..3456,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 121,
            column: 13,
            span: 3456..3461,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 121,
            column: 14,
            span: 3461..3462,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 121,
            column: 15,
            span: 3461..3463,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 121,
            column: 16,
            span: 3463..3464,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 121,
            column: 19,
            span: 3465..3467,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 121,
            column: 21,
            span: 3467..3469,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 121,
            column: 22,
            span: 3469..3470,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 122,
            column: 7,
            span: 3471..3477,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 122,
            column: 8,
            span: 3477..3478,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 122,
            column: 13,
            span: 3478..3483,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 122,
            column: 14,
            span: 3483..3484,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        position: Position {
            line: 122,
            column: 19,
            span: 3484..3489,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 122,
            column: 20,
            span: 3489..3490,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 122,
            column: 23,
            span: 3491..3493,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 122,
            column: 25,
            span: 3493..3495,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 122,
            column: 26,
            span: 3495..3496,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 123,
            column: 7,
            span: 3497..3503,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 123,
            column: 8,
            span: 3503..3504,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 123,
            column: 13,
            span: 3504..3509,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 123,
            column: 14,
            span: 3509..3510,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'32'",
        ),
        position: Position {
            line: 123,
            column: 18,
            span: 3510..3514,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 123,
            column: 19,
            span: 3514..3515,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 123,
            column: 22,
            span: 3516..3518,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 123,
            column: 24,
            span: 3518..3520,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 123,
            column: 25,
            span: 3520..3521,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 124,
            column: 7,
            span: 3522..3528,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 124,
            column: 8,
            span: 3528..3529,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 124,
            column: 13,
            span: 3529..3534,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 124,
            column: 14,
            span: 3534..3535,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 124,
            column: 15,
            span: 3535..3536,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 124,
            column: 16,
            span: 3536..3537,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 124,
            column: 17,
            span: 3537..3538,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 124,
            column: 20,
            span: 3539..3541,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 124,
            column: 22,
            span: 3541..3543,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 124,
            column: 23,
            span: 3543..3544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 125,
            column: 7,
            span: 3545..3551,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 125,
            column: 8,
            span: 3551..3552,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 125,
            column: 13,
            span: 3552..3557,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 125,
            column: 14,
            span: 3557..3558,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 125,
            column: 19,
            span: 3558..3563,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 125,
            column: 20,
            span: 3563..3564,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 125,
            column: 23,
            span: 3565..3567,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 125,
            column: 25,
            span: 3567..3569,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 125,
            column: 26,
            span: 3569..3570,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 126,
            column: 7,
            span: 3571..3577,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 126,
            column: 8,
            span: 3577..3578,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 126,
            column: 13,
            span: 3578..3583,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 126,
            column: 14,
            span: 3583..3584,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 126,
            column: 22,
            span: 3584..3592,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 126,
            column: 24,
            span: 3593..3594,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 126,
            column: 25,
            span: 3594..3595,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 126,
            column: 29,
            span: 3596..3599,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 126,
            column: 30,
            span: 3599..3600,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 126,
            column: 33,
            span: 3601..3603,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 126,
            column: 35,
            span: 3603..3605,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 126,
            column: 36,
            span: 3605..3606,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 127,
            column: 7,
            span: 3607..3613,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 127,
            column: 8,
            span: 3613..3614,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 127,
            column: 13,
            span: 3614..3619,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 127,
            column: 14,
            span: 3619..3620,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 127,
            column: 17,
            span: 3620..3623,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 127,
            column: 18,
            span: 3623..3624,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 127,
            column: 21,
            span: 3625..3627,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 127,
            column: 23,
            span: 3627..3629,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 127,
            column: 24,
            span: 3629..3630,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 128,
            column: 7,
            span: 3631..3637,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 128,
            column: 8,
            span: 3637..3638,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 128,
            column: 13,
            span: 3638..3643,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 128,
            column: 14,
            span: 3643..3644,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 128,
            column: 16,
            span: 3644..3646,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 128,
            column: 17,
            span: 3646..3647,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        position: Position {
            line: 128,
            column: 22,
            span: 3647..3652,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 128,
            column: 23,
            span: 3652..3653,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 128,
            column: 26,
            span: 3654..3656,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 128,
            column: 28,
            span: 3656..3658,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 128,
            column: 29,
            span: 3658..3659,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 129,
            column: 7,
            span: 3660..3666,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 129,
            column: 8,
            span: 3666..3667,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 129,
            column: 13,
            span: 3667..3672,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 129,
            column: 14,
            span: 3672..3673,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 129,
            column: 17,
            span: 3673..3676,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 129,
            column: 18,
            span: 3676..3677,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 129,
            column: 21,
            span: 3677..3680,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 129,
            column: 22,
            span: 3680..3681,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 129,
            column: 25,
            span: 3682..3684,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 129,
            column: 29,
            span: 3684..3688,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 129,
            column: 30,
            span: 3688..3689,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 133,
            column: 9,
            span: 3713..3721,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 133,
            column: 12,
            span: 3722..3724,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 133,
            column: 14,
            span: 3725..3726,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 133,
            column: 15,
            span: 3726..3727,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 133,
            column: 16,
            span: 3727..3728,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 133,
            column: 18,
            span: 3729..3730,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 133,
            column: 19,
            span: 3730..3731,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 133,
            column: 21,
            span: 3732..3733,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 133,
            column: 22,
            span: 3733..3734,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 134,
            column: 4,
            span: 3737..3738,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 134,
            column: 6,
            span: 3739..3740,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 134,
            column: 8,
            span: 3741..3742,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 134,
            column: 11,
            span: 3743..3745,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 134,
            column: 0,
            span: 3745..3747,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 135,
            column: 9,
            span: 3750..3756,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 135,
            column: 11,
            span: 3757..3758,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 135,
            column: 12,
            span: 3758..3759,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 135,
            column: 17,
            span: 3759..3764,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 135,
            column: 18,
            span: 3764..3765,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 135,
            column: 24,
            span: 3765..3771,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 135,
            column: 25,
            span: 3771..3772,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 135,
            column: 31,
            span: 3772..3778,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 135,
            column: 32,
            span: 3778..3779,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%s %d; return 1\"",
        ),
        position: Position {
            line: 135,
            column: 49,
            span: 3779..3796,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 135,
            column: 50,
            span: 3796..3797,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 135,
            column: 52,
            span: 3798..3799,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 135,
            column: 53,
            span: 3799..3800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 135,
            column: 55,
            span: 3801..3802,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 135,
            column: 56,
            span: 3802..3803,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 135,
            column: 57,
            span: 3803..3804,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 135,
            column: 59,
            span: 3805..3806,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 135,
            column: 60,
            span: 3806..3807,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 136,
            column: 0,
            span: 3808..3811,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 138,
            column: 7,
            span: 3813..3819,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 138,
            column: 8,
            span: 3819..3820,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 138,
            column: 10,
            span: 3820..3822,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 138,
            column: 11,
            span: 3822..3823,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tostring\"",
        ),
        position: Position {
            line: 138,
            column: 21,
            span: 3823..3833,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 138,
            column: 22,
            span: 3833..3834,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 138,
            column: 24,
            span: 3835..3836,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 138,
            column: 25,
            span: 3836..3837,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 138,
            column: 26,
            span: 3837..3838,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 138,
            column: 29,
            span: 3839..3841,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 138,
            column: 33,
            span: 3842..3845,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 138,
            column: 34,
            span: 3845..3846,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 139,
            column: 7,
            span: 3847..3853,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 139,
            column: 8,
            span: 3853..3854,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 139,
            column: 10,
            span: 3854..3856,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 139,
            column: 11,
            span: 3856..3857,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tostring\"",
        ),
        position: Position {
            line: 139,
            column: 21,
            span: 3857..3867,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 139,
            column: 22,
            span: 3867..3868,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 139,
            column: 28,
            span: 3869..3874,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 139,
            column: 29,
            span: 3874..3875,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 139,
            column: 32,
            span: 3876..3878,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 139,
            column: 38,
            span: 3879..3884,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 139,
            column: 39,
            span: 3884..3885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 140,
            column: 7,
            span: 3886..3892,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 140,
            column: 8,
            span: 3892..3893,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 140,
            column: 10,
            span: 3893..3895,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 140,
            column: 11,
            span: 3895..3896,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tostring\"",
        ),
        position: Position {
            line: 140,
            column: 21,
            span: 3896..3906,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 22,
            span: 3906..3907,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 140,
            column: 25,
            span: 3907..3910,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 140,
            column: 26,
            span: 3910..3911,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 140,
            column: 29,
            span: 3912..3914,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"12\"",
        ),
        position: Position {
            line: 140,
            column: 34,
            span: 3915..3919,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 140,
            column: 35,
            span: 3919..3920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 141,
            column: 7,
            span: 3921..3927,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 141,
            column: 8,
            span: 3927..3928,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 141,
            column: 10,
            span: 3928..3930,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 141,
            column: 11,
            span: 3930..3931,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tostring\"",
        ),
        position: Position {
            line: 141,
            column: 21,
            span: 3931..3941,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 141,
            column: 22,
            span: 3941..3942,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 141,
            column: 25,
            span: 3942..3945,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 141,
            column: 26,
            span: 3945..3946,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 141,
            column: 28,
            span: 3946..3948,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 141,
            column: 29,
            span: 3948..3949,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 141,
            column: 32,
            span: 3950..3952,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 141,
            column: 36,
            span: 3953..3956,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 141,
            column: 37,
            span: 3956..3957,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 142,
            column: 7,
            span: 3958..3964,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 142,
            column: 8,
            span: 3964..3965,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 142,
            column: 10,
            span: 3965..3967,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 142,
            column: 11,
            span: 3967..3968,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize\"",
        ),
        position: Position {
            line: 142,
            column: 20,
            span: 3968..3977,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 142,
            column: 21,
            span: 3977..3978,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 142,
            column: 23,
            span: 3979..3980,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 142,
            column: 24,
            span: 3980..3981,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 142,
            column: 25,
            span: 3981..3982,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 142,
            column: 28,
            span: 3983..3985,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 142,
            column: 30,
            span: 3985..3987,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 142,
            column: 31,
            span: 3987..3988,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 143,
            column: 7,
            span: 3989..3995,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 143,
            column: 8,
            span: 3995..3996,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 143,
            column: 10,
            span: 3996..3998,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 143,
            column: 11,
            span: 3998..3999,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize\"",
        ),
        position: Position {
            line: 143,
            column: 20,
            span: 3999..4008,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 143,
            column: 21,
            span: 4008..4009,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\\0\\0a\"",
        ),
        position: Position {
            line: 143,
            column: 32,
            span: 4010..4020,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 143,
            column: 33,
            span: 4020..4021,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 143,
            column: 36,
            span: 4022..4024,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 143,
            column: 38,
            span: 4024..4026,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 143,
            column: 39,
            span: 4026..4027,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 144,
            column: 7,
            span: 4028..4034,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 144,
            column: 8,
            span: 4034..4035,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 144,
            column: 10,
            span: 4035..4037,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 144,
            column: 11,
            span: 4037..4038,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize\"",
        ),
        position: Position {
            line: 144,
            column: 20,
            span: 4038..4047,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 144,
            column: 21,
            span: 4047..4048,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 144,
            column: 23,
            span: 4049..4050,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 144,
            column: 24,
            span: 4050..4051,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 144,
            column: 35,
            span: 4051..4062,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 144,
            column: 36,
            span: 4062..4063,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 144,
            column: 37,
            span: 4062..4064,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 144,
            column: 38,
            span: 4064..4065,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 144,
            column: 39,
            span: 4065..4066,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 144,
            column: 42,
            span: 4067..4069,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 144,
            column: 44,
            span: 4069..4071,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 144,
            column: 45,
            span: 4071..4072,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 145,
            column: 7,
            span: 4073..4079,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 145,
            column: 8,
            span: 4079..4080,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 145,
            column: 10,
            span: 4080..4082,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 145,
            column: 11,
            span: 4082..4083,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize\"",
        ),
        position: Position {
            line: 145,
            column: 20,
            span: 4083..4092,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 145,
            column: 21,
            span: 4092..4093,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 145,
            column: 23,
            span: 4094..4095,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 145,
            column: 24,
            span: 4095..4096,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 145,
            column: 35,
            span: 4096..4107,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 145,
            column: 36,
            span: 4107..4108,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 145,
            column: 39,
            span: 4107..4111,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 145,
            column: 40,
            span: 4111..4112,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 145,
            column: 41,
            span: 4112..4113,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 145,
            column: 44,
            span: 4114..4116,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 145,
            column: 48,
            span: 4116..4120,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 145,
            column: 49,
            span: 4120..4121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 146,
            column: 7,
            span: 4122..4128,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 146,
            column: 8,
            span: 4128..4129,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 146,
            column: 10,
            span: 4129..4131,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 146,
            column: 11,
            span: 4131..4132,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize\"",
        ),
        position: Position {
            line: 146,
            column: 20,
            span: 4132..4141,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 146,
            column: 21,
            span: 4141..4142,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 146,
            column: 24,
            span: 4142..4145,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 146,
            column: 25,
            span: 4145..4146,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 146,
            column: 28,
            span: 4147..4149,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 146,
            column: 30,
            span: 4149..4151,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 146,
            column: 31,
            span: 4151..4152,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 147,
            column: 7,
            span: 4153..4159,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 147,
            column: 8,
            span: 4159..4160,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 147,
            column: 10,
            span: 4160..4162,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 147,
            column: 11,
            span: 4162..4163,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize\"",
        ),
        position: Position {
            line: 147,
            column: 20,
            span: 4163..4172,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 147,
            column: 21,
            span: 4172..4173,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 147,
            column: 24,
            span: 4173..4176,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 147,
            column: 25,
            span: 4176..4177,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 147,
            column: 27,
            span: 4177..4179,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 147,
            column: 28,
            span: 4179..4180,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 147,
            column: 31,
            span: 4181..4183,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 147,
            column: 33,
            span: 4183..4185,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 147,
            column: 34,
            span: 4185..4186,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 148,
            column: 7,
            span: 4187..4193,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 148,
            column: 8,
            span: 4193..4194,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 148,
            column: 10,
            span: 4194..4196,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 148,
            column: 11,
            span: 4196..4197,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tonumber\"",
        ),
        position: Position {
            line: 148,
            column: 21,
            span: 4197..4207,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 148,
            column: 22,
            span: 4207..4208,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 148,
            column: 24,
            span: 4209..4210,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 148,
            column: 25,
            span: 4210..4211,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 148,
            column: 26,
            span: 4211..4212,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 148,
            column: 29,
            span: 4213..4215,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 148,
            column: 31,
            span: 4215..4217,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 148,
            column: 32,
            span: 4217..4218,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 149,
            column: 7,
            span: 4219..4225,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 149,
            column: 8,
            span: 4225..4226,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 149,
            column: 10,
            span: 4226..4228,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 149,
            column: 11,
            span: 4228..4229,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tonumber\"",
        ),
        position: Position {
            line: 149,
            column: 21,
            span: 4229..4239,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 149,
            column: 22,
            span: 4239..4240,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"12\"",
        ),
        position: Position {
            line: 149,
            column: 27,
            span: 4241..4245,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 149,
            column: 28,
            span: 4245..4246,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 149,
            column: 31,
            span: 4247..4249,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 149,
            column: 34,
            span: 4249..4252,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 149,
            column: 35,
            span: 4252..4253,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 150,
            column: 7,
            span: 4254..4260,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 150,
            column: 8,
            span: 4260..4261,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 150,
            column: 10,
            span: 4261..4263,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 150,
            column: 11,
            span: 4263..4264,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tonumber\"",
        ),
        position: Position {
            line: 150,
            column: 21,
            span: 4264..4274,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 150,
            column: 22,
            span: 4274..4275,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"s2\"",
        ),
        position: Position {
            line: 150,
            column: 27,
            span: 4276..4280,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 150,
            column: 28,
            span: 4280..4281,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 150,
            column: 31,
            span: 4282..4284,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 150,
            column: 33,
            span: 4284..4286,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 150,
            column: 34,
            span: 4286..4287,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 151,
            column: 7,
            span: 4288..4294,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 151,
            column: 8,
            span: 4294..4295,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 151,
            column: 10,
            span: 4295..4297,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 151,
            column: 11,
            span: 4297..4298,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tonumber\"",
        ),
        position: Position {
            line: 151,
            column: 21,
            span: 4298..4308,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 151,
            column: 22,
            span: 4308..4309,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 151,
            column: 24,
            span: 4309..4311,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 151,
            column: 25,
            span: 4311..4312,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 151,
            column: 28,
            span: 4312..4315,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 151,
            column: 29,
            span: 4315..4316,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 151,
            column: 32,
            span: 4317..4319,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 151,
            column: 34,
            span: 4319..4321,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 151,
            column: 35,
            span: 4321..4322,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 152,
            column: 2,
            span: 4323..4324,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 152,
            column: 4,
            span: 4325..4326,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 152,
            column: 7,
            span: 4327..4329,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 152,
            column: 8,
            span: 4329..4330,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tocfunction\"",
        ),
        position: Position {
            line: 152,
            column: 21,
            span: 4330..4343,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 152,
            column: 22,
            span: 4343..4344,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 152,
            column: 27,
            span: 4345..4349,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 152,
            column: 28,
            span: 4349..4350,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deg",
        ),
        position: Position {
            line: 152,
            column: 31,
            span: 4350..4353,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 152,
            column: 32,
            span: 4353..4354,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 153,
            column: 7,
            span: 4355..4361,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 153,
            column: 8,
            span: 4361..4362,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 153,
            column: 9,
            span: 4362..4363,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 153,
            column: 10,
            span: 4363..4364,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 153,
            column: 11,
            span: 4363..4365,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 153,
            column: 12,
            span: 4365..4366,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 153,
            column: 15,
            span: 4367..4369,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 153,
            column: 20,
            span: 4370..4374,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 153,
            column: 21,
            span: 4374..4375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deg",
        ),
        position: Position {
            line: 153,
            column: 24,
            span: 4375..4378,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 153,
            column: 25,
            span: 4378..4379,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 153,
            column: 26,
            span: 4378..4380,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 153,
            column: 27,
            span: 4380..4381,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 153,
            column: 31,
            span: 4382..4385,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 153,
            column: 33,
            span: 4386..4387,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 153,
            column: 36,
            span: 4388..4390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 153,
            column: 41,
            span: 4391..4395,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 153,
            column: 42,
            span: 4395..4396,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deg",
        ),
        position: Position {
            line: 153,
            column: 45,
            span: 4396..4399,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 153,
            column: 46,
            span: 4399..4400,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 158,
            column: 2,
            span: 4422..4423,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 158,
            column: 4,
            span: 4424..4425,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 158,
            column: 6,
            span: 4426..4427,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 158,
            column: 7,
            span: 4427..4428,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 158,
            column: 12,
            span: 4428..4433,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 158,
            column: 13,
            span: 4433..4434,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  loadstring 2; call 0,1;\n  pushvalue 3; insert -2; call 1, 1;\n  call 0, 0;\n  return 1\n]]",
        ),
        position: Position {
            line: 163,
            column: 3,
            span: 4434..4526,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 163,
            column: 4,
            span: 4526..4527,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x=150\"",
        ),
        position: Position {
            line: 163,
            column: 12,
            span: 4528..4535,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 163,
            column: 13,
            span: 4535..4536,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 163,
            column: 22,
            span: 4537..4545,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 163,
            column: 24,
            span: 4546..4547,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 163,
            column: 25,
            span: 4547..4548,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 163,
            column: 26,
            span: 4548..4549,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 163,
            column: 33,
            span: 4550..4556,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 163,
            column: 34,
            span: 4556..4557,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 163,
            column: 35,
            span: 4557..4558,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 163,
            column: 37,
            span: 4558..4560,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 163,
            column: 40,
            span: 4560..4563,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 163,
            column: 41,
            span: 4563..4564,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 163,
            column: 42,
            span: 4564..4565,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 163,
            column: 49,
            span: 4566..4572,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 163,
            column: 51,
            span: 4572..4574,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 163,
            column: 55,
            span: 4575..4578,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 163,
            column: 56,
            span: 4578..4579,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 165,
            column: 7,
            span: 4581..4587,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 165,
            column: 8,
            span: 4587..4588,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 165,
            column: 12,
            span: 4588..4592,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 165,
            column: 13,
            span: 4592..4593,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 165,
            column: 14,
            span: 4593..4594,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 165,
            column: 15,
            span: 4594..4595,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 165,
            column: 18,
            span: 4596..4598,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        position: Position {
            line: 165,
            column: 27,
            span: 4599..4607,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 165,
            column: 31,
            span: 4608..4611,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 165,
            column: 33,
            span: 4612..4613,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 165,
            column: 36,
            span: 4614..4616,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "150",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 165,
            column: 40,
            span: 4616..4620,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 165,
            column: 41,
            span: 4620..4621,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 167,
            column: 9,
            span: 4623..4631,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check3",
        ),
        position: Position {
            line: 167,
            column: 16,
            span: 4632..4638,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 167,
            column: 17,
            span: 4638..4639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 167,
            column: 18,
            span: 4639..4640,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 167,
            column: 19,
            span: 4640..4641,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 167,
            column: 23,
            span: 4642..4645,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 167,
            column: 24,
            span: 4645..4646,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 168,
            column: 9,
            span: 4649..4655,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 168,
            column: 10,
            span: 4655..4656,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 168,
            column: 13,
            span: 4656..4659,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 168,
            column: 14,
            span: 4659..4660,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 168,
            column: 15,
            span: 4660..4661,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 168,
            column: 18,
            span: 4662..4664,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 168,
            column: 20,
            span: 4664..4666,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 168,
            column: 21,
            span: 4666..4667,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 169,
            column: 9,
            span: 4670..4676,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 169,
            column: 10,
            span: 4676..4677,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 169,
            column: 16,
            span: 4677..4683,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 169,
            column: 17,
            span: 4683..4684,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 169,
            column: 21,
            span: 4684..4688,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 169,
            column: 22,
            span: 4688..4689,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 169,
            column: 25,
            span: 4689..4692,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 169,
            column: 26,
            span: 4692..4693,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 169,
            column: 27,
            span: 4692..4694,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 169,
            column: 28,
            span: 4694..4695,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 169,
            column: 29,
            span: 4695..4696,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 169,
            column: 31,
            span: 4697..4698,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 169,
            column: 32,
            span: 4698..4699,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 169,
            column: 33,
            span: 4699..4700,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 170,
            column: 0,
            span: 4701..4704,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check3",
        ),
        position: Position {
            line: 171,
            column: 7,
            span: 4705..4711,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 171,
            column: 8,
            span: 4711..4712,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\":1:\"",
        ),
        position: Position {
            line: 171,
            column: 13,
            span: 4712..4717,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 171,
            column: 14,
            span: 4717..4718,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 171,
            column: 16,
            span: 4719..4720,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 171,
            column: 17,
            span: 4720..4721,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 171,
            column: 22,
            span: 4721..4726,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 171,
            column: 23,
            span: 4726..4727,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"loadstring 2; gettop; return .\"",
        ),
        position: Position {
            line: 171,
            column: 55,
            span: 4727..4759,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 171,
            column: 56,
            span: 4759..4760,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x=\"",
        ),
        position: Position {
            line: 171,
            column: 61,
            span: 4761..4765,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 171,
            column: 62,
            span: 4765..4766,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 171,
            column: 63,
            span: 4766..4767,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check3",
        ),
        position: Position {
            line: 172,
            column: 7,
            span: 4768..4774,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 172,
            column: 8,
            span: 4774..4775,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cannot read\"",
        ),
        position: Position {
            line: 172,
            column: 21,
            span: 4775..4788,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 172,
            column: 22,
            span: 4788..4789,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 172,
            column: 24,
            span: 4790..4791,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 172,
            column: 25,
            span: 4791..4792,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 172,
            column: 30,
            span: 4792..4797,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 172,
            column: 31,
            span: 4797..4798,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"loadfile 2; gettop; return .\"",
        ),
        position: Position {
            line: 172,
            column: 61,
            span: 4798..4828,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 172,
            column: 62,
            span: 4828..4829,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        position: Position {
            line: 172,
            column: 66,
            span: 4830..4833,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 172,
            column: 67,
            span: 4833..4834,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 172,
            column: 68,
            span: 4834..4835,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check3",
        ),
        position: Position {
            line: 173,
            column: 7,
            span: 4836..4842,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 173,
            column: 8,
            span: 4842..4843,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cannot open xxxx\"",
        ),
        position: Position {
            line: 173,
            column: 26,
            span: 4843..4861,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 173,
            column: 27,
            span: 4861..4862,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 173,
            column: 29,
            span: 4863..4864,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 173,
            column: 30,
            span: 4864..4865,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 173,
            column: 35,
            span: 4865..4870,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 173,
            column: 36,
            span: 4870..4871,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"loadfile 2; gettop; return .\"",
        ),
        position: Position {
            line: 173,
            column: 66,
            span: 4871..4901,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 173,
            column: 67,
            span: 4901..4902,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xxxx\"",
        ),
        position: Position {
            line: 173,
            column: 74,
            span: 4903..4909,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 173,
            column: 75,
            span: 4909..4910,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 173,
            column: 76,
            span: 4910..4911,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 177,
            column: 2,
            span: 4938..4939,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 177,
            column: 4,
            span: 4940..4941,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 177,
            column: 6,
            span: 4942..4943,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 177,
            column: 7,
            span: 4943..4944,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 177,
            column: 8,
            span: 4944..4945,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 177,
            column: 9,
            span: 4944..4946,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 177,
            column: 10,
            span: 4946..4947,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 177,
            column: 12,
            span: 4948..4949,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 177,
            column: 13,
            span: 4949..4950,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 177,
            column: 15,
            span: 4949..4952,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 177,
            column: 16,
            span: 4952..4953,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 178,
            column: 2,
            span: 4954..4955,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 178,
            column: 3,
            span: 4955..4956,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 178,
            column: 5,
            span: 4957..4958,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 178,
            column: 7,
            span: 4959..4960,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 178,
            column: 9,
            span: 4961..4962,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 178,
            column: 10,
            span: 4962..4963,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 178,
            column: 15,
            span: 4963..4968,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 178,
            column: 16,
            span: 4968..4969,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gettable 2; pushvalue 4; gettable 2; return 2\"",
        ),
        position: Position {
            line: 178,
            column: 63,
            span: 4969..5016,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 178,
            column: 64,
            span: 5016..5017,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 179,
            column: 18,
            span: 5034..5035,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 179,
            column: 19,
            span: 5035..5036,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 179,
            column: 21,
            span: 5036..5038,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 179,
            column: 22,
            span: 5038..5039,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"y\"",
        ),
        position: Position {
            line: 179,
            column: 26,
            span: 5040..5043,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 179,
            column: 27,
            span: 5043..5044,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 179,
            column: 29,
            span: 5044..5046,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 179,
            column: 30,
            span: 5046..5047,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 179,
            column: 34,
            span: 5048..5051,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 179,
            column: 35,
            span: 5051..5052,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 180,
            column: 7,
            span: 5053..5059,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 180,
            column: 8,
            span: 5059..5060,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 180,
            column: 9,
            span: 5060..5061,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 180,
            column: 12,
            span: 5062..5064,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 180,
            column: 14,
            span: 5064..5066,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 180,
            column: 18,
            span: 5067..5070,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 180,
            column: 20,
            span: 5071..5072,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 180,
            column: 23,
            span: 5073..5075,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 180,
            column: 26,
            span: 5075..5078,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 180,
            column: 27,
            span: 5078..5079,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 181,
            column: 2,
            span: 5080..5081,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 181,
            column: 3,
            span: 5081..5082,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 181,
            column: 8,
            span: 5082..5087,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 181,
            column: 9,
            span: 5087..5088,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settable -5\"",
        ),
        position: Position {
            line: 181,
            column: 22,
            span: 5088..5101,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 181,
            column: 23,
            span: 5101..5102,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 181,
            column: 25,
            span: 5103..5104,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 181,
            column: 26,
            span: 5104..5105,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 181,
            column: 28,
            span: 5105..5107,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 181,
            column: 29,
            span: 5107..5108,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 181,
            column: 31,
            span: 5108..5110,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 181,
            column: 32,
            span: 5110..5111,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 181,
            column: 36,
            span: 5112..5115,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 181,
            column: 37,
            span: 5115..5116,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 181,
            column: 40,
            span: 5116..5119,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 181,
            column: 41,
            span: 5119..5120,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 182,
            column: 7,
            span: 5121..5127,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 182,
            column: 8,
            span: 5127..5128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 182,
            column: 9,
            span: 5128..5129,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 182,
            column: 10,
            span: 5129..5130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 182,
            column: 11,
            span: 5130..5131,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 182,
            column: 14,
            span: 5132..5134,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 182,
            column: 17,
            span: 5134..5137,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 182,
            column: 18,
            span: 5137..5138,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 183,
            column: 2,
            span: 5139..5140,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 183,
            column: 3,
            span: 5140..5141,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 183,
            column: 4,
            span: 5141..5142,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 183,
            column: 5,
            span: 5142..5143,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 183,
            column: 7,
            span: 5144..5145,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 183,
            column: 0,
            span: 5146..5151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 184,
            column: 2,
            span: 5152..5153,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 184,
            column: 4,
            span: 5154..5155,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 184,
            column: 6,
            span: 5156..5157,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 184,
            column: 7,
            span: 5157..5158,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 184,
            column: 12,
            span: 5158..5163,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 184,
            column: 13,
            span: 5163..5164,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gettable 2; return 1\"",
        ),
        position: Position {
            line: 184,
            column: 35,
            span: 5164..5186,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 184,
            column: 36,
            span: 5186..5187,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 184,
            column: 38,
            span: 5188..5189,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 184,
            column: 39,
            span: 5189..5190,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 185,
            column: 7,
            span: 5230..5236,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 185,
            column: 8,
            span: 5236..5237,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 185,
            column: 9,
            span: 5237..5238,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 185,
            column: 12,
            span: 5239..5241,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 185,
            column: 18,
            span: 5242..5247,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 185,
            column: 19,
            span: 5247..5248,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 186,
            column: 2,
            span: 5249..5250,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 186,
            column: 3,
            span: 5250..5251,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 186,
            column: 8,
            span: 5251..5256,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 186,
            column: 9,
            span: 5256..5257,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settable 2\"",
        ),
        position: Position {
            line: 186,
            column: 21,
            span: 5257..5269,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 186,
            column: 22,
            span: 5269..5270,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 186,
            column: 24,
            span: 5271..5272,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 186,
            column: 25,
            span: 5272..5273,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 186,
            column: 29,
            span: 5274..5277,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 186,
            column: 30,
            span: 5277..5278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 187,
            column: 7,
            span: 5320..5326,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 187,
            column: 8,
            span: 5326..5327,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 187,
            column: 9,
            span: 5327..5328,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 187,
            column: 10,
            span: 5328..5329,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 187,
            column: 11,
            span: 5329..5330,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 187,
            column: 12,
            span: 5330..5331,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 187,
            column: 15,
            span: 5332..5334,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 187,
            column: 19,
            span: 5335..5338,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 187,
            column: 20,
            span: 5338..5339,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 189,
            column: 2,
            span: 5341..5342,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 189,
            column: 4,
            span: 5343..5344,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 189,
            column: 17,
            span: 5345..5357,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 189,
            column: 18,
            span: 5357..5358,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 189,
            column: 19,
            span: 5358..5359,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 189,
            column: 20,
            span: 5359..5360,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 189,
            column: 22,
            span: 5361..5362,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 189,
            column: 24,
            span: 5363..5364,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 189,
            column: 25,
            span: 5364..5365,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 189,
            column: 26,
            span: 5365..5366,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 189,
            column: 28,
            span: 5367..5368,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 189,
            column: 29,
            span: 5368..5369,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 189,
            column: 30,
            span: 5369..5370,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 190,
            column: 13,
            span: 5371..5383,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 190,
            column: 14,
            span: 5383..5384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 190,
            column: 15,
            span: 5384..5385,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 190,
            column: 16,
            span: 5385..5386,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 190,
            column: 17,
            span: 5386..5387,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        position: Position {
            line: 190,
            column: 24,
            span: 5387..5394,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 190,
            column: 26,
            span: 5395..5396,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 190,
            column: 35,
            span: 5397..5405,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 190,
            column: 37,
            span: 5406..5407,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 190,
            column: 38,
            span: 5407..5408,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 190,
            column: 39,
            span: 5408..5409,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 190,
            column: 41,
            span: 5410..5411,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 190,
            column: 42,
            span: 5411..5412,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 190,
            column: 49,
            span: 5413..5419,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 190,
            column: 51,
            span: 5420..5421,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 190,
            column: 52,
            span: 5421..5422,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 190,
            column: 53,
            span: 5422..5423,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 190,
            column: 54,
            span: 5423..5424,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 190,
            column: 55,
            span: 5424..5425,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 190,
            column: 56,
            span: 5425..5426,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 190,
            column: 0,
            span: 5427..5430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 191,
            column: 2,
            span: 5431..5432,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 191,
            column: 3,
            span: 5432..5433,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 191,
            column: 5,
            span: 5434..5435,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 191,
            column: 7,
            span: 5436..5437,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 191,
            column: 9,
            span: 5438..5439,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 191,
            column: 10,
            span: 5439..5440,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 191,
            column: 15,
            span: 5440..5445,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 191,
            column: 16,
            span: 5445..5446,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gettable 3, return 2\"",
        ),
        position: Position {
            line: 191,
            column: 38,
            span: 5446..5468,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 191,
            column: 39,
            span: 5468..5469,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 191,
            column: 41,
            span: 5469..5471,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 191,
            column: 42,
            span: 5471..5472,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 191,
            column: 44,
            span: 5473..5474,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 191,
            column: 45,
            span: 5474..5475,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 191,
            column: 48,
            span: 5475..5478,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 191,
            column: 49,
            span: 5478..5479,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "35",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 191,
            column: 52,
            span: 5479..5482,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 191,
            column: 53,
            span: 5482..5483,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 191,
            column: 57,
            span: 5484..5487,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 191,
            column: 58,
            span: 5487..5488,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 192,
            column: 7,
            span: 5489..5495,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 192,
            column: 8,
            span: 5495..5496,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 192,
            column: 9,
            span: 5496..5497,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 192,
            column: 12,
            span: 5498..5500,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 192,
            column: 15,
            span: 5500..5503,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 192,
            column: 19,
            span: 5504..5507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 192,
            column: 21,
            span: 5508..5509,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 192,
            column: 24,
            span: 5510..5512,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "35",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 192,
            column: 27,
            span: 5512..5515,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 192,
            column: 28,
            span: 5515..5516,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 193,
            column: 13,
            span: 5517..5529,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 193,
            column: 14,
            span: 5529..5530,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 193,
            column: 15,
            span: 5530..5531,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 193,
            column: 16,
            span: 5531..5532,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 193,
            column: 17,
            span: 5532..5533,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        position: Position {
            line: 193,
            column: 24,
            span: 5533..5540,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 193,
            column: 26,
            span: 5541..5542,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 193,
            column: 35,
            span: 5543..5551,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 193,
            column: 37,
            span: 5552..5553,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 193,
            column: 38,
            span: 5553..5554,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 193,
            column: 39,
            span: 5554..5555,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 193,
            column: 41,
            span: 5556..5557,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 193,
            column: 42,
            span: 5557..5558,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 193,
            column: 49,
            span: 5559..5565,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 193,
            column: 51,
            span: 5566..5567,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 193,
            column: 52,
            span: 5567..5568,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 193,
            column: 53,
            span: 5568..5569,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 193,
            column: 54,
            span: 5569..5570,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 193,
            column: 0,
            span: 5571..5574,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 194,
            column: 13,
            span: 5575..5587,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 194,
            column: 14,
            span: 5587..5588,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 194,
            column: 15,
            span: 5588..5589,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 194,
            column: 16,
            span: 5589..5590,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 194,
            column: 17,
            span: 5590..5591,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__newindex",
        ),
        position: Position {
            line: 194,
            column: 27,
            span: 5591..5601,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 194,
            column: 29,
            span: 5602..5603,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 194,
            column: 38,
            span: 5604..5612,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 194,
            column: 40,
            span: 5613..5614,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 194,
            column: 41,
            span: 5614..5615,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 194,
            column: 42,
            span: 5615..5616,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 194,
            column: 44,
            span: 5617..5618,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 194,
            column: 45,
            span: 5618..5619,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 194,
            column: 46,
            span: 5619..5620,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 194,
            column: 48,
            span: 5621..5622,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 194,
            column: 50,
            span: 5623..5624,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 194,
            column: 51,
            span: 5624..5625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 194,
            column: 52,
            span: 5625..5626,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 194,
            column: 53,
            span: 5626..5627,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 194,
            column: 55,
            span: 5628..5629,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 194,
            column: 57,
            span: 5630..5631,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 194,
            column: 0,
            span: 5632..5635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 195,
            column: 2,
            span: 5636..5637,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 195,
            column: 4,
            span: 5638..5639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 195,
            column: 6,
            span: 5640..5641,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 195,
            column: 7,
            span: 5641..5642,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 195,
            column: 12,
            span: 5642..5647,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 195,
            column: 13,
            span: 5647..5648,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"insert 2; gettable -5; return 1\"",
        ),
        position: Position {
            line: 195,
            column: 46,
            span: 5648..5681,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 195,
            column: 47,
            span: 5681..5682,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 195,
            column: 49,
            span: 5682..5684,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 195,
            column: 50,
            span: 5684..5685,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 195,
            column: 52,
            span: 5685..5687,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 195,
            column: 53,
            span: 5687..5688,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 195,
            column: 55,
            span: 5688..5690,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 195,
            column: 56,
            span: 5690..5691,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"y\"",
        ),
        position: Position {
            line: 195,
            column: 60,
            span: 5692..5695,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 195,
            column: 61,
            span: 5695..5696,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 195,
            column: 63,
            span: 5697..5698,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 195,
            column: 64,
            span: 5698..5699,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 196,
            column: 7,
            span: 5700..5706,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 196,
            column: 8,
            span: 5706..5707,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 196,
            column: 9,
            span: 5707..5708,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 196,
            column: 12,
            span: 5709..5711,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 196,
            column: 15,
            span: 5711..5714,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 196,
            column: 16,
            span: 5714..5715,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 197,
            column: 2,
            span: 5716..5717,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 197,
            column: 4,
            span: 5718..5719,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 197,
            column: 6,
            span: 5720..5721,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 197,
            column: 7,
            span: 5721..5722,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 197,
            column: 12,
            span: 5722..5727,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 197,
            column: 13,
            span: 5727..5728,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settable -5, return 1\"",
        ),
        position: Position {
            line: 197,
            column: 36,
            span: 5728..5751,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 197,
            column: 37,
            span: 5751..5752,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 197,
            column: 39,
            span: 5753..5754,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 197,
            column: 40,
            span: 5754..5755,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 197,
            column: 42,
            span: 5755..5757,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 197,
            column: 43,
            span: 5757..5758,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 197,
            column: 45,
            span: 5758..5760,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 197,
            column: 46,
            span: 5760..5761,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 197,
            column: 50,
            span: 5762..5765,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 197,
            column: 51,
            span: 5765..5766,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 197,
            column: 54,
            span: 5766..5769,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 197,
            column: 55,
            span: 5769..5770,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 198,
            column: 7,
            span: 5771..5777,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 198,
            column: 8,
            span: 5777..5778,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 198,
            column: 9,
            span: 5778..5779,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 198,
            column: 10,
            span: 5779..5780,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 198,
            column: 11,
            span: 5780..5781,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 198,
            column: 14,
            span: 5782..5784,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 198,
            column: 17,
            span: 5784..5787,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 198,
            column: 21,
            span: 5788..5791,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 198,
            column: 23,
            span: 5792..5793,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 198,
            column: 26,
            span: 5794..5796,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 198,
            column: 28,
            span: 5796..5798,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 198,
            column: 29,
            span: 5798..5799,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 199,
            column: 2,
            span: 5800..5801,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 199,
            column: 3,
            span: 5801..5802,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 199,
            column: 4,
            span: 5802..5803,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 199,
            column: 5,
            span: 5803..5804,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 199,
            column: 7,
            span: 5805..5806,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu'",
        ),
        position: Position {
            line: 199,
            column: 14,
            span: 5807..5813,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 200,
            column: 2,
            span: 5814..5815,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 200,
            column: 4,
            span: 5816..5817,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 200,
            column: 6,
            span: 5818..5819,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 200,
            column: 7,
            span: 5819..5820,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 200,
            column: 12,
            span: 5820..5825,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 200,
            column: 13,
            span: 5825..5826,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gettable 2, return 1\"",
        ),
        position: Position {
            line: 200,
            column: 35,
            span: 5826..5848,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 200,
            column: 36,
            span: 5848..5849,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 200,
            column: 38,
            span: 5850..5851,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 200,
            column: 39,
            span: 5851..5852,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 201,
            column: 7,
            span: 5853..5859,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 201,
            column: 8,
            span: 5859..5860,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 201,
            column: 9,
            span: 5860..5861,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 201,
            column: 12,
            span: 5862..5864,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu'",
        ),
        position: Position {
            line: 201,
            column: 19,
            span: 5865..5871,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 201,
            column: 20,
            span: 5871..5872,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 202,
            column: 2,
            span: 5873..5874,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 202,
            column: 3,
            span: 5874..5875,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 202,
            column: 8,
            span: 5875..5880,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 202,
            column: 9,
            span: 5880..5881,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settable 2\"",
        ),
        position: Position {
            line: 202,
            column: 21,
            span: 5881..5893,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 202,
            column: 22,
            span: 5893..5894,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 202,
            column: 24,
            span: 5895..5896,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 202,
            column: 25,
            span: 5896..5897,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "19",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 202,
            column: 28,
            span: 5897..5900,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 202,
            column: 29,
            span: 5900..5901,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 203,
            column: 7,
            span: 5902..5908,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 203,
            column: 8,
            span: 5908..5909,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 203,
            column: 9,
            span: 5909..5910,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 203,
            column: 10,
            span: 5910..5911,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 203,
            column: 11,
            span: 5911..5912,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 203,
            column: 12,
            span: 5912..5913,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 203,
            column: 15,
            span: 5914..5916,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "19",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 203,
            column: 18,
            span: 5916..5919,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 203,
            column: 19,
            span: 5919..5920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 206,
            column: 2,
            span: 5938..5939,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 206,
            column: 4,
            span: 5940..5941,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 206,
            column: 6,
            span: 5942..5943,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 206,
            column: 7,
            span: 5943..5944,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 207,
            column: 2,
            span: 5945..5946,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 207,
            column: 4,
            span: 5947..5948,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 207,
            column: 9,
            span: 5949..5953,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 207,
            column: 10,
            span: 5953..5954,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 207,
            column: 11,
            span: 5954..5955,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 207,
            column: 12,
            span: 5955..5956,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 207,
            column: 17,
            span: 5956..5961,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 207,
            column: 18,
            span: 5961..5962,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"next; gettop; return .\"",
        ),
        position: Position {
            line: 207,
            column: 42,
            span: 5962..5986,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 207,
            column: 43,
            span: 5986..5987,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 207,
            column: 45,
            span: 5988..5989,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 207,
            column: 46,
            span: 5989..5990,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 207,
            column: 50,
            span: 5991..5994,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 207,
            column: 51,
            span: 5994..5995,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 207,
            column: 52,
            span: 5995..5996,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 208,
            column: 7,
            span: 5997..6003,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 208,
            column: 8,
            span: 6003..6004,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 208,
            column: 9,
            span: 6004..6005,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 208,
            column: 10,
            span: 6005..6006,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 208,
            column: 12,
            span: 6007..6008,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 208,
            column: 13,
            span: 6008..6009,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 208,
            column: 14,
            span: 6009..6010,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 208,
            column: 15,
            span: 6009..6011,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 208,
            column: 16,
            span: 6011..6012,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 208,
            column: 17,
            span: 6012..6013,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 208,
            column: 18,
            span: 6013..6014,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 208,
            column: 19,
            span: 6014..6015,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 209,
            column: 2,
            span: 6016..6017,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 209,
            column: 4,
            span: 6018..6019,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 209,
            column: 6,
            span: 6020..6021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 209,
            column: 7,
            span: 6021..6022,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 209,
            column: 8,
            span: 6022..6023,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 209,
            column: 9,
            span: 6022..6024,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 209,
            column: 10,
            span: 6024..6025,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 210,
            column: 2,
            span: 6026..6027,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 210,
            column: 4,
            span: 6028..6029,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 210,
            column: 9,
            span: 6030..6034,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 210,
            column: 10,
            span: 6034..6035,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 210,
            column: 11,
            span: 6035..6036,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 210,
            column: 12,
            span: 6036..6037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 210,
            column: 17,
            span: 6037..6042,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 210,
            column: 18,
            span: 6042..6043,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"next; gettop; return .\"",
        ),
        position: Position {
            line: 210,
            column: 42,
            span: 6043..6067,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 210,
            column: 43,
            span: 6067..6068,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 210,
            column: 45,
            span: 6069..6070,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 210,
            column: 46,
            span: 6070..6071,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 210,
            column: 50,
            span: 6072..6075,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 210,
            column: 51,
            span: 6075..6076,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 210,
            column: 52,
            span: 6076..6077,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 211,
            column: 7,
            span: 6078..6084,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 211,
            column: 8,
            span: 6084..6085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 211,
            column: 9,
            span: 6085..6086,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 211,
            column: 10,
            span: 6086..6087,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 211,
            column: 12,
            span: 6088..6089,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 211,
            column: 13,
            span: 6089..6090,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 211,
            column: 14,
            span: 6090..6091,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 211,
            column: 15,
            span: 6090..6092,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 211,
            column: 16,
            span: 6092..6093,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 211,
            column: 17,
            span: 6093..6094,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 211,
            column: 18,
            span: 6094..6095,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 211,
            column: 21,
            span: 6095..6098,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 211,
            column: 22,
            span: 6098..6099,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 211,
            column: 23,
            span: 6098..6100,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 211,
            column: 24,
            span: 6100..6101,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 211,
            column: 25,
            span: 6101..6102,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 212,
            column: 2,
            span: 6103..6104,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 212,
            column: 4,
            span: 6105..6106,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 212,
            column: 9,
            span: 6107..6111,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 212,
            column: 10,
            span: 6111..6112,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 212,
            column: 11,
            span: 6112..6113,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 212,
            column: 12,
            span: 6113..6114,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 212,
            column: 17,
            span: 6114..6119,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 212,
            column: 18,
            span: 6119..6120,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"next; pop 1; next; gettop; return .\"",
        ),
        position: Position {
            line: 212,
            column: 55,
            span: 6120..6157,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 212,
            column: 56,
            span: 6157..6158,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 212,
            column: 58,
            span: 6159..6160,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 212,
            column: 59,
            span: 6160..6161,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 212,
            column: 63,
            span: 6162..6165,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 212,
            column: 64,
            span: 6165..6166,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 212,
            column: 65,
            span: 6166..6167,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 213,
            column: 7,
            span: 6168..6174,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 213,
            column: 8,
            span: 6174..6175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 213,
            column: 9,
            span: 6175..6176,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 213,
            column: 10,
            span: 6176..6177,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 213,
            column: 12,
            span: 6178..6179,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 213,
            column: 13,
            span: 6179..6180,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 213,
            column: 14,
            span: 6180..6181,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 213,
            column: 15,
            span: 6180..6182,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 213,
            column: 16,
            span: 6182..6183,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 213,
            column: 17,
            span: 6183..6184,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 213,
            column: 18,
            span: 6184..6185,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 213,
            column: 19,
            span: 6185..6186,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 219,
            column: 0,
            span: 6211..6213,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 220,
            column: 8,
            span: 6216..6221,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 220,
            column: 10,
            span: 6222..6223,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 220,
            column: 12,
            span: 6224..6225,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 220,
            column: 14,
            span: 6226..6227,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 220,
            column: 15,
            span: 6227..6228,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 220,
            column: 20,
            span: 6228..6233,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ pushnum 10; pushnum 20; pushcclosure 2; return 1]]",
        ),
        position: Position {
            line: 220,
            column: 73,
            span: 6233..6286,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 221,
            column: 4,
            span: 6289..6290,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 221,
            column: 5,
            span: 6290..6291,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 221,
            column: 7,
            span: 6292..6293,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 221,
            column: 8,
            span: 6293..6294,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 221,
            column: 10,
            span: 6295..6296,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 221,
            column: 12,
            span: 6297..6298,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 221,
            column: 14,
            span: 6299..6300,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 221,
            column: 15,
            span: 6300..6301,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[pushvalue U0; pushvalue U1; pushvalue U2; return 3]]",
        ),
        position: Position {
            line: 221,
            column: 69,
            span: 6301..6355,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 221,
            column: 70,
            span: 6355..6356,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 222,
            column: 9,
            span: 6359..6365,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 222,
            column: 10,
            span: 6365..6366,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 222,
            column: 11,
            span: 6366..6367,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 222,
            column: 14,
            span: 6368..6370,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 222,
            column: 17,
            span: 6370..6373,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 222,
            column: 21,
            span: 6374..6377,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 222,
            column: 23,
            span: 6378..6379,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 222,
            column: 26,
            span: 6380..6382,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 222,
            column: 29,
            span: 6382..6385,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 222,
            column: 33,
            span: 6386..6389,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 222,
            column: 38,
            span: 6390..6394,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 222,
            column: 39,
            span: 6394..6395,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 222,
            column: 40,
            span: 6395..6396,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 222,
            column: 41,
            span: 6396..6397,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 222,
            column: 44,
            span: 6398..6400,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        position: Position {
            line: 222,
            column: 52,
            span: 6401..6408,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 222,
            column: 53,
            span: 6408..6409,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 223,
            column: 4,
            span: 6412..6413,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 223,
            column: 5,
            span: 6413..6414,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 223,
            column: 7,
            span: 6415..6416,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 223,
            column: 9,
            span: 6417..6418,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 223,
            column: 11,
            span: 6419..6420,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 223,
            column: 12,
            span: 6420..6421,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[tostring U3; tonumber U4; return 2]]",
        ),
        position: Position {
            line: 223,
            column: 50,
            span: 6421..6459,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 223,
            column: 51,
            span: 6459..6460,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 224,
            column: 9,
            span: 6463..6469,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 224,
            column: 10,
            span: 6469..6470,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 224,
            column: 11,
            span: 6470..6471,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 224,
            column: 14,
            span: 6472..6474,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 224,
            column: 18,
            span: 6475..6478,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 224,
            column: 22,
            span: 6479..6482,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 224,
            column: 24,
            span: 6483..6484,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 224,
            column: 27,
            span: 6485..6487,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 224,
            column: 29,
            span: 6487..6489,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 224,
            column: 30,
            span: 6489..6490,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 225,
            column: 4,
            span: 6493..6494,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 225,
            column: 5,
            span: 6494..6495,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[pushnum 100; pushnum 200; replace U2; replace U1]]",
        ),
        position: Position {
            line: 225,
            column: 57,
            span: 6495..6547,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 225,
            column: 58,
            span: 6547..6548,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 226,
            column: 4,
            span: 6551..6552,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 226,
            column: 5,
            span: 6552..6553,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 226,
            column: 7,
            span: 6554..6555,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 226,
            column: 9,
            span: 6556..6557,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 226,
            column: 11,
            span: 6558..6559,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 226,
            column: 12,
            span: 6559..6560,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[pushvalue U1; pushvalue U2; return 2]]",
        ),
        position: Position {
            line: 226,
            column: 52,
            span: 6560..6600,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 226,
            column: 53,
            span: 6600..6601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 227,
            column: 9,
            span: 6604..6610,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 227,
            column: 10,
            span: 6610..6611,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 227,
            column: 11,
            span: 6611..6612,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 227,
            column: 14,
            span: 6613..6615,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 227,
            column: 18,
            span: 6615..6619,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 227,
            column: 22,
            span: 6620..6623,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 227,
            column: 24,
            span: 6624..6625,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 227,
            column: 27,
            span: 6626..6628,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 227,
            column: 31,
            span: 6628..6632,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 227,
            column: 32,
            span: 6632..6633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 228,
            column: 4,
            span: 6636..6637,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 228,
            column: 5,
            span: 6637..6638,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[replace U2; replace U1]]",
        ),
        position: Position {
            line: 228,
            column: 31,
            span: 6638..6664,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 228,
            column: 32,
            span: 6664..6665,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 228,
            column: 34,
            span: 6666..6667,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 228,
            column: 35,
            span: 6667..6668,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 228,
            column: 36,
            span: 6668..6669,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 228,
            column: 37,
            span: 6668..6670,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 228,
            column: 38,
            span: 6670..6671,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 228,
            column: 39,
            span: 6671..6672,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 228,
            column: 41,
            span: 6673..6674,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 228,
            column: 42,
            span: 6674..6675,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 228,
            column: 43,
            span: 6675..6676,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 228,
            column: 44,
            span: 6675..6677,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 228,
            column: 45,
            span: 6677..6678,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 228,
            column: 46,
            span: 6678..6679,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 229,
            column: 4,
            span: 6682..6683,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 229,
            column: 5,
            span: 6683..6684,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 229,
            column: 7,
            span: 6685..6686,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 229,
            column: 9,
            span: 6687..6688,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 229,
            column: 11,
            span: 6689..6690,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 229,
            column: 12,
            span: 6690..6691,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[pushvalue U1; pushvalue U2; return 2]]",
        ),
        position: Position {
            line: 229,
            column: 52,
            span: 6691..6731,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 229,
            column: 53,
            span: 6731..6732,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 230,
            column: 9,
            span: 6735..6741,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 230,
            column: 10,
            span: 6741..6742,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 230,
            column: 11,
            span: 6742..6743,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 230,
            column: 12,
            span: 6743..6744,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 230,
            column: 13,
            span: 6744..6745,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 230,
            column: 16,
            span: 6746..6748,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 230,
            column: 18,
            span: 6748..6750,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 230,
            column: 22,
            span: 6751..6754,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 230,
            column: 24,
            span: 6755..6756,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 230,
            column: 25,
            span: 6756..6757,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 230,
            column: 26,
            span: 6757..6758,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 230,
            column: 29,
            span: 6759..6761,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 230,
            column: 31,
            span: 6761..6763,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 230,
            column: 32,
            span: 6763..6764,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 231,
            column: 4,
            span: 6767..6768,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 231,
            column: 5,
            span: 6768..6769,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmemory",
        ),
        position: Position {
            line: 231,
            column: 16,
            span: 6769..6780,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 231,
            column: 17,
            span: 6780..6781,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 231,
            column: 18,
            span: 6781..6782,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 232,
            column: 0,
            span: 6783..6786,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 234,
            column: 6,
            span: 6788..6793,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 234,
            column: 8,
            span: 6794..6795,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 234,
            column: 10,
            span: 6796..6797,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 234,
            column: 12,
            span: 6798..6799,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 234,
            column: 13,
            span: 6799..6800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 234,
            column: 18,
            span: 6800..6805,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ pushnum 10; pushnum 20; pushcclosure 2; return 1]]",
        ),
        position: Position {
            line: 234,
            column: 71,
            span: 6805..6858,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 235,
            column: 7,
            span: 6859..6865,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 235,
            column: 8,
            span: 6865..6866,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 235,
            column: 9,
            span: 6866..6867,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 235,
            column: 10,
            span: 6867..6868,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalue",
        ),
        position: Position {
            line: 235,
            column: 17,
            span: 6868..6875,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 235,
            column: 18,
            span: 6875..6876,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 235,
            column: 19,
            span: 6876..6877,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 235,
            column: 20,
            span: 6877..6878,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 235,
            column: 22,
            span: 6878..6880,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 235,
            column: 23,
            span: 6880..6881,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 235,
            column: 26,
            span: 6882..6884,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 235,
            column: 29,
            span: 6884..6887,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 235,
            column: 0,
            span: 6888..6891,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 236,
            column: 9,
            span: 6899..6900,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 236,
            column: 10,
            span: 6900..6901,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalue",
        ),
        position: Position {
            line: 236,
            column: 17,
            span: 6901..6908,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 236,
            column: 18,
            span: 6908..6909,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 236,
            column: 19,
            span: 6909..6910,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 236,
            column: 20,
            span: 6910..6911,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 236,
            column: 22,
            span: 6911..6913,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 236,
            column: 23,
            span: 6913..6914,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 236,
            column: 26,
            span: 6915..6917,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 236,
            column: 29,
            span: 6917..6920,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 236,
            column: 0,
            span: 6921..6924,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 237,
            column: 9,
            span: 6932..6933,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 237,
            column: 10,
            span: 6933..6934,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalue",
        ),
        position: Position {
            line: 237,
            column: 17,
            span: 6934..6941,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 237,
            column: 18,
            span: 6941..6942,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 237,
            column: 19,
            span: 6942..6943,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 237,
            column: 20,
            span: 6943..6944,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 237,
            column: 22,
            span: 6944..6946,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 237,
            column: 23,
            span: 6946..6947,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 237,
            column: 26,
            span: 6948..6950,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 237,
            column: 30,
            span: 6951..6954,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 237,
            column: 31,
            span: 6954..6955,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 238,
            column: 2,
            span: 6956..6957,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 238,
            column: 3,
            span: 6957..6958,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalue",
        ),
        position: Position {
            line: 238,
            column: 10,
            span: 6958..6965,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 238,
            column: 11,
            span: 6965..6966,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 238,
            column: 12,
            span: 6966..6967,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 238,
            column: 13,
            span: 6967..6968,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 238,
            column: 15,
            span: 6968..6970,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 238,
            column: 16,
            span: 6970..6971,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        position: Position {
            line: 238,
            column: 23,
            span: 6972..6978,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 238,
            column: 24,
            span: 6978..6979,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 239,
            column: 7,
            span: 6980..6986,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 239,
            column: 8,
            span: 6986..6987,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 239,
            column: 9,
            span: 6987..6988,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 239,
            column: 10,
            span: 6988..6989,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalue",
        ),
        position: Position {
            line: 239,
            column: 17,
            span: 6989..6996,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 239,
            column: 18,
            span: 6996..6997,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 239,
            column: 19,
            span: 6997..6998,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 239,
            column: 20,
            span: 6998..6999,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 239,
            column: 22,
            span: 6999..7001,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 239,
            column: 23,
            span: 7001..7002,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 239,
            column: 26,
            span: 7003..7005,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        position: Position {
            line: 239,
            column: 33,
            span: 7006..7012,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 239,
            column: 34,
            span: 7012..7013,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 244,
            column: 7,
            span: 7041..7047,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 244,
            column: 8,
            span: 7047..7048,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 244,
            column: 9,
            span: 7048..7049,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 244,
            column: 10,
            span: 7049..7050,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 244,
            column: 15,
            span: 7050..7055,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushvalue G; return 1\"",
        ),
        position: Position {
            line: 244,
            column: 38,
            span: 7055..7078,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 244,
            column: 41,
            span: 7079..7081,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 244,
            column: 44,
            span: 7082..7084,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 244,
            column: 45,
            span: 7084..7085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 245,
            column: 7,
            span: 7086..7092,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 245,
            column: 8,
            span: 7092..7093,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 245,
            column: 9,
            span: 7093..7094,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 245,
            column: 10,
            span: 7094..7095,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 245,
            column: 15,
            span: 7095..7100,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushvalue E; return 1\"",
        ),
        position: Position {
            line: 245,
            column: 38,
            span: 7100..7123,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 245,
            column: 41,
            span: 7124..7126,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 245,
            column: 44,
            span: 7127..7129,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 245,
            column: 45,
            span: 7129..7130,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 246,
            column: 6,
            span: 7131..7136,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 246,
            column: 8,
            span: 7137..7138,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 246,
            column: 10,
            span: 7139..7140,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 246,
            column: 12,
            span: 7141..7142,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 246,
            column: 13,
            span: 7142..7143,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 247,
            column: 2,
            span: 7144..7145,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 247,
            column: 3,
            span: 7145..7146,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 247,
            column: 8,
            span: 7146..7151,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 247,
            column: 9,
            span: 7151..7152,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"replace E; return 1\"",
        ),
        position: Position {
            line: 247,
            column: 30,
            span: 7152..7173,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 247,
            column: 31,
            span: 7173..7174,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 247,
            column: 33,
            span: 7175..7176,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 247,
            column: 34,
            span: 7176..7177,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 248,
            column: 7,
            span: 7178..7184,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 248,
            column: 8,
            span: 7184..7185,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 248,
            column: 9,
            span: 7185..7186,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 248,
            column: 10,
            span: 7186..7187,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 248,
            column: 15,
            span: 7187..7192,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushvalue G; return 1\"",
        ),
        position: Position {
            line: 248,
            column: 38,
            span: 7192..7215,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 248,
            column: 41,
            span: 7216..7218,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 248,
            column: 44,
            span: 7219..7221,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 248,
            column: 45,
            span: 7221..7222,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 249,
            column: 7,
            span: 7223..7229,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 249,
            column: 8,
            span: 7229..7230,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 249,
            column: 9,
            span: 7230..7231,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 249,
            column: 10,
            span: 7231..7232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 249,
            column: 15,
            span: 7232..7237,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushvalue E; return 1\"",
        ),
        position: Position {
            line: 249,
            column: 38,
            span: 7237..7260,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 249,
            column: 41,
            span: 7261..7263,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 249,
            column: 43,
            span: 7264..7265,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 249,
            column: 44,
            span: 7265..7266,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 250,
            column: 7,
            span: 7267..7273,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 250,
            column: 8,
            span: 7273..7274,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 250,
            column: 13,
            span: 7274..7279,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 250,
            column: 14,
            span: 7279..7280,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getfenv",
        ),
        position: Position {
            line: 250,
            column: 21,
            span: 7280..7287,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 250,
            column: 22,
            span: 7287..7288,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 250,
            column: 23,
            span: 7288..7289,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 250,
            column: 24,
            span: 7289..7290,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 250,
            column: 29,
            span: 7290..7295,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 250,
            column: 30,
            span: 7295..7296,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 250,
            column: 33,
            span: 7297..7299,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 250,
            column: 35,
            span: 7300..7301,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 250,
            column: 36,
            span: 7301..7302,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 251,
            column: 7,
            span: 7303..7309,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 251,
            column: 8,
            span: 7309..7310,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 251,
            column: 13,
            span: 7310..7315,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 251,
            column: 14,
            span: 7315..7316,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getfenv",
        ),
        position: Position {
            line: 251,
            column: 21,
            span: 7316..7323,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 251,
            column: 22,
            span: 7323..7324,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 251,
            column: 23,
            span: 7324..7325,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 251,
            column: 24,
            span: 7325..7326,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalue",
        ),
        position: Position {
            line: 251,
            column: 31,
            span: 7326..7333,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 251,
            column: 32,
            span: 7333..7334,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 251,
            column: 35,
            span: 7335..7337,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 251,
            column: 38,
            span: 7338..7340,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 251,
            column: 39,
            span: 7340..7341,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 253,
            column: 6,
            span: 7374..7379,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 253,
            column: 8,
            span: 7380..7381,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 253,
            column: 10,
            span: 7382..7383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 253,
            column: 12,
            span: 7384..7385,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 253,
            column: 13,
            span: 7385..7386,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 253,
            column: 18,
            span: 7386..7391,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"newuserdata 0; return 1\"",
        ),
        position: Position {
            line: 253,
            column: 43,
            span: 7391..7416,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 254,
            column: 7,
            span: 7417..7423,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 254,
            column: 8,
            span: 7423..7424,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 254,
            column: 13,
            span: 7424..7429,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 254,
            column: 14,
            span: 7429..7430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getfenv",
        ),
        position: Position {
            line: 254,
            column: 21,
            span: 7430..7437,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 254,
            column: 22,
            span: 7437..7438,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 254,
            column: 23,
            span: 7438..7439,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 254,
            column: 24,
            span: 7439..7440,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 254,
            column: 27,
            span: 7441..7443,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 254,
            column: 29,
            span: 7444..7445,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 254,
            column: 30,
            span: 7445..7446,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 256,
            column: 2,
            span: 7480..7481,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 256,
            column: 4,
            span: 7482..7483,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 256,
            column: 6,
            span: 7484..7485,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 256,
            column: 7,
            span: 7485..7486,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 256,
            column: 12,
            span: 7486..7491,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushcclosure 0; return 1\"",
        ),
        position: Position {
            line: 256,
            column: 38,
            span: 7491..7517,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 257,
            column: 7,
            span: 7518..7524,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 257,
            column: 8,
            span: 7524..7525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 257,
            column: 13,
            span: 7525..7530,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 257,
            column: 14,
            span: 7530..7531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getfenv",
        ),
        position: Position {
            line: 257,
            column: 21,
            span: 7531..7538,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 257,
            column: 22,
            span: 7538..7539,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 257,
            column: 23,
            span: 7539..7540,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 257,
            column: 24,
            span: 7540..7541,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 257,
            column: 27,
            span: 7542..7544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 257,
            column: 29,
            span: 7545..7546,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 257,
            column: 30,
            span: 7546..7547,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 258,
            column: 6,
            span: 7548..7553,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 258,
            column: 7,
            span: 7553..7554,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setfenv",
        ),
        position: Position {
            line: 258,
            column: 14,
            span: 7554..7561,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 258,
            column: 15,
            span: 7561..7562,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 258,
            column: 16,
            span: 7562..7563,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 258,
            column: 17,
            span: 7563..7564,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 258,
            column: 22,
            span: 7564..7569,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 258,
            column: 23,
            span: 7569..7570,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 258,
            column: 26,
            span: 7571..7573,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 258,
            column: 27,
            span: 7573..7574,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 259,
            column: 7,
            span: 7575..7581,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 259,
            column: 8,
            span: 7581..7582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 259,
            column: 9,
            span: 7582..7583,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 259,
            column: 10,
            span: 7583..7584,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 259,
            column: 15,
            span: 7584..7589,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushvalue E; return 1\"",
        ),
        position: Position {
            line: 259,
            column: 38,
            span: 7589..7612,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 259,
            column: 41,
            span: 7613..7615,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 259,
            column: 44,
            span: 7616..7618,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 259,
            column: 45,
            span: 7618..7619,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 261,
            column: 6,
            span: 7621..7626,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 261,
            column: 8,
            span: 7627..7628,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 261,
            column: 10,
            span: 7629..7630,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newproxy",
        ),
        position: Position {
            line: 261,
            column: 19,
            span: 7631..7639,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 261,
            column: 20,
            span: 7639..7640,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 261,
            column: 21,
            span: 7640..7641,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 262,
            column: 7,
            span: 7642..7648,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 262,
            column: 8,
            span: 7648..7649,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 262,
            column: 13,
            span: 7649..7654,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 262,
            column: 14,
            span: 7654..7655,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getfenv",
        ),
        position: Position {
            line: 262,
            column: 21,
            span: 7655..7662,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 262,
            column: 22,
            span: 7662..7663,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 262,
            column: 23,
            span: 7663..7664,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 262,
            column: 24,
            span: 7664..7665,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 262,
            column: 27,
            span: 7666..7668,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 262,
            column: 30,
            span: 7669..7671,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 262,
            column: 31,
            span: 7671..7672,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 263,
            column: 7,
            span: 7673..7679,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 263,
            column: 8,
            span: 7679..7680,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 263,
            column: 13,
            span: 7680..7685,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 263,
            column: 14,
            span: 7685..7686,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setfenv",
        ),
        position: Position {
            line: 263,
            column: 21,
            span: 7686..7693,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 263,
            column: 22,
            span: 7693..7694,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 263,
            column: 23,
            span: 7694..7695,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 263,
            column: 24,
            span: 7695..7696,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 263,
            column: 26,
            span: 7697..7698,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 263,
            column: 27,
            span: 7698..7699,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 263,
            column: 28,
            span: 7699..7700,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 264,
            column: 7,
            span: 7701..7707,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 264,
            column: 8,
            span: 7707..7708,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 264,
            column: 13,
            span: 7708..7713,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 264,
            column: 14,
            span: 7713..7714,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getfenv",
        ),
        position: Position {
            line: 264,
            column: 21,
            span: 7714..7721,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 264,
            column: 22,
            span: 7721..7722,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 264,
            column: 23,
            span: 7722..7723,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 264,
            column: 24,
            span: 7723..7724,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 264,
            column: 27,
            span: 7725..7727,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 264,
            column: 29,
            span: 7728..7729,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 264,
            column: 30,
            span: 7729..7730,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 271,
            column: 6,
            span: 7782..7787,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 271,
            column: 8,
            span: 7788..7789,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 271,
            column: 10,
            span: 7790..7791,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 271,
            column: 12,
            span: 7792..7793,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 271,
            column: 13,
            span: 7793..7794,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        position: Position {
            line: 271,
            column: 16,
            span: 7794..7797,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 271,
            column: 17,
            span: 7797..7798,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 271,
            column: 18,
            span: 7798..7799,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 272,
            column: 2,
            span: 7800..7801,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 272,
            column: 3,
            span: 7801..7802,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        position: Position {
            line: 272,
            column: 8,
            span: 7802..7807,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 272,
            column: 9,
            span: 7807..7808,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 272,
            column: 10,
            span: 7808..7809,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 272,
            column: 11,
            span: 7809..7810,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 273,
            column: 7,
            span: 7811..7817,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 273,
            column: 8,
            span: 7817..7818,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 273,
            column: 9,
            span: 7818..7819,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 273,
            column: 10,
            span: 7819..7820,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        position: Position {
            line: 273,
            column: 13,
            span: 7820..7823,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 273,
            column: 14,
            span: 7823..7824,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 273,
            column: 15,
            span: 7824..7825,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 273,
            column: 18,
            span: 7826..7828,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 273,
            column: 20,
            span: 7829..7830,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 273,
            column: 21,
            span: 7830..7831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Arr",
        ),
        position: Position {
            line: 275,
            column: 4,
            span: 7833..7836,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 275,
            column: 6,
            span: 7837..7838,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 275,
            column: 8,
            span: 7839..7840,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 275,
            column: 9,
            span: 7840..7841,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Lim",
        ),
        position: Position {
            line: 276,
            column: 4,
            span: 7842..7845,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 276,
            column: 6,
            span: 7846..7847,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 276,
            column: 0,
            span: 7847..7851,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 277,
            column: 4,
            span: 7852..7855,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 277,
            column: 6,
            span: 7856..7857,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 277,
            column: 7,
            span: 7857..7858,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 277,
            column: 8,
            span: 7857..7859,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 277,
            column: 9,
            span: 7859..7860,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Lim",
        ),
        position: Position {
            line: 277,
            column: 12,
            span: 7860..7863,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 277,
            column: 15,
            span: 7864..7866,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Arr",
        ),
        position: Position {
            line: 278,
            column: 6,
            span: 7892..7895,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 278,
            column: 7,
            span: 7895..7896,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 278,
            column: 8,
            span: 7896..7897,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 278,
            column: 9,
            span: 7897..7898,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 278,
            column: 11,
            span: 7899..7900,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 278,
            column: 13,
            span: 7901..7902,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 278,
            column: 14,
            span: 7902..7903,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        position: Position {
            line: 278,
            column: 17,
            span: 7903..7906,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 278,
            column: 18,
            span: 7906..7907,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 278,
            column: 19,
            span: 7907..7908,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 278,
            column: 20,
            span: 7908..7909,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 278,
            column: 21,
            span: 7909..7910,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 279,
            column: 0,
            span: 7911..7914,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 281,
            column: 7,
            span: 7916..7922,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 281,
            column: 8,
            span: 7922..7923,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 281,
            column: 9,
            span: 7923..7924,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 281,
            column: 10,
            span: 7924..7925,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        position: Position {
            line: 281,
            column: 13,
            span: 7925..7928,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 281,
            column: 14,
            span: 7928..7929,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 281,
            column: 17,
            span: 7929..7932,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 281,
            column: 18,
            span: 7932..7933,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 281,
            column: 21,
            span: 7934..7936,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 281,
            column: 23,
            span: 7937..7938,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 281,
            column: 24,
            span: 7937..7939,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 281,
            column: 28,
            span: 7940..7943,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 281,
            column: 30,
            span: 7944..7945,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 281,
            column: 31,
            span: 7945..7946,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getref",
        ),
        position: Position {
            line: 281,
            column: 37,
            span: 7946..7952,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 281,
            column: 38,
            span: 7952..7953,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 281,
            column: 39,
            span: 7953..7954,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 281,
            column: 40,
            span: 7953..7955,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 281,
            column: 41,
            span: 7955..7956,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 281,
            column: 44,
            span: 7957..7959,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 281,
            column: 48,
            span: 7960..7963,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 281,
            column: 49,
            span: 7963..7964,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 282,
            column: 2,
            span: 7965..7966,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 282,
            column: 3,
            span: 7966..7967,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        position: Position {
            line: 282,
            column: 8,
            span: 7967..7972,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 282,
            column: 9,
            span: 7972..7973,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 282,
            column: 10,
            span: 7973..7974,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 282,
            column: 11,
            span: 7973..7975,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 282,
            column: 12,
            span: 7975..7976,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 282,
            column: 13,
            span: 7976..7977,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 282,
            column: 15,
            span: 7978..7979,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 282,
            column: 16,
            span: 7979..7980,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        position: Position {
            line: 282,
            column: 21,
            span: 7980..7985,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 282,
            column: 22,
            span: 7985..7986,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 282,
            column: 23,
            span: 7986..7987,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 282,
            column: 24,
            span: 7986..7988,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 282,
            column: 25,
            span: 7988..7989,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 284,
            column: 4,
            span: 7991..7994,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 284,
            column: 6,
            span: 7995..7996,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 284,
            column: 7,
            span: 7996..7997,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 284,
            column: 8,
            span: 7996..7998,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 284,
            column: 9,
            span: 7998..7999,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Lim",
        ),
        position: Position {
            line: 284,
            column: 12,
            span: 7999..8002,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 284,
            column: 15,
            span: 8003..8005,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 285,
            column: 4,
            span: 8029..8030,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 285,
            column: 5,
            span: 8030..8031,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        position: Position {
            line: 285,
            column: 10,
            span: 8031..8036,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 285,
            column: 11,
            span: 8036..8037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Arr",
        ),
        position: Position {
            line: 285,
            column: 14,
            span: 8037..8040,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 285,
            column: 15,
            span: 8040..8041,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 285,
            column: 16,
            span: 8041..8042,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 285,
            column: 17,
            span: 8042..8043,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 285,
            column: 18,
            span: 8043..8044,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 286,
            column: 0,
            span: 8045..8048,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 288,
            column: 9,
            span: 8050..8058,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "printlocks",
        ),
        position: Position {
            line: 288,
            column: 20,
            span: 8059..8069,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 288,
            column: 22,
            span: 8070..8071,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 288,
            column: 23,
            span: 8071..8072,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 289,
            column: 8,
            span: 8075..8080,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 289,
            column: 10,
            span: 8081..8082,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 289,
            column: 12,
            span: 8083..8084,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 289,
            column: 14,
            span: 8085..8086,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 289,
            column: 15,
            span: 8086..8087,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 289,
            column: 20,
            span: 8087..8092,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 289,
            column: 21,
            span: 8092..8093,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gettable R; return 1\"",
        ),
        position: Position {
            line: 289,
            column: 43,
            span: 8093..8115,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 289,
            column: 44,
            span: 8115..8116,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 289,
            column: 48,
            span: 8117..8120,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 289,
            column: 49,
            span: 8120..8121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 290,
            column: 8,
            span: 8124..8129,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 290,
            column: 9,
            span: 8129..8130,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 290,
            column: 12,
            span: 8130..8133,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 290,
            column: 13,
            span: 8133..8134,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 290,
            column: 15,
            span: 8135..8136,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 290,
            column: 16,
            span: 8136..8137,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 291,
            column: 6,
            span: 8140..8143,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 291,
            column: 8,
            span: 8144..8145,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 291,
            column: 9,
            span: 8145..8146,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 291,
            column: 10,
            span: 8145..8147,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 291,
            column: 11,
            span: 8147..8148,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 291,
            column: 12,
            span: 8148..8149,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 291,
            column: 0,
            span: 8150..8152,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 292,
            column: 10,
            span: 8157..8162,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 292,
            column: 11,
            span: 8162..8163,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 292,
            column: 12,
            span: 8163..8164,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 292,
            column: 13,
            span: 8164..8165,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 292,
            column: 15,
            span: 8166..8167,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 292,
            column: 16,
            span: 8167..8168,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 292,
            column: 21,
            span: 8168..8173,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 292,
            column: 22,
            span: 8173..8174,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gettable R; return 1\"",
        ),
        position: Position {
            line: 292,
            column: 44,
            span: 8174..8196,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 292,
            column: 45,
            span: 8196..8197,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 292,
            column: 47,
            span: 8198..8199,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 292,
            column: 48,
            span: 8199..8200,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 292,
            column: 49,
            span: 8200..8201,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 293,
            column: 0,
            span: 8204..8207,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 294,
            column: 0,
            span: 8208..8211,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 297,
            column: 4,
            span: 8214..8217,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 297,
            column: 6,
            span: 8218..8219,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 297,
            column: 7,
            span: 8219..8220,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 297,
            column: 8,
            span: 8219..8221,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 297,
            column: 9,
            span: 8221..8222,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Lim",
        ),
        position: Position {
            line: 297,
            column: 12,
            span: 8222..8225,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 297,
            column: 15,
            span: 8226..8228,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Arr",
        ),
        position: Position {
            line: 298,
            column: 6,
            span: 8254..8257,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 298,
            column: 7,
            span: 8257..8258,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 298,
            column: 8,
            span: 8258..8259,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 298,
            column: 9,
            span: 8259..8260,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 298,
            column: 11,
            span: 8261..8262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 298,
            column: 13,
            span: 8263..8264,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 298,
            column: 14,
            span: 8264..8265,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        position: Position {
            line: 298,
            column: 17,
            span: 8265..8268,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 298,
            column: 18,
            span: 8268..8269,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 298,
            column: 19,
            span: 8269..8270,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 298,
            column: 20,
            span: 8270..8271,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 298,
            column: 21,
            span: 8271..8272,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 299,
            column: 0,
            span: 8273..8276,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 301,
            column: 4,
            span: 8278..8281,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 301,
            column: 6,
            span: 8282..8283,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 301,
            column: 7,
            span: 8283..8284,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 301,
            column: 8,
            span: 8283..8285,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 301,
            column: 9,
            span: 8285..8286,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Lim",
        ),
        position: Position {
            line: 301,
            column: 12,
            span: 8286..8289,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 301,
            column: 13,
            span: 8289..8290,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 301,
            column: 14,
            span: 8289..8291,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 301,
            column: 17,
            span: 8292..8294,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 302,
            column: 4,
            span: 8322..8323,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 302,
            column: 5,
            span: 8323..8324,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        position: Position {
            line: 302,
            column: 10,
            span: 8324..8329,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 302,
            column: 11,
            span: 8329..8330,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Arr",
        ),
        position: Position {
            line: 302,
            column: 14,
            span: 8330..8333,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 302,
            column: 15,
            span: 8333..8334,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 302,
            column: 16,
            span: 8334..8335,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 302,
            column: 17,
            span: 8335..8336,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 302,
            column: 18,
            span: 8336..8337,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 303,
            column: 0,
            span: 8338..8341,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 305,
            column: 7,
            span: 8343..8349,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 305,
            column: 8,
            span: 8349..8350,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 305,
            column: 12,
            span: 8350..8354,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 305,
            column: 13,
            span: 8354..8355,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 305,
            column: 14,
            span: 8355..8356,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 305,
            column: 15,
            span: 8356..8357,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getref",
        ),
        position: Position {
            line: 305,
            column: 21,
            span: 8357..8363,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 305,
            column: 22,
            span: 8363..8364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Arr",
        ),
        position: Position {
            line: 305,
            column: 25,
            span: 8364..8367,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 305,
            column: 26,
            span: 8367..8368,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 305,
            column: 27,
            span: 8367..8369,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 305,
            column: 28,
            span: 8369..8370,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 305,
            column: 29,
            span: 8370..8371,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 305,
            column: 30,
            span: 8371..8372,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 305,
            column: 33,
            span: 8373..8375,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        position: Position {
            line: 305,
            column: 41,
            span: 8376..8383,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 305,
            column: 42,
            span: 8383..8384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 308,
            column: 7,
            span: 8387..8393,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 308,
            column: 8,
            span: 8393..8394,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 308,
            column: 9,
            span: 8394..8395,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 308,
            column: 10,
            span: 8395..8396,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getref",
        ),
        position: Position {
            line: 308,
            column: 16,
            span: 8396..8402,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 308,
            column: 17,
            span: 8402..8403,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 308,
            column: 18,
            span: 8403..8404,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 308,
            column: 19,
            span: 8403..8405,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 308,
            column: 20,
            span: 8405..8406,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 308,
            column: 23,
            span: 8407..8409,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 308,
            column: 27,
            span: 8410..8413,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 308,
            column: 28,
            span: 8413..8414,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 311,
            column: 2,
            span: 8417..8418,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 311,
            column: 4,
            span: 8419..8420,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 311,
            column: 6,
            span: 8421..8422,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 311,
            column: 7,
            span: 8422..8423,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        position: Position {
            line: 311,
            column: 10,
            span: 8423..8426,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 311,
            column: 11,
            span: 8426..8427,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 311,
            column: 12,
            span: 8427..8428,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 311,
            column: 13,
            span: 8428..8429,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 311,
            column: 14,
            span: 8429..8430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 313,
            column: 15,
            span: 8432..8446,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 313,
            column: 16,
            span: 8446..8447,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 313,
            column: 17,
            span: 8447..8448,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 315,
            column: 7,
            span: 8450..8456,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 315,
            column: 8,
            span: 8456..8457,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 315,
            column: 12,
            span: 8457..8461,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 315,
            column: 13,
            span: 8461..8462,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 315,
            column: 14,
            span: 8462..8463,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 315,
            column: 15,
            span: 8463..8464,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getref",
        ),
        position: Position {
            line: 315,
            column: 21,
            span: 8464..8470,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 315,
            column: 22,
            span: 8470..8471,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 315,
            column: 23,
            span: 8471..8472,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 315,
            column: 24,
            span: 8472..8473,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 315,
            column: 25,
            span: 8473..8474,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 315,
            column: 28,
            span: 8475..8477,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        position: Position {
            line: 315,
            column: 36,
            span: 8478..8485,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 315,
            column: 37,
            span: 8485..8486,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        position: Position {
            line: 319,
            column: 3,
            span: 8541..8543,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 319,
            column: 5,
            span: 8544..8545,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 319,
            column: 7,
            span: 8546..8547,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 319,
            column: 8,
            span: 8547..8548,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 320,
            column: 3,
            span: 8549..8551,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 320,
            column: 5,
            span: 8552..8553,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 320,
            column: 7,
            span: 8554..8555,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 320,
            column: 8,
            span: 8555..8556,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 320,
            column: 9,
            span: 8556..8557,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 320,
            column: 10,
            span: 8556..8558,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 320,
            column: 11,
            span: 8558..8559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 321,
            column: 2,
            span: 8560..8561,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 321,
            column: 4,
            span: 8562..8563,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 321,
            column: 8,
            span: 8564..8567,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 321,
            column: 9,
            span: 8567..8568,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 321,
            column: 11,
            span: 8569..8570,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 321,
            column: 13,
            span: 8571..8572,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 321,
            column: 0,
            span: 8573..8576,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 322,
            column: 6,
            span: 8577..8582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 322,
            column: 0,
            span: 8583..8584,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 323,
            column: 2,
            span: 8585..8586,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 323,
            column: 4,
            span: 8587..8588,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 323,
            column: 13,
            span: 8589..8597,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 323,
            column: 15,
            span: 8598..8599,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 323,
            column: 16,
            span: 8599..8600,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 323,
            column: 17,
            span: 8600..8601,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 324,
            column: 8,
            span: 8604..8609,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udval",
        ),
        position: Position {
            line: 324,
            column: 14,
            span: 8610..8615,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 324,
            column: 16,
            span: 8616..8617,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 324,
            column: 18,
            span: 8618..8619,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 324,
            column: 19,
            span: 8619..8620,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        position: Position {
            line: 324,
            column: 27,
            span: 8620..8628,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 324,
            column: 28,
            span: 8628..8629,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 324,
            column: 29,
            span: 8629..8630,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 324,
            column: 30,
            span: 8630..8631,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 325,
            column: 8,
            span: 8634..8639,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 325,
            column: 9,
            span: 8639..8640,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 325,
            column: 15,
            span: 8640..8646,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 325,
            column: 16,
            span: 8646..8647,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 325,
            column: 18,
            span: 8647..8649,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 325,
            column: 19,
            span: 8649..8650,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udval",
        ),
        position: Position {
            line: 325,
            column: 25,
            span: 8651..8656,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 325,
            column: 26,
            span: 8656..8657,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 326,
            column: 8,
            span: 8660..8665,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 326,
            column: 10,
            span: 8666..8667,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 326,
            column: 12,
            span: 8668..8669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 326,
            column: 14,
            span: 8670..8671,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 326,
            column: 15,
            span: 8671..8672,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 326,
            column: 26,
            span: 8672..8683,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 326,
            column: 27,
            span: 8683..8684,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 326,
            column: 30,
            span: 8683..8687,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 326,
            column: 31,
            span: 8687..8688,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 327,
            column: 4,
            span: 8706..8707,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 327,
            column: 6,
            span: 8708..8709,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 327,
            column: 0,
            span: 8710..8713,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 328,
            column: 9,
            span: 8716..8722,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 328,
            column: 10,
            span: 8722..8723,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 328,
            column: 15,
            span: 8723..8728,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 328,
            column: 16,
            span: 8728..8729,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 328,
            column: 28,
            span: 8729..8741,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 328,
            column: 29,
            span: 8741..8742,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 328,
            column: 30,
            span: 8742..8743,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 328,
            column: 31,
            span: 8743..8744,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 328,
            column: 32,
            span: 8744..8745,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        position: Position {
            line: 328,
            column: 36,
            span: 8745..8749,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 328,
            column: 39,
            span: 8750..8752,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 328,
            column: 41,
            span: 8753..8754,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 328,
            column: 42,
            span: 8754..8755,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        position: Position {
            line: 329,
            column: 13,
            span: 8758..8768,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 329,
            column: 14,
            span: 8768..8769,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table.insert({}, {})\"",
        ),
        position: Position {
            line: 329,
            column: 36,
            span: 8769..8791,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 329,
            column: 37,
            span: 8791..8792,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 329,
            column: 38,
            span: 8792..8793,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 329,
            column: 39,
            span: 8793..8794,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 330,
            column: 17,
            span: 8817..8831,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 330,
            column: 18,
            span: 8831..8832,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 330,
            column: 19,
            span: 8832..8833,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 331,
            column: 9,
            span: 8878..8884,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 331,
            column: 10,
            span: 8884..8885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 331,
            column: 15,
            span: 8885..8890,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 331,
            column: 16,
            span: 8890..8891,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 331,
            column: 28,
            span: 8891..8903,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 331,
            column: 29,
            span: 8903..8904,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 331,
            column: 30,
            span: 8904..8905,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 331,
            column: 31,
            span: 8905..8906,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 331,
            column: 32,
            span: 8906..8907,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        position: Position {
            line: 331,
            column: 36,
            span: 8907..8911,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 331,
            column: 39,
            span: 8912..8914,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 331,
            column: 41,
            span: 8915..8916,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 331,
            column: 42,
            span: 8916..8917,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 332,
            column: 8,
            span: 8957..8962,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        position: Position {
            line: 332,
            column: 14,
            span: 8963..8968,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 332,
            column: 16,
            span: 8969..8970,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 332,
            column: 18,
            span: 8971..8972,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 332,
            column: 19,
            span: 8972..8973,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 333,
            column: 5,
            span: 9007..9009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 333,
            column: 7,
            span: 9010..9011,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 333,
            column: 10,
            span: 9012..9014,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 333,
            column: 14,
            span: 9015..9018,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 333,
            column: 0,
            span: 9019..9023,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 334,
            column: 11,
            span: 9028..9034,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 334,
            column: 12,
            span: 9034..9035,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 334,
            column: 16,
            span: 9035..9039,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 334,
            column: 17,
            span: 9039..9040,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 334,
            column: 18,
            span: 9040..9041,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 334,
            column: 19,
            span: 9041..9042,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 334,
            column: 22,
            span: 9043..9045,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"userdata\"",
        ),
        position: Position {
            line: 334,
            column: 33,
            span: 9046..9056,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 334,
            column: 34,
            span: 9056..9057,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 335,
            column: 11,
            span: 9062..9068,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 335,
            column: 12,
            span: 9068..9069,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 335,
            column: 13,
            span: 9069..9070,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 335,
            column: 14,
            span: 9070..9071,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        position: Position {
            line: 335,
            column: 22,
            span: 9071..9079,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 335,
            column: 23,
            span: 9079..9080,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 335,
            column: 24,
            span: 9080..9081,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 335,
            column: 25,
            span: 9081..9082,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 335,
            column: 28,
            span: 9083..9085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 335,
            column: 30,
            span: 9086..9087,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 335,
            column: 31,
            span: 9087..9088,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 336,
            column: 10,
            span: 9093..9098,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 336,
            column: 11,
            span: 9098..9099,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 336,
            column: 23,
            span: 9099..9111,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 336,
            column: 24,
            span: 9111..9112,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 336,
            column: 25,
            span: 9112..9113,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 336,
            column: 26,
            span: 9113..9114,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 337,
            column: 0,
            span: 9137..9140,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 338,
            column: 4,
            span: 9143..9144,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 338,
            column: 6,
            span: 9145..9146,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 338,
            column: 8,
            span: 9147..9148,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 339,
            column: 4,
            span: 9175..9176,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 339,
            column: 6,
            span: 9177..9178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udval",
        ),
        position: Position {
            line: 339,
            column: 0,
            span: 9179..9184,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 340,
            column: 9,
            span: 9187..9193,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 340,
            column: 11,
            span: 9193..9195,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 340,
            column: 12,
            span: 9195..9196,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 340,
            column: 13,
            span: 9195..9197,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 340,
            column: 14,
            span: 9197..9198,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 340,
            column: 0,
            span: 9197..9199,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 341,
            column: 0,
            span: 9200..9203,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        position: Position {
            line: 342,
            column: 3,
            span: 9204..9206,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 342,
            column: 4,
            span: 9206..9207,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        position: Position {
            line: 342,
            column: 8,
            span: 9207..9211,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 342,
            column: 10,
            span: 9212..9213,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 342,
            column: 0,
            span: 9214..9215,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 345,
            column: 0,
            span: 9281..9283,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 346,
            column: 17,
            span: 9286..9300,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 346,
            column: 18,
            span: 9300..9301,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 346,
            column: 19,
            span: 9301..9302,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 346,
            column: 20,
            span: 9302..9303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 347,
            column: 17,
            span: 9306..9320,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 347,
            column: 18,
            span: 9320..9321,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 347,
            column: 19,
            span: 9321..9322,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 347,
            column: 20,
            span: 9322..9323,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 348,
            column: 8,
            span: 9326..9331,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 348,
            column: 10,
            span: 9332..9333,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 348,
            column: 12,
            span: 9334..9335,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 348,
            column: 27,
            span: 9336..9350,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 348,
            column: 28,
            span: 9350..9351,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 348,
            column: 35,
            span: 9351..9358,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 348,
            column: 36,
            span: 9358..9359,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 348,
            column: 37,
            span: 9359..9360,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 349,
            column: 8,
            span: 9363..9368,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 349,
            column: 10,
            span: 9369..9370,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 349,
            column: 12,
            span: 9371..9372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 349,
            column: 14,
            span: 9373..9374,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 349,
            column: 15,
            span: 9374..9375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 349,
            column: 26,
            span: 9375..9386,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 349,
            column: 27,
            span: 9386..9387,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5001",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 349,
            column: 31,
            span: 9386..9391,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 349,
            column: 32,
            span: 9391..9392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 350,
            column: 9,
            span: 9395..9401,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 350,
            column: 10,
            span: 9401..9402,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 350,
            column: 11,
            span: 9402..9403,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 350,
            column: 12,
            span: 9403..9404,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 350,
            column: 17,
            span: 9404..9409,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 350,
            column: 18,
            span: 9409..9410,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize 2; return 1\"",
        ),
        position: Position {
            line: 350,
            column: 39,
            span: 9410..9431,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 350,
            column: 40,
            span: 9431..9432,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 350,
            column: 42,
            span: 9433..9434,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 350,
            column: 43,
            span: 9434..9435,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 350,
            column: 46,
            span: 9436..9438,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5001",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 350,
            column: 51,
            span: 9438..9443,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 350,
            column: 52,
            span: 9443..9444,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 351,
            column: 9,
            span: 9447..9453,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 351,
            column: 10,
            span: 9453..9454,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 351,
            column: 24,
            span: 9454..9468,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 351,
            column: 25,
            span: 9468..9469,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 351,
            column: 32,
            span: 9469..9476,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 351,
            column: 33,
            span: 9476..9477,
        },
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        position: Position {
            line: 351,
            column: 36,
            span: 9478..9480,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 351,
            column: 38,
            span: 9481..9482,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 351,
            column: 39,
            span: 9482..9483,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 351,
            column: 40,
            span: 9482..9484,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 351,
            column: 41,
            span: 9484..9485,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 352,
            column: 4,
            span: 9489..9490,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 352,
            column: 6,
            span: 9491..9492,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 352,
            column: 0,
            span: 9493..9496,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 353,
            column: 17,
            span: 9499..9513,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 353,
            column: 18,
            span: 9513..9514,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 353,
            column: 19,
            span: 9514..9515,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 353,
            column: 20,
            span: 9515..9516,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 354,
            column: 9,
            span: 9519..9525,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 354,
            column: 10,
            span: 9525..9526,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 354,
            column: 24,
            span: 9526..9540,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 354,
            column: 25,
            span: 9540..9541,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 354,
            column: 32,
            span: 9541..9548,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 354,
            column: 33,
            span: 9548..9549,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 354,
            column: 36,
            span: 9550..9552,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 354,
            column: 38,
            span: 9553..9554,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 354,
            column: 39,
            span: 9554..9555,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 354,
            column: 40,
            span: 9554..9556,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 354,
            column: 41,
            span: 9556..9557,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 356,
            column: 4,
            span: 9589..9590,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 356,
            column: 6,
            span: 9591..9592,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 356,
            column: 21,
            span: 9593..9607,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 356,
            column: 22,
            span: 9607..9608,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 356,
            column: 29,
            span: 9608..9615,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 356,
            column: 30,
            span: 9615..9616,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 357,
            column: 17,
            span: 9619..9633,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 357,
            column: 18,
            span: 9633..9634,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        position: Position {
            line: 357,
            column: 24,
            span: 9634..9640,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 357,
            column: 25,
            span: 9640..9641,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 358,
            column: 6,
            span: 9644..9647,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 358,
            column: 8,
            span: 9648..9649,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 358,
            column: 9,
            span: 9649..9650,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 358,
            column: 10,
            span: 9649..9651,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 358,
            column: 11,
            span: 9651..9652,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 358,
            column: 15,
            span: 9651..9656,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 358,
            column: 18,
            span: 9657..9659,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newproxy",
        ),
        position: Position {
            line: 358,
            column: 27,
            span: 9660..9668,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 358,
            column: 28,
            span: 9668..9669,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 358,
            column: 33,
            span: 9669..9674,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 358,
            column: 34,
            span: 9674..9675,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 358,
            column: 0,
            span: 9676..9679,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 359,
            column: 9,
            span: 9682..9688,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 359,
            column: 10,
            span: 9688..9689,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 359,
            column: 24,
            span: 9689..9703,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 359,
            column: 25,
            span: 9703..9704,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 359,
            column: 32,
            span: 9704..9711,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 359,
            column: 33,
            span: 9711..9712,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 359,
            column: 35,
            span: 9713..9714,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 359,
            column: 37,
            span: 9715..9716,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 359,
            column: 38,
            span: 9716..9717,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 359,
            column: 40,
            span: 9716..9719,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 359,
            column: 41,
            span: 9719..9720,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 360,
            column: 17,
            span: 9723..9737,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 360,
            column: 18,
            span: 9737..9738,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 360,
            column: 19,
            span: 9738..9739,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 361,
            column: 9,
            span: 9742..9748,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 361,
            column: 10,
            span: 9748..9749,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 361,
            column: 24,
            span: 9749..9763,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 361,
            column: 25,
            span: 9763..9764,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 361,
            column: 32,
            span: 9764..9771,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 361,
            column: 33,
            span: 9771..9772,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 361,
            column: 36,
            span: 9773..9775,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 361,
            column: 38,
            span: 9776..9777,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 361,
            column: 39,
            span: 9777..9778,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 361,
            column: 40,
            span: 9777..9779,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 361,
            column: 41,
            span: 9779..9780,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 363,
            column: 4,
            span: 9809..9810,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 363,
            column: 6,
            span: 9811..9812,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 363,
            column: 21,
            span: 9813..9827,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 363,
            column: 22,
            span: 9827..9828,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 363,
            column: 29,
            span: 9828..9835,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 363,
            column: 30,
            span: 9835..9836,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 364,
            column: 17,
            span: 9839..9853,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 364,
            column: 18,
            span: 9853..9854,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 364,
            column: 19,
            span: 9854..9855,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 365,
            column: 17,
            span: 9858..9872,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 365,
            column: 18,
            span: 9872..9873,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        position: Position {
            line: 365,
            column: 24,
            span: 9873..9879,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 365,
            column: 25,
            span: 9879..9880,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 366,
            column: 4,
            span: 9883..9884,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 366,
            column: 6,
            span: 9885..9886,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newproxy",
        ),
        position: Position {
            line: 366,
            column: 15,
            span: 9887..9895,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 366,
            column: 16,
            span: 9895..9896,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 366,
            column: 20,
            span: 9896..9900,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 366,
            column: 21,
            span: 9900..9901,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 367,
            column: 15,
            span: 9904..9916,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 367,
            column: 16,
            span: 9916..9917,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 367,
            column: 17,
            span: 9917..9918,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 367,
            column: 18,
            span: 9918..9919,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 367,
            column: 19,
            span: 9919..9920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        position: Position {
            line: 367,
            column: 23,
            span: 9920..9924,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 367,
            column: 25,
            span: 9925..9926,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 367,
            column: 34,
            span: 9927..9935,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 367,
            column: 36,
            span: 9936..9937,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 367,
            column: 37,
            span: 9937..9938,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 367,
            column: 0,
            span: 9939..9942,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 368,
            column: 6,
            span: 9945..9948,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 368,
            column: 8,
            span: 9949..9950,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 368,
            column: 9,
            span: 9950..9951,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 368,
            column: 10,
            span: 9950..9952,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 368,
            column: 11,
            span: 9952..9953,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 368,
            column: 15,
            span: 9952..9957,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 368,
            column: 18,
            span: 9958..9960,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newproxy",
        ),
        position: Position {
            line: 368,
            column: 27,
            span: 9961..9969,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 368,
            column: 28,
            span: 9969..9970,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 368,
            column: 29,
            span: 9970..9971,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 368,
            column: 30,
            span: 9971..9972,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 368,
            column: 0,
            span: 9973..9976,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 369,
            column: 9,
            span: 9979..9985,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 369,
            column: 10,
            span: 9985..9986,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 369,
            column: 24,
            span: 9986..10000,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 369,
            column: 25,
            span: 10000..10001,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 369,
            column: 32,
            span: 10001..10008,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 369,
            column: 33,
            span: 10008..10009,
        },
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        position: Position {
            line: 369,
            column: 36,
            span: 10010..10012,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 369,
            column: 38,
            span: 10013..10014,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 369,
            column: 39,
            span: 10014..10015,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 369,
            column: 41,
            span: 10014..10017,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 369,
            column: 42,
            span: 10017..10018,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 370,
            column: 17,
            span: 10021..10035,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 370,
            column: 18,
            span: 10035..10036,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 370,
            column: 19,
            span: 10036..10037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 371,
            column: 9,
            span: 10098..10104,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 371,
            column: 10,
            span: 10104..10105,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 371,
            column: 24,
            span: 10105..10119,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 371,
            column: 25,
            span: 10119..10120,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 371,
            column: 32,
            span: 10120..10127,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 371,
            column: 33,
            span: 10127..10128,
        },
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        position: Position {
            line: 371,
            column: 36,
            span: 10129..10131,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 371,
            column: 38,
            span: 10132..10133,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 371,
            column: 39,
            span: 10133..10134,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 371,
            column: 41,
            span: 10133..10136,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 371,
            column: 42,
            span: 10136..10137,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 372,
            column: 17,
            span: 10140..10154,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 372,
            column: 18,
            span: 10154..10155,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 372,
            column: 19,
            span: 10155..10156,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 373,
            column: 9,
            span: 10180..10186,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 373,
            column: 10,
            span: 10186..10187,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 373,
            column: 24,
            span: 10187..10201,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 373,
            column: 25,
            span: 10201..10202,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 373,
            column: 32,
            span: 10202..10209,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 373,
            column: 33,
            span: 10209..10210,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 373,
            column: 36,
            span: 10211..10213,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 373,
            column: 38,
            span: 10214..10215,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 373,
            column: 39,
            span: 10215..10216,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 373,
            column: 40,
            span: 10215..10217,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 373,
            column: 41,
            span: 10217..10218,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 374,
            column: 0,
            span: 10219..10222,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 377,
            column: 15,
            span: 10225..10239,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 377,
            column: 16,
            span: 10239..10240,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        position: Position {
            line: 377,
            column: 22,
            span: 10240..10246,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 377,
            column: 23,
            span: 10246..10247,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 380,
            column: 2,
            span: 10285..10286,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 380,
            column: 4,
            span: 10287..10288,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 380,
            column: 6,
            span: 10289..10290,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 380,
            column: 7,
            span: 10290..10291,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 380,
            column: 18,
            span: 10291..10302,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 380,
            column: 19,
            span: 10302..10303,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 380,
            column: 20,
            span: 10302..10304,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 380,
            column: 21,
            span: 10304..10305,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 380,
            column: 22,
            span: 10305..10306,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 380,
            column: 28,
            span: 10307..10312,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 380,
            column: 29,
            span: 10312..10313,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 380,
            column: 41,
            span: 10313..10325,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 380,
            column: 42,
            span: 10325..10326,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 380,
            column: 43,
            span: 10326..10327,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 380,
            column: 44,
            span: 10327..10328,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        position: Position {
            line: 380,
            column: 47,
            span: 10329..10331,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 380,
            column: 48,
            span: 10331..10332,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 380,
            column: 49,
            span: 10332..10333,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        position: Position {
            line: 380,
            column: 52,
            span: 10334..10336,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 380,
            column: 54,
            span: 10337..10338,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 380,
            column: 56,
            span: 10339..10340,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 380,
            column: 57,
            span: 10340..10341,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        position: Position {
            line: 380,
            column: 65,
            span: 10341..10349,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 380,
            column: 66,
            span: 10349..10350,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 380,
            column: 67,
            span: 10350..10351,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 380,
            column: 68,
            span: 10351..10352,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 381,
            column: 2,
            span: 10353..10354,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 381,
            column: 4,
            span: 10355..10356,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 381,
            column: 6,
            span: 10357..10358,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 381,
            column: 7,
            span: 10358..10359,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 381,
            column: 18,
            span: 10359..10370,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 381,
            column: 19,
            span: 10370..10371,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 381,
            column: 20,
            span: 10370..10372,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 381,
            column: 21,
            span: 10372..10373,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 381,
            column: 22,
            span: 10373..10374,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 381,
            column: 28,
            span: 10375..10380,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 381,
            column: 29,
            span: 10380..10381,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 381,
            column: 41,
            span: 10381..10393,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 381,
            column: 42,
            span: 10393..10394,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 381,
            column: 43,
            span: 10394..10395,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 381,
            column: 44,
            span: 10395..10396,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        position: Position {
            line: 381,
            column: 47,
            span: 10397..10399,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 381,
            column: 48,
            span: 10399..10400,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 381,
            column: 49,
            span: 10400..10401,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nb",
        ),
        position: Position {
            line: 381,
            column: 52,
            span: 10402..10404,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 381,
            column: 54,
            span: 10405..10406,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 381,
            column: 56,
            span: 10407..10408,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 381,
            column: 57,
            span: 10408..10409,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        position: Position {
            line: 381,
            column: 65,
            span: 10409..10417,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 381,
            column: 66,
            span: 10417..10418,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 381,
            column: 67,
            span: 10418..10419,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 381,
            column: 68,
            span: 10419..10420,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 382,
            column: 2,
            span: 10421..10422,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 382,
            column: 4,
            span: 10423..10424,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 382,
            column: 6,
            span: 10425..10426,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 382,
            column: 7,
            span: 10426..10427,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 382,
            column: 18,
            span: 10427..10438,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 382,
            column: 19,
            span: 10438..10439,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 382,
            column: 20,
            span: 10438..10440,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 382,
            column: 21,
            span: 10440..10441,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 382,
            column: 22,
            span: 10441..10442,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 382,
            column: 28,
            span: 10443..10448,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 382,
            column: 29,
            span: 10448..10449,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 382,
            column: 41,
            span: 10449..10461,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 382,
            column: 42,
            span: 10461..10462,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 382,
            column: 43,
            span: 10462..10463,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 382,
            column: 44,
            span: 10463..10464,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        position: Position {
            line: 382,
            column: 47,
            span: 10465..10467,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 382,
            column: 48,
            span: 10467..10468,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 382,
            column: 49,
            span: 10468..10469,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nc",
        ),
        position: Position {
            line: 382,
            column: 52,
            span: 10470..10472,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 382,
            column: 54,
            span: 10473..10474,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 382,
            column: 56,
            span: 10475..10476,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 382,
            column: 57,
            span: 10476..10477,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        position: Position {
            line: 382,
            column: 65,
            span: 10477..10485,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 382,
            column: 66,
            span: 10485..10486,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 382,
            column: 67,
            span: 10486..10487,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 382,
            column: 68,
            span: 10487..10488,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 385,
            column: 2,
            span: 10528..10529,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 385,
            column: 4,
            span: 10530..10531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 385,
            column: 6,
            span: 10532..10533,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 385,
            column: 7,
            span: 10533..10534,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 385,
            column: 18,
            span: 10534..10545,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 385,
            column: 19,
            span: 10545..10546,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 385,
            column: 20,
            span: 10545..10547,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 385,
            column: 21,
            span: 10547..10548,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 386,
            column: 2,
            span: 10549..10550,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 386,
            column: 4,
            span: 10551..10552,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 386,
            column: 6,
            span: 10553..10554,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 386,
            column: 7,
            span: 10554..10555,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 386,
            column: 18,
            span: 10555..10566,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 386,
            column: 19,
            span: 10566..10567,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 386,
            column: 20,
            span: 10566..10568,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 386,
            column: 21,
            span: 10568..10569,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 388,
            column: 7,
            span: 10571..10577,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 388,
            column: 8,
            span: 10577..10578,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 388,
            column: 13,
            span: 10578..10583,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 388,
            column: 14,
            span: 10583..10584,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 388,
            column: 26,
            span: 10584..10596,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 388,
            column: 27,
            span: 10596..10597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 388,
            column: 28,
            span: 10597..10598,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 388,
            column: 29,
            span: 10598..10599,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 388,
            column: 32,
            span: 10600..10602,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 388,
            column: 36,
            span: 10603..10606,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 388,
            column: 40,
            span: 10607..10610,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 388,
            column: 46,
            span: 10611..10616,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 388,
            column: 47,
            span: 10616..10617,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 388,
            column: 59,
            span: 10617..10629,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 388,
            column: 60,
            span: 10629..10630,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 388,
            column: 61,
            span: 10630..10631,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 388,
            column: 62,
            span: 10631..10632,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 388,
            column: 65,
            span: 10633..10635,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 388,
            column: 69,
            span: 10636..10639,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 388,
            column: 70,
            span: 10639..10640,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 390,
            column: 2,
            span: 10642..10643,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 390,
            column: 3,
            span: 10643..10644,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 390,
            column: 4,
            span: 10644..10645,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 390,
            column: 5,
            span: 10645..10646,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        position: Position {
            line: 390,
            column: 8,
            span: 10646..10649,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 390,
            column: 9,
            span: 10649..10650,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 390,
            column: 10,
            span: 10650..10651,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 390,
            column: 11,
            span: 10651..10652,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 390,
            column: 12,
            span: 10652..10653,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 391,
            column: 2,
            span: 10654..10655,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 391,
            column: 3,
            span: 10655..10656,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 391,
            column: 4,
            span: 10656..10657,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 391,
            column: 5,
            span: 10657..10658,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        position: Position {
            line: 391,
            column: 8,
            span: 10658..10661,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 391,
            column: 9,
            span: 10661..10662,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 391,
            column: 10,
            span: 10662..10663,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 391,
            column: 11,
            span: 10663..10664,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 391,
            column: 12,
            span: 10664..10665,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 392,
            column: 2,
            span: 10666..10667,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 392,
            column: 3,
            span: 10667..10668,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 392,
            column: 4,
            span: 10668..10669,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 392,
            column: 5,
            span: 10669..10670,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        position: Position {
            line: 392,
            column: 8,
            span: 10670..10673,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 392,
            column: 9,
            span: 10673..10674,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 392,
            column: 10,
            span: 10674..10675,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 392,
            column: 11,
            span: 10675..10676,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 392,
            column: 12,
            span: 10676..10677,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 393,
            column: 2,
            span: 10678..10679,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 393,
            column: 4,
            span: 10680..10681,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 393,
            column: 6,
            span: 10682..10683,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 393,
            column: 7,
            span: 10683..10684,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 393,
            column: 8,
            span: 10684..10685,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getref",
        ),
        position: Position {
            line: 393,
            column: 14,
            span: 10685..10691,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 393,
            column: 15,
            span: 10691..10692,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 393,
            column: 16,
            span: 10692..10693,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 393,
            column: 17,
            span: 10693..10694,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 393,
            column: 18,
            span: 10694..10695,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 393,
            column: 20,
            span: 10696..10697,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 393,
            column: 21,
            span: 10697..10698,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getref",
        ),
        position: Position {
            line: 393,
            column: 27,
            span: 10698..10704,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 393,
            column: 28,
            span: 10704..10705,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 393,
            column: 29,
            span: 10705..10706,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 393,
            column: 30,
            span: 10706..10707,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 393,
            column: 31,
            span: 10707..10708,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 393,
            column: 33,
            span: 10709..10710,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 393,
            column: 34,
            span: 10710..10711,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getref",
        ),
        position: Position {
            line: 393,
            column: 40,
            span: 10711..10717,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 393,
            column: 41,
            span: 10717..10718,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 393,
            column: 42,
            span: 10718..10719,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 393,
            column: 43,
            span: 10719..10720,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 393,
            column: 44,
            span: 10720..10721,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 394,
            column: 7,
            span: 10722..10728,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 394,
            column: 8,
            span: 10728..10729,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 394,
            column: 9,
            span: 10729..10730,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 394,
            column: 10,
            span: 10730..10731,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 394,
            column: 11,
            span: 10730..10732,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 394,
            column: 12,
            span: 10732..10733,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 394,
            column: 15,
            span: 10734..10736,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 394,
            column: 17,
            span: 10737..10738,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 394,
            column: 21,
            span: 10739..10742,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 394,
            column: 23,
            span: 10743..10744,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 394,
            column: 24,
            span: 10744..10745,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 394,
            column: 25,
            span: 10744..10746,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 394,
            column: 26,
            span: 10746..10747,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 394,
            column: 29,
            span: 10748..10750,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 394,
            column: 31,
            span: 10751..10752,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 394,
            column: 35,
            span: 10753..10756,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 394,
            column: 37,
            span: 10757..10758,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 394,
            column: 38,
            span: 10758..10759,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 394,
            column: 39,
            span: 10758..10760,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 394,
            column: 40,
            span: 10760..10761,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 394,
            column: 43,
            span: 10762..10764,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 394,
            column: 45,
            span: 10765..10766,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 394,
            column: 46,
            span: 10766..10767,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 396,
            column: 2,
            span: 10769..10770,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 396,
            column: 3,
            span: 10770..10771,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 396,
            column: 6,
            span: 10771..10774,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 396,
            column: 7,
            span: 10774..10775,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 396,
            column: 9,
            span: 10776..10777,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 396,
            column: 10,
            span: 10777..10778,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 396,
            column: 13,
            span: 10778..10781,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 396,
            column: 14,
            span: 10781..10782,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 396,
            column: 16,
            span: 10783..10784,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 396,
            column: 17,
            span: 10784..10785,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 396,
            column: 20,
            span: 10785..10788,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 396,
            column: 21,
            span: 10788..10789,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 397,
            column: 2,
            span: 10790..10791,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 397,
            column: 3,
            span: 10791..10792,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        position: Position {
            line: 397,
            column: 8,
            span: 10792..10797,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 397,
            column: 9,
            span: 10797..10798,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 397,
            column: 10,
            span: 10798..10799,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 397,
            column: 11,
            span: 10799..10800,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 397,
            column: 12,
            span: 10800..10801,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 397,
            column: 14,
            span: 10802..10803,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 397,
            column: 15,
            span: 10803..10804,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        position: Position {
            line: 397,
            column: 20,
            span: 10804..10809,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 397,
            column: 21,
            span: 10809..10810,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 397,
            column: 22,
            span: 10810..10811,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 397,
            column: 23,
            span: 10811..10812,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 399,
            column: 15,
            span: 10814..10828,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 399,
            column: 16,
            span: 10828..10829,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 399,
            column: 17,
            span: 10829..10830,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 402,
            column: 7,
            span: 10880..10886,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 402,
            column: 8,
            span: 10886..10887,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 402,
            column: 13,
            span: 10887..10892,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 402,
            column: 14,
            span: 10892..10893,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        position: Position {
            line: 402,
            column: 18,
            span: 10893..10897,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 402,
            column: 19,
            span: 10897..10898,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 402,
            column: 21,
            span: 10898..10900,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 402,
            column: 22,
            span: 10900..10901,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 402,
            column: 25,
            span: 10902..10904,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 402,
            column: 27,
            span: 10904..10906,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 402,
            column: 31,
            span: 10907..10910,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 402,
            column: 34,
            span: 10911..10913,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 402,
            column: 35,
            span: 10913..10914,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 402,
            column: 36,
            span: 10913..10915,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 402,
            column: 37,
            span: 10915..10916,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 402,
            column: 40,
            span: 10917..10919,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nc",
        ),
        position: Position {
            line: 402,
            column: 43,
            span: 10920..10922,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 402,
            column: 44,
            span: 10922..10923,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 404,
            column: 2,
            span: 10925..10926,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 404,
            column: 4,
            span: 10927..10928,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 404,
            column: 6,
            span: 10929..10930,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 404,
            column: 7,
            span: 10930..10931,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getref",
        ),
        position: Position {
            line: 404,
            column: 13,
            span: 10931..10937,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 404,
            column: 14,
            span: 10937..10938,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 404,
            column: 15,
            span: 10938..10939,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 404,
            column: 16,
            span: 10939..10940,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 405,
            column: 7,
            span: 10941..10947,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 405,
            column: 8,
            span: 10947..10948,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 405,
            column: 12,
            span: 10948..10952,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 405,
            column: 13,
            span: 10952..10953,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 405,
            column: 14,
            span: 10953..10954,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 405,
            column: 15,
            span: 10954..10955,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 405,
            column: 18,
            span: 10956..10958,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'userdata'",
        ),
        position: Position {
            line: 405,
            column: 29,
            span: 10959..10969,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 405,
            column: 33,
            span: 10970..10973,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 405,
            column: 39,
            span: 10974..10979,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 405,
            column: 40,
            span: 10979..10980,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 405,
            column: 52,
            span: 10980..10992,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 405,
            column: 53,
            span: 10992..10993,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 405,
            column: 54,
            span: 10993..10994,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 405,
            column: 55,
            span: 10994..10995,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 405,
            column: 58,
            span: 10996..10998,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        position: Position {
            line: 405,
            column: 61,
            span: 10999..11001,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 405,
            column: 62,
            span: 11001..11002,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 406,
            column: 2,
            span: 11003..11004,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 406,
            column: 4,
            span: 11005..11006,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 406,
            column: 0,
            span: 11006..11009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        position: Position {
            line: 407,
            column: 3,
            span: 11010..11012,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 407,
            column: 4,
            span: 11012..11013,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 407,
            column: 5,
            span: 11013..11014,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 407,
            column: 7,
            span: 11015..11016,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 407,
            column: 9,
            span: 11017..11018,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        position: Position {
            line: 408,
            column: 3,
            span: 11036..11038,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 408,
            column: 4,
            span: 11038..11039,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 408,
            column: 7,
            span: 11039..11042,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 409,
            column: 2,
            span: 11065..11066,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 409,
            column: 4,
            span: 11067..11068,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 409,
            column: 0,
            span: 11069..11072,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 410,
            column: 2,
            span: 11073..11074,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 410,
            column: 4,
            span: 11075..11076,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 410,
            column: 0,
            span: 11077..11080,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 411,
            column: 2,
            span: 11081..11082,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 411,
            column: 3,
            span: 11082..11083,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        position: Position {
            line: 411,
            column: 8,
            span: 11083..11088,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 411,
            column: 9,
            span: 11088..11089,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 411,
            column: 10,
            span: 11089..11090,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 411,
            column: 11,
            span: 11090..11091,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 411,
            column: 12,
            span: 11091..11092,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n5",
        ),
        position: Position {
            line: 412,
            column: 3,
            span: 11093..11095,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 412,
            column: 5,
            span: 11096..11097,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 412,
            column: 7,
            span: 11098..11099,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 412,
            column: 8,
            span: 11099..11100,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 412,
            column: 19,
            span: 11100..11111,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 412,
            column: 20,
            span: 11111..11112,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 412,
            column: 21,
            span: 11111..11113,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 412,
            column: 22,
            span: 11113..11114,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 413,
            column: 6,
            span: 11115..11120,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 413,
            column: 7,
            span: 11120..11121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 413,
            column: 19,
            span: 11121..11133,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 413,
            column: 20,
            span: 11133..11134,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n5",
        ),
        position: Position {
            line: 413,
            column: 22,
            span: 11134..11136,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 413,
            column: 23,
            span: 11136..11137,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 413,
            column: 25,
            span: 11138..11139,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        position: Position {
            line: 413,
            column: 29,
            span: 11139..11143,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 413,
            column: 30,
            span: 11143..11144,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 413,
            column: 31,
            span: 11144..11145,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 413,
            column: 32,
            span: 11145..11146,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 413,
            column: 33,
            span: 11146..11147,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n5",
        ),
        position: Position {
            line: 414,
            column: 3,
            span: 11148..11150,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 414,
            column: 5,
            span: 11151..11152,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 414,
            column: 7,
            span: 11153..11154,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 414,
            column: 8,
            span: 11154..11155,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        position: Position {
            line: 414,
            column: 16,
            span: 11155..11163,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 414,
            column: 17,
            span: 11163..11164,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n5",
        ),
        position: Position {
            line: 414,
            column: 19,
            span: 11164..11166,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 414,
            column: 20,
            span: 11166..11167,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 415,
            column: 15,
            span: 11168..11182,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 415,
            column: 16,
            span: 11182..11183,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 415,
            column: 17,
            span: 11183..11184,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 416,
            column: 7,
            span: 11185..11191,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 416,
            column: 8,
            span: 11191..11192,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 416,
            column: 13,
            span: 11192..11197,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 416,
            column: 14,
            span: 11197..11198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        position: Position {
            line: 416,
            column: 18,
            span: 11198..11202,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 416,
            column: 19,
            span: 11202..11203,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 416,
            column: 21,
            span: 11203..11205,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 416,
            column: 22,
            span: 11205..11206,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 416,
            column: 25,
            span: 11207..11209,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 416,
            column: 27,
            span: 11209..11211,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 416,
            column: 28,
            span: 11211..11212,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 418,
            column: 7,
            span: 11242..11248,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 418,
            column: 8,
            span: 11248..11249,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 418,
            column: 10,
            span: 11249..11251,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 418,
            column: 11,
            span: 11251..11252,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 418,
            column: 12,
            span: 11251..11253,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 418,
            column: 13,
            span: 11253..11254,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 418,
            column: 16,
            span: 11255..11257,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n5",
        ),
        position: Position {
            line: 418,
            column: 19,
            span: 11258..11260,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 418,
            column: 23,
            span: 11261..11264,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 418,
            column: 26,
            span: 11265..11267,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 418,
            column: 27,
            span: 11267..11268,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 418,
            column: 28,
            span: 11267..11269,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 418,
            column: 29,
            span: 11269..11270,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 418,
            column: 32,
            span: 11271..11273,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nb",
        ),
        position: Position {
            line: 418,
            column: 35,
            span: 11274..11276,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 418,
            column: 39,
            span: 11277..11280,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 418,
            column: 42,
            span: 11281..11283,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 418,
            column: 43,
            span: 11283..11284,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 418,
            column: 44,
            span: 11283..11285,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 418,
            column: 45,
            span: 11285..11286,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 418,
            column: 48,
            span: 11287..11289,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        position: Position {
            line: 418,
            column: 51,
            span: 11290..11292,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 418,
            column: 52,
            span: 11292..11293,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 421,
            column: 2,
            span: 11296..11297,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 421,
            column: 3,
            span: 11297..11298,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        position: Position {
            line: 421,
            column: 6,
            span: 11299..11301,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 421,
            column: 8,
            span: 11302..11303,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 421,
            column: 10,
            span: 11304..11305,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 421,
            column: 11,
            span: 11305..11306,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 421,
            column: 12,
            span: 11306..11307,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 421,
            column: 14,
            span: 11308..11309,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 421,
            column: 15,
            span: 11309..11310,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 422,
            column: 4,
            span: 11311..11314,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 422,
            column: 6,
            span: 11315..11316,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 422,
            column: 7,
            span: 11316..11317,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 422,
            column: 9,
            span: 11316..11319,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 422,
            column: 10,
            span: 11319..11320,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 422,
            column: 11,
            span: 11319..11321,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 422,
            column: 12,
            span: 11321..11322,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 422,
            column: 13,
            span: 11322..11323,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 422,
            column: 14,
            span: 11322..11324,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 422,
            column: 0,
            span: 11325..11327,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 423,
            column: 4,
            span: 11330..11331,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 423,
            column: 5,
            span: 11331..11332,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 423,
            column: 6,
            span: 11332..11333,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 423,
            column: 7,
            span: 11333..11334,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 423,
            column: 9,
            span: 11335..11336,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 423,
            column: 11,
            span: 11337..11338,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 423,
            column: 12,
            span: 11338..11339,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 423,
            column: 23,
            span: 11339..11350,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 423,
            column: 24,
            span: 11350..11351,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 423,
            column: 25,
            span: 11350..11352,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 423,
            column: 26,
            span: 11352..11353,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 424,
            column: 8,
            span: 11356..11361,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 424,
            column: 9,
            span: 11361..11362,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 424,
            column: 21,
            span: 11362..11374,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 424,
            column: 22,
            span: 11374..11375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 424,
            column: 23,
            span: 11375..11376,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 424,
            column: 24,
            span: 11376..11377,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 424,
            column: 25,
            span: 11377..11378,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 424,
            column: 26,
            span: 11378..11379,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 424,
            column: 27,
            span: 11379..11380,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 424,
            column: 29,
            span: 11381..11382,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        position: Position {
            line: 424,
            column: 33,
            span: 11382..11386,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 424,
            column: 34,
            span: 11386..11387,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 424,
            column: 35,
            span: 11387..11388,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 424,
            column: 36,
            span: 11388..11389,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 424,
            column: 37,
            span: 11389..11390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        position: Position {
            line: 425,
            column: 5,
            span: 11393..11395,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 425,
            column: 6,
            span: 11395..11396,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 425,
            column: 7,
            span: 11396..11397,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 425,
            column: 8,
            span: 11397..11398,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 425,
            column: 10,
            span: 11399..11400,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 425,
            column: 12,
            span: 11401..11402,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 425,
            column: 13,
            span: 11402..11403,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        position: Position {
            line: 425,
            column: 21,
            span: 11403..11411,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 425,
            column: 22,
            span: 11411..11412,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 425,
            column: 23,
            span: 11412..11413,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 425,
            column: 24,
            span: 11413..11414,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 425,
            column: 25,
            span: 11414..11415,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 425,
            column: 26,
            span: 11415..11416,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 425,
            column: 27,
            span: 11416..11417,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 426,
            column: 0,
            span: 11418..11421,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 427,
            column: 3,
            span: 11422..11424,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 427,
            column: 5,
            span: 11425..11426,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 427,
            column: 7,
            span: 11427..11428,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 427,
            column: 8,
            span: 11428..11429,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 428,
            column: 2,
            span: 11430..11431,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 428,
            column: 4,
            span: 11432..11433,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 428,
            column: 8,
            span: 11434..11437,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 428,
            column: 9,
            span: 11437..11438,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 428,
            column: 24,
            span: 11439..11453,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 428,
            column: 25,
            span: 11453..11454,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 428,
            column: 26,
            span: 11454..11455,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 429,
            column: 7,
            span: 11456..11462,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 429,
            column: 8,
            span: 11462..11463,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 429,
            column: 13,
            span: 11463..11468,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 429,
            column: 14,
            span: 11468..11469,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        position: Position {
            line: 429,
            column: 18,
            span: 11469..11473,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 429,
            column: 19,
            span: 11473..11474,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 429,
            column: 21,
            span: 11474..11476,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 429,
            column: 22,
            span: 11476..11477,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 429,
            column: 25,
            span: 11478..11480,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 429,
            column: 28,
            span: 11480..11483,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 429,
            column: 29,
            span: 11483..11484,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 430,
            column: 4,
            span: 11485..11488,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 430,
            column: 6,
            span: 11489..11490,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 430,
            column: 7,
            span: 11490..11491,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 430,
            column: 8,
            span: 11490..11492,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 430,
            column: 9,
            span: 11492..11493,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 430,
            column: 11,
            span: 11492..11495,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 430,
            column: 14,
            span: 11496..11498,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 430,
            column: 21,
            span: 11499..11505,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 430,
            column: 22,
            span: 11505..11506,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 430,
            column: 24,
            span: 11506..11508,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 430,
            column: 25,
            span: 11508..11509,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 430,
            column: 26,
            span: 11509..11510,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 430,
            column: 27,
            span: 11510..11511,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 430,
            column: 30,
            span: 11512..11514,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        position: Position {
            line: 430,
            column: 33,
            span: 11515..11517,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 430,
            column: 34,
            span: 11517..11518,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 430,
            column: 35,
            span: 11518..11519,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 430,
            column: 36,
            span: 11519..11520,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 430,
            column: 37,
            span: 11520..11521,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 430,
            column: 0,
            span: 11522..11525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        position: Position {
            line: 431,
            column: 3,
            span: 11526..11528,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 431,
            column: 5,
            span: 11529..11530,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 431,
            column: 0,
            span: 11531..11534,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 434,
            column: 4,
            span: 11537..11540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 434,
            column: 6,
            span: 11541..11542,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 434,
            column: 7,
            span: 11542..11543,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 434,
            column: 8,
            span: 11542..11544,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 434,
            column: 9,
            span: 11544..11545,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Lim",
        ),
        position: Position {
            line: 434,
            column: 12,
            span: 11545..11548,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 434,
            column: 13,
            span: 11548..11549,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 434,
            column: 14,
            span: 11548..11550,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 434,
            column: 17,
            span: 11551..11553,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 435,
            column: 4,
            span: 11583..11584,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 435,
            column: 5,
            span: 11584..11585,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        position: Position {
            line: 435,
            column: 10,
            span: 11585..11590,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 435,
            column: 11,
            span: 11590..11591,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Arr",
        ),
        position: Position {
            line: 435,
            column: 14,
            span: 11591..11594,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 435,
            column: 15,
            span: 11594..11595,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 435,
            column: 16,
            span: 11595..11596,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 435,
            column: 17,
            span: 11596..11597,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 435,
            column: 18,
            span: 11597..11598,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 436,
            column: 0,
            span: 11599..11602,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 438,
            column: 2,
            span: 11604..11605,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 438,
            column: 4,
            span: 11606..11607,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 438,
            column: 6,
            span: 11608..11609,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 438,
            column: 7,
            span: 11609..11610,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 438,
            column: 18,
            span: 11610..11621,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 438,
            column: 19,
            span: 11621..11622,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "41",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 438,
            column: 21,
            span: 11621..11624,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 438,
            column: 22,
            span: 11624..11625,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 438,
            column: 23,
            span: 11625..11626,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 438,
            column: 29,
            span: 11627..11632,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 438,
            column: 30,
            span: 11632..11633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 438,
            column: 42,
            span: 11633..11645,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 438,
            column: 43,
            span: 11645..11646,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 438,
            column: 44,
            span: 11646..11647,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 438,
            column: 45,
            span: 11647..11648,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 438,
            column: 47,
            span: 11649..11650,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        position: Position {
            line: 438,
            column: 51,
            span: 11650..11654,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 438,
            column: 52,
            span: 11654..11655,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 438,
            column: 53,
            span: 11655..11656,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 438,
            column: 54,
            span: 11656..11657,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 438,
            column: 55,
            span: 11657..11658,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 439,
            column: 7,
            span: 11659..11665,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 439,
            column: 8,
            span: 11665..11666,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 439,
            column: 9,
            span: 11666..11667,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 439,
            column: 10,
            span: 11667..11668,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 439,
            column: 15,
            span: 11668..11673,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 439,
            column: 16,
            span: 11673..11674,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize 2; return 1\"",
        ),
        position: Position {
            line: 439,
            column: 37,
            span: 11674..11695,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 439,
            column: 38,
            span: 11695..11696,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 439,
            column: 40,
            span: 11697..11698,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 439,
            column: 41,
            span: 11698..11699,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 439,
            column: 44,
            span: 11700..11702,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "41",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 439,
            column: 47,
            span: 11702..11705,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 439,
            column: 48,
            span: 11705..11706,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 440,
            column: 3,
            span: 11707..11709,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 440,
            column: 5,
            span: 11710..11711,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 440,
            column: 7,
            span: 11712..11713,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 440,
            column: 8,
            span: 11713..11714,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 441,
            column: 2,
            span: 11715..11716,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 441,
            column: 4,
            span: 11717..11718,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 441,
            column: 6,
            span: 11719..11720,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 441,
            column: 7,
            span: 11720..11721,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 441,
            column: 8,
            span: 11721..11722,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 441,
            column: 9,
            span: 11722..11723,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 441,
            column: 11,
            span: 11724..11725,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 441,
            column: 13,
            span: 11725..11727,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 441,
            column: 14,
            span: 11727..11728,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 442,
            column: 2,
            span: 11729..11730,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 442,
            column: 4,
            span: 11731..11732,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 442,
            column: 6,
            span: 11733..11734,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 442,
            column: 7,
            span: 11734..11735,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        position: Position {
            line: 442,
            column: 15,
            span: 11735..11743,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 442,
            column: 16,
            span: 11743..11744,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 442,
            column: 17,
            span: 11744..11745,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 442,
            column: 18,
            span: 11745..11746,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 443,
            column: 15,
            span: 11747..11761,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 443,
            column: 16,
            span: 11761..11762,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 443,
            column: 17,
            span: 11762..11763,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 445,
            column: 7,
            span: 11815..11821,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 445,
            column: 8,
            span: 11821..11822,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 445,
            column: 13,
            span: 11822..11827,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 445,
            column: 14,
            span: 11827..11828,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        position: Position {
            line: 445,
            column: 18,
            span: 11828..11832,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 445,
            column: 19,
            span: 11832..11833,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 445,
            column: 21,
            span: 11833..11835,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 445,
            column: 22,
            span: 11835..11836,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 445,
            column: 25,
            span: 11837..11839,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 445,
            column: 27,
            span: 11839..11841,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 445,
            column: 28,
            span: 11841..11842,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 446,
            column: 4,
            span: 11843..11846,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 446,
            column: 6,
            span: 11847..11848,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 446,
            column: 9,
            span: 11849..11851,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        position: Position {
            line: 446,
            column: 15,
            span: 11852..11857,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 446,
            column: 16,
            span: 11857..11858,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 446,
            column: 17,
            span: 11858..11859,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 446,
            column: 18,
            span: 11859..11860,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 446,
            column: 21,
            span: 11861..11863,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 446,
            column: 23,
            span: 11864..11865,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 446,
            column: 24,
            span: 11865..11866,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 446,
            column: 25,
            span: 11866..11867,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 446,
            column: 26,
            span: 11867..11868,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 446,
            column: 28,
            span: 11869..11870,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 446,
            column: 32,
            span: 11871..11874,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 446,
            column: 0,
            span: 11875..11878,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 447,
            column: 15,
            span: 11879..11893,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 447,
            column: 16,
            span: 11893..11894,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 447,
            column: 17,
            span: 11894..11895,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 448,
            column: 7,
            span: 11896..11902,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 448,
            column: 8,
            span: 11902..11903,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 448,
            column: 13,
            span: 11903..11908,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 448,
            column: 14,
            span: 11908..11909,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getn",
        ),
        position: Position {
            line: 448,
            column: 18,
            span: 11909..11913,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 448,
            column: 19,
            span: 11913..11914,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 448,
            column: 21,
            span: 11914..11916,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 448,
            column: 22,
            span: 11916..11917,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 448,
            column: 25,
            span: 11918..11920,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 448,
            column: 27,
            span: 11920..11922,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 448,
            column: 31,
            span: 11923..11926,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 448,
            column: 34,
            span: 11927..11929,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 448,
            column: 35,
            span: 11929..11930,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 448,
            column: 36,
            span: 11929..11931,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 448,
            column: 37,
            span: 11931..11932,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 448,
            column: 40,
            span: 11933..11935,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 448,
            column: 42,
            span: 11936..11937,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 448,
            column: 43,
            span: 11937..11938,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 451,
            column: 7,
            span: 11992..11998,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 451,
            column: 8,
            span: 11998..11999,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 451,
            column: 9,
            span: 11999..12000,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 451,
            column: 10,
            span: 12000..12001,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 451,
            column: 15,
            span: 12001..12006,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 451,
            column: 16,
            span: 12006..12007,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"equal 2 4; return 1\"",
        ),
        position: Position {
            line: 451,
            column: 37,
            span: 12007..12028,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 451,
            column: 38,
            span: 12028..12029,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 451,
            column: 44,
            span: 12030..12035,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 451,
            column: 45,
            span: 12035..12036,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 451,
            column: 47,
            span: 12036..12038,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 451,
            column: 48,
            span: 12038..12039,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 451,
            column: 54,
            span: 12040..12045,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 451,
            column: 55,
            span: 12045..12046,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 451,
            column: 58,
            span: 12046..12049,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 451,
            column: 59,
            span: 12049..12050,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 451,
            column: 60,
            span: 12050..12051,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 452,
            column: 7,
            span: 12052..12058,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 452,
            column: 8,
            span: 12058..12059,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 452,
            column: 9,
            span: 12059..12060,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 452,
            column: 10,
            span: 12060..12061,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 452,
            column: 15,
            span: 12061..12066,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 452,
            column: 16,
            span: 12066..12067,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"equal 3 2; return 1\"",
        ),
        position: Position {
            line: 452,
            column: 37,
            span: 12067..12088,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 452,
            column: 38,
            span: 12088..12089,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        position: Position {
            line: 452,
            column: 44,
            span: 12090..12095,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 452,
            column: 45,
            span: 12095..12096,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 452,
            column: 51,
            span: 12097..12102,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 452,
            column: 52,
            span: 12102..12103,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 452,
            column: 53,
            span: 12103..12104,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 453,
            column: 7,
            span: 12105..12111,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 453,
            column: 8,
            span: 12111..12112,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 453,
            column: 9,
            span: 12112..12113,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 453,
            column: 10,
            span: 12113..12114,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 453,
            column: 15,
            span: 12114..12119,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 453,
            column: 16,
            span: 12119..12120,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"equal 2 3; return 1\"",
        ),
        position: Position {
            line: 453,
            column: 37,
            span: 12120..12141,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 453,
            column: 38,
            span: 12141..12142,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 453,
            column: 42,
            span: 12143..12146,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 453,
            column: 43,
            span: 12146..12147,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 453,
            column: 47,
            span: 12148..12151,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 453,
            column: 48,
            span: 12151..12152,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 453,
            column: 49,
            span: 12152..12153,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 454,
            column: 7,
            span: 12154..12160,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 454,
            column: 8,
            span: 12160..12161,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 454,
            column: 11,
            span: 12161..12164,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 454,
            column: 13,
            span: 12165..12166,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 454,
            column: 14,
            span: 12166..12167,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 454,
            column: 19,
            span: 12167..12172,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 454,
            column: 20,
            span: 12172..12173,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"equal 2 3; return 1\"",
        ),
        position: Position {
            line: 454,
            column: 41,
            span: 12173..12194,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 454,
            column: 42,
            span: 12194..12195,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 454,
            column: 44,
            span: 12196..12197,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 454,
            column: 45,
            span: 12197..12198,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 454,
            column: 46,
            span: 12198..12199,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 454,
            column: 48,
            span: 12200..12201,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 454,
            column: 49,
            span: 12201..12202,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 454,
            column: 50,
            span: 12202..12203,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 454,
            column: 51,
            span: 12203..12204,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 455,
            column: 7,
            span: 12205..12211,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 455,
            column: 8,
            span: 12211..12212,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 455,
            column: 11,
            span: 12212..12215,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 455,
            column: 13,
            span: 12216..12217,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 455,
            column: 14,
            span: 12217..12218,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 455,
            column: 19,
            span: 12218..12223,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 455,
            column: 20,
            span: 12223..12224,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"equal 2 3; return 1\"",
        ),
        position: Position {
            line: 455,
            column: 41,
            span: 12224..12245,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 455,
            column: 42,
            span: 12245..12246,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 455,
            column: 43,
            span: 12246..12247,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 456,
            column: 7,
            span: 12248..12254,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 456,
            column: 8,
            span: 12254..12255,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 456,
            column: 11,
            span: 12255..12258,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 456,
            column: 13,
            span: 12259..12260,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 456,
            column: 14,
            span: 12260..12261,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 456,
            column: 19,
            span: 12261..12266,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 456,
            column: 20,
            span: 12266..12267,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"equal 2 3; return 1\"",
        ),
        position: Position {
            line: 456,
            column: 41,
            span: 12267..12288,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 456,
            column: 42,
            span: 12288..12289,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 456,
            column: 44,
            span: 12289..12291,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 456,
            column: 45,
            span: 12291..12292,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 456,
            column: 46,
            span: 12292..12293,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 459,
            column: 0,
            span: 12331..12333,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 460,
            column: 8,
            span: 12336..12341,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "map",
        ),
        position: Position {
            line: 460,
            column: 12,
            span: 12342..12345,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 460,
            column: 14,
            span: 12346..12347,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 460,
            column: 16,
            span: 12348..12349,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 460,
            column: 17,
            span: 12349..12350,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 461,
            column: 8,
            span: 12353..12358,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 461,
            column: 10,
            span: 12359..12360,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 461,
            column: 12,
            span: 12361..12362,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 461,
            column: 14,
            span: 12363..12364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__eq",
        ),
        position: Position {
            line: 461,
            column: 18,
            span: 12364..12368,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 461,
            column: 20,
            span: 12369..12370,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 461,
            column: 29,
            span: 12371..12379,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 461,
            column: 31,
            span: 12380..12381,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 461,
            column: 32,
            span: 12381..12382,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 461,
            column: 33,
            span: 12382..12383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 461,
            column: 34,
            span: 12383..12384,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 461,
            column: 35,
            span: 12384..12385,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 461,
            column: 42,
            span: 12386..12392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "map",
        ),
        position: Position {
            line: 461,
            column: 46,
            span: 12393..12396,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 461,
            column: 47,
            span: 12396..12397,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 461,
            column: 48,
            span: 12397..12398,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 461,
            column: 49,
            span: 12398..12399,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 461,
            column: 52,
            span: 12400..12402,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "map",
        ),
        position: Position {
            line: 461,
            column: 56,
            span: 12403..12406,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 461,
            column: 57,
            span: 12406..12407,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 461,
            column: 58,
            span: 12407..12408,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 461,
            column: 59,
            span: 12408..12409,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 461,
            column: 63,
            span: 12410..12413,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 461,
            column: 64,
            span: 12413..12414,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 462,
            column: 8,
            span: 12417..12422,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 462,
            column: 17,
            span: 12423..12431,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 462,
            column: 19,
            span: 12432..12433,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 462,
            column: 20,
            span: 12433..12434,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 462,
            column: 21,
            span: 12434..12435,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 462,
            column: 22,
            span: 12435..12436,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 463,
            column: 10,
            span: 12441..12446,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 463,
            column: 12,
            span: 12447..12448,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 463,
            column: 14,
            span: 12449..12450,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 463,
            column: 16,
            span: 12451..12452,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 463,
            column: 17,
            span: 12452..12453,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 463,
            column: 28,
            span: 12453..12464,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 463,
            column: 29,
            span: 12464..12465,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 463,
            column: 30,
            span: 12464..12466,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 463,
            column: 31,
            span: 12466..12467,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 464,
            column: 10,
            span: 12472..12477,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 464,
            column: 11,
            span: 12477..12478,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 464,
            column: 23,
            span: 12478..12490,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 464,
            column: 24,
            span: 12490..12491,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 464,
            column: 25,
            span: 12491..12492,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 464,
            column: 26,
            span: 12492..12493,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 464,
            column: 28,
            span: 12494..12495,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 464,
            column: 29,
            span: 12495..12496,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "map",
        ),
        position: Position {
            line: 465,
            column: 8,
            span: 12501..12504,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 465,
            column: 9,
            span: 12504..12505,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 465,
            column: 10,
            span: 12505..12506,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 465,
            column: 11,
            span: 12506..12507,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 465,
            column: 13,
            span: 12508..12509,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 465,
            column: 0,
            span: 12510..12511,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 466,
            column: 11,
            span: 12516..12522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 466,
            column: 0,
            span: 12523..12524,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 467,
            column: 0,
            span: 12527..12530,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 468,
            column: 9,
            span: 12533..12539,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 468,
            column: 10,
            span: 12539..12540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 468,
            column: 11,
            span: 12540..12541,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 468,
            column: 12,
            span: 12541..12542,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 468,
            column: 14,
            span: 12541..12544,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 468,
            column: 15,
            span: 12544..12545,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 468,
            column: 18,
            span: 12546..12548,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 468,
            column: 20,
            span: 12549..12550,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 468,
            column: 21,
            span: 12550..12551,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 468,
            column: 23,
            span: 12550..12553,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 468,
            column: 24,
            span: 12553..12554,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 468,
            column: 25,
            span: 12554..12555,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 469,
            column: 9,
            span: 12558..12564,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 469,
            column: 10,
            span: 12564..12565,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 469,
            column: 11,
            span: 12565..12566,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 469,
            column: 12,
            span: 12566..12567,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 469,
            column: 14,
            span: 12566..12569,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 469,
            column: 15,
            span: 12569..12570,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 469,
            column: 18,
            span: 12571..12573,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 469,
            column: 20,
            span: 12574..12575,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 469,
            column: 21,
            span: 12575..12576,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 469,
            column: 23,
            span: 12575..12578,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 469,
            column: 24,
            span: 12578..12579,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 469,
            column: 25,
            span: 12579..12580,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 470,
            column: 9,
            span: 12583..12589,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 470,
            column: 10,
            span: 12589..12590,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 470,
            column: 11,
            span: 12590..12591,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 470,
            column: 12,
            span: 12591..12592,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 470,
            column: 17,
            span: 12592..12597,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 470,
            column: 18,
            span: 12597..12598,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"equal 2 3; return 1\"",
        ),
        position: Position {
            line: 470,
            column: 39,
            span: 12598..12619,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 470,
            column: 40,
            span: 12619..12620,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 470,
            column: 42,
            span: 12621..12622,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 470,
            column: 43,
            span: 12622..12623,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 470,
            column: 45,
            span: 12622..12625,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 470,
            column: 46,
            span: 12625..12626,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 470,
            column: 47,
            span: 12626..12627,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 470,
            column: 49,
            span: 12628..12629,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 470,
            column: 50,
            span: 12629..12630,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 470,
            column: 52,
            span: 12629..12632,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 470,
            column: 53,
            span: 12632..12633,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 470,
            column: 54,
            span: 12633..12634,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 470,
            column: 55,
            span: 12634..12635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 471,
            column: 9,
            span: 12638..12644,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 471,
            column: 10,
            span: 12644..12645,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 471,
            column: 13,
            span: 12645..12648,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 471,
            column: 15,
            span: 12649..12650,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 471,
            column: 16,
            span: 12650..12651,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 471,
            column: 21,
            span: 12651..12656,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 471,
            column: 22,
            span: 12656..12657,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"equal 2 3; return 1\"",
        ),
        position: Position {
            line: 471,
            column: 43,
            span: 12657..12678,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 471,
            column: 44,
            span: 12678..12679,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 471,
            column: 46,
            span: 12680..12681,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 471,
            column: 47,
            span: 12681..12682,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 471,
            column: 49,
            span: 12681..12684,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 471,
            column: 50,
            span: 12684..12685,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 471,
            column: 51,
            span: 12685..12686,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 471,
            column: 53,
            span: 12687..12688,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 471,
            column: 54,
            span: 12688..12689,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 471,
            column: 56,
            span: 12688..12691,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 471,
            column: 57,
            span: 12691..12692,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 471,
            column: 58,
            span: 12692..12693,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 471,
            column: 59,
            span: 12693..12694,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 472,
            column: 4,
            span: 12697..12698,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 472,
            column: 5,
            span: 12698..12699,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__eq",
        ),
        position: Position {
            line: 472,
            column: 9,
            span: 12699..12703,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 472,
            column: 11,
            span: 12704..12705,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 472,
            column: 0,
            span: 12706..12709,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 473,
            column: 9,
            span: 12712..12718,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 473,
            column: 10,
            span: 12718..12719,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 473,
            column: 11,
            span: 12719..12720,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 473,
            column: 12,
            span: 12720..12721,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 473,
            column: 14,
            span: 12720..12723,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 473,
            column: 15,
            span: 12723..12724,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 473,
            column: 18,
            span: 12725..12727,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 473,
            column: 20,
            span: 12728..12729,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 473,
            column: 21,
            span: 12729..12730,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 473,
            column: 23,
            span: 12729..12732,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 473,
            column: 24,
            span: 12732..12733,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 473,
            column: 25,
            span: 12733..12734,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 474,
            column: 0,
            span: 12735..12738,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 476,
            column: 6,
            span: 12740..12745,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 476,
            column: 9,
            span: 12745..12748,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 481,
            column: 3,
            span: 12826..12828,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 482,
            column: 8,
            span: 12861..12866,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 482,
            column: 10,
            span: 12867..12868,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 482,
            column: 12,
            span: 12869..12870,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 482,
            column: 14,
            span: 12871..12872,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 482,
            column: 15,
            span: 12872..12873,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 483,
            column: 6,
            span: 12876..12879,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 483,
            column: 8,
            span: 12880..12881,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 483,
            column: 9,
            span: 12881..12882,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 483,
            column: 10,
            span: 12881..12883,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 483,
            column: 11,
            span: 12883..12884,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 483,
            column: 13,
            span: 12883..12886,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 483,
            column: 0,
            span: 12887..12889,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 484,
            column: 6,
            span: 12894..12895,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 484,
            column: 7,
            span: 12895..12896,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 484,
            column: 8,
            span: 12896..12897,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 484,
            column: 9,
            span: 12897..12898,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 484,
            column: 11,
            span: 12899..12900,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 484,
            column: 13,
            span: 12901..12902,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 484,
            column: 14,
            span: 12902..12903,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 484,
            column: 25,
            span: 12903..12914,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 484,
            column: 26,
            span: 12914..12915,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 484,
            column: 27,
            span: 12915..12916,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 484,
            column: 28,
            span: 12916..12917,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 485,
            column: 0,
            span: 12947..12950,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 486,
            column: 6,
            span: 12953..12956,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 486,
            column: 8,
            span: 12957..12958,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 486,
            column: 9,
            span: 12958..12959,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 486,
            column: 10,
            span: 12958..12960,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 486,
            column: 11,
            span: 12960..12961,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 486,
            column: 13,
            span: 12960..12963,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 486,
            column: 14,
            span: 12963..12964,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 486,
            column: 15,
            span: 12963..12965,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 486,
            column: 18,
            span: 12966..12968,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 487,
            column: 10,
            span: 13021..13026,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 487,
            column: 11,
            span: 13026..13027,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 487,
            column: 23,
            span: 13027..13039,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 487,
            column: 24,
            span: 13039..13040,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 487,
            column: 25,
            span: 13040..13041,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 487,
            column: 26,
            span: 13041..13042,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 487,
            column: 27,
            span: 13042..13043,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 487,
            column: 28,
            span: 13043..13044,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 487,
            column: 29,
            span: 13044..13045,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 487,
            column: 31,
            span: 13046..13047,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        position: Position {
            line: 487,
            column: 35,
            span: 13047..13051,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 487,
            column: 37,
            span: 13052..13053,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 487,
            column: 46,
            span: 13054..13062,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 487,
            column: 48,
            span: 13063..13064,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 487,
            column: 49,
            span: 13064..13065,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 487,
            column: 50,
            span: 13065..13066,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 487,
            column: 56,
            span: 13067..13072,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 487,
            column: 57,
            span: 13072..13073,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error inside gc\"",
        ),
        position: Position {
            line: 487,
            column: 74,
            span: 13073..13090,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 487,
            column: 75,
            span: 13090..13091,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 487,
            column: 79,
            span: 13092..13095,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 487,
            column: 80,
            span: 13095..13096,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 487,
            column: 81,
            span: 13096..13097,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 488,
            column: 0,
            span: 13100..13103,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 489,
            column: 6,
            span: 13106..13109,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 489,
            column: 8,
            span: 13110..13111,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 489,
            column: 9,
            span: 13111..13112,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 489,
            column: 10,
            span: 13111..13113,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 489,
            column: 11,
            span: 13113..13114,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 489,
            column: 13,
            span: 13113..13116,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 489,
            column: 14,
            span: 13116..13117,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 489,
            column: 15,
            span: 13116..13118,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 489,
            column: 18,
            span: 13119..13121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 490,
            column: 10,
            span: 13187..13192,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 490,
            column: 11,
            span: 13192..13193,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 490,
            column: 23,
            span: 13193..13205,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 490,
            column: 24,
            span: 13205..13206,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 490,
            column: 25,
            span: 13206..13207,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 490,
            column: 26,
            span: 13207..13208,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 490,
            column: 27,
            span: 13208..13209,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 490,
            column: 28,
            span: 13209..13210,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 490,
            column: 29,
            span: 13210..13211,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 490,
            column: 31,
            span: 13212..13213,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        position: Position {
            line: 490,
            column: 35,
            span: 13213..13217,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 490,
            column: 37,
            span: 13218..13219,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 490,
            column: 46,
            span: 13220..13228,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 490,
            column: 48,
            span: 13229..13230,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 490,
            column: 49,
            span: 13230..13231,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 490,
            column: 50,
            span: 13231..13232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        position: Position {
            line: 490,
            column: 61,
            span: 13233..13243,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 490,
            column: 62,
            span: 13243..13244,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A=A+1\"",
        ),
        position: Position {
            line: 490,
            column: 69,
            span: 13244..13251,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 490,
            column: 70,
            span: 13251..13252,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 490,
            column: 71,
            span: 13252..13253,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 490,
            column: 72,
            span: 13253..13254,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 490,
            column: 76,
            span: 13255..13258,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 490,
            column: 77,
            span: 13258..13259,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 490,
            column: 78,
            span: 13259..13260,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 491,
            column: 0,
            span: 13263..13266,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 492,
            column: 5,
            span: 13269..13271,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 492,
            column: 6,
            span: 13271..13272,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 492,
            column: 7,
            span: 13272..13273,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 492,
            column: 9,
            span: 13274..13275,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 492,
            column: 0,
            span: 13275..13277,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 493,
            column: 4,
            span: 13280..13281,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 493,
            column: 6,
            span: 13282..13283,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 493,
            column: 0,
            span: 13283..13285,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 494,
            column: 8,
            span: 13288..13293,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 494,
            column: 10,
            span: 13293..13295,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 494,
            column: 0,
            span: 13296..13298,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 495,
            column: 5,
            span: 13301..13303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        position: Position {
            line: 495,
            column: 12,
            span: 13304..13310,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 495,
            column: 13,
            span: 13310..13311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 495,
            column: 27,
            span: 13311..13325,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 495,
            column: 28,
            span: 13325..13326,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 495,
            column: 37,
            span: 13327..13335,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 495,
            column: 39,
            span: 13336..13337,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 495,
            column: 40,
            span: 13337..13338,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 495,
            column: 41,
            span: 13338..13339,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 495,
            column: 43,
            span: 13340..13341,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 495,
            column: 44,
            span: 13341..13342,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 495,
            column: 45,
            span: 13342..13343,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 495,
            column: 46,
            span: 13343..13344,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 495,
            column: 47,
            span: 13343..13345,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 495,
            column: 51,
            span: 13346..13349,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 495,
            column: 52,
            span: 13349..13350,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 495,
            column: 0,
            span: 13351..13355,
        },
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        position: Position {
            line: 496,
            column: 10,
            span: 13360..13365,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 497,
            column: 0,
            span: 13396..13399,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 498,
            column: 0,
            span: 13402..13405,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 499,
            column: 9,
            span: 13408..13414,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 499,
            column: 10,
            span: 13414..13415,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 499,
            column: 11,
            span: 13415..13416,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 499,
            column: 14,
            span: 13417..13419,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 499,
            column: 17,
            span: 13419..13422,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 499,
            column: 18,
            span: 13422..13423,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 500,
            column: 9,
            span: 13447..13453,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 500,
            column: 10,
            span: 13453..13454,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 500,
            column: 11,
            span: 13454..13455,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 500,
            column: 14,
            span: 13456..13458,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 500,
            column: 17,
            span: 13458..13461,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 500,
            column: 18,
            span: 13461..13462,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 501,
            column: 0,
            span: 13496..13499,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 504,
            column: 0,
            span: 13600..13602,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 505,
            column: 8,
            span: 13605..13610,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 505,
            column: 10,
            span: 13611..13612,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 505,
            column: 12,
            span: 13613..13614,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 505,
            column: 14,
            span: 13615..13616,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 505,
            column: 15,
            span: 13616..13617,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 505,
            column: 16,
            span: 13617..13618,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 505,
            column: 22,
            span: 13619..13624,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 505,
            column: 26,
            span: 13625..13628,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 505,
            column: 28,
            span: 13629..13630,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 505,
            column: 0,
            span: 13630..13633,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 506,
            column: 6,
            span: 13636..13639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 506,
            column: 8,
            span: 13640..13641,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 506,
            column: 9,
            span: 13641..13642,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 506,
            column: 10,
            span: 13641..13643,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 506,
            column: 11,
            span: 13643..13644,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 506,
            column: 14,
            span: 13644..13647,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 506,
            column: 17,
            span: 13648..13650,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 506,
            column: 19,
            span: 13651..13652,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 506,
            column: 20,
            span: 13652..13653,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 506,
            column: 21,
            span: 13653..13654,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 506,
            column: 22,
            span: 13654..13655,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 506,
            column: 24,
            span: 13656..13657,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 506,
            column: 26,
            span: 13658..13659,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 506,
            column: 27,
            span: 13659..13660,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pushuserdata",
        ),
        position: Position {
            line: 506,
            column: 39,
            span: 13660..13672,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 506,
            column: 40,
            span: 13672..13673,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 506,
            column: 41,
            span: 13673..13674,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 506,
            column: 42,
            span: 13674..13675,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 506,
            column: 0,
            span: 13676..13679,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 507,
            column: 6,
            span: 13682..13685,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 507,
            column: 8,
            span: 13686..13687,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 507,
            column: 9,
            span: 13687..13688,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 507,
            column: 10,
            span: 13687..13689,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 507,
            column: 11,
            span: 13689..13690,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 507,
            column: 14,
            span: 13690..13693,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 507,
            column: 17,
            span: 13694..13696,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 507,
            column: 24,
            span: 13697..13703,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 507,
            column: 25,
            span: 13703..13704,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 507,
            column: 26,
            span: 13704..13705,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 507,
            column: 27,
            span: 13705..13706,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        position: Position {
            line: 507,
            column: 35,
            span: 13706..13714,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 507,
            column: 36,
            span: 13714..13715,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 507,
            column: 37,
            span: 13715..13716,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 507,
            column: 38,
            span: 13716..13717,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 507,
            column: 39,
            span: 13717..13718,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 507,
            column: 40,
            span: 13718..13719,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 507,
            column: 41,
            span: 13719..13720,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 507,
            column: 44,
            span: 13721..13723,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 507,
            column: 46,
            span: 13724..13725,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 507,
            column: 47,
            span: 13725..13726,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 507,
            column: 0,
            span: 13727..13730,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 508,
            column: 6,
            span: 13733..13736,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 508,
            column: 8,
            span: 13737..13738,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 508,
            column: 9,
            span: 13738..13739,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 508,
            column: 10,
            span: 13738..13740,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 508,
            column: 11,
            span: 13740..13741,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 508,
            column: 14,
            span: 13741..13744,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 508,
            column: 17,
            span: 13745..13747,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 508,
            column: 24,
            span: 13748..13754,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 508,
            column: 25,
            span: 13754..13755,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 508,
            column: 26,
            span: 13755..13756,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 508,
            column: 27,
            span: 13756..13757,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pushuserdata",
        ),
        position: Position {
            line: 508,
            column: 39,
            span: 13757..13769,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 508,
            column: 40,
            span: 13769..13770,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 508,
            column: 41,
            span: 13770..13771,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 508,
            column: 42,
            span: 13771..13772,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 508,
            column: 45,
            span: 13773..13775,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 508,
            column: 47,
            span: 13776..13777,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 508,
            column: 48,
            span: 13777..13778,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 508,
            column: 49,
            span: 13778..13779,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 508,
            column: 50,
            span: 13779..13780,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 508,
            column: 51,
            span: 13780..13781,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 508,
            column: 0,
            span: 13782..13785,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 509,
            column: 6,
            span: 13788..13791,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 509,
            column: 8,
            span: 13792..13793,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 509,
            column: 9,
            span: 13793..13794,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 509,
            column: 10,
            span: 13793..13795,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 509,
            column: 11,
            span: 13795..13796,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 509,
            column: 14,
            span: 13796..13799,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 509,
            column: 17,
            span: 13800..13802,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 509,
            column: 19,
            span: 13803..13804,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 509,
            column: 20,
            span: 13804..13805,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 509,
            column: 21,
            span: 13805..13806,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 509,
            column: 22,
            span: 13806..13807,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 509,
            column: 23,
            span: 13807..13808,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 509,
            column: 24,
            span: 13808..13809,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 509,
            column: 25,
            span: 13809..13810,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 509,
            column: 27,
            span: 13811..13812,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 509,
            column: 29,
            span: 13813..13814,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 509,
            column: 0,
            span: 13815..13818,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 510,
            column: 6,
            span: 13821..13824,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 510,
            column: 8,
            span: 13825..13826,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 510,
            column: 9,
            span: 13826..13827,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 510,
            column: 10,
            span: 13826..13828,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 510,
            column: 11,
            span: 13828..13829,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 510,
            column: 14,
            span: 13829..13832,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 510,
            column: 17,
            span: 13833..13835,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 510,
            column: 19,
            span: 13836..13837,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 510,
            column: 20,
            span: 13837..13838,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 510,
            column: 21,
            span: 13838..13839,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 510,
            column: 22,
            span: 13839..13840,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pushuserdata",
        ),
        position: Position {
            line: 510,
            column: 34,
            span: 13840..13852,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 510,
            column: 35,
            span: 13852..13853,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 510,
            column: 36,
            span: 13853..13854,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 510,
            column: 37,
            span: 13854..13855,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 510,
            column: 38,
            span: 13855..13856,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 510,
            column: 40,
            span: 13857..13858,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 510,
            column: 42,
            span: 13859..13860,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 510,
            column: 0,
            span: 13861..13864,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 511,
            column: 9,
            span: 13867..13873,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 511,
            column: 10,
            span: 13873..13874,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 511,
            column: 14,
            span: 13874..13878,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 511,
            column: 15,
            span: 13878..13879,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        position: Position {
            line: 511,
            column: 23,
            span: 13879..13887,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 511,
            column: 24,
            span: 13887..13888,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 511,
            column: 25,
            span: 13888..13889,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 511,
            column: 26,
            span: 13889..13890,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 511,
            column: 27,
            span: 13889..13891,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 511,
            column: 28,
            span: 13891..13892,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 511,
            column: 29,
            span: 13892..13893,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 511,
            column: 30,
            span: 13893..13894,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 511,
            column: 33,
            span: 13895..13897,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        position: Position {
            line: 511,
            column: 42,
            span: 13898..13906,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 511,
            column: 43,
            span: 13906..13907,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 512,
            column: 0,
            span: 13908..13911,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 517,
            column: 2,
            span: 14015..14016,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 517,
            column: 3,
            span: 14016..14017,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closestate",
        ),
        position: Position {
            line: 517,
            column: 13,
            span: 14017..14027,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 517,
            column: 14,
            span: 14027..14028,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 517,
            column: 15,
            span: 14028..14029,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 517,
            column: 16,
            span: 14029..14030,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newstate",
        ),
        position: Position {
            line: 517,
            column: 24,
            span: 14030..14038,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 517,
            column: 25,
            span: 14038..14039,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 517,
            column: 26,
            span: 14039..14040,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 517,
            column: 27,
            span: 14040..14041,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 517,
            column: 28,
            span: 14041..14042,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 518,
            column: 3,
            span: 14043..14045,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 518,
            column: 5,
            span: 14046..14047,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 518,
            column: 7,
            span: 14048..14049,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 518,
            column: 8,
            span: 14049..14050,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newstate",
        ),
        position: Position {
            line: 518,
            column: 16,
            span: 14050..14058,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 518,
            column: 17,
            span: 14058..14059,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 518,
            column: 18,
            span: 14059..14060,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 519,
            column: 7,
            span: 14061..14067,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 519,
            column: 8,
            span: 14067..14068,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 519,
            column: 10,
            span: 14068..14070,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 519,
            column: 11,
            span: 14070..14071,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 520,
            column: 7,
            span: 14072..14078,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 520,
            column: 8,
            span: 14078..14079,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 520,
            column: 12,
            span: 14079..14083,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 520,
            column: 13,
            span: 14083..14084,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 520,
            column: 14,
            span: 14084..14085,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 520,
            column: 15,
            span: 14085..14086,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        position: Position {
            line: 520,
            column: 23,
            span: 14086..14094,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 520,
            column: 24,
            span: 14094..14095,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 520,
            column: 26,
            span: 14095..14097,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 520,
            column: 27,
            span: 14097..14098,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function f () return 'alo', 3 end; f()\"",
        ),
        position: Position {
            line: 520,
            column: 68,
            span: 14099..14139,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 520,
            column: 69,
            span: 14139..14140,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 520,
            column: 70,
            span: 14140..14141,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 520,
            column: 71,
            span: 14141..14142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 520,
            column: 72,
            span: 14142..14143,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 520,
            column: 75,
            span: 14144..14146,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 520,
            column: 77,
            span: 14146..14148,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 520,
            column: 78,
            span: 14148..14149,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 522,
            column: 2,
            span: 14151..14152,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 522,
            column: 3,
            span: 14152..14153,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 522,
            column: 5,
            span: 14154..14155,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 522,
            column: 7,
            span: 14156..14157,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 522,
            column: 9,
            span: 14158..14159,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 522,
            column: 10,
            span: 14159..14160,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        position: Position {
            line: 522,
            column: 18,
            span: 14160..14168,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 522,
            column: 19,
            span: 14168..14169,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 522,
            column: 21,
            span: 14169..14171,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 522,
            column: 22,
            span: 14171..14172,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return f()\"",
        ),
        position: Position {
            line: 522,
            column: 35,
            span: 14173..14185,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 522,
            column: 36,
            span: 14185..14186,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 523,
            column: 7,
            span: 14187..14193,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 523,
            column: 8,
            span: 14193..14194,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 523,
            column: 9,
            span: 14194..14195,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 523,
            column: 12,
            span: 14196..14198,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        position: Position {
            line: 523,
            column: 18,
            span: 14199..14204,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 523,
            column: 22,
            span: 14205..14208,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 523,
            column: 24,
            span: 14209..14210,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 523,
            column: 27,
            span: 14211..14213,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'3'",
        ),
        position: Position {
            line: 523,
            column: 31,
            span: 14214..14217,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 523,
            column: 32,
            span: 14217..14218,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 525,
            column: 2,
            span: 14220..14221,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 525,
            column: 3,
            span: 14221..14222,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        position: Position {
            line: 525,
            column: 11,
            span: 14222..14230,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 525,
            column: 12,
            span: 14230..14231,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 525,
            column: 14,
            span: 14231..14233,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 525,
            column: 15,
            span: 14233..14234,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"_ERRORMESSAGE = nil\"",
        ),
        position: Position {
            line: 525,
            column: 37,
            span: 14235..14256,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 525,
            column: 38,
            span: 14256..14257,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 527,
            column: 2,
            span: 14289..14290,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 527,
            column: 3,
            span: 14290..14291,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 527,
            column: 5,
            span: 14292..14293,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 527,
            column: 7,
            span: 14294..14295,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 527,
            column: 9,
            span: 14296..14297,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 527,
            column: 10,
            span: 14297..14298,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        position: Position {
            line: 527,
            column: 18,
            span: 14298..14306,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 527,
            column: 19,
            span: 14306..14307,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 527,
            column: 21,
            span: 14307..14309,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 527,
            column: 22,
            span: 14309..14310,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return sin(1)\"",
        ),
        position: Position {
            line: 527,
            column: 38,
            span: 14311..14326,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 527,
            column: 39,
            span: 14326..14327,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 528,
            column: 7,
            span: 14328..14334,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 528,
            column: 8,
            span: 14334..14335,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 528,
            column: 9,
            span: 14335..14336,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 528,
            column: 12,
            span: 14337..14339,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 528,
            column: 16,
            span: 14340..14343,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 528,
            column: 20,
            span: 14344..14347,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 528,
            column: 22,
            span: 14348..14349,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 528,
            column: 25,
            span: 14350..14352,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 528,
            column: 27,
            span: 14352..14354,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 528,
            column: 28,
            span: 14354..14355,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 531,
            column: 2,
            span: 14405..14406,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 531,
            column: 3,
            span: 14406..14407,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 531,
            column: 5,
            span: 14408..14409,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 531,
            column: 6,
            span: 14409..14410,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 531,
            column: 8,
            span: 14411..14412,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 531,
            column: 10,
            span: 14413..14414,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 531,
            column: 12,
            span: 14415..14416,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 531,
            column: 13,
            span: 14416..14417,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        position: Position {
            line: 531,
            column: 21,
            span: 14417..14425,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 531,
            column: 22,
            span: 14425..14426,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 531,
            column: 24,
            span: 14426..14428,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 531,
            column: 25,
            span: 14428..14429,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return a+\"",
        ),
        position: Position {
            line: 531,
            column: 37,
            span: 14430..14441,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 531,
            column: 38,
            span: 14441..14442,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 532,
            column: 7,
            span: 14443..14449,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 532,
            column: 8,
            span: 14449..14450,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 532,
            column: 9,
            span: 14450..14451,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 532,
            column: 12,
            span: 14452..14454,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 532,
            column: 16,
            span: 14455..14458,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 532,
            column: 20,
            span: 14459..14462,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 532,
            column: 22,
            span: 14463..14464,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 532,
            column: 25,
            span: 14465..14467,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 532,
            column: 27,
            span: 14467..14469,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 532,
            column: 31,
            span: 14470..14473,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 532,
            column: 36,
            span: 14474..14478,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 532,
            column: 37,
            span: 14478..14479,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 532,
            column: 38,
            span: 14479..14480,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 532,
            column: 39,
            span: 14480..14481,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 532,
            column: 42,
            span: 14482..14484,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        position: Position {
            line: 532,
            column: 51,
            span: 14485..14493,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 532,
            column: 52,
            span: 14493..14494,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 534,
            column: 2,
            span: 14519..14520,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 534,
            column: 3,
            span: 14520..14521,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        position: Position {
            line: 534,
            column: 10,
            span: 14521..14528,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 534,
            column: 11,
            span: 14528..14529,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 534,
            column: 13,
            span: 14529..14531,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 534,
            column: 14,
            span: 14531..14532,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 535,
            column: 2,
            span: 14533..14534,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 535,
            column: 3,
            span: 14534..14535,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 535,
            column: 5,
            span: 14536..14537,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 535,
            column: 7,
            span: 14538..14539,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 535,
            column: 9,
            span: 14540..14541,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 535,
            column: 10,
            span: 14541..14542,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        position: Position {
            line: 535,
            column: 18,
            span: 14542..14550,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 535,
            column: 19,
            span: 14550..14551,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 535,
            column: 21,
            span: 14551..14553,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 535,
            column: 22,
            span: 14553..14554,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  a = strlibopen()\n  a = packageopen()\n  a = baselibopen(); assert(a == _G and require(\"_G\") == a)\n  a = iolibopen(); assert(type(a.read) == \"function\")\n  assert(require(\"io\") == a)\n  a = tablibopen(); assert(type(a.insert) == \"function\")\n  a = dblibopen(); assert(type(a.getlocal) == \"function\")\n  a = mathlibopen(); assert(type(a.sin) == \"function\")\n  return string.sub('okinama', 1, 2)\n]]",
        ),
        position: Position {
            line: 545,
            column: 3,
            span: 14555..14949,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 545,
            column: 4,
            span: 14949..14950,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 546,
            column: 7,
            span: 14951..14957,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 546,
            column: 8,
            span: 14957..14958,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 546,
            column: 9,
            span: 14958..14959,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 546,
            column: 12,
            span: 14960..14962,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ok\"",
        ),
        position: Position {
            line: 546,
            column: 17,
            span: 14963..14967,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 546,
            column: 18,
            span: 14967..14968,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 548,
            column: 2,
            span: 14970..14971,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 548,
            column: 3,
            span: 14971..14972,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closestate",
        ),
        position: Position {
            line: 548,
            column: 13,
            span: 14972..14982,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 548,
            column: 14,
            span: 14982..14983,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 548,
            column: 16,
            span: 14983..14985,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 548,
            column: 17,
            span: 14985..14986,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 548,
            column: 18,
            span: 14986..14987,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 550,
            column: 3,
            span: 14989..14991,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 550,
            column: 5,
            span: 14992..14993,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 550,
            column: 7,
            span: 14994..14995,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 550,
            column: 8,
            span: 14995..14996,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newstate",
        ),
        position: Position {
            line: 550,
            column: 16,
            span: 14996..15004,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 550,
            column: 17,
            span: 15004..15005,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 550,
            column: 18,
            span: 15005..15006,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 551,
            column: 2,
            span: 15007..15008,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 551,
            column: 3,
            span: 15008..15009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        position: Position {
            line: 551,
            column: 10,
            span: 15009..15016,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 551,
            column: 11,
            span: 15016..15017,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 551,
            column: 13,
            span: 15017..15019,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 551,
            column: 14,
            span: 15019..15020,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 552,
            column: 2,
            span: 15021..15022,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 552,
            column: 3,
            span: 15022..15023,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        position: Position {
            line: 552,
            column: 11,
            span: 15023..15031,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 552,
            column: 12,
            span: 15031..15032,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 552,
            column: 14,
            span: 15032..15034,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 552,
            column: 15,
            span: 15034..15035,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = {}\"",
        ),
        position: Position {
            line: 552,
            column: 24,
            span: 15036..15044,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 552,
            column: 25,
            span: 15044..15045,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 553,
            column: 2,
            span: 15046..15047,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 553,
            column: 3,
            span: 15047..15048,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 553,
            column: 8,
            span: 15048..15053,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 553,
            column: 9,
            span: 15053..15054,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 553,
            column: 11,
            span: 15054..15056,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 553,
            column: 12,
            span: 15056..15057,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[pushstring a; gettable G; pushstring x; pushnum 1;\n             settable -3]]",
        ),
        position: Position {
            line: 554,
            column: 27,
            span: 15058..15137,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 554,
            column: 28,
            span: 15137..15138,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 555,
            column: 7,
            span: 15139..15145,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 555,
            column: 8,
            span: 15145..15146,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 555,
            column: 9,
            span: 15146..15147,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 555,
            column: 10,
            span: 15147..15148,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        position: Position {
            line: 555,
            column: 18,
            span: 15148..15156,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 555,
            column: 19,
            span: 15156..15157,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 555,
            column: 21,
            span: 15157..15159,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 555,
            column: 22,
            span: 15159..15160,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return a.x\"",
        ),
        position: Position {
            line: 555,
            column: 35,
            span: 15161..15173,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 555,
            column: 36,
            span: 15173..15174,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 555,
            column: 39,
            span: 15175..15177,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\"",
        ),
        position: Position {
            line: 555,
            column: 43,
            span: 15178..15181,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 555,
            column: 44,
            span: 15181..15182,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 557,
            column: 2,
            span: 15184..15185,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 557,
            column: 3,
            span: 15185..15186,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closestate",
        ),
        position: Position {
            line: 557,
            column: 13,
            span: 15186..15196,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 557,
            column: 14,
            span: 15196..15197,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 557,
            column: 16,
            span: 15197..15199,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 557,
            column: 17,
            span: 15199..15200,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 559,
            column: 3,
            span: 15202..15204,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 559,
            column: 5,
            span: 15205..15206,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 559,
            column: 0,
            span: 15207..15210,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 561,
            column: 6,
            span: 15212..15217,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 561,
            column: 7,
            span: 15217..15218,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 561,
            column: 10,
            span: 15218..15221,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 561,
            column: 11,
            span: 15221..15222,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 566,
            column: 15,
            span: 15397..15411,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 566,
            column: 16,
            span: 15411..15412,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 566,
            column: 17,
            span: 15412..15413,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 567,
            column: 2,
            span: 15414..15415,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 567,
            column: 3,
            span: 15415..15416,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 567,
            column: 11,
            span: 15416..15424,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 567,
            column: 12,
            span: 15424..15425,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 567,
            column: 13,
            span: 15425..15426,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 567,
            column: 14,
            span: 15426..15427,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 567,
            column: 22,
            span: 15427..15435,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 567,
            column: 23,
            span: 15435..15436,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 567,
            column: 24,
            span: 15436..15437,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 567,
            column: 25,
            span: 15437..15438,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 567,
            column: 29,
            span: 15437..15442,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 567,
            column: 30,
            span: 15442..15443,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 568,
            column: 7,
            span: 15476..15482,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 568,
            column: 8,
            span: 15482..15483,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 568,
            column: 11,
            span: 15483..15486,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 568,
            column: 17,
            span: 15487..15492,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 568,
            column: 18,
            span: 15492..15493,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        position: Position {
            line: 568,
            column: 28,
            span: 15493..15503,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a={}; for i=1,100000 do a[i]=i end\"",
        ),
        position: Position {
            line: 568,
            column: 70,
            span: 15503..15545,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 568,
            column: 71,
            span: 15545..15546,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 568,
            column: 72,
            span: 15546..15547,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 569,
            column: 2,
            span: 15548..15549,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 569,
            column: 3,
            span: 15549..15550,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 569,
            column: 11,
            span: 15550..15558,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 569,
            column: 12,
            span: 15558..15559,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000000000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 569,
            column: 22,
            span: 15558..15569,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 569,
            column: 23,
            span: 15569..15570,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 572,
            column: 6,
            span: 15604..15609,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 572,
            column: 15,
            span: 15610..15618,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        position: Position {
            line: 572,
            column: 21,
            span: 15619..15624,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 572,
            column: 22,
            span: 15624..15625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 572,
            column: 23,
            span: 15625..15626,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 572,
            column: 24,
            span: 15626..15627,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 572,
            column: 27,
            span: 15628..15630,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 572,
            column: 29,
            span: 15631..15632,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 572,
            column: 30,
            span: 15632..15633,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 572,
            column: 31,
            span: 15632..15634,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 572,
            column: 36,
            span: 15635..15639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        position: Position {
            line: 572,
            column: 42,
            span: 15640..15645,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 572,
            column: 43,
            span: 15645..15646,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 572,
            column: 44,
            span: 15646..15647,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 572,
            column: 45,
            span: 15647..15648,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 572,
            column: 46,
            span: 15647..15649,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 572,
            column: 47,
            span: 15649..15650,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 572,
            column: 51,
            span: 15651..15654,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 572,
            column: 0,
            span: 15655..15658,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 577,
            column: 9,
            span: 15857..15865,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 577,
            column: 18,
            span: 15866..15874,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 577,
            column: 20,
            span: 15875..15876,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 577,
            column: 21,
            span: 15876..15877,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 577,
            column: 22,
            span: 15877..15878,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 577,
            column: 24,
            span: 15879..15880,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 577,
            column: 25,
            span: 15880..15881,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 578,
            column: 17,
            span: 15884..15898,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 578,
            column: 18,
            span: 15898..15899,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 578,
            column: 19,
            span: 15899..15900,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        position: Position {
            line: 579,
            column: 8,
            span: 15903..15908,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 579,
            column: 9,
            span: 15908..15909,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 579,
            column: 11,
            span: 15908..15911,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 579,
            column: 12,
            span: 15911..15912,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 580,
            column: 8,
            span: 15947..15952,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "M",
        ),
        position: Position {
            line: 580,
            column: 10,
            span: 15953..15954,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 580,
            column: 12,
            span: 15955..15956,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 580,
            column: 14,
            span: 15957..15958,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 580,
            column: 15,
            span: 15958..15959,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 580,
            column: 23,
            span: 15959..15967,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 580,
            column: 24,
            span: 15967..15968,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 580,
            column: 25,
            span: 15968..15969,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 581,
            column: 8,
            span: 15972..15977,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldM",
        ),
        position: Position {
            line: 581,
            column: 13,
            span: 15978..15982,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 581,
            column: 15,
            span: 15983..15984,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "M",
        ),
        position: Position {
            line: 581,
            column: 0,
            span: 15985..15986,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 582,
            column: 8,
            span: 15989..15994,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 582,
            column: 10,
            span: 15995..15996,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 582,
            column: 11,
            span: 15996..15997,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 582,
            column: 12,
            span: 15997..15998,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 582,
            column: 14,
            span: 15999..16000,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 582,
            column: 0,
            span: 16001..16004,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 583,
            column: 8,
            span: 16007..16012,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 583,
            column: 10,
            span: 16012..16014,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 583,
            column: 0,
            span: 16015..16017,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "M",
        ),
        position: Position {
            line: 584,
            column: 6,
            span: 16022..16023,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 584,
            column: 8,
            span: 16024..16025,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "M",
        ),
        position: Position {
            line: 584,
            column: 10,
            span: 16026..16027,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 584,
            column: 11,
            span: 16027..16028,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 584,
            column: 12,
            span: 16027..16029,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 585,
            column: 6,
            span: 16076..16077,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 585,
            column: 7,
            span: 16077..16078,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 585,
            column: 15,
            span: 16078..16086,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 585,
            column: 16,
            span: 16086..16087,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "M",
        ),
        position: Position {
            line: 585,
            column: 17,
            span: 16087..16088,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 585,
            column: 18,
            span: 16088..16089,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 586,
            column: 6,
            span: 16094..16095,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 586,
            column: 7,
            span: 16095..16096,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 586,
            column: 9,
            span: 16097..16098,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 586,
            column: 11,
            span: 16099..16100,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 586,
            column: 17,
            span: 16101..16106,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 586,
            column: 18,
            span: 16106..16107,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 586,
            column: 19,
            span: 16107..16108,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 586,
            column: 20,
            span: 16108..16109,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 587,
            column: 7,
            span: 16114..16116,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 587,
            column: 9,
            span: 16117..16118,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 587,
            column: 13,
            span: 16119..16122,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 587,
            column: 15,
            span: 16123..16124,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 587,
            column: 20,
            span: 16125..16129,
        },
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        position: Position {
            line: 587,
            column: 26,
            span: 16130..16135,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 587,
            column: 30,
            span: 16136..16139,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 588,
            column: 19,
            span: 16178..16192,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 588,
            column: 20,
            span: 16192..16193,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 588,
            column: 21,
            span: 16193..16194,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 589,
            column: 7,
            span: 16199..16201,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 589,
            column: 11,
            span: 16202..16205,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 589,
            column: 13,
            span: 16206..16207,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 589,
            column: 17,
            span: 16208..16211,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 589,
            column: 21,
            span: 16212..16215,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 589,
            column: 28,
            span: 16216..16222,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 589,
            column: 29,
            span: 16222..16223,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 589,
            column: 33,
            span: 16223..16227,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 589,
            column: 34,
            span: 16227..16228,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 589,
            column: 35,
            span: 16228..16229,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 589,
            column: 36,
            span: 16229..16230,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"memory\"",
        ),
        position: Position {
            line: 589,
            column: 45,
            span: 16231..16239,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 589,
            column: 46,
            span: 16239..16240,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 589,
            column: 51,
            span: 16241..16245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 590,
            column: 8,
            span: 16271..16272,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 590,
            column: 9,
            span: 16272..16273,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 590,
            column: 17,
            span: 16273..16281,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 590,
            column: 18,
            span: 16281..16282,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000000000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 590,
            column: 28,
            span: 16281..16292,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 590,
            column: 29,
            span: 16292..16293,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 591,
            column: 12,
            span: 16323..16328,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 591,
            column: 13,
            span: 16328..16329,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 591,
            column: 14,
            span: 16329..16330,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 591,
            column: 15,
            span: 16330..16331,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 591,
            column: 17,
            span: 16331..16333,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 591,
            column: 18,
            span: 16333..16334,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 592,
            column: 0,
            span: 16339..16342,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 593,
            column: 0,
            span: 16345..16348,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 594,
            column: 4,
            span: 16351..16352,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 594,
            column: 5,
            span: 16352..16353,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 594,
            column: 13,
            span: 16353..16361,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 594,
            column: 14,
            span: 16361..16362,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000000000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 594,
            column: 24,
            span: 16361..16372,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 594,
            column: 25,
            span: 16372..16373,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 595,
            column: 8,
            span: 16399..16404,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 595,
            column: 9,
            span: 16404..16405,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\nlimit for \"",
        ),
        position: Position {
            line: 595,
            column: 23,
            span: 16405..16419,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 595,
            column: 26,
            span: 16420..16422,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 595,
            column: 28,
            span: 16423..16424,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 595,
            column: 31,
            span: 16425..16427,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\": \"",
        ),
        position: Position {
            line: 595,
            column: 36,
            span: 16428..16432,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 595,
            column: 39,
            span: 16433..16435,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "M",
        ),
        position: Position {
            line: 595,
            column: 41,
            span: 16436..16437,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 595,
            column: 42,
            span: 16437..16438,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldM",
        ),
        position: Position {
            line: 595,
            column: 46,
            span: 16438..16442,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 595,
            column: 47,
            span: 16442..16443,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 596,
            column: 9,
            span: 16446..16452,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 596,
            column: 0,
            span: 16453..16454,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 597,
            column: 0,
            span: 16455..16458,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 602,
            column: 2,
            span: 16513..16514,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 602,
            column: 4,
            span: 16515..16516,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 602,
            column: 13,
            span: 16517..16525,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 602,
            column: 14,
            span: 16525..16526,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"state creation\"",
        ),
        position: Position {
            line: 602,
            column: 30,
            span: 16526..16542,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 602,
            column: 31,
            span: 16542..16543,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 602,
            column: 33,
            span: 16544..16545,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 602,
            column: 34,
            span: 16545..16546,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newstate",
        ),
        position: Position {
            line: 602,
            column: 42,
            span: 16546..16554,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 602,
            column: 43,
            span: 16554..16555,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 603,
            column: 2,
            span: 16556..16557,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 603,
            column: 3,
            span: 16557..16558,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closestate",
        ),
        position: Position {
            line: 603,
            column: 13,
            span: 16558..16568,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 603,
            column: 14,
            span: 16568..16569,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 603,
            column: 15,
            span: 16569..16570,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 603,
            column: 16,
            span: 16570..16571,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 603,
            column: 17,
            span: 16571..16572,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 608,
            column: 9,
            span: 16615..16623,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expand",
        ),
        position: Position {
            line: 608,
            column: 16,
            span: 16624..16630,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 608,
            column: 18,
            span: 16631..16632,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 608,
            column: 19,
            span: 16632..16633,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 608,
            column: 20,
            span: 16633..16634,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 608,
            column: 21,
            span: 16634..16635,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 608,
            column: 22,
            span: 16635..16636,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 609,
            column: 5,
            span: 16639..16641,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 609,
            column: 7,
            span: 16642..16643,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 609,
            column: 9,
            span: 16643..16645,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 609,
            column: 10,
            span: 16644..16646,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 609,
            column: 15,
            span: 16647..16651,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 609,
            column: 22,
            span: 16652..16658,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 609,
            column: 25,
            span: 16659..16661,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 609,
            column: 0,
            span: 16662..16665,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 610,
            column: 8,
            span: 16668..16673,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 610,
            column: 10,
            span: 16674..16675,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 610,
            column: 12,
            span: 16676..16677,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 610,
            column: 19,
            span: 16678..16684,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 610,
            column: 20,
            span: 16684..16685,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 610,
            column: 23,
            span: 16685..16688,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 610,
            column: 24,
            span: 16688..16689,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=\"",
        ),
        position: Position {
            line: 610,
            column: 27,
            span: 16689..16692,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 610,
            column: 28,
            span: 16692..16693,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 610,
            column: 30,
            span: 16694..16695,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 610,
            column: 31,
            span: 16695..16696,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 611,
            column: 9,
            span: 16699..16705,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 611,
            column: 16,
            span: 16706..16712,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 611,
            column: 17,
            span: 16712..16713,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 611,
            column: 23,
            span: 16713..16719,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 611,
            column: 24,
            span: 16719..16720,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"T.doonnewstack([%s[ %s;\\n collectgarbage(); %s]%s])\\n\"",
        ),
        position: Position {
            line: 611,
            column: 79,
            span: 16720..16775,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 611,
            column: 80,
            span: 16775..16776,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 612,
            column: 32,
            span: 16807..16808,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 612,
            column: 33,
            span: 16808..16809,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 612,
            column: 35,
            span: 16810..16811,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 612,
            column: 36,
            span: 16811..16812,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expand",
        ),
        position: Position {
            line: 612,
            column: 43,
            span: 16813..16819,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 612,
            column: 44,
            span: 16819..16820,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 612,
            column: 45,
            span: 16820..16821,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 612,
            column: 46,
            span: 16821..16822,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 612,
            column: 47,
            span: 16821..16823,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 612,
            column: 48,
            span: 16823..16824,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 612,
            column: 49,
            span: 16824..16825,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 612,
            column: 50,
            span: 16825..16826,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 612,
            column: 51,
            span: 16826..16827,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 612,
            column: 53,
            span: 16828..16829,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 612,
            column: 54,
            span: 16829..16830,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 613,
            column: 0,
            span: 16831..16834,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "G",
        ),
        position: Position {
            line: 615,
            column: 2,
            span: 16836..16837,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 615,
            column: 3,
            span: 16837..16838,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 615,
            column: 4,
            span: 16837..16839,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 615,
            column: 5,
            span: 16839..16840,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 615,
            column: 20,
            span: 16841..16855,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 615,
            column: 21,
            span: 16855..16856,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 615,
            column: 22,
            span: 16856..16857,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 615,
            column: 23,
            span: 16857..16858,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 615,
            column: 25,
            span: 16859..16860,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 615,
            column: 27,
            span: 16861..16862,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 615,
            column: 41,
            span: 16862..16876,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 615,
            column: 42,
            span: 16876..16877,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 615,
            column: 49,
            span: 16877..16884,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 615,
            column: 50,
            span: 16884..16885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        position: Position {
            line: 616,
            column: 11,
            span: 16886..16896,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 616,
            column: 12,
            span: 16896..16897,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expand",
        ),
        position: Position {
            line: 616,
            column: 18,
            span: 16897..16903,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 616,
            column: 19,
            span: 16903..16904,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 616,
            column: 21,
            span: 16903..16906,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 616,
            column: 22,
            span: 16906..16907,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"G=G+1\"",
        ),
        position: Position {
            line: 616,
            column: 29,
            span: 16907..16914,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 616,
            column: 30,
            span: 16914..16915,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 616,
            column: 31,
            span: 16915..16916,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 616,
            column: 32,
            span: 16916..16917,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 616,
            column: 33,
            span: 16917..16918,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 617,
            column: 7,
            span: 16919..16925,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 617,
            column: 8,
            span: 16925..16926,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "G",
        ),
        position: Position {
            line: 617,
            column: 9,
            span: 16926..16927,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 617,
            column: 11,
            span: 16927..16929,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 617,
            column: 13,
            span: 16928..16931,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 617,
            column: 14,
            span: 16931..16932,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 617,
            column: 15,
            span: 16932..16933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 617,
            column: 30,
            span: 16934..16948,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 617,
            column: 31,
            span: 16948..16949,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 617,
            column: 32,
            span: 16949..16950,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 617,
            column: 33,
            span: 16950..16951,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 619,
            column: 9,
            span: 16981..16989,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 619,
            column: 10,
            span: 16989..16990,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"thread creation\"",
        ),
        position: Position {
            line: 619,
            column: 27,
            span: 16990..17007,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 619,
            column: 28,
            span: 17007..17008,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 619,
            column: 37,
            span: 17009..17017,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 619,
            column: 39,
            span: 17018..17019,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 619,
            column: 40,
            span: 17019..17020,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 620,
            column: 9,
            span: 17023..17029,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 620,
            column: 11,
            span: 17030..17031,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 620,
            column: 12,
            span: 17031..17032,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doonnewstack",
        ),
        position: Position {
            line: 620,
            column: 24,
            span: 17032..17044,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 620,
            column: 25,
            span: 17044..17045,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x=1\"",
        ),
        position: Position {
            line: 620,
            column: 30,
            span: 17045..17050,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 620,
            column: 31,
            span: 17050..17051,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 620,
            column: 34,
            span: 17052..17054,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 620,
            column: 36,
            span: 17054..17056,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 621,
            column: 4,
            span: 17082..17085,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 621,
            column: 5,
            span: 17085..17086,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 626,
            column: 9,
            span: 17119..17127,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 626,
            column: 10,
            span: 17127..17128,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"loadstring\"",
        ),
        position: Position {
            line: 626,
            column: 22,
            span: 17128..17140,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 626,
            column: 23,
            span: 17140..17141,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 626,
            column: 32,
            span: 17142..17150,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 626,
            column: 34,
            span: 17151..17152,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 626,
            column: 35,
            span: 17152..17153,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 627,
            column: 9,
            span: 17156..17162,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        position: Position {
            line: 627,
            column: 20,
            span: 17163..17173,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 627,
            column: 21,
            span: 17173..17174,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x=1\"",
        ),
        position: Position {
            line: 627,
            column: 26,
            span: 17174..17179,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 627,
            column: 27,
            span: 17179..17180,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 628,
            column: 4,
            span: 17208..17211,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 628,
            column: 5,
            span: 17211..17212,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 631,
            column: 6,
            span: 17215..17220,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testprog",
        ),
        position: Position {
            line: 631,
            column: 15,
            span: 17221..17229,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 631,
            column: 17,
            span: 17230..17231,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal function foo () return end\nlocal t = {\"x\"}\na = \"aaa\"\nfor _, v in ipairs(t) do a=a..v end\nreturn true\n]]",
        ),
        position: Position {
            line: 637,
            column: 3,
            span: 17232..17344,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 640,
            column: 3,
            span: 17373..17375,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 640,
            column: 4,
            span: 17375..17376,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 640,
            column: 5,
            span: 17376..17377,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 640,
            column: 7,
            span: 17378..17379,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 640,
            column: 0,
            span: 17380..17383,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 641,
            column: 6,
            span: 17384..17389,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 641,
            column: 8,
            span: 17390..17391,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 641,
            column: 10,
            span: 17392..17393,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 641,
            column: 12,
            span: 17393..17395,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 641,
            column: 13,
            span: 17395..17396,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpname",
        ),
        position: Position {
            line: 641,
            column: 20,
            span: 17396..17403,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 641,
            column: 21,
            span: 17403..17404,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 641,
            column: 22,
            span: 17404..17405,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 642,
            column: 6,
            span: 17406..17411,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 642,
            column: 8,
            span: 17412..17413,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 642,
            column: 10,
            span: 17414..17415,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 642,
            column: 17,
            span: 17416..17422,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 642,
            column: 18,
            span: 17422..17423,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 642,
            column: 20,
            span: 17423..17425,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 642,
            column: 21,
            span: 17425..17426,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 642,
            column: 25,
            span: 17426..17430,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 642,
            column: 26,
            span: 17430..17431,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 642,
            column: 27,
            span: 17431..17432,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 642,
            column: 28,
            span: 17432..17433,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"w\"",
        ),
        position: Position {
            line: 642,
            column: 32,
            span: 17434..17437,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 642,
            column: 33,
            span: 17437..17438,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 642,
            column: 34,
            span: 17438..17439,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 643,
            column: 2,
            span: 17440..17441,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 643,
            column: 3,
            span: 17441..17442,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 643,
            column: 8,
            span: 17442..17447,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 643,
            column: 9,
            span: 17447..17448,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testprog",
        ),
        position: Position {
            line: 643,
            column: 17,
            span: 17448..17456,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 643,
            column: 18,
            span: 17456..17457,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 644,
            column: 2,
            span: 17458..17459,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 644,
            column: 3,
            span: 17459..17460,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 644,
            column: 8,
            span: 17460..17465,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 644,
            column: 9,
            span: 17465..17466,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 644,
            column: 10,
            span: 17466..17467,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 645,
            column: 9,
            span: 17468..17476,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 645,
            column: 10,
            span: 17476..17477,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"dofile\"",
        ),
        position: Position {
            line: 645,
            column: 18,
            span: 17477..17485,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 645,
            column: 19,
            span: 17485..17486,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 645,
            column: 28,
            span: 17487..17495,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 645,
            column: 30,
            span: 17496..17497,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 645,
            column: 31,
            span: 17497..17498,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 646,
            column: 8,
            span: 17501..17506,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 646,
            column: 10,
            span: 17507..17508,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 646,
            column: 12,
            span: 17509..17510,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        position: Position {
            line: 646,
            column: 21,
            span: 17511..17519,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 646,
            column: 22,
            span: 17519..17520,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 646,
            column: 23,
            span: 17520..17521,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 646,
            column: 24,
            span: 17521..17522,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 647,
            column: 9,
            span: 17525..17531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 647,
            column: 11,
            span: 17532..17533,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 647,
            column: 15,
            span: 17534..17537,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 647,
            column: 17,
            span: 17538..17539,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 647,
            column: 18,
            span: 17539..17540,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 647,
            column: 19,
            span: 17540..17541,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 648,
            column: 4,
            span: 17542..17545,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 648,
            column: 5,
            span: 17545..17546,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 649,
            column: 7,
            span: 17547..17553,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 649,
            column: 8,
            span: 17553..17554,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 649,
            column: 10,
            span: 17554..17556,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 649,
            column: 11,
            span: 17556..17557,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 649,
            column: 17,
            span: 17557..17563,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 649,
            column: 18,
            span: 17563..17564,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 649,
            column: 19,
            span: 17564..17565,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 649,
            column: 20,
            span: 17565..17566,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 649,
            column: 21,
            span: 17566..17567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 650,
            column: 7,
            span: 17568..17574,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 650,
            column: 8,
            span: 17574..17575,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 650,
            column: 10,
            span: 17575..17577,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 650,
            column: 11,
            span: 17577..17578,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 650,
            column: 12,
            span: 17578..17579,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 650,
            column: 15,
            span: 17580..17582,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaax\"",
        ),
        position: Position {
            line: 650,
            column: 22,
            span: 17583..17589,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 650,
            column: 23,
            span: 17589..17590,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 655,
            column: 9,
            span: 17617..17625,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 655,
            column: 10,
            span: 17625..17626,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string creation\"",
        ),
        position: Position {
            line: 655,
            column: 27,
            span: 17626..17643,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 655,
            column: 28,
            span: 17643..17644,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 655,
            column: 37,
            span: 17645..17653,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 655,
            column: 39,
            span: 17654..17655,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 655,
            column: 40,
            span: 17655..17656,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 656,
            column: 8,
            span: 17659..17664,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 656,
            column: 10,
            span: 17665..17666,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 656,
            column: 11,
            span: 17666..17667,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 656,
            column: 13,
            span: 17668..17669,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 656,
            column: 15,
            span: 17670..17671,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 656,
            column: 22,
            span: 17672..17678,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 656,
            column: 23,
            span: 17678..17679,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 656,
            column: 27,
            span: 17679..17683,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 656,
            column: 28,
            span: 17683..17684,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        position: Position {
            line: 656,
            column: 37,
            span: 17684..17693,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 656,
            column: 38,
            span: 17693..17694,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(a)\"",
        ),
        position: Position {
            line: 656,
            column: 44,
            span: 17695..17700,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 656,
            column: 45,
            span: 17700..17701,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 656,
            column: 54,
            span: 17702..17710,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 656,
            column: 56,
            span: 17711..17712,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 656,
            column: 57,
            span: 17712..17713,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 656,
            column: 58,
            span: 17713..17714,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 656,
            column: 65,
            span: 17715..17721,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 656,
            column: 67,
            span: 17722..17723,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 656,
            column: 69,
            span: 17723..17725,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        position: Position {
            line: 656,
            column: 72,
            span: 17725..17728,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 656,
            column: 76,
            span: 17729..17732,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 656,
            column: 77,
            span: 17732..17733,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 657,
            column: 9,
            span: 17736..17742,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 657,
            column: 11,
            span: 17743..17744,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 657,
            column: 12,
            span: 17744..17745,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 657,
            column: 15,
            span: 17746..17748,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ablo ablo'",
        ),
        position: Position {
            line: 657,
            column: 27,
            span: 17749..17760,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 657,
            column: 28,
            span: 17760..17761,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 658,
            column: 4,
            span: 17762..17765,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 658,
            column: 5,
            span: 17765..17766,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 660,
            column: 9,
            span: 17768..17776,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 660,
            column: 10,
            span: 17776..17777,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"dump/undump\"",
        ),
        position: Position {
            line: 660,
            column: 23,
            span: 17777..17790,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 660,
            column: 24,
            span: 17790..17791,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 660,
            column: 33,
            span: 17792..17800,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 660,
            column: 35,
            span: 17801..17802,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 660,
            column: 36,
            span: 17802..17803,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 661,
            column: 8,
            span: 17806..17811,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 661,
            column: 10,
            span: 17812..17813,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 661,
            column: 12,
            span: 17814..17815,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        position: Position {
            line: 661,
            column: 23,
            span: 17816..17826,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 661,
            column: 24,
            span: 17826..17827,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testprog",
        ),
        position: Position {
            line: 661,
            column: 32,
            span: 17827..17835,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 661,
            column: 33,
            span: 17835..17836,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 662,
            column: 8,
            span: 17839..17844,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 662,
            column: 10,
            span: 17845..17846,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 662,
            column: 12,
            span: 17847..17848,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 662,
            column: 14,
            span: 17849..17850,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 662,
            column: 18,
            span: 17851..17854,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 662,
            column: 25,
            span: 17855..17861,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 662,
            column: 26,
            span: 17861..17862,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        position: Position {
            line: 662,
            column: 30,
            span: 17862..17866,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 662,
            column: 31,
            span: 17866..17867,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 662,
            column: 32,
            span: 17867..17868,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 662,
            column: 33,
            span: 17868..17869,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 663,
            column: 4,
            span: 17872..17873,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 663,
            column: 6,
            span: 17874..17875,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 663,
            column: 8,
            span: 17876..17877,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 663,
            column: 12,
            span: 17878..17881,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadstring",
        ),
        position: Position {
            line: 663,
            column: 23,
            span: 17882..17892,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 663,
            column: 24,
            span: 17892..17893,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 663,
            column: 25,
            span: 17893..17894,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 663,
            column: 26,
            span: 17894..17895,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 664,
            column: 9,
            span: 17898..17904,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 664,
            column: 11,
            span: 17905..17906,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 664,
            column: 15,
            span: 17907..17910,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 664,
            column: 17,
            span: 17911..17912,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 664,
            column: 18,
            span: 17912..17913,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 664,
            column: 19,
            span: 17913..17914,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 665,
            column: 4,
            span: 17915..17918,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 665,
            column: 5,
            span: 17918..17919,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 667,
            column: 6,
            span: 17921..17926,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 667,
            column: 8,
            span: 17927..17928,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 667,
            column: 10,
            span: 17929..17930,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 667,
            column: 13,
            span: 17931..17933,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 667,
            column: 14,
            span: 17933..17934,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpname",
        ),
        position: Position {
            line: 667,
            column: 21,
            span: 17934..17941,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 667,
            column: 22,
            span: 17941..17942,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 667,
            column: 23,
            span: 17942..17943,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 668,
            column: 9,
            span: 17944..17952,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 668,
            column: 10,
            span: 17952..17953,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file creation\"",
        ),
        position: Position {
            line: 668,
            column: 25,
            span: 17953..17968,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 668,
            column: 26,
            span: 17968..17969,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 668,
            column: 35,
            span: 17970..17978,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 668,
            column: 37,
            span: 17979..17980,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 668,
            column: 38,
            span: 17980..17981,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 669,
            column: 8,
            span: 17984..17989,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 669,
            column: 10,
            span: 17990..17991,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 669,
            column: 12,
            span: 17992..17993,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 669,
            column: 19,
            span: 17994..18000,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 669,
            column: 20,
            span: 18000..18001,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 669,
            column: 22,
            span: 18001..18003,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 669,
            column: 23,
            span: 18003..18004,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 669,
            column: 27,
            span: 18004..18008,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 669,
            column: 28,
            span: 18008..18009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 669,
            column: 29,
            span: 18009..18010,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 669,
            column: 30,
            span: 18010..18011,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'w'",
        ),
        position: Position {
            line: 669,
            column: 34,
            span: 18012..18015,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 669,
            column: 35,
            span: 18015..18016,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 669,
            column: 36,
            span: 18016..18017,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 670,
            column: 9,
            span: 18020..18026,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 670,
            column: 11,
            span: 18027..18028,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 670,
            column: 14,
            span: 18028..18031,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 670,
            column: 17,
            span: 18032..18034,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 670,
            column: 18,
            span: 18034..18035,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 670,
            column: 22,
            span: 18035..18039,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"nomenaoexistente\"",
        ),
        position: Position {
            line: 670,
            column: 40,
            span: 18039..18057,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 670,
            column: 41,
            span: 18057..18058,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 671,
            column: 5,
            span: 18061..18063,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 671,
            column: 6,
            span: 18063..18064,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 671,
            column: 11,
            span: 18064..18069,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 671,
            column: 12,
            span: 18069..18070,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 671,
            column: 13,
            span: 18070..18071,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 671,
            column: 14,
            span: 18071..18072,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 671,
            column: 15,
            span: 18072..18073,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 672,
            column: 9,
            span: 18076..18082,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 672,
            column: 13,
            span: 18083..18086,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        position: Position {
            line: 672,
            column: 22,
            span: 18087..18095,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'nomenaoexistente'",
        ),
        position: Position {
            line: 672,
            column: 40,
            span: 18095..18113,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 673,
            column: 4,
            span: 18114..18117,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 673,
            column: 5,
            span: 18117..18118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 674,
            column: 7,
            span: 18119..18125,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 674,
            column: 8,
            span: 18125..18126,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 674,
            column: 10,
            span: 18126..18128,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 674,
            column: 11,
            span: 18128..18129,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 674,
            column: 17,
            span: 18129..18135,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 674,
            column: 18,
            span: 18135..18136,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 674,
            column: 19,
            span: 18136..18137,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 674,
            column: 20,
            span: 18137..18138,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 674,
            column: 21,
            span: 18138..18139,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 676,
            column: 9,
            span: 18141..18149,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 676,
            column: 10,
            span: 18149..18150,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table creation\"",
        ),
        position: Position {
            line: 676,
            column: 26,
            span: 18150..18166,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 676,
            column: 27,
            span: 18166..18167,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 676,
            column: 36,
            span: 18168..18176,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 676,
            column: 38,
            span: 18177..18178,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 676,
            column: 39,
            span: 18178..18179,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 677,
            column: 8,
            span: 18182..18187,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 677,
            column: 10,
            span: 18188..18189,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 677,
            column: 11,
            span: 18189..18190,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 677,
            column: 15,
            span: 18191..18194,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 677,
            column: 17,
            span: 18195..18196,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 677,
            column: 19,
            span: 18197..18198,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 677,
            column: 20,
            span: 18198..18199,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 677,
            column: 21,
            span: 18199..18200,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 677,
            column: 0,
            span: 18200..18203,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 678,
            column: 6,
            span: 18206..18209,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 678,
            column: 8,
            span: 18210..18211,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 678,
            column: 9,
            span: 18211..18212,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 678,
            column: 10,
            span: 18211..18213,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 678,
            column: 11,
            span: 18213..18214,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 678,
            column: 14,
            span: 18214..18217,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 678,
            column: 17,
            span: 18218..18220,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 678,
            column: 19,
            span: 18221..18222,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 678,
            column: 20,
            span: 18222..18223,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 678,
            column: 21,
            span: 18223..18224,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 678,
            column: 22,
            span: 18224..18225,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 678,
            column: 24,
            span: 18226..18227,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 678,
            column: 26,
            span: 18228..18229,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 678,
            column: 27,
            span: 18229..18230,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 678,
            column: 29,
            span: 18231..18232,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 678,
            column: 30,
            span: 18232..18233,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 678,
            column: 31,
            span: 18233..18234,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 678,
            column: 33,
            span: 18234..18236,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 678,
            column: 36,
            span: 18236..18239,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 678,
            column: 37,
            span: 18239..18240,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 678,
            column: 39,
            span: 18241..18242,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 678,
            column: 41,
            span: 18243..18244,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 678,
            column: 42,
            span: 18244..18245,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 678,
            column: 0,
            span: 18246..18249,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 679,
            column: 9,
            span: 18252..18258,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 679,
            column: 11,
            span: 18259..18260,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 679,
            column: 15,
            span: 18260..18264,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 679,
            column: 16,
            span: 18264..18265,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 679,
            column: 17,
            span: 18265..18266,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 679,
            column: 18,
            span: 18266..18267,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 679,
            column: 21,
            span: 18267..18270,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 679,
            column: 23,
            span: 18270..18272,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 679,
            column: 26,
            span: 18272..18275,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 679,
            column: 27,
            span: 18275..18276,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 679,
            column: 28,
            span: 18276..18277,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 679,
            column: 31,
            span: 18278..18280,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        position: Position {
            line: 679,
            column: 39,
            span: 18281..18288,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 679,
            column: 43,
            span: 18289..18292,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 679,
            column: 45,
            span: 18293..18294,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 679,
            column: 46,
            span: 18294..18295,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 679,
            column: 49,
            span: 18295..18298,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 679,
            column: 50,
            span: 18298..18299,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 679,
            column: 53,
            span: 18300..18302,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 679,
            column: 57,
            span: 18303..18306,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 679,
            column: 58,
            span: 18306..18307,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 680,
            column: 4,
            span: 18308..18311,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 680,
            column: 5,
            span: 18311..18312,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 682,
            column: 6,
            span: 18314..18319,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 682,
            column: 8,
            span: 18320..18321,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 682,
            column: 10,
            span: 18322..18323,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 682,
            column: 0,
            span: 18323..18325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 683,
            column: 6,
            span: 18326..18331,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 683,
            column: 8,
            span: 18332..18333,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 683,
            column: 0,
            span: 18334..18337,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 684,
            column: 9,
            span: 18338..18346,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 684,
            column: 10,
            span: 18346..18347,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"closure creation\"",
        ),
        position: Position {
            line: 684,
            column: 28,
            span: 18347..18365,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 684,
            column: 29,
            span: 18365..18366,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 684,
            column: 38,
            span: 18367..18375,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 684,
            column: 40,
            span: 18376..18377,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 684,
            column: 41,
            span: 18377..18378,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 685,
            column: 11,
            span: 18381..18389,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 685,
            column: 17,
            span: 18390..18395,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 685,
            column: 19,
            span: 18396..18397,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 685,
            column: 20,
            span: 18397..18398,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 685,
            column: 21,
            span: 18398..18399,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 685,
            column: 22,
            span: 18399..18400,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 685,
            column: 23,
            span: 18400..18401,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 686,
            column: 10,
            span: 18405..18411,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 686,
            column: 19,
            span: 18412..18420,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 686,
            column: 21,
            span: 18421..18422,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 686,
            column: 22,
            span: 18422..18423,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 686,
            column: 23,
            span: 18423..18424,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 686,
            column: 30,
            span: 18425..18431,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 686,
            column: 32,
            span: 18432..18433,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 686,
            column: 33,
            span: 18433..18434,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 686,
            column: 34,
            span: 18434..18435,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 686,
            column: 35,
            span: 18435..18436,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 686,
            column: 36,
            span: 18436..18437,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 686,
            column: 37,
            span: 18437..18438,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 686,
            column: 38,
            span: 18438..18439,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 686,
            column: 0,
            span: 18440..18443,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 687,
            column: 0,
            span: 18446..18449,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 688,
            column: 9,
            span: 18452..18458,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 688,
            column: 11,
            span: 18459..18460,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 688,
            column: 16,
            span: 18460..18465,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 688,
            column: 17,
            span: 18465..18466,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 688,
            column: 18,
            span: 18465..18467,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 688,
            column: 19,
            span: 18467..18468,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 688,
            column: 20,
            span: 18467..18469,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 688,
            column: 21,
            span: 18469..18470,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 688,
            column: 22,
            span: 18470..18471,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 688,
            column: 23,
            span: 18470..18472,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 688,
            column: 24,
            span: 18472..18473,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 688,
            column: 27,
            span: 18474..18476,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 688,
            column: 30,
            span: 18476..18479,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 688,
            column: 31,
            span: 18479..18480,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 689,
            column: 4,
            span: 18481..18484,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 689,
            column: 5,
            span: 18484..18485,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 691,
            column: 9,
            span: 18487..18495,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 691,
            column: 10,
            span: 18495..18496,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"coroutines\"",
        ),
        position: Position {
            line: 691,
            column: 22,
            span: 18496..18508,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 691,
            column: 23,
            span: 18508..18509,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 691,
            column: 32,
            span: 18510..18518,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 691,
            column: 34,
            span: 18519..18520,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 691,
            column: 35,
            span: 18520..18521,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 692,
            column: 8,
            span: 18524..18529,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 692,
            column: 10,
            span: 18530..18531,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 692,
            column: 12,
            span: 18532..18533,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 692,
            column: 22,
            span: 18534..18543,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 692,
            column: 23,
            span: 18543..18544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 692,
            column: 27,
            span: 18544..18548,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 692,
            column: 28,
            span: 18548..18549,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 692,
            column: 36,
            span: 18549..18557,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 692,
            column: 38,
            span: 18558..18559,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 692,
            column: 39,
            span: 18559..18560,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 693,
            column: 24,
            span: 18575..18584,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 693,
            column: 25,
            span: 18584..18585,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 693,
            column: 30,
            span: 18585..18590,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 693,
            column: 31,
            span: 18590..18591,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 693,
            column: 37,
            span: 18591..18597,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 693,
            column: 38,
            span: 18597..18598,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 693,
            column: 41,
            span: 18598..18601,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 693,
            column: 42,
            span: 18601..18602,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 693,
            column: 45,
            span: 18602..18605,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 693,
            column: 46,
            span: 18605..18606,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 693,
            column: 49,
            span: 18606..18609,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 693,
            column: 50,
            span: 18609..18610,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 693,
            column: 51,
            span: 18610..18611,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 694,
            column: 21,
            span: 18626..18632,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 694,
            column: 23,
            span: 18633..18634,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 694,
            column: 24,
            span: 18634..18635,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 695,
            column: 16,
            span: 18648..18651,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 695,
            column: 17,
            span: 18651..18652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 696,
            column: 9,
            span: 18655..18661,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 696,
            column: 10,
            span: 18661..18662,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 696,
            column: 16,
            span: 18662..18668,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 696,
            column: 17,
            span: 18668..18669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 696,
            column: 20,
            span: 18669..18672,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 696,
            column: 21,
            span: 18672..18673,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 696,
            column: 22,
            span: 18673..18674,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 696,
            column: 23,
            span: 18674..18675,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 696,
            column: 24,
            span: 18675..18676,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 696,
            column: 25,
            span: 18676..18677,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 696,
            column: 28,
            span: 18678..18680,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 696,
            column: 31,
            span: 18680..18683,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 696,
            column: 32,
            span: 18683..18684,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 697,
            column: 9,
            span: 18687..18693,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 697,
            column: 11,
            span: 18694..18695,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 697,
            column: 12,
            span: 18695..18696,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 697,
            column: 13,
            span: 18696..18697,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 698,
            column: 4,
            span: 18698..18701,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 698,
            column: 5,
            span: 18701..18702,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 700,
            column: 6,
            span: 18704..18709,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 700,
            column: 9,
            span: 18709..18712,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 703,
            column: 7,
            span: 18747..18753,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 703,
            column: 8,
            span: 18753..18754,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 703,
            column: 9,
            span: 18754..18755,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 703,
            column: 10,
            span: 18755..18756,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 703,
            column: 14,
            span: 18756..18760,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 703,
            column: 15,
            span: 18760..18761,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo.alo.uhuh.\"",
        ),
        position: Position {
            line: 703,
            column: 30,
            span: 18761..18776,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 703,
            column: 31,
            span: 18776..18777,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        position: Position {
            line: 703,
            column: 35,
            span: 18778..18781,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 703,
            column: 36,
            span: 18781..18782,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"//\"",
        ),
        position: Position {
            line: 703,
            column: 41,
            span: 18783..18787,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 703,
            column: 42,
            span: 18787..18788,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 703,
            column: 45,
            span: 18789..18791,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo//alo//uhuh//\"",
        ),
        position: Position {
            line: 703,
            column: 64,
            span: 18792..18810,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 703,
            column: 65,
            span: 18810..18811,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 704,
            column: 7,
            span: 18812..18818,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 704,
            column: 8,
            span: 18818..18819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 704,
            column: 9,
            span: 18819..18820,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 704,
            column: 10,
            span: 18820..18821,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 704,
            column: 14,
            span: 18821..18825,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 704,
            column: 15,
            span: 18825..18826,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo.alo.uhuh.\"",
        ),
        position: Position {
            line: 704,
            column: 30,
            span: 18826..18841,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 704,
            column: 31,
            span: 18841..18842,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 704,
            column: 37,
            span: 18843..18848,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 704,
            column: 38,
            span: 18848..18849,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"//\"",
        ),
        position: Position {
            line: 704,
            column: 43,
            span: 18850..18854,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 704,
            column: 44,
            span: 18854..18855,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 704,
            column: 47,
            span: 18856..18858,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"//.//.uhuh.\"",
        ),
        position: Position {
            line: 704,
            column: 61,
            span: 18859..18872,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 704,
            column: 62,
            span: 18872..18873,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 705,
            column: 7,
            span: 18874..18880,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 705,
            column: 8,
            span: 18880..18881,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 705,
            column: 9,
            span: 18881..18882,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 705,
            column: 10,
            span: 18882..18883,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 705,
            column: 14,
            span: 18883..18887,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 705,
            column: 15,
            span: 18887..18888,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 705,
            column: 17,
            span: 18888..18890,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 705,
            column: 18,
            span: 18890..18891,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 705,
            column: 24,
            span: 18892..18897,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 705,
            column: 25,
            span: 18897..18898,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"//\"",
        ),
        position: Position {
            line: 705,
            column: 30,
            span: 18899..18903,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 705,
            column: 31,
            span: 18903..18904,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 705,
            column: 34,
            span: 18905..18907,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 705,
            column: 37,
            span: 18908..18910,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 705,
            column: 38,
            span: 18910..18911,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 706,
            column: 7,
            span: 18912..18918,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 706,
            column: 8,
            span: 18918..18919,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 706,
            column: 9,
            span: 18919..18920,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 706,
            column: 10,
            span: 18920..18921,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 706,
            column: 14,
            span: 18921..18925,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 706,
            column: 15,
            span: 18925..18926,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"...\"",
        ),
        position: Position {
            line: 706,
            column: 20,
            span: 18926..18931,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 706,
            column: 21,
            span: 18931..18932,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        position: Position {
            line: 706,
            column: 25,
            span: 18933..18936,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 706,
            column: 26,
            span: 18936..18937,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"/.\"",
        ),
        position: Position {
            line: 706,
            column: 31,
            span: 18938..18942,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 706,
            column: 32,
            span: 18942..18943,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 706,
            column: 35,
            span: 18944..18946,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"/././.\"",
        ),
        position: Position {
            line: 706,
            column: 44,
            span: 18947..18955,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 706,
            column: 45,
            span: 18955..18956,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 707,
            column: 7,
            span: 18957..18963,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 707,
            column: 8,
            span: 18963..18964,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 707,
            column: 9,
            span: 18964..18965,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 707,
            column: 10,
            span: 18965..18966,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 707,
            column: 14,
            span: 18966..18970,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 707,
            column: 15,
            span: 18970..18971,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"...\"",
        ),
        position: Position {
            line: 707,
            column: 20,
            span: 18971..18976,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 707,
            column: 21,
            span: 18976..18977,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"...\"",
        ),
        position: Position {
            line: 707,
            column: 27,
            span: 18978..18983,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 707,
            column: 28,
            span: 18983..18984,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 707,
            column: 31,
            span: 18985..18987,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 707,
            column: 32,
            span: 18987..18988,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 707,
            column: 35,
            span: 18989..18991,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 707,
            column: 38,
            span: 18992..18994,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 707,
            column: 39,
            span: 18994..18995,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 710,
            column: 6,
            span: 18998..19003,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        position: Position {
            line: 710,
            column: 10,
            span: 19003..19007,
        },
    },
]
