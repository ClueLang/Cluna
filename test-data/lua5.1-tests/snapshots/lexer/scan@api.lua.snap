---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.1-tests/api.lua
---
[
    Token {
        kind: If,
        lexeme: "if",
        line: 2,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 2,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "T=",
        line: 2,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 2,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 2,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 2,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "Message",
        line: 3,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 3,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 3,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 3,
    },
    Token {
        kind: String,
        lexeme: "'\\a\\n >>> testC not active: skipping API tests <<<\\n\\a'",
        line: 3,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 3,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 4,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 5,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "tcheck",
        line: 9,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "t1",
        line: 9,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "t2",
        line: 9,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 10,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 10,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "t1",
        line: 10,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 10,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 10,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 11,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 11,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "getn",
        line: 11,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "t1",
        line: 11,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 11,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 11,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 11,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "getn",
        line: 11,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "t2",
        line: 11,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 11,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 11,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 12,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 12,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 12,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 12,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "getn",
        line: 12,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "t1",
        line: 12,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 12,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 12,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "t1",
        line: 12,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 12,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 12,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 12,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "t2",
        line: 12,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 12,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 12,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 12,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 12,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 13,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 15,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 15,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 15,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 15,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "arg",
        line: 15,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 18,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 18,
    },
    Token {
        kind: String,
        lexeme: "'testing C API'",
        line: 18,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 21,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 21,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "d2s",
        line: 21,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 21,
    },
    Token {
        kind: Number,
        lexeme: "12458954321123",
        line: 21,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 22,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 22,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        line: 22,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 22,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 22,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 22,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 22,
    },
    Token {
        kind: Number,
        lexeme: "8",
        line: 22,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 23,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 23,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "s2d",
        line: 23,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 23,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 23,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 23,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 23,
    },
    Token {
        kind: Number,
        lexeme: "12458954321123",
        line: 23,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 25,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 25,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 25,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 25,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 25,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 25,
    },
    Token {
        kind: String,
        lexeme: "\"pushnum 1; pushnum 2; pushnum 3; return 2\"",
        line: 25,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 26,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 26,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 26,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 26,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 26,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 26,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 26,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 26,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 26,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 26,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 26,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 29,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 29,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 29,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 29,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 29,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 29,
    },
    Token {
        kind: String,
        lexeme: "\"pushbool 1; pushbool 2; pushbool 0; return 3\"",
        line: 29,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 30,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 30,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 30,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 30,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 30,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 30,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 30,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 30,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 30,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 30,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 30,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 30,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 31,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 31,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 31,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 31,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 31,
    },
    Token {
        kind: String,
        lexeme: "\"pushbool 0; pushbool 10; pushnil;\\\n                      tobool -3; tobool -3; tobool -3; return 3\"",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 33,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 33,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "a=",
        line: 33,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 33,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 33,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 33,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "b=",
        line: 33,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 33,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 33,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 33,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "c=",
        line: 33,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 33,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 33,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 36,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 36,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 36,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 36,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 36,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 36,
    },
    Token {
        kind: String,
        lexeme: "\"gettop; return 2\"",
        line: 36,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 36,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 36,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 36,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 36,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 36,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 36,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 36,
    },
    Token {
        kind: Number,
        lexeme: "40",
        line: 36,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 37,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 37,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 37,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 37,
    },
    Token {
        kind: Number,
        lexeme: "40",
        line: 37,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 37,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 37,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 37,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 37,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 37,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 37,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 39,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 39,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 39,
    },
    Token {
        kind: String,
        lexeme: "\"settop 5; gettop; return .\"",
        line: 39,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 39,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 39,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 39,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "tcheck",
        line: 40,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 40,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 40,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 40,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 40,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 40,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 40,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 40,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 40,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 40,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 40,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 42,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 42,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 42,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 42,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 42,
    },
    Token {
        kind: String,
        lexeme: "\"settop 0; settop 15; return 10\"",
        line: 42,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 42,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 42,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 42,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 42,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 42,
    },
    Token {
        kind: Number,
        lexeme: "23",
        line: 42,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 42,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 43,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 43,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 43,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 43,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 43,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 43,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 43,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 43,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 43,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 43,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 43,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 43,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 43,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 43,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 43,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 43,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 43,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 43,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 43,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 43,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 45,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 45,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 45,
    },
    Token {
        kind: String,
        lexeme: "\"remove -2; gettop; return .\"",
        line: 45,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 45,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 45,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 45,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 45,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 45,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "tcheck",
        line: 46,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 46,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 46,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 46,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 46,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 46,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 46,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 46,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 46,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 46,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 46,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 48,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 48,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 48,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 48,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 48,
    },
    Token {
        kind: String,
        lexeme: "\"insert -1; gettop; return .\"",
        line: 48,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 48,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 48,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 48,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 48,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 48,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "tcheck",
        line: 49,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 49,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 49,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 49,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 49,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 49,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 49,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 49,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 49,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 49,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 49,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 51,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 51,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 51,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 51,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 51,
    },
    Token {
        kind: String,
        lexeme: "\"insert 3; gettop; return .\"",
        line: 51,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 51,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 51,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 51,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 51,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 51,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 51,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 51,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 51,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 51,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "tcheck",
        line: 52,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 52,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 52,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 52,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 52,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 52,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 52,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 52,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 52,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 52,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 52,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 52,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 52,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 52,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 52,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 54,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 54,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 54,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 54,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 54,
    },
    Token {
        kind: String,
        lexeme: "\"replace 2; gettop; return .\"",
        line: 54,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 54,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 54,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 54,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 54,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 54,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 54,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 54,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 54,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 54,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: "tcheck",
        line: 55,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 55,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 55,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 55,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 55,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 55,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 55,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 55,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 55,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 55,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 55,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 55,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 55,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 55,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 55,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 55,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 57,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 57,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 57,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 57,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 57,
    },
    Token {
        kind: String,
        lexeme: "\"replace -2; gettop; return .\"",
        line: 57,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 57,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 57,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 57,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 57,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 57,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 57,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 57,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 57,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 57,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: "tcheck",
        line: 58,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 58,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 58,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 58,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 58,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 58,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 58,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 58,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 58,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 58,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 58,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 58,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 58,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 60,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 60,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 60,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 60,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 60,
    },
    Token {
        kind: String,
        lexeme: "\"remove 3; gettop; return .\"",
        line: 60,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 60,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 60,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 60,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 60,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 60,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "tcheck",
        line: 61,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 61,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 61,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 61,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 61,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 61,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 61,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 61,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 61,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 61,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 61,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 61,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 61,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 63,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 63,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 63,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 63,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 63,
    },
    Token {
        kind: String,
        lexeme: "\"insert 3; pushvalue 3; remove 3; pushvalue 2; remove 2; \\\n                  insert 2; pushvalue 1; remove 1; insert 1; \\\n      insert -2; pushvalue -2; remove -3; gettop; return .\"",
        line: 65,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 65,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 66,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 66,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 66,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 66,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 66,
    },
    Token {
        kind: Number,
        lexeme: "40",
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 66,
    },
    Token {
        kind: Number,
        lexeme: "90",
        line: 66,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 66,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "tcheck",
        line: 67,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 67,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 67,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 67,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 67,
    },
    Token {
        kind: Number,
        lexeme: "7",
        line: 67,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 67,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 67,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 67,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 67,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 67,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 67,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 67,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 67,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 67,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 67,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 67,
    },
    Token {
        kind: Number,
        lexeme: "40",
        line: 67,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 67,
    },
    Token {
        kind: Number,
        lexeme: "90",
        line: 67,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 67,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 69,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 69,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 69,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 69,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 69,
    },
    Token {
        kind: String,
        lexeme: "\"concat 5; gettop; return .\"",
        line: 69,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 69,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 69,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 69,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 69,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 69,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 69,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 69,
    },
    Token {
        kind: String,
        lexeme: "\"joao\"",
        line: 69,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 69,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 69,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 69,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "tcheck",
        line: 70,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 70,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 70,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 70,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 70,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 70,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 70,
    },
    Token {
        kind: String,
        lexeme: "\"alo23joao12\"",
        line: 70,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 70,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 73,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 73,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 73,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 73,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 73,
    },
    Token {
        kind: String,
        lexeme: "\"rawcall 2,-1; gettop; return .\"",
        line: 73,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 73,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 74,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 74,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 74,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 74,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 74,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 74,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 74,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 74,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 74,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 74,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 74,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 74,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 74,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 74,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 74,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 74,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 74,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 74,
    },
    Token {
        kind: String,
        lexeme: "\"joao\"",
        line: 74,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 74,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "tcheck",
        line: 75,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 75,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 75,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 75,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 75,
    },
    Token {
        kind: Number,
        lexeme: "6",
        line: 75,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 75,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 75,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 75,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 75,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 75,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 75,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 75,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 75,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 75,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 75,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 75,
    },
    Token {
        kind: String,
        lexeme: "\"joao\"",
        line: 75,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 75,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 75,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 77,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 78,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 78,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 78,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 78,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 79,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 79,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 79,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 79,
    },
    Token {
        kind: Number,
        lexeme: "1000",
        line: 79,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 79,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 79,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 79,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 79,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 79,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 79,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 79,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 79,
    },
    Token {
        kind: Number,
        lexeme: "999",
        line: 79,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 79,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 79,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 79,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 80,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 80,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 80,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[call 1 -1; pop 1; tostring -1; return 1]]",
        line: 80,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 80,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 81,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 81,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 81,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 81,
    },
    Token {
        kind: String,
        lexeme: "\"10\"",
        line: 81,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 81,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 86,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 86,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 86,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 86,
    },
    Token {
        kind: String,
        lexeme: "\"lessthan 2 5, return 1\"",
        line: 86,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 86,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 86,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 86,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 86,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 86,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 86,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 86,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 86,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 86,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 86,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 86,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 86,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 86,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 87,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 87,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 87,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 87,
    },
    Token {
        kind: String,
        lexeme: "\"lessthan 5 2, return 1\"",
        line: 87,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 87,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 87,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 87,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 87,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 87,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 87,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 87,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 87,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 87,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 87,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 87,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 87,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 87,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 88,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 88,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 88,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 88,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 88,
    },
    Token {
        kind: String,
        lexeme: "\"lessthan 2 -3, return 1\"",
        line: 88,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 88,
    },
    Token {
        kind: String,
        lexeme: "\"4\"",
        line: 88,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 88,
    },
    Token {
        kind: String,
        lexeme: "\"2\"",
        line: 88,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 88,
    },
    Token {
        kind: String,
        lexeme: "\"2\"",
        line: 88,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 88,
    },
    Token {
        kind: String,
        lexeme: "\"3\"",
        line: 88,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 88,
    },
    Token {
        kind: String,
        lexeme: "\"2\"",
        line: 88,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 88,
    },
    Token {
        kind: String,
        lexeme: "\"2\"",
        line: 88,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 88,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 89,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 89,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 89,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 89,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 89,
    },
    Token {
        kind: String,
        lexeme: "\"lessthan -3 2, return 1\"",
        line: 89,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 89,
    },
    Token {
        kind: String,
        lexeme: "\"3\"",
        line: 89,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 89,
    },
    Token {
        kind: String,
        lexeme: "\"2\"",
        line: 89,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 89,
    },
    Token {
        kind: String,
        lexeme: "\"2\"",
        line: 89,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 89,
    },
    Token {
        kind: String,
        lexeme: "\"4\"",
        line: 89,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 89,
    },
    Token {
        kind: String,
        lexeme: "\"2\"",
        line: 89,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 89,
    },
    Token {
        kind: String,
        lexeme: "\"2\"",
        line: 89,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 89,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 89,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 91,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 91,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "__lt",
        line: 91,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 91,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 91,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 91,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 91,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 91,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 91,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 91,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 91,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 91,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 91,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 91,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 91,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 91,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 91,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 91,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "a1",
        line: 92,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "a3",
        line: 92,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "a4",
        line: 92,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 92,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 92,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 92,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 92,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 92,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 92,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 92,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 93,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 93,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 93,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 93,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 93,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 93,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 93,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 94,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 94,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 94,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 94,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 94,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 94,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 95,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 95,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 95,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 95,
    },
    Token {
        kind: String,
        lexeme: "\"lessthan 2 5, return 1\"",
        line: 95,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "a3",
        line: 95,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 95,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 95,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 95,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 95,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "a4",
        line: 95,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 95,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 95,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 95,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 95,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 95,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 96,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 96,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 96,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 96,
    },
    Token {
        kind: String,
        lexeme: "\"lessthan 5 -6, return 1\"",
        line: 96,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "a4",
        line: 96,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 96,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 96,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 96,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 96,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "a3",
        line: 96,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 96,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 96,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 96,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 96,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 96,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 97,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 97,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 97,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 97,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 97,
    },
    Token {
        kind: String,
        lexeme: "\"lessthan 5 -6, return 2\"",
        line: 97,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "a1",
        line: 97,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 97,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 97,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 97,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 97,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "a3",
        line: 97,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 97,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 97,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 97,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 97,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 98,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 98,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 98,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 98,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 98,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 98,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 98,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 98,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 98,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 98,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: "count",
        line: 103,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 103,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 103,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 104,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 104,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 104,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 104,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 105,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 105,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\n    isnumber %d;\n    isstring %d;\n    isfunction %d;\n    iscfunction %d;\n    istable %d;\n    isuserdata %d;\n    isnil %d;\n    isnull %d;\n    return 8\n  ]]",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 116,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 116,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 116,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 116,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 116,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 116,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 116,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 116,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 116,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 116,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 116,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 116,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 116,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 117,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 117,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 117,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 117,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 117,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 117,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "g",
        line: 117,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "h",
        line: 117,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 117,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 117,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 117,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 117,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 117,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 118,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 118,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 118,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 118,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 118,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 118,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "g",
        line: 118,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 118,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 118,
    },
    Token {
        kind: Number,
        lexeme: "100",
        line: 118,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "h",
        line: 118,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 118,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 121,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: "count",
        line: 121,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 121,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 121,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 121,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 121,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 121,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 121,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 122,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: "count",
        line: 122,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 122,
    },
    Token {
        kind: String,
        lexeme: "'alo'",
        line: 122,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 122,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 122,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 122,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 122,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 123,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: "count",
        line: 123,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 123,
    },
    Token {
        kind: String,
        lexeme: "'32'",
        line: 123,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 123,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 123,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 123,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 123,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 124,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "count",
        line: 124,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 124,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 124,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 124,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 124,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 124,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 124,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 124,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 125,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "count",
        line: 125,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 125,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 125,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 125,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 125,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 125,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 126,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "count",
        line: 126,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 126,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 126,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 126,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 126,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 126,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 126,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 126,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 126,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 126,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 127,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "count",
        line: 127,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 127,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 127,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 127,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 127,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 127,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 127,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 128,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "count",
        line: 128,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 128,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "stdin",
        line: 128,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 128,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 128,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 128,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 128,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 129,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "count",
        line: 129,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 129,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 129,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 129,
    },
    Token {
        kind: Number,
        lexeme: "15",
        line: 129,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 129,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 129,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 129,
    },
    Token {
        kind: Number,
        lexeme: "100",
        line: 129,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 129,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 133,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 133,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 133,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 133,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 134,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 134,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 134,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 134,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 135,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 135,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 135,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 135,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 135,
    },
    Token {
        kind: String,
        lexeme: "\"%s %d; return 1\"",
        line: 135,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 135,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 135,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 135,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 135,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 135,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 138,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 138,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 138,
    },
    Token {
        kind: String,
        lexeme: "\"tostring\"",
        line: 138,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 138,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 138,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 138,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 138,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 138,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 138,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 138,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 139,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 139,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 139,
    },
    Token {
        kind: String,
        lexeme: "\"tostring\"",
        line: 139,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 139,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 139,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 139,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 139,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 139,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 139,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 140,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 140,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 140,
    },
    Token {
        kind: String,
        lexeme: "\"tostring\"",
        line: 140,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 140,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 140,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 140,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 140,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 140,
    },
    Token {
        kind: String,
        lexeme: "\"12\"",
        line: 140,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 141,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 141,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 141,
    },
    Token {
        kind: String,
        lexeme: "\"tostring\"",
        line: 141,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 141,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 141,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 141,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 141,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 141,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 141,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 141,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 141,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 142,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 142,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 142,
    },
    Token {
        kind: String,
        lexeme: "\"objsize\"",
        line: 142,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 142,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 142,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 142,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 142,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 142,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 142,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 142,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 143,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 143,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 143,
    },
    Token {
        kind: String,
        lexeme: "\"objsize\"",
        line: 143,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 143,
    },
    Token {
        kind: String,
        lexeme: "\"alo\\0\\0a\"",
        line: 143,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 143,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 143,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 143,
    },
    Token {
        kind: Number,
        lexeme: "6",
        line: 143,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 144,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 144,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 144,
    },
    Token {
        kind: String,
        lexeme: "\"objsize\"",
        line: 144,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 144,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 144,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 144,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 144,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 144,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 144,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 144,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 144,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 144,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 145,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 145,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 145,
    },
    Token {
        kind: String,
        lexeme: "\"objsize\"",
        line: 145,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 145,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 145,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 145,
    },
    Token {
        kind: Number,
        lexeme: "101",
        line: 145,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 145,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 145,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 145,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 145,
    },
    Token {
        kind: Number,
        lexeme: "101",
        line: 145,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 146,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 146,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 146,
    },
    Token {
        kind: String,
        lexeme: "\"objsize\"",
        line: 146,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 146,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 146,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 146,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 146,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 146,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 146,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 147,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 147,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 147,
    },
    Token {
        kind: String,
        lexeme: "\"objsize\"",
        line: 147,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 147,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 147,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 147,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 147,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 147,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 147,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 147,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 147,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 148,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 148,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 148,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 148,
    },
    Token {
        kind: String,
        lexeme: "\"tonumber\"",
        line: 148,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 148,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 148,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 148,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 148,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 148,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 148,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 148,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 148,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 149,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 149,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 149,
    },
    Token {
        kind: String,
        lexeme: "\"tonumber\"",
        line: 149,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 149,
    },
    Token {
        kind: String,
        lexeme: "\"12\"",
        line: 149,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 149,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 149,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 149,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 149,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 150,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 150,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 150,
    },
    Token {
        kind: String,
        lexeme: "\"tonumber\"",
        line: 150,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 150,
    },
    Token {
        kind: String,
        lexeme: "\"s2\"",
        line: 150,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 150,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 150,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 150,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 150,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 151,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 151,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 151,
    },
    Token {
        kind: String,
        lexeme: "\"tonumber\"",
        line: 151,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 151,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 151,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 151,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 151,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 151,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 151,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 151,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 151,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 152,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 152,
    },
    Token {
        kind: Identifier,
        lexeme: "to",
        line: 152,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 152,
    },
    Token {
        kind: String,
        lexeme: "\"tocfunction\"",
        line: 152,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 152,
    },
    Token {
        kind: Identifier,
        lexeme: "math",
        line: 152,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 152,
    },
    Token {
        kind: Identifier,
        lexeme: "deg",
        line: 152,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 152,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 153,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 153,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 153,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 153,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 153,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 153,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: "math",
        line: 153,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: "deg",
        line: 153,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 153,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 153,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 153,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 153,
    },
    Token {
        kind: NotEquals,
        lexeme: " ~",
        line: 153,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: "math",
        line: 153,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: "deg",
        line: 153,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 158,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 158,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 158,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 158,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\n  loadstring 2; call 0,1;\n  pushvalue 3; insert -2; call 1, 1;\n  call 0, 0;\n  return 1\n]]",
        line: 163,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 163,
    },
    Token {
        kind: String,
        lexeme: "\"x=150\"",
        line: 163,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 163,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 163,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 163,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 163,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 163,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "a=",
        line: 163,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 163,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 163,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 163,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 163,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 163,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 163,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 163,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 165,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 165,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 165,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 165,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 165,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 165,
    },
    Token {
        kind: String,
        lexeme: "'string'",
        line: 165,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 165,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 165,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 165,
    },
    Token {
        kind: Number,
        lexeme: "150",
        line: 165,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 165,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "check3",
        line: 167,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 167,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 167,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 167,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 168,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 168,
    },
    Token {
        kind: Identifier,
        lexeme: "arg",
        line: 168,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 168,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 168,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 168,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 168,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 168,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 168,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 169,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 169,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 169,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: "arg",
        line: 169,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 169,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 169,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 169,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 169,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 169,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 169,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: "check3",
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 171,
    },
    Token {
        kind: String,
        lexeme: "\":1:\"",
        line: 171,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 171,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 171,
    },
    Token {
        kind: String,
        lexeme: "\"loadstring 2; gettop; return .\"",
        line: 171,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 171,
    },
    Token {
        kind: String,
        lexeme: "\"x=\"",
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: "check3",
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 172,
    },
    Token {
        kind: String,
        lexeme: "\"cannot read\"",
        line: 172,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 172,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 172,
    },
    Token {
        kind: String,
        lexeme: "\"loadfile 2; gettop; return .\"",
        line: 172,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 172,
    },
    Token {
        kind: String,
        lexeme: "\".\"",
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "check3",
        line: 173,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 173,
    },
    Token {
        kind: String,
        lexeme: "\"cannot open xxxx\"",
        line: 173,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 173,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 173,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 173,
    },
    Token {
        kind: String,
        lexeme: "\"loadfile 2; gettop; return .\"",
        line: 173,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 173,
    },
    Token {
        kind: String,
        lexeme: "\"xxxx\"",
        line: 173,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 173,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 177,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 177,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 177,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 177,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 177,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 177,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 177,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 177,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 178,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 178,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 178,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 178,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 178,
    },
    Token {
        kind: String,
        lexeme: "\"gettable 2; pushvalue 4; gettable 2; return 2\"",
        line: 178,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 179,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 179,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 179,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 179,
    },
    Token {
        kind: String,
        lexeme: "\"y\"",
        line: 179,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 179,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 179,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 179,
    },
    Token {
        kind: String,
        lexeme: "\"x\"",
        line: 179,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 179,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 180,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 180,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 180,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 180,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 180,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 180,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 180,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 181,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 181,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 181,
    },
    Token {
        kind: String,
        lexeme: "\"settable -5\"",
        line: 181,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 181,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 181,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 181,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 181,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 181,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 181,
    },
    Token {
        kind: String,
        lexeme: "\"x\"",
        line: 181,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 181,
    },
    Token {
        kind: Number,
        lexeme: "15",
        line: 181,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 182,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 182,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 182,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 182,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 182,
    },
    Token {
        kind: Number,
        lexeme: "15",
        line: 182,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 183,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 183,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 183,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 183,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 183,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 183,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 184,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 184,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 184,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 184,
    },
    Token {
        kind: String,
        lexeme: "\"gettable 2; return 1\"",
        line: 184,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 184,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 185,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 185,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 185,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 185,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 186,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 186,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 186,
    },
    Token {
        kind: String,
        lexeme: "\"settable 2\"",
        line: 186,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 186,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 186,
    },
    Token {
        kind: String,
        lexeme: "\"x\"",
        line: 186,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 187,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 187,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 187,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 187,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 187,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 187,
    },
    Token {
        kind: String,
        lexeme: "\"x\"",
        line: 187,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 189,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 189,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 189,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 189,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 189,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 189,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 189,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 189,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 189,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 190,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 190,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 190,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: "__index",
        line: 190,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 190,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 190,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 190,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 190,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 190,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 190,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 190,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 190,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 190,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 191,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 191,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 191,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 191,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 191,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 191,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 191,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 191,
    },
    Token {
        kind: String,
        lexeme: "\"gettable 3, return 2\"",
        line: 191,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 191,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 191,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 191,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 191,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 191,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 191,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 191,
    },
    Token {
        kind: Number,
        lexeme: "35",
        line: 191,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 191,
    },
    Token {
        kind: String,
        lexeme: "\"x\"",
        line: 191,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 191,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 192,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 192,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 192,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 192,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 192,
    },
    Token {
        kind: Number,
        lexeme: "15",
        line: 192,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 192,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 192,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 192,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 192,
    },
    Token {
        kind: Number,
        lexeme: "35",
        line: 192,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 192,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 193,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 193,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 193,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: "__index",
        line: 193,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 193,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 193,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 193,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 193,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 193,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 193,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 193,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 193,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 194,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 194,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 194,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 194,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 194,
    },
    Token {
        kind: Identifier,
        lexeme: "__newindex",
        line: 194,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 194,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 194,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 194,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 194,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 194,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 194,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 194,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 194,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 194,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 194,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 194,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 194,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 194,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 194,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 194,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 194,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 195,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 195,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 195,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 195,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 195,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 195,
    },
    Token {
        kind: String,
        lexeme: "\"insert 2; gettable -5; return 1\"",
        line: 195,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 195,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 195,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 195,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 195,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 195,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 195,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 195,
    },
    Token {
        kind: String,
        lexeme: "\"y\"",
        line: 195,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 195,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 195,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 195,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 196,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 196,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 196,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 196,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 196,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 196,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 196,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 197,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 197,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 197,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 197,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 197,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 197,
    },
    Token {
        kind: String,
        lexeme: "\"settable -5, return 1\"",
        line: 197,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 197,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 197,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 197,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 197,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 197,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 197,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 197,
    },
    Token {
        kind: String,
        lexeme: "\"x\"",
        line: 197,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 197,
    },
    Token {
        kind: Number,
        lexeme: "16",
        line: 197,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 197,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 198,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 198,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 198,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 198,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 198,
    },
    Token {
        kind: Number,
        lexeme: "16",
        line: 198,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 198,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 198,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 198,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 198,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 199,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 199,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 199,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 199,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 199,
    },
    Token {
        kind: String,
        lexeme: "'xuxu'",
        line: 199,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 200,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 200,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 200,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 200,
    },
    Token {
        kind: String,
        lexeme: "\"gettable 2, return 1\"",
        line: 200,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 200,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 201,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 201,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 201,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 201,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 201,
    },
    Token {
        kind: String,
        lexeme: "'xuxu'",
        line: 201,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 201,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 202,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 202,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 202,
    },
    Token {
        kind: String,
        lexeme: "\"settable 2\"",
        line: 202,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 202,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 202,
    },
    Token {
        kind: Number,
        lexeme: "19",
        line: 202,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 203,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 203,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 203,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 203,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 203,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 203,
    },
    Token {
        kind: Number,
        lexeme: "19",
        line: 203,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 206,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 206,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 206,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 206,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 207,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 207,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 207,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 207,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 207,
    },
    Token {
        kind: String,
        lexeme: "\"next; gettop; return .\"",
        line: 207,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 207,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 207,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 207,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 207,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: "tcheck",
        line: 208,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 208,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 208,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 208,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 208,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 208,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 208,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 208,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 209,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 209,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 209,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 209,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 209,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 210,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 210,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 210,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 210,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 210,
    },
    Token {
        kind: String,
        lexeme: "\"next; gettop; return .\"",
        line: 210,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 210,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 210,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 210,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 210,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "tcheck",
        line: 211,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 211,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 211,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 211,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 211,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 211,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 211,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 211,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 211,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 211,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 211,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 211,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 211,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 211,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 211,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 211,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 212,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 212,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 212,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 212,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 212,
    },
    Token {
        kind: String,
        lexeme: "\"next; pop 1; next; gettop; return .\"",
        line: 212,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 212,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 212,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 212,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 212,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: "tcheck",
        line: 213,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 213,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 213,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 213,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 213,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 213,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 213,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 213,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 213,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 213,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 213,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 213,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 219,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 220,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 220,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 220,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 220,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 220,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 220,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[ pushnum 10; pushnum 20; pushcclosure 2; return 1]]",
        line: 220,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 221,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 221,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 221,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 221,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 221,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[pushvalue U0; pushvalue U1; pushvalue U2; return 3]]",
        line: 221,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 222,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 222,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 222,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 222,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 222,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 222,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 222,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 222,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 222,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 222,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 222,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 222,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 222,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 222,
    },
    Token {
        kind: String,
        lexeme: "'table'",
        line: 222,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 223,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 223,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 223,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 223,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 223,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 223,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[tostring U3; tonumber U4; return 2]]",
        line: 223,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 223,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 224,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 224,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 224,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 224,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 224,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 224,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 224,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 224,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 224,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 224,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 224,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 224,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 225,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 225,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[pushnum 100; pushnum 200; replace U2; replace U1]]",
        line: 225,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 225,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 226,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 226,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 226,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 226,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 226,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 226,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[pushvalue U1; pushvalue U2; return 2]]",
        line: 226,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 226,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 227,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 227,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 227,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 227,
    },
    Token {
        kind: Number,
        lexeme: "100",
        line: 227,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 227,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 227,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 227,
    },
    Token {
        kind: Number,
        lexeme: "200",
        line: 227,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 228,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 228,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[replace U2; replace U1]]",
        line: 228,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 228,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 228,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 228,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 228,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 228,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 228,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 228,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 228,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 228,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 228,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 228,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 228,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 228,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 229,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 229,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 229,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 229,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 229,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 229,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[pushvalue U1; pushvalue U2; return 2]]",
        line: 229,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 229,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 230,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 230,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 230,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 230,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 230,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 230,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 230,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 230,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 230,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 230,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 230,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 231,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 231,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmemory",
        line: 231,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 231,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 231,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 232,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 234,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 234,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 234,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[ pushnum 10; pushnum 20; pushcclosure 2; return 1]]",
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 235,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 235,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: "upvalue",
        line: 235,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 235,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 235,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 235,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 235,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 235,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 235,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 235,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 236,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 236,
    },
    Token {
        kind: Identifier,
        lexeme: "upvalue",
        line: 236,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 236,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 236,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 236,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 236,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 236,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 236,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 236,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 236,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 236,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 237,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 237,
    },
    Token {
        kind: Identifier,
        lexeme: "upvalue",
        line: 237,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 237,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 237,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 237,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 237,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 237,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 237,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 237,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 237,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 237,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 238,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: "upvalue",
        line: 238,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 238,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 238,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 238,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 238,
    },
    Token {
        kind: String,
        lexeme: "\"xuxu\"",
        line: 238,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 239,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 239,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: "upvalue",
        line: 239,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 239,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 239,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 239,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 239,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 239,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 239,
    },
    Token {
        kind: String,
        lexeme: "\"xuxu\"",
        line: 239,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 244,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 244,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 244,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 244,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 244,
    },
    Token {
        kind: String,
        lexeme: "\"pushvalue G; return 1\"",
        line: 244,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 244,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 244,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 244,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 244,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 245,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 245,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 245,
    },
    Token {
        kind: String,
        lexeme: "\"pushvalue E; return 1\"",
        line: 245,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 245,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 245,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 245,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 246,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 246,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 246,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 247,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 247,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 247,
    },
    Token {
        kind: String,
        lexeme: "\"replace E; return 1\"",
        line: 247,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 247,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 248,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 248,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 248,
    },
    Token {
        kind: String,
        lexeme: "\"pushvalue G; return 1\"",
        line: 248,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 248,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 248,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 249,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 249,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 249,
    },
    Token {
        kind: String,
        lexeme: "\"pushvalue E; return 1\"",
        line: 249,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 249,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 249,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 250,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 250,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: "getfenv",
        line: 250,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 250,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 250,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 250,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 250,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 250,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 251,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 251,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: "getfenv",
        line: 251,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 251,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: "upvalue",
        line: 251,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 251,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 251,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 251,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 251,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        line: 253,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 253,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 253,
    },
    Token {
        kind: String,
        lexeme: "\"newuserdata 0; return 1\"",
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 254,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 254,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: "getfenv",
        line: 254,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        line: 254,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 254,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 254,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 254,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        line: 256,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 256,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 256,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 256,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 256,
    },
    Token {
        kind: String,
        lexeme: "\"pushcclosure 0; return 1\"",
        line: 256,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 257,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 257,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 257,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 257,
    },
    Token {
        kind: Identifier,
        lexeme: "getfenv",
        line: 257,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 257,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        line: 257,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 257,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 257,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 257,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 257,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 257,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 258,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: "setfenv",
        line: 258,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 258,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 258,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 258,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 259,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 259,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 259,
    },
    Token {
        kind: String,
        lexeme: "\"pushvalue E; return 1\"",
        line: 259,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 259,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 259,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 259,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 261,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 261,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 261,
    },
    Token {
        kind: Identifier,
        lexeme: "newproxy",
        line: 261,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 261,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 261,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 262,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 262,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: "getfenv",
        line: 262,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 262,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 262,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 262,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 262,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 263,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 263,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: "setfenv",
        line: 263,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 263,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 263,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 263,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 264,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 264,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 264,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 264,
    },
    Token {
        kind: Identifier,
        lexeme: "getfenv",
        line: 264,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 264,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 264,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 264,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 264,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 264,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 264,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 264,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 271,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 271,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: "ref",
        line: 271,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 271,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 272,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 272,
    },
    Token {
        kind: Identifier,
        lexeme: "unref",
        line: 272,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 272,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 272,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 272,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 273,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 273,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 273,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 273,
    },
    Token {
        kind: Identifier,
        lexeme: "ref",
        line: 273,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 273,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 273,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 273,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 273,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 273,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 273,
    },
    Token {
        kind: Identifier,
        lexeme: "Arr",
        line: 275,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 275,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 275,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 275,
    },
    Token {
        kind: Identifier,
        lexeme: "Lim",
        line: 276,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 276,
    },
    Token {
        kind: Number,
        lexeme: "100",
        line: 276,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 277,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 277,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 277,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: "Lim",
        line: 277,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: "Arr",
        line: 278,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 278,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 278,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 278,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: "ref",
        line: 278,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 278,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 278,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 278,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 278,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 279,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 281,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 281,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: "ref",
        line: 281,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 281,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 281,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 281,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 281,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 281,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 281,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 281,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 281,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: "getref",
        line: 281,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 281,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 281,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 281,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 281,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 281,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 281,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 281,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 282,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 282,
    },
    Token {
        kind: Identifier,
        lexeme: "unref",
        line: 282,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 282,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 282,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 282,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 282,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 282,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 282,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 282,
    },
    Token {
        kind: Identifier,
        lexeme: "unref",
        line: 282,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 282,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 282,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 282,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 282,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 284,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 284,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 284,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 284,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 284,
    },
    Token {
        kind: Identifier,
        lexeme: "Lim",
        line: 284,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 284,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 285,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 285,
    },
    Token {
        kind: Identifier,
        lexeme: "unref",
        line: 285,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 285,
    },
    Token {
        kind: Identifier,
        lexeme: "Arr",
        line: 285,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 285,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 285,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 285,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 285,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 286,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 288,
    },
    Token {
        kind: Identifier,
        lexeme: "printlocks",
        line: 288,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 288,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 288,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 289,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 289,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 289,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 289,
    },
    Token {
        kind: String,
        lexeme: "\"gettable R; return 1\"",
        line: 289,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 289,
    },
    Token {
        kind: String,
        lexeme: "\"n\"",
        line: 289,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 290,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 290,
    },
    Token {
        kind: String,
        lexeme: "\"n\"",
        line: 290,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 290,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 290,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 290,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 291,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 291,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 291,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 291,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 291,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 291,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 291,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 292,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 292,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 292,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 292,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 292,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 292,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 292,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 292,
    },
    Token {
        kind: String,
        lexeme: "\"gettable R; return 1\"",
        line: 292,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 292,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 292,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 292,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 292,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 293,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 294,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 297,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 297,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 297,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: "Lim",
        line: 297,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: "Arr",
        line: 298,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 298,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 298,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 298,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 298,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 298,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 298,
    },
    Token {
        kind: Identifier,
        lexeme: "ref",
        line: 298,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 298,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 298,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 298,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 298,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 299,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 301,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 301,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 301,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 301,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 301,
    },
    Token {
        kind: Identifier,
        lexeme: "Lim",
        line: 301,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 301,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 301,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 301,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 302,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 302,
    },
    Token {
        kind: Identifier,
        lexeme: "unref",
        line: 302,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 302,
    },
    Token {
        kind: Identifier,
        lexeme: "Arr",
        line: 302,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 302,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 302,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 302,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 302,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 303,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 305,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 305,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 305,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 305,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 305,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 305,
    },
    Token {
        kind: Identifier,
        lexeme: "getref",
        line: 305,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 305,
    },
    Token {
        kind: Identifier,
        lexeme: "Arr",
        line: 305,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 305,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 305,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 305,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 305,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 305,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 305,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 305,
    },
    Token {
        kind: String,
        lexeme: "'table'",
        line: 305,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 305,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 308,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 308,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 308,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 308,
    },
    Token {
        kind: Identifier,
        lexeme: "getref",
        line: 308,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 308,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 308,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 308,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 308,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 308,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 308,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 308,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 308,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 311,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 311,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 311,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 311,
    },
    Token {
        kind: Identifier,
        lexeme: "ref",
        line: 311,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 311,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 311,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 311,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 311,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 313,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 313,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 313,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 315,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 315,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 315,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 315,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 315,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 315,
    },
    Token {
        kind: Identifier,
        lexeme: "getref",
        line: 315,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 315,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 315,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 315,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 315,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 315,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 315,
    },
    Token {
        kind: String,
        lexeme: "'table'",
        line: 315,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 315,
    },
    Token {
        kind: Identifier,
        lexeme: "tt",
        line: 319,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 319,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 319,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 319,
    },
    Token {
        kind: Identifier,
        lexeme: "cl",
        line: 320,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 320,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 320,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 320,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 320,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 320,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 320,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 321,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 321,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 321,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 321,
    },
    Token {
        kind: Identifier,
        lexeme: "B",
        line: 321,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 321,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 321,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 322,
    },
    Token {
        kind: Identifier,
        lexeme: "F",
        line: 322,
    },
    Token {
        kind: Identifier,
        lexeme: "F",
        line: 323,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 323,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 323,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 323,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 323,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 323,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 324,
    },
    Token {
        kind: Identifier,
        lexeme: "udval",
        line: 324,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 324,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 324,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 324,
    },
    Token {
        kind: Identifier,
        lexeme: "udataval",
        line: 324,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 324,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 324,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 324,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 325,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 325,
    },
    Token {
        kind: Identifier,
        lexeme: "insert",
        line: 325,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 325,
    },
    Token {
        kind: Identifier,
        lexeme: "cl",
        line: 325,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 325,
    },
    Token {
        kind: Identifier,
        lexeme: "udval",
        line: 325,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 325,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 326,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 326,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 326,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 326,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 326,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 326,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 326,
    },
    Token {
        kind: Number,
        lexeme: "100",
        line: 326,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 326,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 327,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 327,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 327,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 328,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 328,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 328,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 328,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 328,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 328,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 328,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 328,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 328,
    },
    Token {
        kind: Identifier,
        lexeme: "__gc",
        line: 328,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 328,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 328,
    },
    Token {
        kind: Identifier,
        lexeme: "F",
        line: 328,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 328,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 329,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 329,
    },
    Token {
        kind: String,
        lexeme: "\"table.insert({}, {})\"",
        line: 329,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 329,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 329,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 329,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 330,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 330,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 330,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 331,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 331,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 331,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 331,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 331,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: "__gc",
        line: 331,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 331,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: "F",
        line: 331,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 331,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 332,
    },
    Token {
        kind: Identifier,
        lexeme: "dummy",
        line: 332,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 332,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 332,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 332,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 333,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 333,
    },
    Token {
        kind: NotEquals,
        lexeme: " ~",
        line: 333,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 333,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 333,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 333,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 334,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 334,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 334,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 334,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 334,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 334,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 334,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 334,
    },
    Token {
        kind: String,
        lexeme: "\"userdata\"",
        line: 334,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 334,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 335,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 335,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 335,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 335,
    },
    Token {
        kind: Identifier,
        lexeme: "udataval",
        line: 335,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 335,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 335,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 335,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 335,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 335,
    },
    Token {
        kind: Identifier,
        lexeme: "B",
        line: 335,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 335,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 336,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 336,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 336,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 336,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 336,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 336,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 337,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 338,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 338,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 338,
    },
    Token {
        kind: Identifier,
        lexeme: "B",
        line: 339,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 339,
    },
    Token {
        kind: Identifier,
        lexeme: "udval",
        line: 339,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 340,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 340,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 340,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 340,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 340,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 340,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 341,
    },
    Token {
        kind: Identifier,
        lexeme: "tt",
        line: 342,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: "__gc",
        line: 342,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: "F",
        line: 342,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 345,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 346,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 346,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 346,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 346,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 347,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 347,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 347,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 347,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 348,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 348,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 348,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 348,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 348,
    },
    Token {
        kind: String,
        lexeme: "\"count\"",
        line: 348,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 348,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 348,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 349,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 349,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 349,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 349,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 349,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 349,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 349,
    },
    Token {
        kind: Number,
        lexeme: "5001",
        line: 349,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 349,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 350,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 350,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 350,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 350,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 350,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 350,
    },
    Token {
        kind: String,
        lexeme: "\"objsize 2; return 1\"",
        line: 350,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 350,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 350,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 350,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 350,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 350,
    },
    Token {
        kind: Number,
        lexeme: "5001",
        line: 350,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 350,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 351,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 351,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 351,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 351,
    },
    Token {
        kind: String,
        lexeme: "\"count\"",
        line: 351,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 351,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: " >",
        line: 351,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 351,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 351,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 351,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 351,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 351,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 352,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 352,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 352,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 353,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 353,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 353,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 353,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 354,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 354,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 354,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 354,
    },
    Token {
        kind: String,
        lexeme: "\"count\"",
        line: 354,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 354,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: " <",
        line: 354,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 354,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 354,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 354,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 354,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 354,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 356,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 356,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 356,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 356,
    },
    Token {
        kind: String,
        lexeme: "\"count\"",
        line: 356,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 356,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 357,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 357,
    },
    Token {
        kind: String,
        lexeme: "\"stop\"",
        line: 357,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 357,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 358,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 358,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 358,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 358,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 358,
    },
    Token {
        kind: Number,
        lexeme: "1000",
        line: 358,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 358,
    },
    Token {
        kind: Identifier,
        lexeme: "newproxy",
        line: 358,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 358,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 358,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 358,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 358,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 359,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 359,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 359,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 359,
    },
    Token {
        kind: String,
        lexeme: "\"count\"",
        line: 359,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 359,
    },
    Token {
        kind: GreaterThan,
        lexeme: ">",
        line: 359,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 359,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 359,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 359,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 359,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 360,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 360,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 361,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 361,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 361,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 361,
    },
    Token {
        kind: String,
        lexeme: "\"count\"",
        line: 361,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 361,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: " <",
        line: 361,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 361,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 361,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 361,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 361,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 361,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 363,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 363,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 363,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 363,
    },
    Token {
        kind: String,
        lexeme: "\"count\"",
        line: 363,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 363,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 364,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 364,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 364,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 365,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 365,
    },
    Token {
        kind: String,
        lexeme: "\"stop\"",
        line: 365,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 365,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 366,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 366,
    },
    Token {
        kind: Identifier,
        lexeme: "newproxy",
        line: 366,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 366,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 366,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 366,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 367,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 367,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 367,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: "__gc",
        line: 367,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 367,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 367,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 367,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 367,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 367,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 368,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 368,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 368,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 368,
    },
    Token {
        kind: Number,
        lexeme: "1000",
        line: 368,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: "newproxy",
        line: 368,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 368,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 368,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 369,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 369,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 369,
    },
    Token {
        kind: String,
        lexeme: "\"count\"",
        line: 369,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 369,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: " >",
        line: 369,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 369,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 369,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 369,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 370,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 370,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 370,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 371,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 371,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 371,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 371,
    },
    Token {
        kind: String,
        lexeme: "\"count\"",
        line: 371,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 371,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: " >",
        line: 371,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 371,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 371,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 371,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 371,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 371,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 372,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 372,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 372,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 373,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 373,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 373,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 373,
    },
    Token {
        kind: String,
        lexeme: "\"count\"",
        line: 373,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 373,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: " <",
        line: 373,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 373,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 373,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 373,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 373,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 373,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 374,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 377,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 377,
    },
    Token {
        kind: String,
        lexeme: "\"stop\"",
        line: 377,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 377,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 380,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 380,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 380,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 380,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 380,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 380,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 380,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 380,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 380,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 380,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 380,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 380,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 380,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 380,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 380,
    },
    Token {
        kind: Identifier,
        lexeme: "tt",
        line: 380,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 380,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 380,
    },
    Token {
        kind: Identifier,
        lexeme: "na",
        line: 380,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 380,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 380,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 380,
    },
    Token {
        kind: Identifier,
        lexeme: "udataval",
        line: 380,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 380,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 380,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 380,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 381,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 381,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 381,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 381,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 381,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 381,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 381,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 381,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 381,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: "tt",
        line: 381,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 381,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: "nb",
        line: 381,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 381,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: "udataval",
        line: 381,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 381,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 382,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 382,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 382,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 382,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 382,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 382,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 382,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 382,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 382,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: "tt",
        line: 382,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 382,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: "nc",
        line: 382,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 382,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: "udataval",
        line: 382,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 382,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 385,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 385,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 385,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 385,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 385,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 385,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 385,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 385,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 386,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 386,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 386,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 386,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 386,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 386,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 386,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 386,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 388,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 388,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 388,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 388,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 388,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 388,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 388,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 388,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 388,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 388,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 388,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 388,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 388,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 388,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 388,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 388,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 388,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 388,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 388,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 388,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 388,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 388,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 390,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 390,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 390,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 390,
    },
    Token {
        kind: Identifier,
        lexeme: "ref",
        line: 390,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 390,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 390,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 390,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 390,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 391,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 391,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 391,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 391,
    },
    Token {
        kind: Identifier,
        lexeme: "ref",
        line: 391,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 391,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 391,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 391,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 391,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 392,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 392,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 392,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 392,
    },
    Token {
        kind: Identifier,
        lexeme: "ref",
        line: 392,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 392,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 392,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 392,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 392,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 393,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 393,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 393,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: "getref",
        line: 393,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 393,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 393,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 393,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: "getref",
        line: 393,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 393,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 393,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 393,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: "getref",
        line: 393,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 393,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 393,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 394,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 394,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 394,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 394,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 394,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 394,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 394,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 394,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 394,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 394,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 394,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 394,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 394,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 394,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 394,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 394,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 394,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 394,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 394,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 394,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 394,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 394,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 394,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 394,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 394,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 394,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 396,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 396,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 396,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 396,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 396,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 396,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 396,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 396,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 396,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 396,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 396,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 396,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 397,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 397,
    },
    Token {
        kind: Identifier,
        lexeme: "unref",
        line: 397,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 397,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 397,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 397,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 397,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 397,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 397,
    },
    Token {
        kind: Identifier,
        lexeme: "unref",
        line: 397,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 397,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 397,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 397,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 399,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 399,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 399,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 402,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 402,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 402,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 402,
    },
    Token {
        kind: Identifier,
        lexeme: "getn",
        line: 402,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 402,
    },
    Token {
        kind: Identifier,
        lexeme: "cl",
        line: 402,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 402,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 402,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 402,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 402,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 402,
    },
    Token {
        kind: Identifier,
        lexeme: "cl",
        line: 402,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 402,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 402,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 402,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 402,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 402,
    },
    Token {
        kind: Identifier,
        lexeme: "nc",
        line: 402,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 402,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 404,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 404,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 404,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 404,
    },
    Token {
        kind: Identifier,
        lexeme: "getref",
        line: 404,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 404,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 404,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 404,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 405,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 405,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 405,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 405,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 405,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 405,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 405,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 405,
    },
    Token {
        kind: String,
        lexeme: "'userdata'",
        line: 405,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 405,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 405,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 405,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 405,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 405,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 405,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 405,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 405,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 405,
    },
    Token {
        kind: Identifier,
        lexeme: "tt",
        line: 405,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 405,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 406,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 406,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 406,
    },
    Token {
        kind: Identifier,
        lexeme: "tt",
        line: 407,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 407,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 407,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 407,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 407,
    },
    Token {
        kind: Identifier,
        lexeme: "tt",
        line: 408,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 408,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 408,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 409,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 409,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 409,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 410,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 410,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 410,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 411,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 411,
    },
    Token {
        kind: Identifier,
        lexeme: "unref",
        line: 411,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 411,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 411,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 411,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 411,
    },
    Token {
        kind: Identifier,
        lexeme: "n5",
        line: 412,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 412,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 412,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 412,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 412,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 412,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 412,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 412,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 413,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 413,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 413,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 413,
    },
    Token {
        kind: Identifier,
        lexeme: "n5",
        line: 413,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 413,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 413,
    },
    Token {
        kind: Identifier,
        lexeme: "__gc",
        line: 413,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 413,
    },
    Token {
        kind: Identifier,
        lexeme: "F",
        line: 413,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 413,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 413,
    },
    Token {
        kind: Identifier,
        lexeme: "n5",
        line: 414,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 414,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 414,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 414,
    },
    Token {
        kind: Identifier,
        lexeme: "udataval",
        line: 414,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 414,
    },
    Token {
        kind: Identifier,
        lexeme: "n5",
        line: 414,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 414,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 415,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 415,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 415,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 416,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 416,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 416,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 416,
    },
    Token {
        kind: Identifier,
        lexeme: "getn",
        line: 416,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 416,
    },
    Token {
        kind: Identifier,
        lexeme: "cl",
        line: 416,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 416,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 416,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 416,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 416,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 416,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 418,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 418,
    },
    Token {
        kind: Identifier,
        lexeme: "cl",
        line: 418,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 418,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 418,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 418,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 418,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 418,
    },
    Token {
        kind: Identifier,
        lexeme: "n5",
        line: 418,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 418,
    },
    Token {
        kind: Identifier,
        lexeme: "cl",
        line: 418,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 418,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 418,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 418,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 418,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 418,
    },
    Token {
        kind: Identifier,
        lexeme: "nb",
        line: 418,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 418,
    },
    Token {
        kind: Identifier,
        lexeme: "cl",
        line: 418,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 418,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 418,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 418,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 418,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 418,
    },
    Token {
        kind: Identifier,
        lexeme: "na",
        line: 418,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 418,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 421,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 421,
    },
    Token {
        kind: Identifier,
        lexeme: "na",
        line: 421,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 421,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 421,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 421,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 421,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 421,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 421,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 422,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 422,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 422,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 422,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 422,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 422,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 422,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 422,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 422,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 422,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 423,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 423,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 423,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 423,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 423,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 423,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 423,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 423,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 423,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 423,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 423,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 424,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 424,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 424,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 424,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 424,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 424,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 424,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 424,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 424,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 424,
    },
    Token {
        kind: Identifier,
        lexeme: "__gc",
        line: 424,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 424,
    },
    Token {
        kind: Identifier,
        lexeme: "F",
        line: 424,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 424,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 424,
    },
    Token {
        kind: Identifier,
        lexeme: "na",
        line: 425,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 425,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 425,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 425,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 425,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 425,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 425,
    },
    Token {
        kind: Identifier,
        lexeme: "udataval",
        line: 425,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 425,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 425,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 425,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 425,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 425,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 425,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 426,
    },
    Token {
        kind: Identifier,
        lexeme: "cl",
        line: 427,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 427,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 427,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 427,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 428,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 428,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 428,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 428,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 428,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 428,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 428,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 429,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 429,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 429,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 429,
    },
    Token {
        kind: Identifier,
        lexeme: "getn",
        line: 429,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 429,
    },
    Token {
        kind: Identifier,
        lexeme: "cl",
        line: 429,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 429,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 429,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 429,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 429,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 429,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 430,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 430,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 430,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 430,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 430,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 430,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 430,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 430,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 430,
    },
    Token {
        kind: Identifier,
        lexeme: "cl",
        line: 430,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 430,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 430,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 430,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 430,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 430,
    },
    Token {
        kind: Identifier,
        lexeme: "na",
        line: 430,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 430,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 430,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 430,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 430,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 430,
    },
    Token {
        kind: Identifier,
        lexeme: "na",
        line: 431,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 431,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 431,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 434,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 434,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 434,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 434,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 434,
    },
    Token {
        kind: Identifier,
        lexeme: "Lim",
        line: 434,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 434,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 434,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 434,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 435,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 435,
    },
    Token {
        kind: Identifier,
        lexeme: "unref",
        line: 435,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 435,
    },
    Token {
        kind: Identifier,
        lexeme: "Arr",
        line: 435,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 435,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 435,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 435,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 435,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 436,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 438,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 438,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 438,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 438,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 438,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 438,
    },
    Token {
        kind: Number,
        lexeme: "41",
        line: 438,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 438,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 438,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 438,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 438,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 438,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 438,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 438,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 438,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 438,
    },
    Token {
        kind: Identifier,
        lexeme: "__gc",
        line: 438,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 438,
    },
    Token {
        kind: Identifier,
        lexeme: "F",
        line: 438,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 438,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 438,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 439,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 439,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 439,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 439,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 439,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 439,
    },
    Token {
        kind: String,
        lexeme: "\"objsize 2; return 1\"",
        line: 439,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 439,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 439,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 439,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 439,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 439,
    },
    Token {
        kind: Number,
        lexeme: "41",
        line: 439,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 439,
    },
    Token {
        kind: Identifier,
        lexeme: "cl",
        line: 440,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 440,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 440,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 440,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 441,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 441,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 441,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 441,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 441,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 441,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 441,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 441,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 441,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 442,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 442,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 442,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 442,
    },
    Token {
        kind: Identifier,
        lexeme: "udataval",
        line: 442,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 442,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 442,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 442,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 443,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 443,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 443,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 445,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 445,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 445,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 445,
    },
    Token {
        kind: Identifier,
        lexeme: "getn",
        line: 445,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 445,
    },
    Token {
        kind: Identifier,
        lexeme: "cl",
        line: 445,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 445,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 445,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 445,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 445,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 445,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 446,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 446,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 446,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        line: 446,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 446,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 446,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 446,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 446,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 446,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 446,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 446,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 446,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 446,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 446,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 446,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 447,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 447,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 447,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 448,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 448,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 448,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 448,
    },
    Token {
        kind: Identifier,
        lexeme: "getn",
        line: 448,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 448,
    },
    Token {
        kind: Identifier,
        lexeme: "cl",
        line: 448,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 448,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 448,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 448,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 448,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 448,
    },
    Token {
        kind: Identifier,
        lexeme: "cl",
        line: 448,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 448,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 448,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 448,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 448,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 448,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 448,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 448,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 451,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 451,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 451,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 451,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 451,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 451,
    },
    Token {
        kind: String,
        lexeme: "\"equal 2 4; return 1\"",
        line: 451,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 451,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 451,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 451,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 451,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 451,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 451,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 451,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 451,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 451,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 451,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 452,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 452,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 452,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 452,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 452,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 452,
    },
    Token {
        kind: String,
        lexeme: "\"equal 3 2; return 1\"",
        line: 452,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 452,
    },
    Token {
        kind: String,
        lexeme: "'alo'",
        line: 452,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 452,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 452,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 452,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 452,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 453,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 453,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 453,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 453,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 453,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 453,
    },
    Token {
        kind: String,
        lexeme: "\"equal 2 3; return 1\"",
        line: 453,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 453,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 453,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 453,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 453,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 453,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 453,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 454,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 454,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 454,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 454,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 454,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 454,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 454,
    },
    Token {
        kind: String,
        lexeme: "\"equal 2 3; return 1\"",
        line: 454,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 454,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 454,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 454,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 454,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 454,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 454,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 454,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 454,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 455,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 455,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 455,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 455,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 455,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 455,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 455,
    },
    Token {
        kind: String,
        lexeme: "\"equal 2 3; return 1\"",
        line: 455,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 455,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 455,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 456,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 456,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 456,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 456,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 456,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 456,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 456,
    },
    Token {
        kind: String,
        lexeme: "\"equal 2 3; return 1\"",
        line: 456,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 456,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 456,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 456,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 456,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 459,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 460,
    },
    Token {
        kind: Identifier,
        lexeme: "map",
        line: 460,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 460,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 460,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 460,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 461,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 461,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 461,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 461,
    },
    Token {
        kind: Identifier,
        lexeme: "__eq",
        line: 461,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 461,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 461,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 461,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 461,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 461,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 461,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 461,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 461,
    },
    Token {
        kind: Identifier,
        lexeme: "map",
        line: 461,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 461,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 461,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 461,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 461,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 461,
    },
    Token {
        kind: Identifier,
        lexeme: "map",
        line: 461,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 461,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 461,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 461,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 461,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 461,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 462,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 462,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 462,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 462,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 462,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 462,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 463,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        line: 463,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 463,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 463,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 463,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 463,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 463,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 463,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 463,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 464,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 464,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 464,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 464,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        line: 464,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 464,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 464,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 464,
    },
    Token {
        kind: Identifier,
        lexeme: "map",
        line: 465,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 465,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        line: 465,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 465,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 465,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 465,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 466,
    },
    Token {
        kind: Identifier,
        lexeme: "u",
        line: 466,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 467,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 468,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 468,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 468,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 468,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 468,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 468,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 468,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 468,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 468,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 468,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 468,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 468,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 468,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 469,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 469,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 469,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 469,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 469,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 469,
    },
    Token {
        kind: NotEquals,
        lexeme: " ~",
        line: 469,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 469,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 469,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 469,
    },
    Token {
        kind: Number,
        lexeme: "11",
        line: 469,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 469,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 469,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 470,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 470,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 470,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 470,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 470,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 470,
    },
    Token {
        kind: String,
        lexeme: "\"equal 2 3; return 1\"",
        line: 470,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 470,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 470,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 470,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 470,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 470,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 470,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 470,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 470,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 470,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 470,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 470,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 470,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 471,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 471,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 471,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 471,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 471,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 471,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 471,
    },
    Token {
        kind: String,
        lexeme: "\"equal 2 3; return 1\"",
        line: 471,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 471,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 471,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 471,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 471,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 471,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 471,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 471,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 471,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 471,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 471,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 471,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 471,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 472,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 472,
    },
    Token {
        kind: Identifier,
        lexeme: "__eq",
        line: 472,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 472,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 472,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 473,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 473,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 473,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 473,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 473,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 473,
    },
    Token {
        kind: NotEquals,
        lexeme: " ~",
        line: 473,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 473,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 473,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 473,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 473,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 473,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 473,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 474,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 476,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 476,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 481,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 482,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 482,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 482,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 482,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 482,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 483,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 483,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 483,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 483,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 483,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 483,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 483,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 484,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 484,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 484,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 484,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 484,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 484,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 484,
    },
    Token {
        kind: Identifier,
        lexeme: "newuserdata",
        line: 484,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 484,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 484,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 484,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 485,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 486,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 486,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 486,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 486,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 486,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 486,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 486,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 486,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 486,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 487,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 487,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 487,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 487,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 487,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 487,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 487,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 487,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 487,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 487,
    },
    Token {
        kind: Identifier,
        lexeme: "__gc",
        line: 487,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 487,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 487,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 487,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 487,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 487,
    },
    Token {
        kind: Identifier,
        lexeme: "error",
        line: 487,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 487,
    },
    Token {
        kind: String,
        lexeme: "\"error inside gc\"",
        line: 487,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 487,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 487,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 487,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 487,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 488,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 489,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 489,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 489,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 489,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 489,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 489,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 489,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 489,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 489,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 490,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 490,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 490,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 490,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 490,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 490,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 490,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 490,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 490,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 490,
    },
    Token {
        kind: Identifier,
        lexeme: "__gc",
        line: 490,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 490,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 490,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 490,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 490,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 490,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 490,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 490,
    },
    Token {
        kind: String,
        lexeme: "\"A=A+1\"",
        line: 490,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 490,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 490,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 490,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 490,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 490,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 490,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 491,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 492,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 492,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 492,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 492,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 492,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 493,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 493,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 493,
    },
    Token {
        kind: While,
        lexeme: "while",
        line: 494,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 494,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 494,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 495,
    },
    Token {
        kind: Identifier,
        lexeme: "xpcall",
        line: 495,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 495,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 495,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 495,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 495,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 495,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 495,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 495,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 495,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 495,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 495,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 495,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 495,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 495,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 495,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 495,
    },
    Token {
        kind: Break,
        lexeme: "break",
        line: 496,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 497,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 498,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 499,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 499,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 499,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 499,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 499,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 499,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 499,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 500,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 500,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 500,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 500,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 500,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 500,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 500,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 501,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 504,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 505,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 505,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 505,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 505,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 505,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 505,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 505,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 505,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 505,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 505,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 506,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 506,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 506,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 506,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 506,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 506,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 506,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 506,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 506,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 506,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 506,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 506,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 506,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 506,
    },
    Token {
        kind: Identifier,
        lexeme: "pushuserdata",
        line: 506,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 506,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 506,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 506,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 506,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 507,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 507,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 507,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 507,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 507,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 507,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 507,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 507,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 507,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 507,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 507,
    },
    Token {
        kind: Identifier,
        lexeme: "udataval",
        line: 507,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 507,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 507,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 507,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 507,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 507,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 507,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 507,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 507,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 507,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 507,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 507,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 508,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 508,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 508,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 508,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 508,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 508,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 508,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 508,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 508,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 508,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 508,
    },
    Token {
        kind: Identifier,
        lexeme: "pushuserdata",
        line: 508,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 508,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 508,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 508,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 508,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 508,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 508,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 508,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 508,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 508,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 508,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 508,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 509,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 509,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 509,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 509,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 509,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 509,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 509,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 509,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 509,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 509,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 509,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 509,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 509,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 509,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 509,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 509,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 509,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 510,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 510,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 510,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 510,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 510,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 510,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 510,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 510,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 510,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 510,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 510,
    },
    Token {
        kind: Identifier,
        lexeme: "pushuserdata",
        line: 510,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 510,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 510,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 510,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 510,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 510,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 510,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 510,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 511,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 511,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 511,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 511,
    },
    Token {
        kind: Identifier,
        lexeme: "tostring",
        line: 511,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 511,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 511,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 511,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 511,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 511,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 511,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 511,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 511,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 511,
    },
    Token {
        kind: String,
        lexeme: "\"string\"",
        line: 511,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 511,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 512,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 517,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 517,
    },
    Token {
        kind: Identifier,
        lexeme: "closestate",
        line: 517,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 517,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 517,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 517,
    },
    Token {
        kind: Identifier,
        lexeme: "newstate",
        line: 517,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 517,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 517,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 517,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 517,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 518,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 518,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 518,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 518,
    },
    Token {
        kind: Identifier,
        lexeme: "newstate",
        line: 518,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 518,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 518,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 519,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 519,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 519,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 519,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 520,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 520,
    },
    Token {
        kind: Identifier,
        lexeme: "pack",
        line: 520,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 520,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 520,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 520,
    },
    Token {
        kind: Identifier,
        lexeme: "doremote",
        line: 520,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 520,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 520,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 520,
    },
    Token {
        kind: String,
        lexeme: "\"function f () return 'alo', 3 end; f()\"",
        line: 520,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 520,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 520,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 520,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 520,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 520,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 520,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 520,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 520,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 522,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 522,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 522,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 522,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 522,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 522,
    },
    Token {
        kind: Identifier,
        lexeme: "doremote",
        line: 522,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 522,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 522,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 522,
    },
    Token {
        kind: String,
        lexeme: "\"return f()\"",
        line: 522,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 522,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 523,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 523,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 523,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 523,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 523,
    },
    Token {
        kind: String,
        lexeme: "'alo'",
        line: 523,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 523,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 523,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 523,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 523,
    },
    Token {
        kind: String,
        lexeme: "'3'",
        line: 523,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 523,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 525,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 525,
    },
    Token {
        kind: Identifier,
        lexeme: "doremote",
        line: 525,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 525,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 525,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 525,
    },
    Token {
        kind: String,
        lexeme: "\"_ERRORMESSAGE = nil\"",
        line: 525,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 525,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 527,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 527,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 527,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 527,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 527,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 527,
    },
    Token {
        kind: Identifier,
        lexeme: "doremote",
        line: 527,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 527,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 527,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 527,
    },
    Token {
        kind: String,
        lexeme: "\"return sin(1)\"",
        line: 527,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 527,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 528,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 528,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 528,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 528,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 528,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 528,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 528,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 528,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 528,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 528,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 528,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 528,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 531,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 531,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 531,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 531,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 531,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 531,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 531,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 531,
    },
    Token {
        kind: Identifier,
        lexeme: "doremote",
        line: 531,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 531,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 531,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 531,
    },
    Token {
        kind: String,
        lexeme: "\"return a+\"",
        line: 531,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 531,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 532,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 532,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 532,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 532,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 532,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 532,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 532,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 532,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 532,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 532,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 532,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 532,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 532,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 532,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 532,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 532,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 532,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 532,
    },
    Token {
        kind: String,
        lexeme: "\"string\"",
        line: 532,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 532,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 534,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 534,
    },
    Token {
        kind: Identifier,
        lexeme: "loadlib",
        line: 534,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 534,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 534,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 534,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 535,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 535,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 535,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 535,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 535,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 535,
    },
    Token {
        kind: Identifier,
        lexeme: "doremote",
        line: 535,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 535,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 535,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 535,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\n  a = strlibopen()\n  a = packageopen()\n  a = baselibopen(); assert(a == _G and require(\"_G\") == a)\n  a = iolibopen(); assert(type(a.read) == \"function\")\n  assert(require(\"io\") == a)\n  a = tablibopen(); assert(type(a.insert) == \"function\")\n  a = dblibopen(); assert(type(a.getlocal) == \"function\")\n  a = mathlibopen(); assert(type(a.sin) == \"function\")\n  return string.sub('okinama', 1, 2)\n]]",
        line: 545,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 545,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 546,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 546,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 546,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 546,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 546,
    },
    Token {
        kind: String,
        lexeme: "\"ok\"",
        line: 546,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 546,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 548,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 548,
    },
    Token {
        kind: Identifier,
        lexeme: "closestate",
        line: 548,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 548,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 548,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 548,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 548,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 550,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 550,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 550,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 550,
    },
    Token {
        kind: Identifier,
        lexeme: "newstate",
        line: 550,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 550,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 550,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 551,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 551,
    },
    Token {
        kind: Identifier,
        lexeme: "loadlib",
        line: 551,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 551,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 551,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 551,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 552,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 552,
    },
    Token {
        kind: Identifier,
        lexeme: "doremote",
        line: 552,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 552,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 552,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 552,
    },
    Token {
        kind: String,
        lexeme: "\"a = {}\"",
        line: 552,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 552,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 553,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 553,
    },
    Token {
        kind: Identifier,
        lexeme: "testC",
        line: 553,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 553,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 553,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 553,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[pushstring a; gettable G; pushstring x; pushnum 1;\n             settable -3]]",
        line: 554,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 554,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 555,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 555,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 555,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 555,
    },
    Token {
        kind: Identifier,
        lexeme: "doremote",
        line: 555,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 555,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 555,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 555,
    },
    Token {
        kind: String,
        lexeme: "\"return a.x\"",
        line: 555,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 555,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 555,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 555,
    },
    Token {
        kind: String,
        lexeme: "\"1\"",
        line: 555,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 555,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 557,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 557,
    },
    Token {
        kind: Identifier,
        lexeme: "closestate",
        line: 557,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 557,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 557,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 557,
    },
    Token {
        kind: Identifier,
        lexeme: "L1",
        line: 559,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 559,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 559,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 561,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 561,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 561,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 561,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 566,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 566,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 566,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 567,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 567,
    },
    Token {
        kind: Identifier,
        lexeme: "totalmem",
        line: 567,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 567,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 567,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 567,
    },
    Token {
        kind: Identifier,
        lexeme: "totalmem",
        line: 567,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 567,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 567,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 567,
    },
    Token {
        kind: Number,
        lexeme: "5000",
        line: 567,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 567,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 568,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 568,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 568,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 568,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 568,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 568,
    },
    Token {
        kind: String,
        lexeme: "\"local a={}; for i=1,100000 do a[i]=i end\"",
        line: 568,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 568,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 568,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 569,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 569,
    },
    Token {
        kind: Identifier,
        lexeme: "totalmem",
        line: 569,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 569,
    },
    Token {
        kind: Number,
        lexeme: "1000000000",
        line: 569,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 569,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 572,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 572,
    },
    Token {
        kind: Identifier,
        lexeme: "stack",
        line: 572,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 572,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 572,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 572,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 572,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 572,
    },
    Token {
        kind: GreaterThan,
        lexeme: ">",
        line: 572,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 572,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 572,
    },
    Token {
        kind: Identifier,
        lexeme: "stack",
        line: 572,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 572,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 572,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 572,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 572,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 572,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 572,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 572,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 577,
    },
    Token {
        kind: Identifier,
        lexeme: "testamem",
        line: 577,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 577,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 577,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 577,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 577,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 577,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 578,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 578,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 578,
    },
    Token {
        kind: Identifier,
        lexeme: "stack",
        line: 579,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 579,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 579,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 579,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 580,
    },
    Token {
        kind: Identifier,
        lexeme: "M",
        line: 580,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 580,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 580,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 580,
    },
    Token {
        kind: Identifier,
        lexeme: "totalmem",
        line: 580,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 580,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 580,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 581,
    },
    Token {
        kind: Identifier,
        lexeme: "oldM",
        line: 581,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 581,
    },
    Token {
        kind: Identifier,
        lexeme: "M",
        line: 581,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 582,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 582,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 582,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 582,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 582,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 582,
    },
    Token {
        kind: While,
        lexeme: "while",
        line: 583,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 583,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 583,
    },
    Token {
        kind: Identifier,
        lexeme: "M",
        line: 584,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 584,
    },
    Token {
        kind: Identifier,
        lexeme: "M",
        line: 584,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 584,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 584,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 585,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 585,
    },
    Token {
        kind: Identifier,
        lexeme: "totalmem",
        line: 585,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 585,
    },
    Token {
        kind: Identifier,
        lexeme: "M",
        line: 585,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 585,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 586,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 586,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 586,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 586,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 586,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 586,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 586,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 586,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 587,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 587,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 587,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 587,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 587,
    },
    Token {
        kind: Break,
        lexeme: "break",
        line: 587,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 587,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 588,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 588,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 588,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 589,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 589,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 589,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 589,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 589,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 589,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 589,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 589,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 589,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 589,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 589,
    },
    Token {
        kind: String,
        lexeme: "\"memory\"",
        line: 589,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 589,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 589,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 590,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 590,
    },
    Token {
        kind: Identifier,
        lexeme: "totalmem",
        line: 590,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 590,
    },
    Token {
        kind: Number,
        lexeme: "1000000000",
        line: 590,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 590,
    },
    Token {
        kind: Identifier,
        lexeme: "error",
        line: 591,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 591,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 591,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 591,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 591,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 591,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 592,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 593,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 594,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 594,
    },
    Token {
        kind: Identifier,
        lexeme: "totalmem",
        line: 594,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 594,
    },
    Token {
        kind: Number,
        lexeme: "1000000000",
        line: 594,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 594,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 595,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 595,
    },
    Token {
        kind: String,
        lexeme: "\"\\nlimit for \"",
        line: 595,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 595,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 595,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 595,
    },
    Token {
        kind: String,
        lexeme: "\": \"",
        line: 595,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 595,
    },
    Token {
        kind: Identifier,
        lexeme: "M",
        line: 595,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 595,
    },
    Token {
        kind: Identifier,
        lexeme: "oldM",
        line: 595,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 595,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 596,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 596,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 597,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 602,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 602,
    },
    Token {
        kind: Identifier,
        lexeme: "testamem",
        line: 602,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 602,
    },
    Token {
        kind: String,
        lexeme: "\"state creation\"",
        line: 602,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 602,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 602,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 602,
    },
    Token {
        kind: Identifier,
        lexeme: "newstate",
        line: 602,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 602,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 603,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 603,
    },
    Token {
        kind: Identifier,
        lexeme: "closestate",
        line: 603,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 603,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 603,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 603,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 603,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 608,
    },
    Token {
        kind: Identifier,
        lexeme: "expand",
        line: 608,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 608,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 608,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 608,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 608,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 608,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 609,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 609,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "n=",
        line: 609,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 609,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 609,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 609,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 609,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 609,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 609,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 610,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 610,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 610,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 610,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 610,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 610,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 610,
    },
    Token {
        kind: String,
        lexeme: "\"=\"",
        line: 610,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 610,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 610,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 610,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 611,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 611,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 611,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 611,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 611,
    },
    Token {
        kind: String,
        lexeme: "\"T.doonnewstack([%s[ %s;\\n collectgarbage(); %s]%s])\\n\"",
        line: 611,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 611,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 612,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 612,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 612,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 612,
    },
    Token {
        kind: Identifier,
        lexeme: "expand",
        line: 612,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 612,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 612,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 612,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 612,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 612,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 612,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 612,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 612,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 612,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 612,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 613,
    },
    Token {
        kind: Identifier,
        lexeme: "G",
        line: 615,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 615,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 615,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 615,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 615,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 615,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 615,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 615,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 615,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 615,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 615,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 615,
    },
    Token {
        kind: String,
        lexeme: "\"count\"",
        line: 615,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 615,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 616,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 616,
    },
    Token {
        kind: Identifier,
        lexeme: "expand",
        line: 616,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 616,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 616,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 616,
    },
    Token {
        kind: String,
        lexeme: "\"G=G+1\"",
        line: 616,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 616,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 616,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 616,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 616,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 617,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 617,
    },
    Token {
        kind: Identifier,
        lexeme: "G",
        line: 617,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "G=",
        line: 617,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 617,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 617,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 617,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 617,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 617,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 617,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 617,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 617,
    },
    Token {
        kind: Identifier,
        lexeme: "testamem",
        line: 619,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 619,
    },
    Token {
        kind: String,
        lexeme: "\"thread creation\"",
        line: 619,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 619,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 619,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 619,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 619,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 620,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 620,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 620,
    },
    Token {
        kind: Identifier,
        lexeme: "doonnewstack",
        line: 620,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 620,
    },
    Token {
        kind: String,
        lexeme: "\"x=1\"",
        line: 620,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 620,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 620,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 620,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 620,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 621,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 621,
    },
    Token {
        kind: Identifier,
        lexeme: "testamem",
        line: 626,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 626,
    },
    Token {
        kind: String,
        lexeme: "\"loadstring\"",
        line: 626,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 626,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 626,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 626,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 626,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 627,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 627,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 627,
    },
    Token {
        kind: String,
        lexeme: "\"x=1\"",
        line: 627,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 627,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 628,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 628,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 631,
    },
    Token {
        kind: Identifier,
        lexeme: "testprog",
        line: 631,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 631,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\nlocal function foo () return end\nlocal t = {\"x\"}\na = \"aaa\"\nfor _, v in ipairs(t) do a=a..v end\nreturn true\n]]",
        line: 637,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 640,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 640,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 640,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 640,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 640,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 641,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 641,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 641,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 641,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 641,
    },
    Token {
        kind: Identifier,
        lexeme: "tmpname",
        line: 641,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 641,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 641,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 642,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 642,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 642,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 642,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 642,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 642,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 642,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 642,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 642,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 642,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 642,
    },
    Token {
        kind: String,
        lexeme: "\"w\"",
        line: 642,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 642,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 642,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 643,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 643,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 643,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 643,
    },
    Token {
        kind: Identifier,
        lexeme: "testprog",
        line: 643,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 643,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 644,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 644,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 644,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 644,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 644,
    },
    Token {
        kind: Identifier,
        lexeme: "testamem",
        line: 645,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 645,
    },
    Token {
        kind: String,
        lexeme: "\"dofile\"",
        line: 645,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 645,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 645,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 645,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 645,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 646,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 646,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 646,
    },
    Token {
        kind: Identifier,
        lexeme: "loadfile",
        line: 646,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 646,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 646,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 646,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 647,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 647,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 647,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 647,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 647,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 647,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 648,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 648,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 649,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 649,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 649,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 649,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 649,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 649,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 649,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 649,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 649,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 650,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 650,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 650,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 650,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 650,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 650,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 650,
    },
    Token {
        kind: String,
        lexeme: "\"aaax\"",
        line: 650,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 650,
    },
    Token {
        kind: Identifier,
        lexeme: "testamem",
        line: 655,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 655,
    },
    Token {
        kind: String,
        lexeme: "\"string creation\"",
        line: 655,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 655,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 655,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 655,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 655,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 656,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 656,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 656,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 656,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 656,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 656,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 656,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 656,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 656,
    },
    Token {
        kind: String,
        lexeme: "\"alo alo\"",
        line: 656,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 656,
    },
    Token {
        kind: String,
        lexeme: "\"(a)\"",
        line: 656,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 656,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 656,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 656,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 656,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 656,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 656,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 656,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 656,
    },
    Token {
        kind: String,
        lexeme: "'b'",
        line: 656,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 656,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 656,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 657,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 657,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 657,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 657,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 657,
    },
    Token {
        kind: String,
        lexeme: "'ablo ablo'",
        line: 657,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 657,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 658,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 658,
    },
    Token {
        kind: Identifier,
        lexeme: "testamem",
        line: 660,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 660,
    },
    Token {
        kind: String,
        lexeme: "\"dump/undump\"",
        line: 660,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 660,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 660,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 660,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 660,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 661,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 661,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 661,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 661,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 661,
    },
    Token {
        kind: Identifier,
        lexeme: "testprog",
        line: 661,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 661,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 662,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 662,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 662,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 662,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 662,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 662,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 662,
    },
    Token {
        kind: Identifier,
        lexeme: "dump",
        line: 662,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 662,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 662,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 662,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 663,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 663,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 663,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 663,
    },
    Token {
        kind: Identifier,
        lexeme: "loadstring",
        line: 663,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 663,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 663,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 663,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 664,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 664,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 664,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 664,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 664,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 664,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 665,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 665,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 667,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 667,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 667,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 667,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 667,
    },
    Token {
        kind: Identifier,
        lexeme: "tmpname",
        line: 667,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 667,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 667,
    },
    Token {
        kind: Identifier,
        lexeme: "testamem",
        line: 668,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 668,
    },
    Token {
        kind: String,
        lexeme: "\"file creation\"",
        line: 668,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 668,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 668,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 668,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 668,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 669,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 669,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 669,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 669,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 669,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 669,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 669,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 669,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 669,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 669,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 669,
    },
    Token {
        kind: String,
        lexeme: "'w'",
        line: 669,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 669,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 669,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 670,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 670,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 670,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 670,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 670,
    },
    Token {
        kind: Identifier,
        lexeme: "open",
        line: 670,
    },
    Token {
        kind: String,
        lexeme: "\"nomenaoexistente\"",
        line: 670,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 670,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 671,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 671,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 671,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 671,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 671,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 671,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 671,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 672,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 672,
    },
    Token {
        kind: Identifier,
        lexeme: "loadfile",
        line: 672,
    },
    Token {
        kind: String,
        lexeme: "'nomenaoexistente'",
        line: 672,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 673,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 673,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 674,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 674,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 674,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 674,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 674,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 674,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 674,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 674,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 674,
    },
    Token {
        kind: Identifier,
        lexeme: "testamem",
        line: 676,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 676,
    },
    Token {
        kind: String,
        lexeme: "\"table creation\"",
        line: 676,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 676,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 676,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 676,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 676,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 677,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 677,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 677,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 677,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 677,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 677,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 677,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 677,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 677,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 678,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 678,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 678,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 678,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 678,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 678,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 678,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 678,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 678,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 678,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 678,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 678,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 678,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 678,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 678,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 678,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 678,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 678,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 678,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 678,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 678,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 678,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 678,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 678,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 679,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 679,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 679,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 679,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 679,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 679,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 679,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 679,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 679,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 679,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 679,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 679,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 679,
    },
    Token {
        kind: String,
        lexeme: "'table'",
        line: 679,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 679,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 679,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 679,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 679,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 679,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 679,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 679,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 679,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 679,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 680,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 680,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 682,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 682,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 682,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 682,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 683,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 683,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 683,
    },
    Token {
        kind: Identifier,
        lexeme: "testamem",
        line: 684,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 684,
    },
    Token {
        kind: String,
        lexeme: "\"closure creation\"",
        line: 684,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 684,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 684,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 684,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 684,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 685,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 685,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 685,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 685,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 685,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 685,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 685,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 686,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 686,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 686,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 686,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 686,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 686,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 686,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 686,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 686,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 686,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 686,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 686,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 686,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 686,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 687,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 688,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 688,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 688,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 688,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 688,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 688,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 688,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 688,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 688,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 688,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 688,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 688,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 688,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 688,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 688,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 689,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 689,
    },
    Token {
        kind: Identifier,
        lexeme: "testamem",
        line: 691,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 691,
    },
    Token {
        kind: String,
        lexeme: "\"coroutines\"",
        line: 691,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 691,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 691,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 691,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 691,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 692,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 692,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 692,
    },
    Token {
        kind: Identifier,
        lexeme: "coroutine",
        line: 692,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 692,
    },
    Token {
        kind: Identifier,
        lexeme: "wrap",
        line: 692,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 692,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 692,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 692,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 692,
    },
    Token {
        kind: Identifier,
        lexeme: "coroutine",
        line: 693,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 693,
    },
    Token {
        kind: Identifier,
        lexeme: "yield",
        line: 693,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 693,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 693,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 693,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 693,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 693,
    },
    Token {
        kind: String,
        lexeme: "\"a\"",
        line: 693,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 693,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 693,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 693,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 693,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 694,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 694,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 694,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 695,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 695,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 696,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 696,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 696,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 696,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        line: 696,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 696,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 696,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 696,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 696,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 696,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 696,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 696,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 696,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 696,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 697,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 697,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 697,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 697,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 698,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 698,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 700,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 700,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 703,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 703,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 703,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 703,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 703,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 703,
    },
    Token {
        kind: String,
        lexeme: "\"alo.alo.uhuh.\"",
        line: 703,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 703,
    },
    Token {
        kind: String,
        lexeme: "\".\"",
        line: 703,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 703,
    },
    Token {
        kind: String,
        lexeme: "\"//\"",
        line: 703,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 703,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 703,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 703,
    },
    Token {
        kind: String,
        lexeme: "\"alo//alo//uhuh//\"",
        line: 703,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 703,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 704,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 704,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 704,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 704,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 704,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 704,
    },
    Token {
        kind: String,
        lexeme: "\"alo.alo.uhuh.\"",
        line: 704,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 704,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 704,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 704,
    },
    Token {
        kind: String,
        lexeme: "\"//\"",
        line: 704,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 704,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 704,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 704,
    },
    Token {
        kind: String,
        lexeme: "\"//.//.uhuh.\"",
        line: 704,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 704,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 705,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 705,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 705,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 705,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 705,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 705,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 705,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 705,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 705,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 705,
    },
    Token {
        kind: String,
        lexeme: "\"//\"",
        line: 705,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 705,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 705,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 705,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 705,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 705,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 706,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 706,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 706,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 706,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 706,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 706,
    },
    Token {
        kind: String,
        lexeme: "\"...\"",
        line: 706,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 706,
    },
    Token {
        kind: String,
        lexeme: "\".\"",
        line: 706,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 706,
    },
    Token {
        kind: String,
        lexeme: "\"/.\"",
        line: 706,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 706,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 706,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 706,
    },
    Token {
        kind: String,
        lexeme: "\"/././.\"",
        line: 706,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 706,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 707,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 707,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 707,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 707,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 707,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 707,
    },
    Token {
        kind: String,
        lexeme: "\"...\"",
        line: 707,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 707,
    },
    Token {
        kind: String,
        lexeme: "\"...\"",
        line: 707,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 707,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 707,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 707,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 707,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 707,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 707,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 707,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 710,
    },
    Token {
        kind: String,
        lexeme: "'OK'",
        line: 710,
    },
]
