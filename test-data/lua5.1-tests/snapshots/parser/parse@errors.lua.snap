---
source: src/main.rs
expression: parsed
input_file: test-data/lua5.1-tests/errors.lua
---
[
    Ident(
        [
            Symbol(
                "print",
            ),
            Call(
                [
                    [
                        Symbol(
                            "\"testing errors\"",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Function {
        local: false,
        name: [
            Symbol(
                "doit",
            ),
        ],
        args: [
            "s",
        ],
        body: CodeBlock {
            start: 9,
            code: [
                Variable {
                    names: [
                        (
                            "f",
                            false,
                        ),
                        (
                            "msg",
                            false,
                        ),
                    ],
                    values: [
                        [
                            Ident(
                                [
                                    Symbol(
                                        "loadstring",
                                    ),
                                    Call(
                                        [
                                            [
                                                Ident(
                                                    [
                                                        Symbol(
                                                            "s",
                                                        ),
                                                    ],
                                                ),
                                            ],
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ],
                },
                IfStatement {
                    condition: [
                        Ident(
                            [
                                Symbol(
                                    "f",
                                ),
                            ],
                        ),
                        Operator(
                            (
                                "==",
                                true,
                            ),
                        ),
                        Symbol(
                            "nil",
                        ),
                    ],
                    body: CodeBlock {
                        start: 14,
                        code: [
                            Return(
                                Some(
                                    [
                                        [
                                            Ident(
                                                [
                                                    Symbol(
                                                        "msg",
                                                    ),
                                                ],
                                            ),
                                        ],
                                    ],
                                ),
                            ),
                        ],
                        end: 17,
                    },
                    next: None,
                },
                Variable {
                    names: [
                        (
                            "cond",
                            false,
                        ),
                        (
                            "msg",
                            false,
                        ),
                    ],
                    values: [
                        [
                            Ident(
                                [
                                    Symbol(
                                        "pcall",
                                    ),
                                    Call(
                                        [
                                            [
                                                Ident(
                                                    [
                                                        Symbol(
                                                            "f",
                                                        ),
                                                    ],
                                                ),
                                            ],
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ],
                },
                Return(
                    Some(
                        [
                            [
                                Expr(
                                    [
                                        Operator(
                                            (
                                                "not",
                                                false,
                                            ),
                                        ),
                                        Ident(
                                            [
                                                Symbol(
                                                    "cond",
                                                ),
                                            ],
                                        ),
                                    ],
                                ),
                                Ident(
                                    [],
                                ),
                                Operator(
                                    (
                                        "and",
                                        true,
                                    ),
                                ),
                                Ident(
                                    [
                                        Symbol(
                                            "msg",
                                        ),
                                    ],
                                ),
                            ],
                        ],
                    ),
                ),
            ],
            end: 43,
        },
    },
    Function {
        local: false,
        name: [
            Symbol(
                "checkmessage",
            ),
        ],
        args: [
            "prog",
            "msg",
        ],
        body: CodeBlock {
            start: 50,
            code: [
                Ident(
                    [
                        Symbol(
                            "assert",
                        ),
                        Call(
                            [
                                [
                                    Ident(
                                        [
                                            Symbol(
                                                "string",
                                            ),
                                            Symbol(
                                                ".",
                                            ),
                                            Symbol(
                                                "find",
                                            ),
                                            Call(
                                                [
                                                    [
                                                        Ident(
                                                            [
                                                                Symbol(
                                                                    "doit",
                                                                ),
                                                                Call(
                                                                    [
                                                                        [
                                                                            Ident(
                                                                                [
                                                                                    Symbol(
                                                                                        "prog",
                                                                                    ),
                                                                                ],
                                                                            ),
                                                                        ],
                                                                    ],
                                                                ),
                                                            ],
                                                        ),
                                                    ],
                                                    [
                                                        Ident(
                                                            [
                                                                Symbol(
                                                                    "msg",
                                                                ),
                                                            ],
                                                        ),
                                                    ],
                                                    [
                                                        Number(
                                                            Decimal(
                                                                Decimal {
                                                                    before_decimal: "1",
                                                                    after_decimal: "",
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                    [
                                                        Symbol(
                                                            "true",
                                                        ),
                                                    ],
                                                ],
                                            ),
                                        ],
                                    ),
                                ],
                            ],
                        ),
                    ],
                ),
            ],
            end: 69,
        },
    },
    Function {
        local: false,
        name: [
            Symbol(
                "checksyntax",
            ),
        ],
        args: [
            "prog",
            "extra",
            "token",
            "line",
        ],
        body: CodeBlock {
            start: 80,
            code: [
                Variable {
                    names: [
                        (
                            "msg",
                            false,
                        ),
                    ],
                    values: [
                        [
                            Ident(
                                [
                                    Symbol(
                                        "doit",
                                    ),
                                    Call(
                                        [
                                            [
                                                Ident(
                                                    [
                                                        Symbol(
                                                            "prog",
                                                        ),
                                                    ],
                                                ),
                                            ],
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ],
                },
                Alter {
                    names: [
                        Ident(
                            [
                                Symbol(
                                    "token",
                                ),
                            ],
                        ),
                    ],
                    values: [
                        [
                            Ident(
                                [
                                    Symbol(
                                        "string",
                                    ),
                                    Symbol(
                                        ".",
                                    ),
                                    Symbol(
                                        "gsub",
                                    ),
                                    Call(
                                        [
                                            [
                                                Ident(
                                                    [
                                                        Symbol(
                                                            "token",
                                                        ),
                                                    ],
                                                ),
                                            ],
                                            [
                                                Symbol(
                                                    "\"(%p)\"",
                                                ),
                                            ],
                                            [
                                                Symbol(
                                                    "\"%%%1\"",
                                                ),
                                            ],
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ],
                },
                Variable {
                    names: [
                        (
                            "pt",
                            false,
                        ),
                    ],
                    values: [
                        [
                            Ident(
                                [
                                    Symbol(
                                        "string",
                                    ),
                                    Symbol(
                                        ".",
                                    ),
                                    Symbol(
                                        "format",
                                    ),
                                    Call(
                                        [
                                            [
                                                MultilineString(
                                                    "[[^%%[string \".*\"%%]:%d: .- near '%s'$]]",
                                                ),
                                            ],
                                            [
                                                Ident(
                                                    [
                                                        Symbol(
                                                            "line",
                                                        ),
                                                    ],
                                                ),
                                            ],
                                            [
                                                Ident(
                                                    [
                                                        Symbol(
                                                            "token",
                                                        ),
                                                    ],
                                                ),
                                            ],
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ],
                },
                Ident(
                    [
                        Symbol(
                            "assert",
                        ),
                        Call(
                            [
                                [
                                    Ident(
                                        [
                                            Symbol(
                                                "string",
                                            ),
                                            Symbol(
                                                ".",
                                            ),
                                            Symbol(
                                                "find",
                                            ),
                                            Call(
                                                [
                                                    [
                                                        Ident(
                                                            [
                                                                Symbol(
                                                                    "msg",
                                                                ),
                                                            ],
                                                        ),
                                                    ],
                                                    [
                                                        Ident(
                                                            [
                                                                Symbol(
                                                                    "pt",
                                                                ),
                                                            ],
                                                        ),
                                                    ],
                                                ],
                                            ),
                                        ],
                                    ),
                                ],
                            ],
                        ),
                    ],
                ),
                Ident(
                    [
                        Symbol(
                            "assert",
                        ),
                        Call(
                            [
                                [
                                    Ident(
                                        [
                                            Symbol(
                                                "string",
                                            ),
                                            Symbol(
                                                ".",
                                            ),
                                            Symbol(
                                                "find",
                                            ),
                                            Call(
                                                [
                                                    [
                                                        Ident(
                                                            [
                                                                Symbol(
                                                                    "msg",
                                                                ),
                                                            ],
                                                        ),
                                                    ],
                                                    [
                                                        Ident(
                                                            [
                                                                Symbol(
                                                                    "msg",
                                                                ),
                                                            ],
                                                        ),
                                                    ],
                                                    [
                                                        Number(
                                                            Decimal(
                                                                Decimal {
                                                                    before_decimal: "1",
                                                                    after_decimal: "",
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                    [
                                                        Symbol(
                                                            "true",
                                                        ),
                                                    ],
                                                ],
                                            ),
                                        ],
                                    ),
                                ],
                            ],
                        ),
                    ],
                ),
            ],
            end: 139,
        },
    },
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Ident(
                            [
                                Symbol(
                                    "doit",
                                ),
                                Call(
                                    [
                                        [
                                            Symbol(
                                                "\"error('hi', 0)\"",
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                        Operator(
                            (
                                "==",
                                true,
                            ),
                        ),
                        Symbol(
                            "'hi'",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Ident(
                            [
                                Symbol(
                                    "doit",
                                ),
                                Call(
                                    [
                                        [
                                            Symbol(
                                                "\"error()\"",
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                        Operator(
                            (
                                "==",
                                true,
                            ),
                        ),
                        Symbol(
                            "nil",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Ident(
                            [
                                Symbol(
                                    "doit",
                                ),
                                Call(
                                    [
                                        [
                                            Symbol(
                                                "\"unpack({}, 1, n=2^30)\"",
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Ident(
                            [
                                Symbol(
                                    "doit",
                                ),
                                Call(
                                    [
                                        [
                                            Symbol(
                                                "\"a=math.sin()\"",
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Operator(
                            (
                                "not",
                                false,
                            ),
                        ),
                        Ident(
                            [
                                Symbol(
                                    "doit",
                                ),
                                Call(
                                    [
                                        [
                                            Symbol(
                                                "\"tostring(1)\"",
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                        Operator(
                            (
                                "and",
                                true,
                            ),
                        ),
                        Ident(
                            [
                                Symbol(
                                    "doit",
                                ),
                                Call(
                                    [
                                        [
                                            Symbol(
                                                "\"tostring()\"",
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Ident(
                            [
                                Symbol(
                                    "doit",
                                ),
                                Call(
                                    [
                                        [
                                            Symbol(
                                                "\"tonumber()\"",
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Ident(
                            [
                                Symbol(
                                    "doit",
                                ),
                                Call(
                                    [
                                        [
                                            Symbol(
                                                "\"repeat until 1; a\"",
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "checksyntax",
            ),
            Call(
                [
                    [
                        Symbol(
                            "\"break label\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"label\"",
                        ),
                    ],
                    [
                        Number(
                            Decimal(
                                Decimal {
                                    before_decimal: "1",
                                    after_decimal: "",
                                },
                            ),
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Ident(
                            [
                                Symbol(
                                    "doit",
                                ),
                                Call(
                                    [
                                        [
                                            Symbol(
                                                "\";\"",
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Ident(
                            [
                                Symbol(
                                    "doit",
                                ),
                                Call(
                                    [
                                        [
                                            Symbol(
                                                "\"a=1;;\"",
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Ident(
                            [
                                Symbol(
                                    "doit",
                                ),
                                Call(
                                    [
                                        [
                                            Symbol(
                                                "\"return;;\"",
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Ident(
                            [
                                Symbol(
                                    "doit",
                                ),
                                Call(
                                    [
                                        [
                                            Symbol(
                                                "\"assert(false)\"",
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Ident(
                            [
                                Symbol(
                                    "doit",
                                ),
                                Call(
                                    [
                                        [
                                            Symbol(
                                                "\"assert(nil)\"",
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Ident(
                            [
                                Symbol(
                                    "doit",
                                ),
                                Call(
                                    [
                                        [
                                            Symbol(
                                                "\"a=math.sin\\n(3)\"",
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Ident(
                            [
                                Symbol(
                                    "doit",
                                ),
                                Call(
                                    [
                                        [
                                            Symbol(
                                                "\"function a (... , ...) end\"",
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Ident(
                            [
                                Symbol(
                                    "doit",
                                ),
                                Call(
                                    [
                                        [
                                            Symbol(
                                                "\"function a (, ...) end\"",
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "checksyntax",
            ),
            Call(
                [
                    [
                        MultilineString(
                            "[[\n  local a = {4\n\n]]",
                        ),
                    ],
                    [
                        Symbol(
                            "\"'}' expected (to close '{' at line 1)\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"<eof>\"",
                        ),
                    ],
                    [
                        Number(
                            Decimal(
                                Decimal {
                                    before_decimal: "3",
                                    after_decimal: "",
                                },
                            ),
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "checkmessage",
            ),
            Call(
                [
                    [
                        Symbol(
                            "\"a=1; bbbb=2; a=math.sin(3)+bbbb(3)\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"global 'bbbb'\"",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "checkmessage",
            ),
            Call(
                [
                    [
                        Symbol(
                            "\"a=1; local a,bbbb=2,3; a = math.sin(1) and bbbb(3)\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"local 'bbbb'\"",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "checkmessage",
            ),
            Call(
                [
                    [
                        Symbol(
                            "\"a={}; do local a=1 end a:bbbb(3)\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"method 'bbbb'\"",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "checkmessage",
            ),
            Call(
                [
                    [
                        Symbol(
                            "\"local a={}; a.bbbb(3)\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"field 'bbbb'\"",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Operator(
                            (
                                "not",
                                false,
                            ),
                        ),
                        Ident(
                            [
                                Symbol(
                                    "string",
                                ),
                                Symbol(
                                    ".",
                                ),
                                Symbol(
                                    "find",
                                ),
                                Call(
                                    [
                                        [
                                            Ident(
                                                [
                                                    Symbol(
                                                        "doit",
                                                    ),
                                                    Call(
                                                        [
                                                            [
                                                                Symbol(
                                                                    "\"a={13}; local bbbb=1; a[bbbb](3)\"",
                                                                ),
                                                            ],
                                                        ],
                                                    ),
                                                ],
                                            ),
                                        ],
                                        [
                                            Symbol(
                                                "\"'bbbb'\"",
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "checkmessage",
            ),
            Call(
                [
                    [
                        Symbol(
                            "\"a={13}; local bbbb=1; a[bbbb](3)\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"number\"",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Alter {
        names: [
            Ident(
                [
                    Symbol(
                        "aaa",
                    ),
                ],
            ),
        ],
        values: [
            [
                Symbol(
                    "nil",
                ),
            ],
        ],
    },
    Ident(
        [
            Symbol(
                "checkmessage",
            ),
            Call(
                [
                    [
                        Symbol(
                            "\"aaa.bbb:ddd(9)\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"global 'aaa'\"",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "checkmessage",
            ),
            Call(
                [
                    [
                        Symbol(
                            "\"local aaa={bbb=1}; aaa.bbb:ddd(9)\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"field 'bbb'\"",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "checkmessage",
            ),
            Call(
                [
                    [
                        Symbol(
                            "\"local aaa={bbb={}}; aaa.bbb:ddd(9)\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"method 'ddd'\"",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "checkmessage",
            ),
            Call(
                [
                    [
                        Symbol(
                            "\"local a,b,c; (function () a = b+1 end)()\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"upvalue 'b'\"",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Operator(
                            (
                                "not",
                                false,
                            ),
                        ),
                        Ident(
                            [
                                Symbol(
                                    "doit",
                                ),
                                Call(
                                    [
                                        [
                                            Symbol(
                                                "\"local aaa={bbb={ddd=next}}; aaa.bbb:ddd(nil)\"",
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "checkmessage",
            ),
            Call(
                [
                    [
                        Symbol(
                            "\"b=1; local aaa='a'; x=aaa+b\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"local 'aaa'\"",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "checkmessage",
            ),
            Call(
                [
                    [
                        Symbol(
                            "\"aaa={}; x=3/aaa\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"global 'aaa'\"",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "checkmessage",
            ),
            Call(
                [
                    [
                        Symbol(
                            "\"aaa='2'; b=nil;x=aaa*b\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"global 'b'\"",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "checkmessage",
            ),
            Call(
                [
                    [
                        Symbol(
                            "\"aaa={}; x=-aaa\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"global 'aaa'\"",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Operator(
                            (
                                "not",
                                false,
                            ),
                        ),
                        Ident(
                            [
                                Symbol(
                                    "string",
                                ),
                                Symbol(
                                    ".",
                                ),
                                Symbol(
                                    "find",
                                ),
                                Call(
                                    [
                                        [
                                            Ident(
                                                [
                                                    Symbol(
                                                        "doit",
                                                    ),
                                                    Call(
                                                        [
                                                            [
                                                                Symbol(
                                                                    "\"aaa={}; x=(aaa or aaa)+(aaa and aaa)\"",
                                                                ),
                                                            ],
                                                        ],
                                                    ),
                                                ],
                                            ),
                                        ],
                                        [
                                            Symbol(
                                                "\"'aaa'\"",
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Operator(
                            (
                                "not",
                                false,
                            ),
                        ),
                        Ident(
                            [
                                Symbol(
                                    "string",
                                ),
                                Symbol(
                                    ".",
                                ),
                                Symbol(
                                    "find",
                                ),
                                Call(
                                    [
                                        [
                                            Ident(
                                                [
                                                    Symbol(
                                                        "doit",
                                                    ),
                                                    Call(
                                                        [
                                                            [
                                                                Symbol(
                                                                    "\"aaa={}; (aaa or aaa)()\"",
                                                                ),
                                                            ],
                                                        ],
                                                    ),
                                                ],
                                            ),
                                        ],
                                        [
                                            Symbol(
                                                "\"'aaa'\"",
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "checkmessage",
            ),
            Call(
                [
                    [
                        MultilineString(
                            "[[aaa=9\nrepeat until 3==3\nlocal x=math.sin(math.cos(3))\nif math.sin(1) == x then return math.sin(1) end   -- tail call\nlocal a,b = 1, {\n  {x='a'..'b'..'c', y='b', z=x},\n  {1,2,3,4,5} or 3+3<=3+3,\n  3+1>3+1,\n  {d = x and aaa[x or y]}}\n]]",
                        ),
                    ],
                    [
                        Symbol(
                            "\"global 'aaa'\"",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "checkmessage",
            ),
            Call(
                [
                    [
                        MultilineString(
                            "[[\nlocal x,y = {},1\nif math.sin(1) == 0 then return 3 end    -- return\nx.a()]]",
                        ),
                    ],
                    [
                        Symbol(
                            "\"field 'a'\"",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "checkmessage",
            ),
            Call(
                [
                    [
                        MultilineString(
                            "[[\nprefix = nil\ninsert = nil\nwhile 1 do  \n  local a\n  if nil then break end\n  insert(prefix, a)\nend]]",
                        ),
                    ],
                    [
                        Symbol(
                            "\"global 'insert'\"",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "checkmessage",
            ),
            Call(
                [
                    [
                        MultilineString(
                            "[[  -- tail call\n  return math.sin(\"a\")\n]]",
                        ),
                    ],
                    [
                        Symbol(
                            "\"'sin'\"",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "checkmessage",
            ),
            Call(
                [
                    [
                        MultilineString(
                            "[[collectgarbage(\"nooption\")]]",
                        ),
                    ],
                    [
                        Symbol(
                            "\"invalid option\"",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "checkmessage",
            ),
            Call(
                [
                    [
                        MultilineString(
                            "[[x = print .. \"a\"]]",
                        ),
                    ],
                    [
                        Symbol(
                            "\"concatenate\"",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "checkmessage",
            ),
            Call(
                [
                    [
                        Symbol(
                            "\"getmetatable(io.stdin).__gc()\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"no value\"",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "print",
            ),
            Call(
                [
                    [
                        Symbol(
                            "'+'",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Function {
        local: false,
        name: [
            Symbol(
                "lineerror",
            ),
        ],
        args: [
            "s",
        ],
        body: CodeBlock {
            start: 433,
            code: [
                Variable {
                    names: [
                        (
                            "err",
                            false,
                        ),
                        (
                            "msg",
                            false,
                        ),
                    ],
                    values: [
                        [
                            Ident(
                                [
                                    Symbol(
                                        "pcall",
                                    ),
                                    Call(
                                        [
                                            [
                                                Ident(
                                                    [
                                                        Symbol(
                                                            "loadstring",
                                                        ),
                                                        Call(
                                                            [
                                                                [
                                                                    Ident(
                                                                        [
                                                                            Symbol(
                                                                                "s",
                                                                            ),
                                                                        ],
                                                                    ),
                                                                ],
                                                            ],
                                                        ),
                                                    ],
                                                ),
                                            ],
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ],
                },
                Variable {
                    names: [
                        (
                            "line",
                            false,
                        ),
                    ],
                    values: [
                        [
                            Ident(
                                [
                                    Symbol(
                                        "string",
                                    ),
                                    Symbol(
                                        ".",
                                    ),
                                    Symbol(
                                        "match",
                                    ),
                                    Call(
                                        [
                                            [
                                                Ident(
                                                    [
                                                        Symbol(
                                                            "msg",
                                                        ),
                                                    ],
                                                ),
                                            ],
                                            [
                                                Symbol(
                                                    "\":(%d+):\"",
                                                ),
                                            ],
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ],
                },
                Return(
                    Some(
                        [
                            [
                                Ident(
                                    [
                                        Symbol(
                                            "line",
                                        ),
                                    ],
                                ),
                                Operator(
                                    (
                                        "and",
                                        true,
                                    ),
                                ),
                                Ident(
                                    [
                                        Symbol(
                                            "line",
                                        ),
                                    ],
                                ),
                                Operator(
                                    (
                                        "+",
                                        true,
                                    ),
                                ),
                                Number(
                                    Decimal(
                                        Decimal {
                                            before_decimal: "0",
                                            after_decimal: "",
                                        },
                                    ),
                                ),
                            ],
                        ],
                    ),
                ),
            ],
            end: 463,
        },
    },
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Ident(
                            [
                                Symbol(
                                    "lineerror",
                                ),
                                Call(
                                    [
                                        [
                                            Symbol(
                                                "\"local a\\n for i=1,'a' do \\n print(i) \\n end\"",
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                        Operator(
                            (
                                "==",
                                true,
                            ),
                        ),
                        Number(
                            Decimal(
                                Decimal {
                                    before_decimal: "2",
                                    after_decimal: "",
                                },
                            ),
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Ident(
                            [
                                Symbol(
                                    "lineerror",
                                ),
                                Call(
                                    [
                                        [
                                            Symbol(
                                                "\"\\n local a \\n for k,v in 3 \\n do \\n print(k) \\n end\"",
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                        Operator(
                            (
                                "==",
                                true,
                            ),
                        ),
                        Number(
                            Decimal(
                                Decimal {
                                    before_decimal: "3",
                                    after_decimal: "",
                                },
                            ),
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Ident(
                            [
                                Symbol(
                                    "lineerror",
                                ),
                                Call(
                                    [
                                        [
                                            Symbol(
                                                "\"\\n\\n for k,v in \\n 3 \\n do \\n print(k) \\n end\"",
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                        Operator(
                            (
                                "==",
                                true,
                            ),
                        ),
                        Number(
                            Decimal(
                                Decimal {
                                    before_decimal: "4",
                                    after_decimal: "",
                                },
                            ),
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Ident(
                            [
                                Symbol(
                                    "lineerror",
                                ),
                                Call(
                                    [
                                        [
                                            Symbol(
                                                "\"function a.x.y ()\\na=a+1\\nend\"",
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                        Operator(
                            (
                                "==",
                                true,
                            ),
                        ),
                        Number(
                            Decimal(
                                Decimal {
                                    before_decimal: "1",
                                    after_decimal: "",
                                },
                            ),
                        ),
                    ],
                ],
            ),
        ],
    ),
    Variable {
        names: [
            (
                "p",
                false,
            ),
        ],
        values: [
            [
                MultilineString(
                    "[[\nfunction g() f() end\nfunction f(x) error('a', X) end\ng()\n]]",
                ),
            ],
        ],
    },
    Alter {
        names: [
            Ident(
                [
                    Symbol(
                        "X",
                    ),
                ],
            ),
        ],
        values: [
            [
                Number(
                    Decimal(
                        Decimal {
                            before_decimal: "3",
                            after_decimal: "",
                        },
                    ),
                ),
            ],
        ],
    },
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Ident(
                            [
                                Symbol(
                                    "lineerror",
                                ),
                                Call(
                                    [
                                        [
                                            Ident(
                                                [
                                                    Symbol(
                                                        "p",
                                                    ),
                                                ],
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                        Operator(
                            (
                                "==",
                                true,
                            ),
                        ),
                        Number(
                            Decimal(
                                Decimal {
                                    before_decimal: "3",
                                    after_decimal: "",
                                },
                            ),
                        ),
                    ],
                ],
            ),
        ],
    ),
    Alter {
        names: [
            Ident(
                [
                    Symbol(
                        "X",
                    ),
                ],
            ),
        ],
        values: [
            [
                Number(
                    Decimal(
                        Decimal {
                            before_decimal: "0",
                            after_decimal: "",
                        },
                    ),
                ),
            ],
        ],
    },
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Ident(
                            [
                                Symbol(
                                    "lineerror",
                                ),
                                Call(
                                    [
                                        [
                                            Ident(
                                                [
                                                    Symbol(
                                                        "p",
                                                    ),
                                                ],
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                        Operator(
                            (
                                "==",
                                true,
                            ),
                        ),
                        Symbol(
                            "nil",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Alter {
        names: [
            Ident(
                [
                    Symbol(
                        "X",
                    ),
                ],
            ),
        ],
        values: [
            [
                Number(
                    Decimal(
                        Decimal {
                            before_decimal: "1",
                            after_decimal: "",
                        },
                    ),
                ),
            ],
        ],
    },
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Ident(
                            [
                                Symbol(
                                    "lineerror",
                                ),
                                Call(
                                    [
                                        [
                                            Ident(
                                                [
                                                    Symbol(
                                                        "p",
                                                    ),
                                                ],
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                        Operator(
                            (
                                "==",
                                true,
                            ),
                        ),
                        Number(
                            Decimal(
                                Decimal {
                                    before_decimal: "2",
                                    after_decimal: "",
                                },
                            ),
                        ),
                    ],
                ],
            ),
        ],
    ),
    Alter {
        names: [
            Ident(
                [
                    Symbol(
                        "X",
                    ),
                ],
            ),
        ],
        values: [
            [
                Number(
                    Decimal(
                        Decimal {
                            before_decimal: "2",
                            after_decimal: "",
                        },
                    ),
                ),
            ],
        ],
    },
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Ident(
                            [
                                Symbol(
                                    "lineerror",
                                ),
                                Call(
                                    [
                                        [
                                            Ident(
                                                [
                                                    Symbol(
                                                        "p",
                                                    ),
                                                ],
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                        Operator(
                            (
                                "==",
                                true,
                            ),
                        ),
                        Number(
                            Decimal(
                                Decimal {
                                    before_decimal: "1",
                                    after_decimal: "",
                                },
                            ),
                        ),
                    ],
                ],
            ),
        ],
    ),
    Alter {
        names: [
            Ident(
                [
                    Symbol(
                        "lineerror",
                    ),
                ],
            ),
        ],
        values: [
            [
                Symbol(
                    "nil",
                ),
            ],
        ],
    },
    Alter {
        names: [
            Ident(
                [
                    Symbol(
                        "C",
                    ),
                ],
            ),
        ],
        values: [
            [
                Number(
                    Decimal(
                        Decimal {
                            before_decimal: "0",
                            after_decimal: "",
                        },
                    ),
                ),
            ],
        ],
    },
    Variable {
        names: [
            (
                "l",
                false,
            ),
        ],
        values: [
            [
                Ident(
                    [
                        Symbol(
                            "debug",
                        ),
                        Symbol(
                            ".",
                        ),
                        Symbol(
                            "getinfo",
                        ),
                        Call(
                            [
                                [
                                    Number(
                                        Decimal(
                                            Decimal {
                                                before_decimal: "1",
                                                after_decimal: "",
                                            },
                                        ),
                                    ),
                                ],
                                [
                                    Symbol(
                                        "\"l\"",
                                    ),
                                ],
                            ],
                        ),
                        Symbol(
                            ".",
                        ),
                        Symbol(
                            "currentline",
                        ),
                    ],
                ),
            ],
        ],
    },
    Function {
        local: false,
        name: [
            Symbol(
                "y",
            ),
        ],
        args: [],
        body: CodeBlock {
            start: 571,
            code: [
                Alter {
                    names: [
                        Ident(
                            [
                                Symbol(
                                    "C",
                                ),
                            ],
                        ),
                    ],
                    values: [
                        [
                            Ident(
                                [
                                    Symbol(
                                        "C",
                                    ),
                                ],
                            ),
                            Operator(
                                (
                                    "+",
                                    true,
                                ),
                            ),
                            Number(
                                Decimal(
                                    Decimal {
                                        before_decimal: "1",
                                        after_decimal: "",
                                    },
                                ),
                            ),
                        ],
                    ],
                },
                Ident(
                    [
                        Symbol(
                            "y",
                        ),
                        Call(
                            [],
                        ),
                    ],
                ),
            ],
            end: 581,
        },
    },
    Function {
        local: true,
        name: [
            Symbol(
                "checkstackmessage",
            ),
        ],
        args: [
            "m",
        ],
        body: CodeBlock {
            start: 587,
            code: [
                Return(
                    Some(
                        [
                            [
                                Expr(
                                    [
                                        Ident(
                                            [
                                                Symbol(
                                                    "string",
                                                ),
                                                Symbol(
                                                    ".",
                                                ),
                                                Symbol(
                                                    "find",
                                                ),
                                                Call(
                                                    [
                                                        [
                                                            Ident(
                                                                [
                                                                    Symbol(
                                                                        "m",
                                                                    ),
                                                                ],
                                                            ),
                                                        ],
                                                        [
                                                            Symbol(
                                                                "\"^.-:%d+: stack overflow\"",
                                                            ),
                                                        ],
                                                    ],
                                                ),
                                            ],
                                        ),
                                    ],
                                ),
                                Ident(
                                    [],
                                ),
                            ],
                        ],
                    ),
                ),
            ],
            end: 599,
        },
    },
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Ident(
                            [
                                Symbol(
                                    "checkstackmessage",
                                ),
                                Call(
                                    [
                                        [
                                            Ident(
                                                [
                                                    Symbol(
                                                        "doit",
                                                    ),
                                                    Call(
                                                        [
                                                            [
                                                                Symbol(
                                                                    "'y()'",
                                                                ),
                                                            ],
                                                        ],
                                                    ),
                                                ],
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Ident(
                            [
                                Symbol(
                                    "checkstackmessage",
                                ),
                                Call(
                                    [
                                        [
                                            Ident(
                                                [
                                                    Symbol(
                                                        "doit",
                                                    ),
                                                    Call(
                                                        [
                                                            [
                                                                Symbol(
                                                                    "'y()'",
                                                                ),
                                                            ],
                                                        ],
                                                    ),
                                                ],
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Ident(
                            [
                                Symbol(
                                    "checkstackmessage",
                                ),
                                Call(
                                    [
                                        [
                                            Ident(
                                                [
                                                    Symbol(
                                                        "doit",
                                                    ),
                                                    Call(
                                                        [
                                                            [
                                                                Symbol(
                                                                    "'y()'",
                                                                ),
                                                            ],
                                                        ],
                                                    ),
                                                ],
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                    ],
                ],
            ),
        ],
    ),
    Alter {
        names: [
            Ident(
                [
                    Symbol(
                        "C",
                    ),
                ],
            ),
        ],
        values: [
            [
                Number(
                    Decimal(
                        Decimal {
                            before_decimal: "0",
                            after_decimal: "",
                        },
                    ),
                ),
            ],
        ],
    },
    Variable {
        names: [
            (
                "l1",
                false,
            ),
        ],
        values: [],
    },
    Function {
        local: true,
        name: [
            Symbol(
                "g",
            ),
        ],
        args: [],
        body: CodeBlock {
            start: 639,
            code: [
                Alter {
                    names: [
                        Ident(
                            [
                                Symbol(
                                    "l1",
                                ),
                            ],
                        ),
                    ],
                    values: [
                        [
                            Ident(
                                [
                                    Symbol(
                                        "debug",
                                    ),
                                    Symbol(
                                        ".",
                                    ),
                                    Symbol(
                                        "getinfo",
                                    ),
                                    Call(
                                        [
                                            [
                                                Number(
                                                    Decimal(
                                                        Decimal {
                                                            before_decimal: "1",
                                                            after_decimal: "",
                                                        },
                                                    ),
                                                ),
                                            ],
                                            [
                                                Symbol(
                                                    "\"l\"",
                                                ),
                                            ],
                                        ],
                                    ),
                                    Symbol(
                                        ".",
                                    ),
                                    Symbol(
                                        "currentline",
                                    ),
                                ],
                            ),
                        ],
                    ],
                },
                Ident(
                    [
                        Symbol(
                            "y",
                        ),
                        Call(
                            [],
                        ),
                    ],
                ),
            ],
            end: 656,
        },
    },
    Variable {
        names: [
            (
                "_",
                false,
            ),
            (
                "stackmsg",
                false,
            ),
        ],
        values: [
            [
                Ident(
                    [
                        Symbol(
                            "xpcall",
                        ),
                        Call(
                            [
                                [
                                    Ident(
                                        [
                                            Symbol(
                                                "g",
                                            ),
                                        ],
                                    ),
                                ],
                                [
                                    Ident(
                                        [
                                            Symbol(
                                                "debug",
                                            ),
                                            Symbol(
                                                ".",
                                            ),
                                            Symbol(
                                                "traceback",
                                            ),
                                        ],
                                    ),
                                ],
                            ],
                        ),
                    ],
                ),
            ],
        ],
    },
    Variable {
        names: [
            (
                "stack",
                false,
            ),
        ],
        values: [
            [
                Table(
                    [],
                ),
            ],
        ],
    },
    ForFuncLoop {
        iters: [
            "line",
        ],
        expr: [
            Ident(
                [
                    Symbol(
                        "string",
                    ),
                    Symbol(
                        ".",
                    ),
                    Symbol(
                        "gmatch",
                    ),
                    Call(
                        [
                            [
                                Ident(
                                    [
                                        Symbol(
                                            "stackmsg",
                                        ),
                                    ],
                                ),
                            ],
                            [
                                Symbol(
                                    "\"[^\\n]*\"",
                                ),
                            ],
                        ],
                    ),
                ],
            ),
        ],
        stop: None,
        initial: None,
        code: CodeBlock {
            start: 686,
            code: [
                Variable {
                    names: [
                        (
                            "curr",
                            false,
                        ),
                    ],
                    values: [
                        [
                            Ident(
                                [
                                    Symbol(
                                        "string",
                                    ),
                                    Symbol(
                                        ".",
                                    ),
                                    Symbol(
                                        "match",
                                    ),
                                    Call(
                                        [
                                            [
                                                Ident(
                                                    [
                                                        Symbol(
                                                            "line",
                                                        ),
                                                    ],
                                                ),
                                            ],
                                            [
                                                Symbol(
                                                    "\":(%d+):\"",
                                                ),
                                            ],
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ],
                },
                IfStatement {
                    condition: [
                        Ident(
                            [
                                Symbol(
                                    "curr",
                                ),
                            ],
                        ),
                    ],
                    body: CodeBlock {
                        start: 14,
                        code: [
                            Ident(
                                [
                                    Symbol(
                                        "table",
                                    ),
                                    Symbol(
                                        ".",
                                    ),
                                    Symbol(
                                        "insert",
                                    ),
                                    Call(
                                        [
                                            [
                                                Ident(
                                                    [
                                                        Symbol(
                                                            "stack",
                                                        ),
                                                    ],
                                                ),
                                            ],
                                            [
                                                Ident(
                                                    [
                                                        Symbol(
                                                            "tonumber",
                                                        ),
                                                        Call(
                                                            [
                                                                [
                                                                    Ident(
                                                                        [
                                                                            Symbol(
                                                                                "curr",
                                                                            ),
                                                                        ],
                                                                    ),
                                                                ],
                                                            ],
                                                        ),
                                                    ],
                                                ),
                                            ],
                                        ],
                                    ),
                                ],
                            ),
                        ],
                        end: 26,
                    },
                    next: None,
                },
            ],
            end: 713,
        },
    },
    Variable {
        names: [
            (
                "i",
                false,
            ),
        ],
        values: [
            [
                Number(
                    Decimal(
                        Decimal {
                            before_decimal: "1",
                            after_decimal: "",
                        },
                    ),
                ),
            ],
        ],
    },
    WhileLoop {
        condition: [
            Ident(
                [
                    Symbol(
                        "stack",
                    ),
                    Symbol(
                        "[",
                    ),
                    Expr(
                        [
                            Ident(
                                [
                                    Symbol(
                                        "i",
                                    ),
                                ],
                            ),
                        ],
                    ),
                    Symbol(
                        "]",
                    ),
                ],
            ),
            Operator(
                (
                    "~=",
                    true,
                ),
            ),
            Ident(
                [
                    Symbol(
                        "l1",
                    ),
                ],
            ),
        ],
        body: CodeBlock {
            start: 725,
            code: [
                Ident(
                    [
                        Symbol(
                            "assert",
                        ),
                        Call(
                            [
                                [
                                    Ident(
                                        [
                                            Symbol(
                                                "stack",
                                            ),
                                            Symbol(
                                                "[",
                                            ),
                                            Expr(
                                                [
                                                    Ident(
                                                        [
                                                            Symbol(
                                                                "i",
                                                            ),
                                                        ],
                                                    ),
                                                ],
                                            ),
                                            Symbol(
                                                "]",
                                            ),
                                        ],
                                    ),
                                    Operator(
                                        (
                                            "==",
                                            true,
                                        ),
                                    ),
                                    Ident(
                                        [
                                            Symbol(
                                                "l",
                                            ),
                                        ],
                                    ),
                                ],
                            ],
                        ),
                    ],
                ),
                Alter {
                    names: [
                        Ident(
                            [
                                Symbol(
                                    "i",
                                ),
                            ],
                        ),
                    ],
                    values: [
                        [
                            Ident(
                                [
                                    Symbol(
                                        "i",
                                    ),
                                ],
                            ),
                            Operator(
                                (
                                    "+",
                                    true,
                                ),
                            ),
                            Number(
                                Decimal(
                                    Decimal {
                                        before_decimal: "1",
                                        after_decimal: "",
                                    },
                                ),
                            ),
                        ],
                    ],
                },
            ],
            end: 740,
        },
    },
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Ident(
                            [
                                Symbol(
                                    "i",
                                ),
                            ],
                        ),
                        Operator(
                            (
                                ">",
                                true,
                            ),
                        ),
                        Number(
                            Decimal(
                                Decimal {
                                    before_decimal: "15",
                                    after_decimal: "",
                                },
                            ),
                        ),
                    ],
                ],
            ),
        ],
    ),
    Variable {
        names: [
            (
                "res",
                false,
            ),
            (
                "msg",
                false,
            ),
        ],
        values: [
            [
                Ident(
                    [
                        Symbol(
                            "xpcall",
                        ),
                        Call(
                            [
                                [
                                    Ident(
                                        [
                                            Symbol(
                                                "error",
                                            ),
                                        ],
                                    ),
                                ],
                                [
                                    Ident(
                                        [
                                            Symbol(
                                                "error",
                                            ),
                                        ],
                                    ),
                                ],
                            ],
                        ),
                    ],
                ),
            ],
        ],
    },
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Operator(
                            (
                                "not",
                                false,
                            ),
                        ),
                        Ident(
                            [
                                Symbol(
                                    "res",
                                ),
                            ],
                        ),
                        Operator(
                            (
                                "and",
                                true,
                            ),
                        ),
                        Ident(
                            [
                                Symbol(
                                    "type",
                                ),
                                Call(
                                    [
                                        [
                                            Ident(
                                                [
                                                    Symbol(
                                                        "msg",
                                                    ),
                                                ],
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                        Operator(
                            (
                                "==",
                                true,
                            ),
                        ),
                        Symbol(
                            "'string'",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Function {
        local: true,
        name: [
            Symbol(
                "f",
            ),
        ],
        args: [
            "x",
        ],
        body: CodeBlock {
            start: 775,
            code: [
                IfStatement {
                    condition: [
                        Ident(
                            [
                                Symbol(
                                    "x",
                                ),
                            ],
                        ),
                        Operator(
                            (
                                "==",
                                true,
                            ),
                        ),
                        Number(
                            Decimal(
                                Decimal {
                                    before_decimal: "0",
                                    after_decimal: "",
                                },
                            ),
                        ),
                    ],
                    body: CodeBlock {
                        start: 5,
                        code: [
                            Ident(
                                [
                                    Symbol(
                                        "error",
                                    ),
                                    Call(
                                        [
                                            [
                                                Symbol(
                                                    "'a\\n'",
                                                ),
                                            ],
                                        ],
                                    ),
                                ],
                            ),
                        ],
                        end: 10,
                    },
                    next: Some(
                        IfStatement {
                            condition: [],
                            body: CodeBlock {
                                start: 10,
                                code: [
                                    Variable {
                                        names: [
                                            (
                                                "aux",
                                                false,
                                            ),
                                        ],
                                        values: [
                                            [
                                                Lambda {
                                                    args: [],
                                                    body: CodeBlock {
                                                        start: 6,
                                                        code: [
                                                            Return(
                                                                Some(
                                                                    [
                                                                        [
                                                                            Ident(
                                                                                [
                                                                                    Symbol(
                                                                                        "f",
                                                                                    ),
                                                                                    Call(
                                                                                        [
                                                                                            [
                                                                                                Ident(
                                                                                                    [
                                                                                                        Symbol(
                                                                                                            "x",
                                                                                                        ),
                                                                                                    ],
                                                                                                ),
                                                                                                Operator(
                                                                                                    (
                                                                                                        "-",
                                                                                                        true,
                                                                                                    ),
                                                                                                ),
                                                                                                Number(
                                                                                                    Decimal(
                                                                                                        Decimal {
                                                                                                            before_decimal: "1",
                                                                                                            after_decimal: "",
                                                                                                        },
                                                                                                    ),
                                                                                                ),
                                                                                            ],
                                                                                        ],
                                                                                    ),
                                                                                ],
                                                                            ),
                                                                        ],
                                                                    ],
                                                                ),
                                                            ),
                                                        ],
                                                        end: 14,
                                                    },
                                                },
                                            ],
                                        ],
                                    },
                                    Variable {
                                        names: [
                                            (
                                                "a",
                                                false,
                                            ),
                                            (
                                                "b",
                                                false,
                                            ),
                                        ],
                                        values: [
                                            [
                                                Ident(
                                                    [
                                                        Symbol(
                                                            "xpcall",
                                                        ),
                                                        Call(
                                                            [
                                                                [
                                                                    Ident(
                                                                        [
                                                                            Symbol(
                                                                                "aux",
                                                                            ),
                                                                        ],
                                                                    ),
                                                                ],
                                                                [
                                                                    Ident(
                                                                        [
                                                                            Symbol(
                                                                                "aux",
                                                                            ),
                                                                        ],
                                                                    ),
                                                                ],
                                                            ],
                                                        ),
                                                    ],
                                                ),
                                            ],
                                        ],
                                    },
                                    Return(
                                        Some(
                                            [
                                                [
                                                    Ident(
                                                        [
                                                            Symbol(
                                                                "a",
                                                            ),
                                                        ],
                                                    ),
                                                ],
                                                [
                                                    Ident(
                                                        [
                                                            Symbol(
                                                                "b",
                                                            ),
                                                        ],
                                                    ),
                                                ],
                                            ],
                                        ),
                                    ),
                                ],
                                end: 40,
                            },
                            next: None,
                        },
                    ),
                },
            ],
            end: 816,
        },
    },
    Ident(
        [
            Symbol(
                "f",
            ),
            Call(
                [
                    [
                        Number(
                            Decimal(
                                Decimal {
                                    before_decimal: "3",
                                    after_decimal: "",
                                },
                            ),
                        ),
                    ],
                ],
            ),
        ],
    ),
    Function {
        local: false,
        name: [
            Symbol(
                "f",
            ),
        ],
        args: [],
        body: CodeBlock {
            start: 824,
            code: [
                Ident(
                    [
                        Symbol(
                            "error",
                        ),
                        Call(
                            [
                                [
                                    Table(
                                        [
                                            (
                                                Some(
                                                    [
                                                        Symbol(
                                                            "msg",
                                                        ),
                                                    ],
                                                ),
                                                [
                                                    Symbol(
                                                        "'x'",
                                                    ),
                                                ],
                                            ),
                                        ],
                                    ),
                                ],
                            ],
                        ),
                    ],
                ),
            ],
            end: 831,
        },
    },
    Alter {
        names: [
            Ident(
                [
                    Symbol(
                        "res",
                    ),
                ],
            ),
            Ident(
                [
                    Symbol(
                        "msg",
                    ),
                ],
            ),
        ],
        values: [
            [
                Ident(
                    [
                        Symbol(
                            "xpcall",
                        ),
                        Call(
                            [
                                [
                                    Ident(
                                        [
                                            Symbol(
                                                "f",
                                            ),
                                        ],
                                    ),
                                ],
                                [
                                    Lambda {
                                        args: [
                                            "r",
                                        ],
                                        body: CodeBlock {
                                            start: 843,
                                            code: [
                                                Return(
                                                    Some(
                                                        [
                                                            [
                                                                Table(
                                                                    [
                                                                        (
                                                                            Some(
                                                                                [
                                                                                    Symbol(
                                                                                        "msg",
                                                                                    ),
                                                                                ],
                                                                            ),
                                                                            [
                                                                                Ident(
                                                                                    [
                                                                                        Symbol(
                                                                                            "r",
                                                                                        ),
                                                                                        Symbol(
                                                                                            ".",
                                                                                        ),
                                                                                        Symbol(
                                                                                            "msg",
                                                                                        ),
                                                                                    ],
                                                                                ),
                                                                                Operator(
                                                                                    (
                                                                                        "..",
                                                                                        true,
                                                                                    ),
                                                                                ),
                                                                                Symbol(
                                                                                    "'y'",
                                                                                ),
                                                                            ],
                                                                        ),
                                                                    ],
                                                                ),
                                                            ],
                                                        ],
                                                    ),
                                                ),
                                            ],
                                            end: 854,
                                        },
                                    },
                                ],
                            ],
                        ),
                    ],
                ),
            ],
        ],
    },
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Ident(
                            [
                                Symbol(
                                    "msg",
                                ),
                                Symbol(
                                    ".",
                                ),
                                Symbol(
                                    "msg",
                                ),
                            ],
                        ),
                        Operator(
                            (
                                "==",
                                true,
                            ),
                        ),
                        Symbol(
                            "'xy'",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "print",
            ),
            Call(
                [
                    [
                        Symbol(
                            "'+'",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "checksyntax",
            ),
            Call(
                [
                    [
                        Symbol(
                            "\"syntax error\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"error\"",
                        ),
                    ],
                    [
                        Number(
                            Decimal(
                                Decimal {
                                    before_decimal: "1",
                                    after_decimal: "",
                                },
                            ),
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "checksyntax",
            ),
            Call(
                [
                    [
                        Symbol(
                            "\"1.000\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"1.000\"",
                        ),
                    ],
                    [
                        Number(
                            Decimal(
                                Decimal {
                                    before_decimal: "1",
                                    after_decimal: "",
                                },
                            ),
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "checksyntax",
            ),
            Call(
                [
                    [
                        Symbol(
                            "\"[[a]]\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"[[a]]\"",
                        ),
                    ],
                    [
                        Number(
                            Decimal(
                                Decimal {
                                    before_decimal: "1",
                                    after_decimal: "",
                                },
                            ),
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "checksyntax",
            ),
            Call(
                [
                    [
                        Symbol(
                            "\"'aa'\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"'aa'\"",
                        ),
                    ],
                    [
                        Number(
                            Decimal(
                                Decimal {
                                    before_decimal: "1",
                                    after_decimal: "",
                                },
                            ),
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "checksyntax",
            ),
            Call(
                [
                    [
                        Symbol(
                            "\"\\255a = 1\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"\\255\"",
                        ),
                    ],
                    [
                        Number(
                            Decimal(
                                Decimal {
                                    before_decimal: "1",
                                    after_decimal: "",
                                },
                            ),
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "doit",
            ),
            Call(
                [
                    [
                        Symbol(
                            "'I = loadstring(\"a=9+\"); a=3'",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Ident(
                            [
                                Symbol(
                                    "a",
                                ),
                            ],
                        ),
                        Operator(
                            (
                                "==",
                                true,
                            ),
                        ),
                        Number(
                            Decimal(
                                Decimal {
                                    before_decimal: "3",
                                    after_decimal: "",
                                },
                            ),
                        ),
                        Operator(
                            (
                                "and",
                                true,
                            ),
                        ),
                        Ident(
                            [
                                Symbol(
                                    "I",
                                ),
                            ],
                        ),
                        Operator(
                            (
                                "==",
                                true,
                            ),
                        ),
                        Symbol(
                            "nil",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "print",
            ),
            Call(
                [
                    [
                        Symbol(
                            "'+'",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Alter {
        names: [
            Ident(
                [
                    Symbol(
                        "lim",
                    ),
                ],
            ),
        ],
        values: [
            [
                Number(
                    Decimal(
                        Decimal {
                            before_decimal: "1000",
                            after_decimal: "",
                        },
                    ),
                ),
            ],
        ],
    },
    IfStatement {
        condition: [
            Ident(
                [
                    Symbol(
                        "rawget",
                    ),
                    Call(
                        [
                            [
                                Ident(
                                    [
                                        Symbol(
                                            "_G",
                                        ),
                                    ],
                                ),
                            ],
                            [
                                Symbol(
                                    "\"_soft\"",
                                ),
                            ],
                        ],
                    ),
                ],
            ),
        ],
        body: CodeBlock {
            start: 946,
            code: [
                Alter {
                    names: [
                        Ident(
                            [
                                Symbol(
                                    "lim",
                                ),
                            ],
                        ),
                    ],
                    values: [
                        [
                            Number(
                                Decimal(
                                    Decimal {
                                        before_decimal: "100",
                                        after_decimal: "",
                                    },
                                ),
                            ),
                        ],
                    ],
                },
            ],
            end: 950,
        },
        next: None,
    },
    ForLoop {
        iter: "i",
        start: [
            Number(
                Decimal(
                    Decimal {
                        before_decimal: "1",
                        after_decimal: "",
                    },
                ),
            ),
        ],
        end: [
            Ident(
                [
                    Symbol(
                        "lim",
                    ),
                ],
            ),
        ],
        step: None,
        code: CodeBlock {
            start: 957,
            code: [
                Ident(
                    [
                        Symbol(
                            "doit",
                        ),
                        Call(
                            [
                                [
                                    Symbol(
                                        "'a = '",
                                    ),
                                ],
                            ],
                        ),
                    ],
                ),
                Ident(
                    [
                        Symbol(
                            "doit",
                        ),
                        Call(
                            [
                                [
                                    Symbol(
                                        "'a = 4+nil'",
                                    ),
                                ],
                            ],
                        ),
                    ],
                ),
            ],
            end: 966,
        },
    },
    Function {
        local: true,
        name: [
            Symbol(
                "testrep",
            ),
        ],
        args: [
            "init",
            "rep",
        ],
        body: CodeBlock {
            start: 974,
            code: [
                Variable {
                    names: [
                        (
                            "s",
                            false,
                        ),
                    ],
                    values: [
                        [
                            Symbol(
                                "\"local a; \"",
                            ),
                            Operator(
                                (
                                    "..",
                                    true,
                                ),
                            ),
                            Ident(
                                [
                                    Symbol(
                                        "init",
                                    ),
                                ],
                            ),
                            Operator(
                                (
                                    "..",
                                    true,
                                ),
                            ),
                            Ident(
                                [
                                    Symbol(
                                        "string",
                                    ),
                                    Symbol(
                                        ".",
                                    ),
                                    Symbol(
                                        "rep",
                                    ),
                                    Call(
                                        [
                                            [
                                                Ident(
                                                    [
                                                        Symbol(
                                                            "rep",
                                                        ),
                                                    ],
                                                ),
                                            ],
                                            [
                                                Number(
                                                    Decimal(
                                                        Decimal {
                                                            before_decimal: "400",
                                                            after_decimal: "",
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ],
                },
                Variable {
                    names: [
                        (
                            "a",
                            false,
                        ),
                        (
                            "b",
                            false,
                        ),
                    ],
                    values: [
                        [
                            Ident(
                                [
                                    Symbol(
                                        "loadstring",
                                    ),
                                    Call(
                                        [
                                            [
                                                Ident(
                                                    [
                                                        Symbol(
                                                            "s",
                                                        ),
                                                    ],
                                                ),
                                            ],
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ],
                },
                Ident(
                    [
                        Symbol(
                            "assert",
                        ),
                        Call(
                            [
                                [
                                    Operator(
                                        (
                                            "not",
                                            false,
                                        ),
                                    ),
                                    Ident(
                                        [
                                            Symbol(
                                                "a",
                                            ),
                                        ],
                                    ),
                                    Operator(
                                        (
                                            "and",
                                            true,
                                        ),
                                    ),
                                    Ident(
                                        [
                                            Symbol(
                                                "string",
                                            ),
                                            Symbol(
                                                ".",
                                            ),
                                            Symbol(
                                                "find",
                                            ),
                                            Call(
                                                [
                                                    [
                                                        Ident(
                                                            [
                                                                Symbol(
                                                                    "b",
                                                                ),
                                                            ],
                                                        ),
                                                    ],
                                                    [
                                                        Symbol(
                                                            "\"syntax levels\"",
                                                        ),
                                                    ],
                                                ],
                                            ),
                                        ],
                                    ),
                                ],
                            ],
                        ),
                    ],
                ),
            ],
            end: 1013,
        },
    },
    Ident(
        [
            Symbol(
                "testrep",
            ),
            Call(
                [
                    [
                        Symbol(
                            "\"a=\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"{\"",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "testrep",
            ),
            Call(
                [
                    [
                        Symbol(
                            "\"a=\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"(\"",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "testrep",
            ),
            Call(
                [
                    [
                        Symbol(
                            "\"\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"a(\"",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "testrep",
            ),
            Call(
                [
                    [
                        Symbol(
                            "\"\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"do \"",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "testrep",
            ),
            Call(
                [
                    [
                        Symbol(
                            "\"\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"while a do \"",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "testrep",
            ),
            Call(
                [
                    [
                        Symbol(
                            "\"\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"if a then else \"",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "testrep",
            ),
            Call(
                [
                    [
                        Symbol(
                            "\"\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"function foo () \"",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "testrep",
            ),
            Call(
                [
                    [
                        Symbol(
                            "\"a=\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"a..\"",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "testrep",
            ),
            Call(
                [
                    [
                        Symbol(
                            "\"a=\"",
                        ),
                    ],
                    [
                        Symbol(
                            "\"a^\"",
                        ),
                    ],
                ],
            ),
        ],
    ),
    Variable {
        names: [
            (
                "s",
                false,
            ),
        ],
        values: [
            [
                Symbol(
                    "\"function foo ()\\n  local \"",
                ),
            ],
        ],
    },
    ForLoop {
        iter: "j",
        start: [
            Number(
                Decimal(
                    Decimal {
                        before_decimal: "1",
                        after_decimal: "",
                    },
                ),
            ),
        ],
        end: [
            Number(
                Decimal(
                    Decimal {
                        before_decimal: "70",
                        after_decimal: "",
                    },
                ),
            ),
        ],
        step: None,
        code: CodeBlock {
            start: 1078,
            code: [
                Alter {
                    names: [
                        Ident(
                            [
                                Symbol(
                                    "s",
                                ),
                            ],
                        ),
                    ],
                    values: [
                        [
                            Ident(
                                [
                                    Symbol(
                                        "s",
                                    ),
                                ],
                            ),
                            Operator(
                                (
                                    "..",
                                    true,
                                ),
                            ),
                            Symbol(
                                "\"a\"",
                            ),
                            Operator(
                                (
                                    "..",
                                    true,
                                ),
                            ),
                            Ident(
                                [
                                    Symbol(
                                        "j",
                                    ),
                                ],
                            ),
                            Operator(
                                (
                                    "..",
                                    true,
                                ),
                            ),
                            Symbol(
                                "\", \"",
                            ),
                        ],
                    ],
                },
            ],
            end: 1088,
        },
    },
    Alter {
        names: [
            Ident(
                [
                    Symbol(
                        "s",
                    ),
                ],
            ),
        ],
        values: [
            [
                Ident(
                    [
                        Symbol(
                            "s",
                        ),
                    ],
                ),
                Operator(
                    (
                        "..",
                        true,
                    ),
                ),
                Symbol(
                    "\"b\\n\"",
                ),
            ],
        ],
    },
    ForLoop {
        iter: "j",
        start: [
            Number(
                Decimal(
                    Decimal {
                        before_decimal: "1",
                        after_decimal: "",
                    },
                ),
            ),
        ],
        end: [
            Number(
                Decimal(
                    Decimal {
                        before_decimal: "70",
                        after_decimal: "",
                    },
                ),
            ),
        ],
        step: None,
        code: CodeBlock {
            start: 1100,
            code: [
                Alter {
                    names: [
                        Ident(
                            [
                                Symbol(
                                    "s",
                                ),
                            ],
                        ),
                    ],
                    values: [
                        [
                            Ident(
                                [
                                    Symbol(
                                        "s",
                                    ),
                                ],
                            ),
                            Operator(
                                (
                                    "..",
                                    true,
                                ),
                            ),
                            Symbol(
                                "\"function foo\"",
                            ),
                            Operator(
                                (
                                    "..",
                                    true,
                                ),
                            ),
                            Ident(
                                [
                                    Symbol(
                                        "j",
                                    ),
                                ],
                            ),
                            Operator(
                                (
                                    "..",
                                    true,
                                ),
                            ),
                            Symbol(
                                "\" ()\\n a\"",
                            ),
                            Operator(
                                (
                                    "..",
                                    true,
                                ),
                            ),
                            Ident(
                                [
                                    Symbol(
                                        "j",
                                    ),
                                ],
                            ),
                            Operator(
                                (
                                    "..",
                                    true,
                                ),
                            ),
                            Symbol(
                                "\"=3\\n\"",
                            ),
                        ],
                    ],
                },
            ],
            end: 1114,
        },
    },
    Variable {
        names: [
            (
                "a",
                false,
            ),
            (
                "b",
                false,
            ),
        ],
        values: [
            [
                Ident(
                    [
                        Symbol(
                            "loadstring",
                        ),
                        Call(
                            [
                                [
                                    Ident(
                                        [
                                            Symbol(
                                                "s",
                                            ),
                                        ],
                                    ),
                                ],
                            ],
                        ),
                    ],
                ),
            ],
        ],
    },
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Ident(
                            [
                                Symbol(
                                    "string",
                                ),
                                Symbol(
                                    ".",
                                ),
                                Symbol(
                                    "find",
                                ),
                                Call(
                                    [
                                        [
                                            Ident(
                                                [
                                                    Symbol(
                                                        "b",
                                                    ),
                                                ],
                                            ),
                                        ],
                                        [
                                            Symbol(
                                                "\"line 3\"",
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                    ],
                ],
            ),
        ],
    ),
    Alter {
        names: [
            Ident(
                [
                    Symbol(
                        "s",
                    ),
                ],
            ),
        ],
        values: [
            [
                Symbol(
                    "\"\\nfunction foo ()\\n  local \"",
                ),
            ],
        ],
    },
    ForLoop {
        iter: "j",
        start: [
            Number(
                Decimal(
                    Decimal {
                        before_decimal: "1",
                        after_decimal: "",
                    },
                ),
            ),
        ],
        end: [
            Number(
                Decimal(
                    Decimal {
                        before_decimal: "300",
                        after_decimal: "",
                    },
                ),
            ),
        ],
        step: None,
        code: CodeBlock {
            start: 1144,
            code: [
                Alter {
                    names: [
                        Ident(
                            [
                                Symbol(
                                    "s",
                                ),
                            ],
                        ),
                    ],
                    values: [
                        [
                            Ident(
                                [
                                    Symbol(
                                        "s",
                                    ),
                                ],
                            ),
                            Operator(
                                (
                                    "..",
                                    true,
                                ),
                            ),
                            Symbol(
                                "\"a\"",
                            ),
                            Operator(
                                (
                                    "..",
                                    true,
                                ),
                            ),
                            Ident(
                                [
                                    Symbol(
                                        "j",
                                    ),
                                ],
                            ),
                            Operator(
                                (
                                    "..",
                                    true,
                                ),
                            ),
                            Symbol(
                                "\", \"",
                            ),
                        ],
                    ],
                },
            ],
            end: 1154,
        },
    },
    Alter {
        names: [
            Ident(
                [
                    Symbol(
                        "s",
                    ),
                ],
            ),
        ],
        values: [
            [
                Ident(
                    [
                        Symbol(
                            "s",
                        ),
                    ],
                ),
                Operator(
                    (
                        "..",
                        true,
                    ),
                ),
                Symbol(
                    "\"b\\n\"",
                ),
            ],
        ],
    },
    Variable {
        names: [
            (
                "a",
                false,
            ),
            (
                "b",
                false,
            ),
        ],
        values: [
            [
                Ident(
                    [
                        Symbol(
                            "loadstring",
                        ),
                        Call(
                            [
                                [
                                    Ident(
                                        [
                                            Symbol(
                                                "s",
                                            ),
                                        ],
                                    ),
                                ],
                            ],
                        ),
                    ],
                ),
            ],
        ],
    },
    Ident(
        [
            Symbol(
                "assert",
            ),
            Call(
                [
                    [
                        Ident(
                            [
                                Symbol(
                                    "string",
                                ),
                                Symbol(
                                    ".",
                                ),
                                Symbol(
                                    "find",
                                ),
                                Call(
                                    [
                                        [
                                            Ident(
                                                [
                                                    Symbol(
                                                        "b",
                                                    ),
                                                ],
                                            ),
                                        ],
                                        [
                                            Symbol(
                                                "\"line 2\"",
                                            ),
                                        ],
                                    ],
                                ),
                            ],
                        ),
                    ],
                ],
            ),
        ],
    ),
    Ident(
        [
            Symbol(
                "print",
            ),
            Call(
                [
                    [
                        Symbol(
                            "'OK'",
                        ),
                    ],
                ],
            ),
        ],
    ),
]
