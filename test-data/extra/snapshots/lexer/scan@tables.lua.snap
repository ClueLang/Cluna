---
source: src/main.rs
expression: scanned
input_file: test-data/extra/tables.lua
---
[
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 1,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "myTable",
        ),
        line: 1,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 1,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 1,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "key1",
        ),
        line: 3,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 3,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"value1\"",
        ),
        line: 3,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "key2",
        ),
        line: 4,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 4,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "42",
                    after_decimal: "",
                },
            ),
        ),
        line: 4,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 4,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "key3",
        ),
        line: 5,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 5,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 5,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 5,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 6,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"key with spaces\"",
        ),
        line: 6,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 6,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 6,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"value with spaces\"",
        ),
        line: 6,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 6,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 7,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 7,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 7,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 7,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"value with numeric key\"",
        ),
        line: 7,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 7,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 8,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 8,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 8,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"value with variable key\"",
        ),
        line: 8,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nestedTable",
        ),
        line: 10,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 10,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nestedKey",
        ),
        line: 11,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 11,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"nestedValue\"",
        ),
        line: 11,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "anotherNestedTable",
        ),
        line: 12,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 12,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 13,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 13,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"bar\"",
        ),
        line: 13,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hello",
        ),
        line: 14,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 14,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"world\"",
        ),
        line: 14,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 14,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 15,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 15,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 16,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "array",
        ),
        line: 19,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 19,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 19,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 19,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 19,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 19,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 19,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 19,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 19,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 19,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 19,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 19,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 19,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mixedTable",
        ),
        line: 22,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 22,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 22,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string value\"",
        ),
        line: 23,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 23,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "123",
                    after_decimal: "",
                },
            ),
        ),
        line: 24,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nested",
        ),
        line: 25,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 25,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 25,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 26,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 27,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 27,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 28,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 29,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "key4",
        ),
        line: 32,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 32,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"value4\"",
        ),
        line: 32,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "key5",
        ),
        line: 33,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 33,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"value5\"",
        ),
        line: 33,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 33,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 34,
    },
]
